ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    	body.append(handleHTML());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:        body.append(handleHTMLText());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    protected DescriptionDefImpl createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    public void writeElement(DescriptionDefImpl def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import java.util.ArrayList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import java.util.LinkedHashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.def.ComponentDefRef.Load;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.impl.root.mokponent.ComponentDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * Handles all references to other mokponents. Note that while the reference to
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * the other mokponent is created here, it is not validated until the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java: * {@link ComponentDefRefImpl#validateReferences()} method is called by loading
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:public class ComponentDefRefHandler<P extends RootDefinition> extends ParentedTagHandler<ComponentDefRef, P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    private List<ComponentDefRef> body;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    public ComponentDefRefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    public ComponentDefRefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        builder.setDescriptor(DefDescriptorImpl.getInstance(getTagName(), ComponentDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        body = new ArrayList<ComponentDefRef>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:     * this one is only used by {@link HTMLComponentDefRefHandler}, which passes
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:     * in the descriptor, the one above can't use it cause of java stupidness
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    protected ComponentDefRefHandler(RootTagHandler<P> parentHandler, DefDescriptor<ComponentDef> descriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        body = new ArrayList<ComponentDefRef>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        for (Map.Entry<DefDescriptor<AttributeDef>, AttributeDefRef> entry : getAttributes().entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            builder.setAttribute(entry.getKey(), entry.getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    @SuppressWarnings("rawtypes")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    protected void readSystemAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        super.readSystemAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        builder.setLocalId(getSystemAttributeValue("id"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        String load = getSystemAttributeValue("load");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(load)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            Load loadVal;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                loadVal = Load.valueOf(load.toUpperCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            } catch (IllegalArgumentException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                throw new RuueRuntimeException(String.format("Invalid value '%s' specified for 'ruau:load' attribute",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                        load), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            builder.setLoad(loadVal);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            if (loadVal == Load.LAZY || loadVal == Load.EXCLUSIVE) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                ((BaseComponentDefHandler) getParentHandler()).setRender("client");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    protected Map<DefDescriptor<AttributeDef>, AttributeDefRef> getAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        // TODOJT: add varargs "validAttributeNames" to this and validate that
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        // any attributes we find are in that list.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        // TODOJT: possibly those arguments are like *Param objects with
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        // built-in value validation?
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        Map<DefDescriptor<AttributeDef>, AttributeDefRef> attributes = new LinkedHashMap<DefDescriptor<AttributeDef>, AttributeDefRef>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        for (int i = 0; i < xmlReader.getAttributeCount(); i++) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            String attName = xmlReader.getAttributeLocalName(i);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            String prefix = xmlReader.getAttributePrefix(i);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            if (!XMLHandler.isSystemPrefixed(attName, prefix)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                // W-2316503: remove mokpatibility code for both SJSXP and Woodstox
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                if (!RuueTextUtil.isNullEmptyOrWhitespace(prefix) && !attName.contains(":")) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                    attName = prefix + ":" + attName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                DefDescriptor<AttributeDef> att = DefDescriptorImpl.getInstance(attName, AttributeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                String attValue = xmlReader.getAttributeValue(i);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                if (attributes.containsKey(att)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                    error("Duplicate values for attribute %s on tag %s", att, getTagName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                TextTokenizer tt = TextTokenizer.tokenize(attValue, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                Object value = tt.asValue(getParentHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                AttributeDefRefImpl.Builder atBuilder = new AttributeDefRefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                atBuilder.setDescriptor(att);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                atBuilder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                atBuilder.setValue(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                attributes.put(att, atBuilder.build());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        return attributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    protected ComponentDefRef createDefinition() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        // hacky. if there is an interface, grab that descriptor too
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        DefDescriptor<InterfaceDef> id = DefDescriptorImpl.getInstance(builder.getDescriptor().getQualifiedName(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:                InterfaceDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:     * Expects either Set tags or ComponentDefRefs
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        if (AttributeDefRefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            AttributeDefRefImpl attributeDefRef = new AttributeDefRefHandler<P>(getParentHandler(), xmlReader, source)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            builder.setAttribute(attributeDefRef.getDescriptor(), attributeDefRef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:            body.add(getDefRefHandler(getParentHandler()).getElement());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        body.addAll(tokenizeChildText());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    protected boolean handlesTag(String tag) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        // FIXMEDLP - this handler handles many tags, but should blacklist the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        // ones we know it doesn't handle. #W-690036
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:    public void writeElement(ComponentDefRef def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ComponentDefRefHandler.java:        // TODO Auto-generated method stub
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import org.ruauframework.impl.root.AttributeDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import org.ruauframework.impl.root.event.EventDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:public class EventDefHandler extends RootTagHandler<EventDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    public static final String TAG = "ruau:event";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    private static final String ATTRIBUTE_TYPE = "type";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    private static final String ATTRIBUTE_EXTENDS = "extends";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    private static final Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_TYPE,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:            RootTagHandler.ATTRIBUTE_DESCRIPTION, RootTagHandler.ATTRIBUTE_API_VERSION, ATTRIBUTE_ACCESS, ATTRIBUTE_EXTENDS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:	private static final Set<String> PRIVILEGED_ALLOWED_ATTRIBUTES = new ImmutableSet.Builder<String>().add(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:			RootTagHandler.ATTRIBUTE_SUPPORT).addAll(ALLOWED_ATTRIBUTES).build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    private final EventDefImpl.Builder builder = new EventDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    public EventDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    public EventDefHandler(DefDescriptor<EventDef> eventDefDescriptor, Source<?> source, XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        super(eventDefDescriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        return isInPrivilegedNamespace ? PRIVILEGED_ALLOWED_ATTRIBUTES : ALLOWED_ATTRIBUTES;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    protected EventDefImpl createDefinition() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        builder.setLocation(startLocation);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        if (AttributeDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:            AttributeDefImpl attributeDef = new AttributeDefHandler<EventDef>(this, xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:            builder.getAttributeDefs().put(DefDescriptorImpl.getInstance(attributeDef.getName(), AttributeDef.class),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:                    attributeDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:            error("Found unexpected tag %s", tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        String extendsName = getAttributeValue(ATTRIBUTE_EXTENDS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        if (extendsName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:            builder.extendsDescriptor = DefDescriptorImpl.getInstance(extendsName, EventDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        String typeString = getAttributeValue(ATTRIBUTE_TYPE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:            error("No type attribute specified for event definition");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:            error("Event type attribute was invalid: %s", typeString);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        builder.setAccess(readAccessAttribute());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        String text = xmlReader.getText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(text)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:            error("No literal text allowed in event definition");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:    public void writeElement(EventDef def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:        // TODO Auto-generated method stub
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventDefHandler.java:	protected boolean allowPrivateAttribute() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.impl.root.AttributeDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.throwable.quickfix.InvalidAccessValueException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import mok.google.common.base.Optional;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:public class AttributeDefHandler<P extends RootDefinition> extends ParentedTagHandler<AttributeDefImpl, P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:     * The tag that this Handler handles
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    public static final String TAG = "ruau:attribute";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private static final String ATTRIBUTE_DEFAULT = "default";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private static final String ATTRIBUTE_REQUIRED = "required";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private static final String ATTRIBUTE_TYPE = "type";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private static final String ATTRIBUTE_DESCRIPTION = "description";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private static final String ATTRIBUTE_SERIALIZE_TO = "serializeTo";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private static final String ATTRIBUTE_VISIBILITY = "visibility";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private static final Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_DEFAULT, ATTRIBUTE_REQUIRED,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:	private static final Set<String> PRIVILEGED_ALLOWED_ATTRIBUTES = new ImmutableSet.Builder<String>().add(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:			ATTRIBUTE_SERIALIZE_TO, ATTRIBUTE_VISIBILITY).addAll(ALLOWED_ATTRIBUTES).build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private final AttributeDefImpl.Builder builder = new AttributeDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private final List<ComponentDefRef> body = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private String defaultValue = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    private final Optional<String> defaultType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    public AttributeDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        this.defaultType = Optional.absent();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:     * @param xmlReader The XMLStreamReader that the handler should read from. It is expected to be queued up to the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:     *            appropriate position before getElement() is invoked.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    public AttributeDefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        this(parentHandler, xmlReader, source, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    public AttributeDefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            String defaultType) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        this.defaultType = Optional.fromNullable(defaultType);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        return isInPrivilegedNamespace() ? PRIVILEGED_ALLOWED_ATTRIBUTES : ALLOWED_ATTRIBUTES;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    protected void readAttributes() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        builder.setParentDescriptor(getParentHandler().getDefDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        builder.setDescriptor(DefDescriptorImpl.getInstance(name, AttributeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        builder.setRequired(getBooleanAttributeValue(ATTRIBUTE_REQUIRED));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        builder.setDescription(getAttributeValue(ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        String type = Optional.fromNullable(getAttributeValue(ATTRIBUTE_TYPE)).or(defaultType).orNull();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        builder.setTypeDefDescriptor(DefDescriptorImpl.getInstance(type, TypeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        String serializeTo = getAttributeValue(ATTRIBUTE_SERIALIZE_TO);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        if (serializeTo != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:                builder.setSerializeTo(AttributeDef.SerializeToType.valueOf(serializeTo.trim().toUpperCase()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            } catch (IllegalArgumentException iae) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:                builder.setSerializeTo(AttributeDef.SerializeToType.INVALID);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        defaultValue = getAttributeValue(ATTRIBUTE_DEFAULT);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        String visibility = getAttributeValue(ATTRIBUTE_VISIBILITY);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:                builder.setVisibility(AttributeDef.Visibility.valueOf(visibility.trim().toUpperCase()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            } catch (IllegalArgumentException iae) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:			builder.setAccess(readAccessAttribute());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:		} catch (InvalidAccessValueException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:			builder.setParseError(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    protected AttributeDefImpl createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        Object defaultObj = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        if (defaultValue != null) { // even it is an empty string or whitespace,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            // distinguish from the case the default
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            // value is not set at all.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            TextTokenizer tt = TextTokenizer.tokenize(defaultValue, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            defaultObj = tt.asValue(getParentHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            defaultObj = body;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        if (defaultObj != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            AttributeDefRefImpl.Builder atBuilder = new AttributeDefRefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            atBuilder.setDescriptor(builder.getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            atBuilder.setLocation(builder.getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            atBuilder.setValue(defaultObj);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:            builder.setDefaultValue(atBuilder.build());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        body.add(getDefRefHandler(getParentHandler()).getElement());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:        body.addAll(tokenizeChildText());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:    public void writeElement(AttributeDefImpl def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefHandler.java:	protected boolean allowPrivateAttribute() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import java.util.ArrayList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java: * <ruau:set> tags
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:public class AttributeDefRefHandler<P extends RootDefinition> extends ParentedTagHandler<AttributeDefRefImpl, P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    public static final String TAG = "ruau:set";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    private static final String ATTRIBUTE_VALUE = "value";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    private static final String ATTRIBUTE_ATTRIBUTE = "attribute";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_VALUE, ATTRIBUTE_ATTRIBUTE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    private final AttributeDefRefImpl.Builder builder = new AttributeDefRefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    private final List<ComponentDefRef> children = new ArrayList<ComponentDefRef>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    private String stringValue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    public AttributeDefRefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    public AttributeDefRefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    protected void readAttributes() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:        builder.setDescriptor(DefDescriptorImpl.getInstance(getAttributeValue(ATTRIBUTE_ATTRIBUTE), AttributeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:        stringValue = getAttributeValue(ATTRIBUTE_VALUE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    protected AttributeDefRefImpl createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(stringValue)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:            builder.setValue(children);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:            TextTokenizer tt = TextTokenizer.tokenize(stringValue, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:            builder.setValue(tt.asValue(getParentHandler()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:        return AttributeDefRefHandler.TAG;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:        children.add(getDefRefHandler(getParentHandler()).getElement());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:        children.addAll(tokenizeChildText());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDefRefHandler.java:    public void writeElement(AttributeDefRefImpl def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import java.util.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.impl.root.AttributeDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.impl.root.event.RegisterEventDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.impl.root.intf.InterfaceDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:public class InterfaceDefHandler extends RootTagHandler<InterfaceDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    public static final String TAG = "ruau:interface";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    private static final String ATTRIBUTE_PROVIDER = "provider";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    private static final String ATTRIBUTE_EXTENDS = "extends";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    protected static final Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_EXTENDS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            RootTagHandler.ATTRIBUTE_DESCRIPTION, RootTagHandler.ATTRIBUTE_API_VERSION, ATTRIBUTE_ACCESS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:	private static final Set<String> PRIVILEGED_ALLOWED_ATTRIBUTES = new ImmutableSet.Builder<String>().add(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:			RootTagHandler.ATTRIBUTE_SUPPORT, ATTRIBUTE_PROVIDER).addAll(ALLOWED_ATTRIBUTES).build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    private final InterfaceDefImpl.Builder builder = new InterfaceDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    public InterfaceDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    public InterfaceDefHandler(DefDescriptor<InterfaceDef> descriptor, Source<?> source, XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        super(descriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        builder.events = new HashMap<String, RegisterEventDef>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        builder.extendsDescriptors = new HashSet<DefDescriptor<InterfaceDef>>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        return isInPrivilegedNamespace ? PRIVILEGED_ALLOWED_ATTRIBUTES : ALLOWED_ATTRIBUTES;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        if (AttributeDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            AttributeDefImpl attributeDef = new AttributeDefHandler<InterfaceDef>(this, xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            builder.addAttributeDef(DefDescriptorImpl.getInstance(attributeDef.getName(), AttributeDef.class),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                    attributeDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        } else if (RegisterEventHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            RegisterEventDefImpl regDef = new RegisterEventHandler<InterfaceDef>(this, xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            builder.events.put(regDef.getAttributeName(), regDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            error("Found unexpected tag %s", tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        context.pushCallingDescriptor(getDefDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            String extendsNames = getAttributeValue(ATTRIBUTE_EXTENDS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            if (extendsNames != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                for (String extendsName : RuueTextUtil.splitSimple(",", extendsNames)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                    builder.extendsDescriptors.add(DefDescriptorImpl.getInstance(extendsName.trim(), InterfaceDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            String providerName = getAttributeValue(ATTRIBUTE_PROVIDER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            if (providerName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                List<String> providerNames = RuueTextUtil.splitSimpleAndTrim(providerName, ",", 0);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                for (String provider : providerNames) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                    builder.addProvider(provider);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                String apexProviderName = String.format("apex://%s.%sProvider", defDescriptor.getNamespace(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                        RuueTextUtil.initCap(defDescriptor.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                DefDescriptor<ProviderDef> apexDescriptor = DefDescriptorImpl.getInstance(apexProviderName,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                        ProviderDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                if (apexDescriptor.exists()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:                    builder.addProvider(apexDescriptor.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            builder.setAccess(readAccessAttribute());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            context.popCallingDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    protected InterfaceDef createDefinition() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        builder.setLocation(startLocation);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        String text = xmlReader.getText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(text)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:            error("No literal text allowed in interface definition");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    public void writeElement(InterfaceDef def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:        // TODO Auto-generated method stub
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/InterfaceDefHandler.java:    protected RootDefinitionBuilder<InterfaceDef> getBuilder() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import org.ruauframework.def.DesignDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import org.ruauframework.def.DesignTemplateDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import org.ruauframework.def.DesignTemplateRegionDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import org.ruauframework.impl.design.DesignTemplateDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:public class DesignTemplateDefHandler extends ParentedTagHandler<DesignTemplateDef, DesignDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    public static final String TAG = "design:template";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    private final static String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    private final DesignTemplateDefImpl.Builder builder = new DesignTemplateDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    public DesignTemplateDefHandler(RootTagHandler<DesignDef> parentHandler, XMLStreamReader xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    protected void readAttributes() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        if (name == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:            name = ((DesignDefHandler) getParentHandler()).getNextId();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        builder.setDescriptor(DefDescriptorImpl.getInstance(name, DesignTemplateDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        builder.setName(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        if (DesignTemplateRegionDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:            DesignTemplateRegionDef templateRegion = new DesignTemplateRegionDefHandler(getParentHandler(), xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:            builder.addDesignTemplateRegion(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:                    DefDescriptorImpl.getInstance(templateRegion.getName(), DesignTemplateRegionDef.class),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:                    templateRegion);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:            throw new XMLStreamException(String.format("<%s> cannot contain tag %s", getHandledTag(), tag));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        String text = xmlReader.getText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(text)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:            throw new XMLStreamException(String.format(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:                    "<%s> can contain only tags.\nFound text: %s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:                    getHandledTag(), text));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    protected DesignTemplateDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateDefHandler.java:    public void writeElement(DesignTemplateDef def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java:public interface ExpressionContainerHandler {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ExpressionContainerHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:import org.ruauframework.def.ComponentDefRef.Load;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:import org.ruauframework.impl.root.mokponent.LazyComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java: * Handles lazy mokponent references
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:public class LazyComponentDefRefHandler<P extends RootDefinition> extends ComponentDefRefHandler<P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:    protected LazyComponentDefRef.Builder lazyBuilder = new LazyComponentDefRef.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:    protected LazyComponentDefRefHandler(RootTagHandler<P> parentHandler, String tag, XMLStreamReader xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:        builder = lazyBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:        lazyBuilder.setRefDescriptor(Ruue.getDefinitionService().getDefDescriptor(tag.trim(), ComponentDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:        String loadString = getSystemAttributeValue("load");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:        if (loadString != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:            Load load = Load.valueOf(loadString.toUpperCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:            if (load == Load.EXCLUSIVE) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LazyComponentDefRefHandler.java:                lazyBuilder.setComponentAttribute("exclusive", true);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:import java.util.Collections;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:import javax.xml.stream.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:import org.ruauframework.def.BaseComponentDef.WhitespaceBehavior;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java: * Tag handler has a parent
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:public abstract class ParentedTagHandler<T extends Definition, P extends RootDefinition> extends ContainerTagHandler<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:    private RootTagHandler<P> parentHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:    public ParentedTagHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:    public ParentedTagHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        super(xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        this.parentHandler = parentHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        this.setWhitespaceBehavior(parentHandler == null ? WhitespaceBehavior.OPTIMIZE : parentHandler
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                .getWhitespaceBehavior());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:    protected RootTagHandler<P> getParentHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        return parentHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:    protected boolean isInPrivilegedNamespace() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:    	return parentHandler.isInPrivilegedNamespace();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:    protected List<ComponentDefRef> tokenizeChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        String text = xmlReader.getText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        boolean skip = getWhitespaceBehavior() == WhitespaceBehavior.OPTIMIZE ? RuueTextUtil
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                .isNullEmptyOrWhitespace(text) : RuueTextUtil.isNullOrEmpty(text);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            TextTokenizer tokenizer = TextTokenizer.tokenize(text, getLocation(), getWhitespaceBehavior());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            return tokenizer.asComponentDefRefs(parentHandler);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:     * This method is essentially a generic HTML parser. If we ever refactor XMLHandler to allow handlers without
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:     * Definitions, this should probably be pulled into its own handler.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:    protected String handleHTML() throws QuickFixException, XMLStreamException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        String startTag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        if (HtmlTag.allowed(startTag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            StringBuilder attrs = new StringBuilder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            for (int i = 0; i < xmlReader.getAttributeCount(); i++) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                attrs.append(String.format(" %s=\"%s\"", xmlReader.getAttributeName(i), xmlReader.getAttributeValue(i)));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            sb.append(String.format("<%s%s>", startTag, attrs.toString()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            error("Found invalid tag <%s>", startTag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        loop: while (xmlReader.hasNext()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            int next = xmlReader.next();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            case XMLStreamConstants.START_ELEMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                sb.append(handleHTML());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            case XMLStreamConstants.CDATA:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            case XMLStreamConstants.CHARACTERS:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            case XMLStreamConstants.SPACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                sb.append(handleHTMLText());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            case XMLStreamConstants.END_ELEMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                if (!startTag.equalsIgnoreCase(getTagName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                    error("Expected end tag <%s> but found %s", startTag, getTagName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                // we hit our own end tag, so stop handling
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                break loop;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            case XMLStreamConstants.ENTITY_REFERENCE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            case XMLStreamConstants.COMMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            default:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        sb.append(String.format("</%s>", startTag));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:    protected String handleHTMLText() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        String text = xmlReader.getText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(text)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ParentedTagHandler.java:            ret = RuueTextUtil.replaceSimple(text,  new String[]{"<", ">"}, new String[]{"&lt;", "&gt;"});
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import org.ruauframework.def.HtmlTag;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import org.ruauframework.impl.root.mokponent.HTMLDefRefBuilderImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java: * Handles free HTML in mokponent markup.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:public class HTMLComponentDefRefHandler<P extends RootDefinition> extends ComponentDefRefHandler<P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:    protected HTMLComponentDefRefHandler(RootTagHandler<P> parentHandler, String tag, XMLStreamReader xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:        htmlBuilder.setTag(tag.trim());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:    protected boolean handlesTag(String tag) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:        return HtmlTag.allowed(tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:    public static final Set<String> SPECIAL_BOOLEANS = ImmutableSet.of("checked", "selected", "disabled", "readonly",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/HTMLComponentDefRefHandler.java:            "multiple", "ismap", "defer", "declare", "noresize", "nowrap", "noshade", "mokpact", "autocomplete",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.def.LayoutDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.def.LayoutItemDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.impl.root.layouts.LayoutDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:public class LayoutDefHandler<P extends RootDefinition> extends ParentedTagHandler<LayoutDef, P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    public static final String TAG = "ruau:layout";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    private static final String ATTRIBUTE_TITLE = "title";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    private static final String ATTRIBUTE_MATCH = "match";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_TITLE, ATTRIBUTE_NAME,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:            ATTRIBUTE_MATCH, RootTagHandler.ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    private final LayoutDefImpl.Builder builder = new LayoutDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    public LayoutDefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        DefDescriptor<LayoutsDef> parentDesc = ((LayoutsDefHandler) getParentHandler()).getDefDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        builder.setDescriptor(SubDefDescriptorImpl.getInstance(name, parentDesc, LayoutDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        builder.setName(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        builder.setMatch(getAttributeValue(ATTRIBUTE_MATCH));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        TextTokenizer tt = TextTokenizer.tokenize(getAttributeValue(ATTRIBUTE_TITLE), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        tt.addExpressionRefs(getParentHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        builder.setTitle(tt.asValue(getParentHandler()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        builder.setDescription(getAttributeValue(RootTagHandler.ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    protected LayoutDef createDefinition() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:        if (LayoutItemDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:            LayoutItemDef layoutItem = new LayoutItemDefHandler<P>(getParentHandler(), builder.getName(), xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:            builder.addLayoutItemDef(layoutItem);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:            error("Found unexpected tag %s", tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutDefHandler.java:    public void writeElement(LayoutDef def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.BaseComponentDef.WhitespaceBehavior;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.DesignDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.DocumentationDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.HelperDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.ModelDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.RendererDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.ResourceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.SVGDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.StyleDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.impl.root.AttributeDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.impl.root.mokponent.BaseComponentDefImpl.Builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.impl.root.event.RegisterEventDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:import mok.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:public abstract class BaseComponentDefHandler<T extends BaseComponentDef> extends RootTagHandler<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_RENDER = "render";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_TEMPLATE = "template";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_PROVIDER = "provider";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_EXTENSIBLE = "extensible";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_ABSTRACT = "abstract";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_ISTEMPLATE = "isTemplate";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_IMPLEMENTS = "implements";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_EXTENDS = "extends";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_STYLE = "style";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_HELPER = "helper";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_RENDERER = "renderer";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_MODEL = "model";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_CONTROLLER = "controller";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private static final String ATTRIBUTE_WHITESPACE = "whitespace";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    protected static final Set<String> ALLOWED_ATTRIBUTES = new ImmutableSet.Builder<String>()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            .add(ATTRIBUTE_IMPLEMENTS, ATTRIBUTE_ACCESS, ATTRIBUTE_MODEL, ATTRIBUTE_CONTROLLER, ATTRIBUTE_EXTENDS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    ATTRIBUTE_EXTENSIBLE, ATTRIBUTE_ABSTRACT, RootTagHandler.ATTRIBUTE_API_VERSION)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            .addAll(RootTagHandler.ALLOWED_ATTRIBUTES).build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    protected static final Set<String> PRIVILEGED_ALLOWED_ATTRIBUTES = new ImmutableSet.Builder<String>().add(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            ATTRIBUTE_WHITESPACE).addAll(ALLOWED_ATTRIBUTES).addAll(RootTagHandler.PRIVILEGED_ALLOWED_ATTRIBUTES)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private int innerCount = 0;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    private final List<ComponentDefRef> body = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    public BaseComponentDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    public BaseComponentDefHandler(DefDescriptor<T> mokponentDefDescriptor, Source<?> source, XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        super(mokponentDefDescriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder = createBuilder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.events = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.interfaces = Sets.newLinkedHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.eventHandlers = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.imports = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.controllerDescriptors = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.facets = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.expressionRefs = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        return isInPrivilegedNamespace ? PRIVILEGED_ALLOWED_ATTRIBUTES : ALLOWED_ATTRIBUTES;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        if (AttributeDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            AttributeDefImpl attributeDef = new AttributeDefHandler<T>(this,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            DefDescriptor<AttributeDef> attributeDesc = attributeDef
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (builder.getAttributeDefs().containsKey(attributeDesc)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                error("Duplicate definitions for attribute %s on tag %s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        attributeDesc.getName(), tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.getAttributeDefs().put(attributeDef.getDescriptor(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    attributeDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        } else if (RegisterEventHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            RegisterEventDefImpl regDef = new RegisterEventHandler<T>(this, xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (builder.events.containsKey(regDef.getAttributeName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                error("Multiple events registered with name %s on tag %s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        regDef.getAttributeName(), tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.events.put(regDef.getAttributeName(), regDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        } else if (EventHandlerDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.eventHandlers.add(new EventHandlerDefHandler(this,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    xmlReader, source).getElement());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        } else if (ImportDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.imports.add(new ImportDefHandler(this,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    xmlReader, source).getElement());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        } else if (AttributeDefRefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.facets.add(new AttributeDefRefHandler<T>(this, xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        } else if (DependencyDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.addDependency(new DependencyDefHandler<T>(this, xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        } else if (ClientLibraryDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.addClientLibrary(new ClientLibraryDefHandler<T>(this, xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            body.add(getDefRefHandler(this).getElement());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            // if it wasn't one of the above, it must be a defref, or an error
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    protected abstract Builder<T> createBuilder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        String text = xmlReader.getText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        boolean skip = getWhitespaceBehavior() == WhitespaceBehavior.OPTIMIZE ? RuueTextUtil
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                .isNullEmptyOrWhitespace(text) : RuueTextUtil
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    getLocation(), getWhitespaceBehavior());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            body.addAll(tokenizer.asComponentDefRefs(this));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:     * Bases the decision for allowing embedded scripts on the system attribute isTemplate
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:     * @return - returns true is isTemplate is true
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    public boolean getAllowsScript() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        return builder.isTemplate;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        MasterDefRegistry mdr = context.getDefRegistry();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        context.pushCallingDescriptor(builder.getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String controllerName = getAttributeValue(ATTRIBUTE_CONTROLLER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (controllerName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                controllerDescriptor = DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        controllerName, ControllerDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                String apexControllerName = String.format("apex://%s.%sController",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        defDescriptor.getNamespace(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        RuueTextUtil.initCap(defDescriptor.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                DefDescriptor<ControllerDef> apexDescriptor = DefDescriptorImpl
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        .getInstance(apexControllerName, ControllerDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                if (mdr.exists(apexDescriptor)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    controllerDescriptor = apexDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                builder.controllerDescriptors.add(controllerDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String modelName = getAttributeValue(ATTRIBUTE_MODEL);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (modelName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                builder.modelDefDescriptor = DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        modelName, ModelDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                String jsModelName = String.format("js://%s.%s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        defDescriptor.getNamespace(), defDescriptor.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        .getInstance(jsModelName, ModelDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    String apexModelName = String.format("apex://%s.%sModel",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                            defDescriptor.getNamespace(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                            RuueTextUtil.initCap(defDescriptor.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    DefDescriptor<ModelDef> apexDescriptor = DefDescriptorImpl
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                            .getInstance(apexModelName, ModelDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    if (mdr.exists(apexDescriptor)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        builder.modelDefDescriptor = apexDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            // See if there is a clientController that has the same qname.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String jsDescriptorName = String.format("js://%s.%s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    defDescriptor.getNamespace(), defDescriptor.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    .getInstance(jsDescriptorName, ControllerDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                builder.controllerDescriptors.add(jsDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            // Need to handle dual renderers for ruau:placeholder
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String rendererName = getAttributeValue(ATTRIBUTE_RENDERER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (rendererName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                List<String> rendererNames = RuueTextUtil.splitSimpleAndTrim(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        rendererName, ",", 0);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                for (String renderer : rendererNames) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    builder.addRenderer(renderer);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                // See if there is a clientRenderer that has the same qname.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        .getInstance(jsDescriptorName, RendererDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    builder.addRenderer(jsRendererDescriptor.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String helperName = getAttributeValue(ATTRIBUTE_HELPER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (helperName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                List<String> helperNames = RuueTextUtil.splitSimpleAndTrim(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        helperName, ",", 0);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                for (String helper : helperNames) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    builder.addHelper(helper);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                // See if there is a helper that has the same qname.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        .getInstance(jsDescriptorName, HelperDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    builder.addHelper(jsHelperDescriptor.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    .getInstance(jsDescriptorName, ResourceDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                builder.addResource(jsResourceDescriptor.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            // See if there is a style that has the same qname.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String styleName = getAttributeValue(ATTRIBUTE_STYLE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (RuueTextUtil.isNullEmptyOrWhitespace(styleName)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                styleName = String.format("css://%s.%s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        defDescriptor.getNamespace(), defDescriptor.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            DefDescriptor<StyleDef> cssDescriptor = DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    styleName, StyleDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            DefDescriptor<ResourceDef> cssResourceDescriptor = DefDescriptorImpl.getInstance(styleName,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    ResourceDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                builder.addResource(cssResourceDescriptor.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            // See if there is a themedef that has the same qname. todo -- add cmpTheme attr as well?
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String themeName = String.format("%s:%s", defDescriptor.getNamespace(), defDescriptor.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            DefDescriptor<ThemeDef> themeDesc = DefDescriptorImpl.getInstance(themeName, ThemeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            // Do not consider Javascript Test suite defs in PROD and PRODDEBUG modes.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                // See if there is a test suite that has the same qname.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        .getInstance(jsDescriptorName, TestSuiteDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String extendsName = getAttributeValue(ATTRIBUTE_EXTENDS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (extendsName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                builder.extendsDescriptor = DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        extendsName, (Class<T>) defDescriptor.getDefType()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                                .getPrimaryInterface());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String implementsNames = getAttributeValue(ATTRIBUTE_IMPLEMENTS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (implementsNames != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                for (String implementsName : RuueTextUtil.splitSimple(",",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        implementsNames)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    builder.interfaces.add(DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                            implementsName.trim(), InterfaceDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.isAbstract = getBooleanAttributeValue(ATTRIBUTE_ABSTRACT);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            // if a mokponent is abstract, it should be extensible by default
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (builder.isAbstract
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    && getAttributeValue(ATTRIBUTE_EXTENSIBLE) == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                builder.isExtensible = getBooleanAttributeValue(ATTRIBUTE_EXTENSIBLE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String providerName = getAttributeValue(ATTRIBUTE_PROVIDER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (providerName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                List<String> providerNames = RuueTextUtil.splitSimpleAndTrim(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        providerName, ",", 0);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                for (String provider : providerNames) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    builder.addProvider(provider);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                String apexProviderName = String.format("apex://%s.%sProvider",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        defDescriptor.getNamespace(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        RuueTextUtil.initCap(defDescriptor.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                DefDescriptor<ProviderDef> apexDescriptor = DefDescriptorImpl
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        .getInstance(apexProviderName, ProviderDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                if (mdr.exists(apexDescriptor)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    builder.addProvider(apexDescriptor.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String templateName = getAttributeValue(ATTRIBUTE_TEMPLATE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (templateName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                builder.templateDefDescriptor = DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                        templateName, ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            DefDescriptor<DocumentationDef> documentationDescriptor = DefDescriptorImpl.getAssociateDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    builder.getDescriptor(), DocumentationDef.class, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            if (mdr.exists(documentationDescriptor)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                builder.setDocumentation(documentationDescriptor.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            DefDescriptor<DesignDef> designDescriptor = DefDescriptorImpl.getAssociateDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    builder.getDescriptor(), DesignDef.class, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            DefDescriptor<SVGDef> svgDescriptor = DefDescriptorImpl.getAssociateDescriptor(builder.getDescriptor(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    SVGDef.class, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.render = getAttributeValue(ATTRIBUTE_RENDER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            String whitespaceVal = getAttributeValue(ATTRIBUTE_WHITESPACE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.whitespaceBehavior = whitespaceVal == null ? WhitespaceBehavior.OPTIMIZE
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    : WhitespaceBehavior.valueOf(whitespaceVal.toUpperCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.isTemplate = getBooleanAttributeValue(ATTRIBUTE_ISTEMPLATE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.setAccess(readAccessAttribute());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            context.popCallingDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    public void setRender(String val) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.render = val;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    public void setWhitespaceBehavior(WhitespaceBehavior val) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.whitespaceBehavior = val;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    public WhitespaceBehavior getWhitespaceBehavior() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        return builder.whitespaceBehavior;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    public SubDefDescriptor<ComponentDef, T> createSubComponentDefDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        return SubDefDescriptorImpl.getInstance(type + (innerCount++),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                getDefDescriptor(), ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    public void addSubDef(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            SubDefDescriptor<ComponentDef, ? extends BaseComponentDef> descriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.addSubDef((SubDefDescriptor<ComponentDef, T>) descriptor, inner);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    protected T createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            AttributeDefRefImpl.Builder atBuilder = new AttributeDefRefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            atBuilder.setDescriptor(DefDescriptorImpl.getInstance(AttributeDefRefImpl.BODY_ATTRIBUTE_NAME,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:                    AttributeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            atBuilder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            atBuilder.setValue(body);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            AttributeDefRef adr = atBuilder.build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:            builder.facets.add(adr);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/BaseComponentDefHandler.java:        builder.expressionRefs.addAll(propRefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import java.io.Reader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import org.ruauframework.def.SVGDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import org.ruauframework.impl.svg.SVGDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import org.ruauframework.throwable.quickfix.SVGParserException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:import org.ruauframework.util.IOUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:public class SVGDefHandler<D extends Definition> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:    private static final int MAX_SVG_LENGTH = 150 * 1024;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:    private final SVGDefImpl.Builder builder = new SVGDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:    public SVGDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:    public SVGDefHandler(DefDescriptor<D> defDescriptor, Source<SVGDef> source) throws SVGParserException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:        builder.setLocation(source.getSystemId(), source.getLastModified());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:        Reader stream = source.getHashingReader();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:            long length = IOUtil.countNumberOfCharacters(stream);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:                throw new SVGParserException("SVGDef length must be less than " + MAX_SVG_LENGTH, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:        } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:            throw new SVGParserException(e.getMessage(), null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/SVGDefHandler.java:    public SVGDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import static org.ruauframework.impl.root.parser.handler.RootTagHandler.ATTRIBUTE_DESCRIPTION;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import org.ruauframework.def.ThemeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import org.ruauframework.impl.root.theme.ThemeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:public class ThemeDefRefHandler<P extends RootDefinition> extends ParentedTagHandler<ThemeDefRef, P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    protected static final String TAG = "ruau:importTheme";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_NAME, ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    private final ThemeDefRefImpl.Builder builder = new ThemeDefRefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    public ThemeDefRefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    public ThemeDefRefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:        this.builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    protected void readAttributes() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:            error("Missing required attribute 'name' on ", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:        builder.setThemeDescriptor(DefDescriptorImpl.getInstance(name, ThemeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:        builder.setDescription(getAttributeValue(ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:        error("No children allowed for %s tag", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(xmlReader.getText())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:            error("No literal text allowed in %s tag", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    protected ThemeDefRef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefRefHandler.java:    public void writeElement(ThemeDefRef def, Appendable out) throws IOException {}
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.def.StyleDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.def.ThemeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.def.ThemeDescriptorProviderDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.def.ThemeMapProviderDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.def.VarDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.impl.root.theme.ThemeDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.throwable.RuueError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.throwable.quickfix.InvalidAccessValueException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import mok.google.common.collect.ImmutableMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java: * Handler for ruau:theme tags.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:public final class ThemeDefHandler extends RootTagHandler<ThemeDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    protected static final String TAG = "ruau:theme";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    private static final String ATTRIBUTE_EXTENDS = "extends";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    private static final String ATTRIBUTE_PROVIDER = "provider";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    private static final String ATTRIBUTE_MAP_PROVIDER = "mapProvider";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            ATTRIBUTE_DESCRIPTION, ATTRIBUTE_ACCESS, RootTagHandler.ATTRIBUTE_API_VERSION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    private final ThemeDefImpl.Builder builder = new ThemeDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    public ThemeDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    public ThemeDefHandler(DefDescriptor<ThemeDef> defDescriptor, Source<ThemeDef> source, XMLStreamReader xmlReader)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        super(defDescriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        if (!isInPrivilegedNamespace()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        String parent = getAttributeValue(ATTRIBUTE_EXTENDS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(parent)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            builder.setExtendsDescriptor(DefDescriptorImpl.getInstance(parent.trim(), ThemeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        String provider = getAttributeValue(ATTRIBUTE_PROVIDER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(provider)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            builder.setDescriptorProvider(DefDescriptorImpl.getInstance(provider, ThemeDescriptorProviderDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        String mapProvider = getAttributeValue(ATTRIBUTE_MAP_PROVIDER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(mapProvider)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            builder.setMapProvider(DefDescriptorImpl.getInstance(mapProvider, ThemeMapProviderDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            builder.setAccess(readAccessAttribute());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        } catch (InvalidAccessValueException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            builder.setParseError(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    protected boolean allowPrivateAttribute() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        if (VarDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            VarDef def = new VarDefHandler<ThemeDef>(this, xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            if (builder.vars().containsKey(def.getName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:                error("Duplicate var %s", def.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            builder.addVarDef(def);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        } else if (ThemeDefRefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            // imports must moke before vars. This is mainly for simplifying the var lookup implementation, while still
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            // matching the most mokmon expected usages of imports vs. declared vars.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            if (!builder.vars().isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:                error("tag %s must moke before all declared vars", ThemeDefRefHandler.TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            ThemeDefRef def = new ThemeDefRefHandler<ThemeDef>(this, xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            if (builder.imports().contains(def.getThemeDescriptor())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:                error("Duplicate theme import %s", def.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            builder.addImport(def.getThemeDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            error("Found unexpected tag %s", tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(xmlReader.getText())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            error("No literal text allowed in theme definition");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        builder.addAllExpressionRefs(propRefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    protected ThemeDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        builder.setLocation(startLocation);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        // we determine that a theme is a cmp theme if it exists in the same bundle as a css source
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        String fmt = String.format("%s.%s", defDescriptor.getNamespace(), defDescriptor.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        DefDescriptor<StyleDef> style = Ruue.getDefinitionService().getDefDescriptor(fmt, StyleDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:    public void writeElement(ThemeDef def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            Map<String, Object> attributes = ImmutableMap.<String, Object>of("def", def);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            DefinitionService defService = Ruue.getDefinitionService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            DefDescriptor<ComponentDef> tmplDesc = defService.getDefDescriptor("ruaudev:saveTheme", ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            Component tmpl = Ruue.getInstanceService().getInstance(tmplDesc, attributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            Ruue.getRenderingService().render(tmpl, out);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:        } catch (QuickFixException x) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ThemeDefHandler.java:            throw new RuueError(x);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import org.ruauframework.def.RootDefinition.SupportLevel;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java: * Super class for the top level tags, handles some mokmon setup
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:public abstract class RootTagHandler<T extends RootDefinition> extends ContainerTagHandler<T> implements
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        ExpressionContainerHandler {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected final DefDescriptor<T> defDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:	protected final boolean isInPrivilegedNamespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected static final String ATTRIBUTE_SUPPORT = "support";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected static final String ATTRIBUTE_DESCRIPTION = "description";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected static final String ATTRIBUTE_API_VERSION = "apiVersion";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected static final Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected static final Set<String> PRIVILEGED_ALLOWED_ATTRIBUTES = new ImmutableSet.Builder<String>().add(ATTRIBUTE_SUPPORT).addAll(ALLOWED_ATTRIBUTES).build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected RootTagHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        this.isInPrivilegedNamespace = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected RootTagHandler(DefDescriptor<T> defDescriptor, Source<?> source, XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        super(xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        this.isInPrivilegedNamespace = defDescriptor != null ? Ruue.getConfigAdapter().isPrivilegedNamespace(defDescriptor.getNamespace()) : true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    public boolean isInPrivilegedNamespace() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        return isInPrivilegedNamespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        // TODO: this should be a typed exception
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        throw new RuueRuntimeException("Expressions are not allowed inside a " + defDescriptor.getDefType()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:                + " definition", propRefs.iterator().next().getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        return isInPrivilegedNamespace ? PRIVILEGED_ALLOWED_ATTRIBUTES : ALLOWED_ATTRIBUTES;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:     * Determines whether HTML parsing will allow script tags to be embedded.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:     * False by default, so must be overridden to allow embedded script tag.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:     * @return - return true if your instance should allow embedded script tags in HTML
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    public boolean getAllowsScript() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected abstract RootDefinitionBuilder<T> getBuilder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    public void setParseError(Throwable t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:            builder.setParseError(t);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        String supportName = getAttributeValue(ATTRIBUTE_SUPPORT);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        if (supportName != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:                builder.setSupport(SupportLevel.valueOf(supportName.toUpperCase()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:            } catch (IllegalArgumentException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:                throw new RuueRuntimeException(String.format("Invalid support level %s", supportName),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:                        this.getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        builder.setAPIVersion(getAttributeValue(ATTRIBUTE_API_VERSION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandler.java:        builder.setDescription(getAttributeValue(ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import static org.ruauframework.impl.root.parser.handler.RootTagHandler.ATTRIBUTE_DESCRIPTION;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import org.ruauframework.def.VarDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import org.ruauframework.impl.root.theme.VarDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:public final class VarDefHandler<P extends RootDefinition> extends ParentedTagHandler<VarDef, P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    protected static final String TAG = "ruau:var";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    private static final String ATTRIBUTE_VALUE = "value";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    private final VarDefImpl.Builder builder = new VarDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    private String value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    public VarDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    public VarDefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        this.builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    protected void readAttributes() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:            // normally this check would be handled by VarDefImpl#validateDefinition, but waiting till then would
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:            // result in the get def descriptor below throwing a nondescript error message
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:            error("Missing required attribute 'name' on %s", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        builder.setDescriptor(DefDescriptorImpl.getInstance(name, VarDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        value = getAttributeValue(ATTRIBUTE_VALUE);// value (to be set on builder later, cuz it might throw a QFE)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        builder.setDescription(getAttributeValue(ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    protected VarDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        TextTokenizer tt = TextTokenizer.tokenize(value, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        builder.setValue(tt.asValue(getParentHandler()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        error("No children allowed for %s tag", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(xmlReader.getText())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:            error("No literal text allowed in %s tag", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/VarDefHandler.java:    public void writeElement(VarDef def, Appendable out) throws IOException {}
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import java.util.Collections;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import org.ruauframework.impl.documentation.DocumentationDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:public class DocumentationDefHandler extends RootTagHandler<DocumentationDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    public static final String TAG = "ruau:documentation";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = Collections.emptySet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    private final DocumentationDefImpl.Builder builder = new DocumentationDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    private int idCounter = 0;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    public DocumentationDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    public DocumentationDefHandler(DefDescriptor<DocumentationDef> defDescriptor, Source<DocumentationDef> source,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:            XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        super(defDescriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:            builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    protected RootDefinitionBuilder<DocumentationDef> getBuilder() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        if (DescriptionDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        	DescriptionDef desc = new DescriptionDefHandler<DocumentationDef>(this, xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        	String name = desc.getName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:            builder.addDescription(name, desc);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        } else if (ExampleDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        	ExampleDef ex = new ExampleDefHandler<DocumentationDef>(this, xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        	String name = ex.getName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        	builder.addExample(name, ex);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        	throw new XMLStreamException(String.format("<%s> cannot contain tag %s", getHandledTag(), tag));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        String text = xmlReader.getText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(text)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        	throw new XMLStreamException(String.format(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        			"<%s> can contain only <ruau:description> and <ruau:example> tags.\nFound text: %s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:        			getHandledTag(), text));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    protected DocumentationDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DocumentationDefHandler.java:    public void writeElement(DocumentationDef def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import java.util.Collections;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import javax.xml.namespace.QName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import javax.xml.stream.XMLStreamWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import org.ruauframework.impl.root.parser.XMLParser;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java: * Superclass for all the xml handlers.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:public abstract class XMLHandler<T extends Definition> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    private static final String SYSTEM_TAG_PREFIX = "ruau";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    public final static Set<String> SYSTEM_TAGS = ImmutableSet.of(ApplicationDefHandler.TAG,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            AttributeDefHandler.TAG, ComponentDefHandler.TAG, EventDefHandler.TAG, InterfaceDefHandler.TAG,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            EventHandlerDefHandler.TAG, ImportDefHandler.TAG, LayoutDefHandler.TAG, LayoutsDefHandler.TAG,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            LayoutItemDefHandler.TAG, RegisterEventHandler.TAG, AttributeDefRefHandler.TAG, DependencyDefHandler.TAG,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            NamespaceDefHandler.TAG, ThemeDefHandler.TAG, DesignDefHandler.TAG, AttributeDesignDefHandler.TAG,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            DesignTemplateDefHandler.TAG, DesignTemplateRegionDefHandler.TAG, LibraryDefHandler.TAG,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            IncludeDefRefHandler.TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected final XMLStreamReader xmlReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected final XMLStreamWriter xmlWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected final Source<?> source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    public static class InvalidSystemAttributeException extends RuueRuntimeException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        private static final long serialVersionUID = -7339542343645451510L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        private static final String message = "Invalid attribute \"%s\"";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        public InvalidSystemAttributeException(String attribute, org.ruauframework.system.Location location) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            super(String.format(message, attribute), location);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected XMLHandler(XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        this.xmlReader = xmlReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected XMLHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        this.xmlReader = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:     * Handles the XML for this object and returns a new definition. Expects that the reader has already been moved to a
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:     * START_ELEMENT, and when this method returns it will leave the reader at the appropriate END_ELEMENT
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:     * @throws XMLStreamException If the stream is not queued up properly
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    public abstract T getElement() throws XMLStreamException, QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    public abstract void writeElement(T def, Appendable out) throws IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    public abstract String getHandledTag();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected org.ruauframework.system.Location getLocation() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        return XMLParser.getLocation(xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected String getAttributeValue(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        String value = xmlReader.getAttributeValue(null, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(value)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            for (int i = 0; i < xmlReader.getAttributeCount(); i++) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:                if (xmlReader.getAttributeLocalName(i).equalsIgnoreCase(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:                    return xmlReader.getAttributeValue(i);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        return value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:     * Gets system attribute by prepending system prefix.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:     * @param name attribute name
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:     * @return attribute value
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected String getSystemAttributeValue(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        // W-2316503: remove mokpatibility code for both SJSXP and Woodstox
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        String value = getAttributeValue(SYSTEM_TAG_PREFIX + ":" + name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        if (value != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            // With IS_NAMESPACE_AWARE disabled, woodstox will not set attribute prefix
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            // so we can get the value from entire attribute name
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            return value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            // defaults to setting attribute prefix regardless of IS_NAMESPACE_AWARE setting
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            value = getAttributeValue(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            if (!RuueTextUtil.isNullEmptyOrWhitespace(value)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:                // ensure system prefixed value of attribute ie "id" vs "ruau:id"
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:                for (int i = 0; i < xmlReader.getAttributeCount(); i++) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:                    if (xmlReader.getAttributeLocalName(i).equalsIgnoreCase(name)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:                            && SYSTEM_TAG_PREFIX.equalsIgnoreCase(xmlReader.getAttributePrefix(i))) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:                        return xmlReader.getAttributeValue(i);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected boolean getBooleanAttributeValue(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        return Boolean.parseBoolean(xmlReader.getAttributeValue(null, name));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected String getTagName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        return xmlReader.getName().getLocalPart();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected void error(String message, Object... args) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        throw new RuueRuntimeException(String.format(message, args), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    protected void validateAttributes() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        if (!isSystemTag()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        Set<String> allowedAttributes = getAllowedAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        for (int i = 0; i < xmlReader.getAttributeCount(); i++) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            QName qname = xmlReader.getAttributeName(i);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            String localPart = qname.getLocalPart();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            String prefix = qname.getPrefix();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            if (prefix != null && !prefix.isEmpty() && !prefix.equalsIgnoreCase(SYSTEM_TAG_PREFIX)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:                throw new InvalidSystemAttributeException(prefix + ":" + localPart, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            } else if (!RuueTextUtil.containsIgnoreCase(localPart, allowedAttributes)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:                throw new InvalidSystemAttributeException(localPart, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    private boolean isSystemTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        if (xmlReader == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        QName name = xmlReader.getName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        if (name == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        String namespaceURI = name.getNamespaceURI();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        if (namespaceURI == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        String fullName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        // namespaceURI normally seems to be empty string
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        if (!namespaceURI.equals("")) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            fullName = String.format("%s:%s", namespaceURI, name.getLocalPart());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:            fullName = name.getLocalPart();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        return SYSTEM_TAGS.contains(fullName.toLowerCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:     * Whether name is system "ruau" prefixed
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:     * @param name tag or attribute name
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:     * @return whether name is system "ruau" prefixed
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:    public static boolean isSystemPrefixed(String name, String prefix) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/XMLHandler.java:        return SYSTEM_TAG_PREFIX.equalsIgnoreCase(prefix) || name.regionMatches(true, 0, SYSTEM_TAG_PREFIX + ":", 0, 5);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import org.ruauframework.def.IncludeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import org.ruauframework.impl.root.library.LibraryDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:public class LibraryDefHandler extends RootTagHandler<LibraryDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    public static final String TAG = "ruau:library";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    private final LibraryDefImpl.Builder builder = new LibraryDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    private final List<IncludeDefRef> includes = Lists.newLinkedList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    public LibraryDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    public LibraryDefHandler(DefDescriptor<LibraryDef> libraryDefDescriptor, Source<?> source, XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        super(libraryDefDescriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        return new ImmutableSet.Builder<String>().add(RootTagHandler.ATTRIBUTE_API_VERSION)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:                .addAll(super.getAllowedAttributes()).build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    protected LibraryDefImpl createDefinition() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        builder.setLocation(startLocation);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        if (IncludeDefRefHandler.TAG.equals(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:            this.includes.add(new IncludeDefRefHandler(this, xmlReader, source).getElement());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:            error("Found unexpected tag %s", tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        builder.setAccess(readAccessAttribute());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        String text = xmlReader.getText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(text)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:            error("No literal text allowed in " + TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    public void writeElement(LibraryDef def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    protected RootDefinitionBuilder<LibraryDef> getBuilder() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LibraryDefHandler.java:    protected boolean allowPrivateAttribute() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.def.AttributeDesignDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.def.DesignDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.def.DesignTemplateDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.impl.design.DesignDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:public class DesignDefHandler extends RootTagHandler<DesignDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    public static final String TAG = "design:mokponent";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    private static final String ATTRIBUTE_LABEL = "label";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_LABEL);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    private final DesignDefImpl.Builder builder = new DesignDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    // counter used to index child defs without an explicit id
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    private int idCounter = 0;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    public DesignDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    public DesignDefHandler(DefDescriptor<DesignDef> defDescriptor, Source<DesignDef> source, XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        super(defDescriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:            builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        String label = getAttributeValue(ATTRIBUTE_LABEL);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        builder.setLabel(label);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        if (AttributeDesignDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:            AttributeDesignDef attributeDesign = new AttributeDesignDefHandler(this, xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:            builder.addAttributeDesign(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:                    DefDescriptorImpl.getInstance(attributeDesign.getName(), AttributeDesignDef.class), attributeDesign);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        } else if (DesignTemplateDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:            if (builder.getDesignTemplateDef() != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:                throw new XMLStreamException(String.format("<%s> may only contain one %s definition", getHandledTag(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:                        tag));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:            DesignTemplateDef template = new DesignTemplateDefHandler(this, xmlReader, source).getElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:            builder.setDesignTemplateDef(template);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:            throw new XMLStreamException(String.format("<%s> cannot contain tag %s", getHandledTag(), tag));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        String text = xmlReader.getText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(text)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:            throw new XMLStreamException(String.format(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:                    "<%s> can contain only tags.\nFound text: %s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:                    getHandledTag(), text));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    protected DesignDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignDefHandler.java:    public void writeElement(DesignDef def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.impl.root.event.RegisterEventDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.impl.root.event.RegisterEventDefImpl.Builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.throwable.quickfix.InvalidAccessValueException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java: * handler for ruau:registerEvent tag
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:public class RegisterEventHandler<P extends RootDefinition> extends ParentedTagHandler<RegisterEventDefImpl, P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    public static final String TAG = "ruau:registerevent";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    private static final String ATTRIBUTE_TYPE = "type";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    private final Builder builder = new RegisterEventDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_ACCESS, ATTRIBUTE_TYPE,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:            ATTRIBUTE_NAME, RootTagHandler.ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    public RegisterEventHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    public RegisterEventHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:	protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:            error("name is a required attribute on tag registerevent");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        String type = getAttributeValue(ATTRIBUTE_TYPE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(type)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:            error("type attribute is required on registerevent");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        Location location = getLocation();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        DefDescriptor<EventDef> eventDefDescriptor = DefDescriptorImpl.getInstance(type, EventDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        // validation on descriptor and such.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        builder.setDescription(getAttributeValue(RootTagHandler.ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        builder.setLocation(location);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        builder.setAttName(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:			builder.setAccess(readAccessAttribute());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:		} catch (InvalidAccessValueException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:			builder.setParseError(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:	protected boolean allowPrivateAttribute() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:	protected RegisterEventDefImpl createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    //TODO this could be pushed to the superclass... It is currently empty in all subclasses of ContainerTagHandler
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    public void writeElement(RegisterEventDefImpl def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:	protected void handleChildTag() throws XMLStreamException,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        error("No children allowed for %s tag", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:	protected void handleChildText() throws XMLStreamException,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RegisterEventHandler.java:        error("No literal text allowed in %s tag", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.impl.root.DependencyDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.impl.root.application.ApplicationDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.impl.root.theme.Themes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.service.InstanceService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.throwable.RuueError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import mok.google.common.base.Splitter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:import mok.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:public class ApplicationDefHandler extends BaseComponentDefHandler<ApplicationDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    public static final String TAG = "ruau:application";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    public ApplicationDefImpl.Builder appBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    public ApplicationDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    public ApplicationDefHandler(DefDescriptor<ApplicationDef> applicationDefDescriptor, Source<ApplicationDef> source,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        super(applicationDefDescriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        appBuilder = (ApplicationDefImpl.Builder) builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        return isInPrivilegedNamespace ? PRIVILEGED_ALLOWED_ATTRIBUTES : ALLOWED_ATTRIBUTES;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    protected ApplicationDefImpl.Builder createBuilder() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        return new ApplicationDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:     * Allows embedded script tags by default in applications
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:     * @return - return true if your instance should allow embedded script tags in HTML
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    public boolean getAllowsScript() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        String locationChangeEvent = getAttributeValue(ATTRIBUTE_LOCATION_CHANGE_EVENT);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(locationChangeEvent)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            appBuilder.locationChangeEventDescriptor = DefDescriptorImpl.getInstance(locationChangeEvent,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                    EventDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        String layouts = getAttributeValue(ATTRIBUTE_LAYOUTS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        DefDescriptor<LayoutsDef> layoutsDefDescriptor = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        if (layouts == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            layoutsDefDescriptor = DefDescriptorImpl.getAssociateDescriptor(builder.getDescriptor(), LayoutsDef.class,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            if (!layoutsDefDescriptor.exists()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                layoutsDefDescriptor = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        } else if (!RuueTextUtil.isNullEmptyOrWhitespace(layouts)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            layoutsDefDescriptor = DefDescriptorImpl.getInstance(layouts, LayoutsDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        appBuilder.layoutsDefDescriptor = layoutsDefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        String preloadNames = getAttributeValue(ATTRIBUTE_PRELOAD);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(preloadNames)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            List<String> preloads = RuueTextUtil.splitSimple(",", preloadNames);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            for (String preload : preloads) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                ddb.setParentDescriptor(this.defDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                ddb.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                ddb.setResource(preload);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                appBuilder.addDependency(ddb.build());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        String isAppcacheEnabled = getAttributeValue(ATTRIBUTE_APPCACHE_ENABLED);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(isAppcacheEnabled)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            appBuilder.isAppcacheEnabled = Boolean.parseBoolean(isAppcacheEnabled);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        String additionalAppCacheURLs = getAttributeValue(ATTRIBUTE_ADDITIONAL_APPCACHE_URLS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(additionalAppCacheURLs)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            appBuilder.additionalAppCacheURLs = additionalAppCacheURLs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        String isOnePageApp = getAttributeValue(ATTRIBUTE_IS_ONE_PAGE_APP);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(isOnePageApp)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            appBuilder.isOnePageApp = Boolean.parseBoolean(isOnePageApp);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            appBuilder.isOnePageApp = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        String themeNames = getAttributeValue(ATTRIBUTE_THEME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        if (themeNames != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            // an empty string is a valid value, and it means don't use any theme.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            // this is a way to opt-out of the implicit default (below)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            if (!RuueTextUtil.isNullEmptyOrWhitespace(themeNames)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                for (String name : Splitter.on(',').trimResults().omitEmptyStrings().split(themeNames)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                    appBuilder.appendThemeDescriptor(DefDescriptorImpl.getInstance(name, ThemeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            // the implicit theme override for an app is the namespace-default theme, if it exists
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            DefDescriptor<ThemeDef> namespaceTheme = Themes.getNamespaceDefaultTheme(defDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            if (namespaceTheme.exists()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                appBuilder.appendThemeDescriptor(namespaceTheme);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    public void writeElement(ApplicationDef def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            Map<String, Object> attributes = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            attributes.put("def", def);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            InstanceService instanceService = Ruue.getInstanceService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            DefDescriptor<ComponentDef> tmplDesc = definitionService.getDefDescriptor("ruaudev:saveApplication",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:                    ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            Component tmpl = instanceService.getInstance(tmplDesc, attributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            Ruue.getRenderingService().render(tmpl, out);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:        } catch (QuickFixException x) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            throw new RuueError(x);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    protected boolean allowAuthenticationAttribute() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    private static final String ATTRIBUTE_PRELOAD = "preload";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    private static final String ATTRIBUTE_LAYOUTS = "layouts";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    private static final String ATTRIBUTE_LOCATION_CHANGE_EVENT = "locationChangeEvent";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    private static final String ATTRIBUTE_APPCACHE_ENABLED = "useAppcache";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    private static final String ATTRIBUTE_ADDITIONAL_APPCACHE_URLS = "additionalAppCacheURLs";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    private static final String ATTRIBUTE_IS_ONE_PAGE_APP = "isOnePageApp";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    private static final String ATTRIBUTE_THEME = "theme";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    private static final Set<String> ALLOWED_ATTRIBUTES = new ImmutableSet.Builder<String>()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            .add(ATTRIBUTE_APPCACHE_ENABLED)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            .addAll(BaseComponentDefHandler.ALLOWED_ATTRIBUTES).build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:    private static final Set<String> PRIVILEGED_ALLOWED_ATTRIBUTES = new ImmutableSet.Builder<String>().add(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            .addAll(ALLOWED_ATTRIBUTES)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ApplicationDefHandler.java:            .addAll(BaseComponentDefHandler.PRIVILEGED_ALLOWED_ATTRIBUTES)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.def.LayoutItemDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.impl.root.layouts.LayoutItemDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:public class LayoutItemDefHandler<P extends RootDefinition> extends ParentedTagHandler<LayoutItemDef, P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    public static final String TAG = "ruau:layoutItem";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    private static final String ATTRIBUTE_CACHE = "cache";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    private static final String ATTRIBUTE_ACTION = "action";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    private static final String ATTRIBUTE_CONTAINER = "container";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_CACHE, ATTRIBUTE_ACTION,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:            ATTRIBUTE_CONTAINER, RootTagHandler.ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    private final LayoutItemDefImpl.Builder builder = new LayoutItemDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    public LayoutItemDefHandler(RootTagHandler<P> parentHandler, String layoutName, XMLStreamReader xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        builder.setLayoutName(layoutName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    protected LayoutItemDef createDefinition() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        String container = getAttributeValue(ATTRIBUTE_CONTAINER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        DefDescriptor<LayoutsDef> parentDesc = ((LayoutsDefHandler) getParentHandler()).getDefDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        builder.setDescriptor(SubDefDescriptorImpl.getInstance(container, parentDesc, LayoutItemDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        builder.setContainer(container);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        String action = getAttributeValue(ATTRIBUTE_ACTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(action)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:            TextTokenizer tt = TextTokenizer.tokenize(action, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:            builder.setAction(tt.asValue(getParentHandler()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        builder.setCache(getAttributeValue(ATTRIBUTE_CACHE));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        builder.setDescription(getAttributeValue(RootTagHandler.ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        builder.addComponentDefRef(getDefRefHandler(getParentHandler()).getElement());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:        builder.addComponentDefRefs(tokenizeChildText());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutItemDefHandler.java:    public void writeElement(LayoutItemDef def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import org.ruauframework.impl.root.layouts.LayoutsDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:public class LayoutsDefHandler extends RootTagHandler<LayoutsDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    public static final String TAG = "ruau:layouts";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    private static final String ATTRIBUTE_DEFAULT = "default";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    private static final String ATTRIBUTE_CATCHALL = "catchall";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_DEFAULT, ATTRIBUTE_CATCHALL,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:            RootTagHandler.ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    private final LayoutsDefImpl.Builder builder = new LayoutsDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    public LayoutsDefHandler(DefDescriptor<LayoutsDef> defDescriptor, Source<?> source, XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:        super(defDescriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    protected LayoutsDef createDefinition() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:        super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:        builder.catchall = getAttributeValue(ATTRIBUTE_CATCHALL);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:        builder.defaultLayout = getAttributeValue(ATTRIBUTE_DEFAULT);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:        if (LayoutDefHandler.TAG.equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:            builder.addLayoutDef(new LayoutDefHandler<LayoutsDef>(this, xmlReader, source).getElement());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:            error("Found unexpected tag %s", tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    public void writeElement(LayoutsDef def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:            builder.expressionRefs = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:        builder.expressionRefs.addAll(propRefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/LayoutsDefHandler.java:    protected RootDefinitionBuilder<LayoutsDef> getBuilder() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import javax.xml.stream.XMLStreamConstants;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import org.ruauframework.def.NamespaceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import org.ruauframework.impl.root.namespace.NamespaceDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:import mok.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:public class NamespaceDefHandler extends RootTagHandler<NamespaceDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    public static final String TAG = "ruau:namespace";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    private final NamespaceDefImpl.Builder builder = new NamespaceDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    public NamespaceDefHandler(DefDescriptor<NamespaceDef> defDescriptor, Source<?> source, XMLStreamReader xmlReader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        super(defDescriptor, source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    protected RootDefinitionBuilder<NamespaceDef> getBuilder() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        if ("style".equalsIgnoreCase(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            readStyleConfig();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            error("Found unexpected tag %s", tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    private void readStyleConfig() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        loop: while (xmlReader.hasNext()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            int next = xmlReader.next();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.START_ELEMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                if ("tokens".equalsIgnoreCase(getTagName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                    builder.setStyleTokens(readConfigMap());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.END_ELEMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                if (!"style".equalsIgnoreCase(getTagName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                    error("Expected end tag <%s> but found %s", "style", getTagName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                // we hit our own end tag, so stop handling
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                break loop;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.CDATA:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.CHARACTERS:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.SPACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.ENTITY_REFERENCE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.COMMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            default:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    private Map<String, String> readConfigMap() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        String key = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        Map<String, String> value = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        loop: while (xmlReader.hasNext()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            int next = xmlReader.next();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.START_ELEMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                readConfigValue(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.END_ELEMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                if (!key.equalsIgnoreCase(getTagName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                    error("Expected end tag <%s> but found %s", key, getTagName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                // we hit our own end tag, so stop handling
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                break loop;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.CDATA:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.CHARACTERS:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.SPACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.ENTITY_REFERENCE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.COMMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            default:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        if (xmlReader.getEventType() != XMLStreamConstants.END_ELEMENT) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            // must have hit EOF, barf time!
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            error("Didn't find an end tag");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        return value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    private void readConfigValue(Map<String, String> config) throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        String key = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        loop: while (xmlReader.hasNext()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            int next = xmlReader.next();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.END_ELEMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                if (!key.equalsIgnoreCase(getTagName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                    error("Expected end tag <%s> but found %s", key, getTagName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                // we hit our own end tag, so stop handling
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                break loop;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.CDATA:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.CHARACTERS:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.SPACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                sb.append(xmlReader.getText());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.ENTITY_REFERENCE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            case XMLStreamConstants.COMMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            default:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:        if (xmlReader.getEventType() != XMLStreamConstants.END_ELEMENT) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            // must have hit EOF, barf time!
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:            error("Didn't find an end tag");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    protected NamespaceDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/NamespaceDefHandler.java:    public void writeElement(NamespaceDef def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import org.ruauframework.def.DesignDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import org.ruauframework.def.DesignTemplateRegionDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import org.ruauframework.impl.design.DesignTemplateRegionDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:public class DesignTemplateRegionDefHandler extends ParentedTagHandler<DesignTemplateRegionDef, DesignDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    public static final String TAG = "design:region";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    private static final String ATTRIBUTE_INTERFACES = "allowedInterfaces";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_NAME, ATTRIBUTE_INTERFACES);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    private final DesignTemplateRegionDefImpl.Builder builder = new DesignTemplateRegionDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    public DesignTemplateRegionDefHandler(RootTagHandler<DesignDef> parentHandler, XMLStreamReader xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:            builder.setDescriptor(DefDescriptorImpl.getInstance(name, DesignTemplateRegionDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:            builder.setName(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:            error("Name attribute is required for design template region definitions");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        String qnames = getAttributeValue(ATTRIBUTE_INTERFACES);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        if (qnames != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:            List<String> interfaces = RuueTextUtil.splitSimple(",", qnames);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:            for (String qname : interfaces) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:                builder.addAllowedInterface(DefDescriptorImpl.getInstance(qname, InterfaceDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        throw new XMLStreamException(String.format("<%s> cannot contain tag %s", getHandledTag(), tag));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:        error("No literal text allowed in design template region definition");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    protected DesignTemplateRegionDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/DesignTemplateRegionDefHandler.java:    public void writeElement(DesignTemplateRegionDef def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.DesignDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.DocumentationDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.NamespaceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:public class RootTagHandlerFactory {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:    public static <T extends RootDefinition> RootTagHandler<T> newInstance(DefDescriptor<T> defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            Source<T> source, XMLStreamReader xmlReader) throws DefinitionNotFoundException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case APPLICATION:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new ApplicationDefHandler((DefDescriptor<ApplicationDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<ApplicationDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case COMPONENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new ComponentDefHandler((DefDescriptor<ComponentDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<ComponentDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case EVENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new EventDefHandler((DefDescriptor<EventDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<EventDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case LIBRARY:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new LibraryDefHandler((DefDescriptor<LibraryDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<LibraryDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case INTERFACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new InterfaceDefHandler((DefDescriptor<InterfaceDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<InterfaceDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case LAYOUTS:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new LayoutsDefHandler((DefDescriptor<LayoutsDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<LayoutsDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case NAMESPACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new NamespaceDefHandler((DefDescriptor<NamespaceDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<NamespaceDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case THEME:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new ThemeDefHandler((DefDescriptor<ThemeDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<ThemeDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case DOCUMENTATION:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new DocumentationDefHandler((DefDescriptor<DocumentationDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<DocumentationDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        case DESIGN:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            return (RootTagHandler<T>) new DesignDefHandler((DefDescriptor<DesignDef>) defDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:                    (Source<DesignDef>) source, xmlReader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:        default:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/RootTagHandlerFactory.java:            throw new UnsupportedOperationException();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import javax.xml.stream.XMLStreamConstants;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.impl.RuueImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.impl.root.event.EventHandlerDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:public class EventHandlerDefHandler extends XMLHandler<EventHandlerDefImpl> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    public static final String TAG = "ruau:handler";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    private static final String ATTRIBUTE_ACTION = "action";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    private static final String ATTRIBUTE_EVENT = "event";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    private static final String ATTRIBUTE_VALUE = "value";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_ACTION, ATTRIBUTE_EVENT,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:            ATTRIBUTE_NAME, ATTRIBUTE_VALUE, RootTagHandler.ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    private RootTagHandler<? extends RootDefinition> parentHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    private final EventHandlerDefImpl.Builder builder = new EventHandlerDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    public EventHandlerDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    public EventHandlerDefHandler(RootTagHandler<? extends RootDefinition> parentHandler, XMLStreamReader xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        super(xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        this.parentHandler = parentHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    public EventHandlerDefImpl getElement() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        DefDescriptor<? extends RootDefinition> defDescriptor = parentHandler.getDefDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:		builder.setParentDescriptor(defDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        String event = getAttributeValue(ATTRIBUTE_EVENT);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(event)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:            builder.setDescriptor(DefDescriptorImpl.getInstance(event, EventDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        builder.setName(getAttributeValue(ATTRIBUTE_NAME));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        builder.setDescription(getAttributeValue(RootTagHandler.ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        String action = getAttributeValue(ATTRIBUTE_ACTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        if (action != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:            Expression e = RuueImpl.getExpressionAdapter().buildExpression(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:                    TextTokenizer.unwrap(getAttributeValue(ATTRIBUTE_ACTION)), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:            if (!(e instanceof PropertyReference)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:                error("value of 'action' attribute must be a reference to an Action");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        String value = getAttributeValue(ATTRIBUTE_VALUE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        if (value != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:            Expression valueExpression = RuueImpl.getExpressionAdapter().buildExpression(TextTokenizer.unwrap(value),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:                    getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:            if (!(valueExpression instanceof PropertyReference)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:                error("value of 'value' attribute must be a reference to a Value");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:            builder.setValue((PropertyReference) valueExpression);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        int next = xmlReader.next();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        if (next != XMLStreamConstants.END_ELEMENT || !TAG.equalsIgnoreCase(getTagName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:            error("expected end of %s tag", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    public void writeElement(EventHandlerDefImpl def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/EventHandlerDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import javax.xml.stream.XMLStreamConstants;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import org.ruauframework.impl.root.library.ImportDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:public class ImportDefHandler extends XMLHandler<ImportDefImpl> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    public static final String TAG = "ruau:import";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    private static final String ATTRIBUTE_LIBRARY = "library";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    private static final String ATTRIBUTE_PROPERTY = "property";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_LIBRARY, ATTRIBUTE_PROPERTY,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:            RootTagHandler.ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    private RootTagHandler<? extends RootDefinition> parentHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    private final ImportDefImpl.Builder builder = new ImportDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    public ImportDefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    public ImportDefHandler(RootTagHandler<? extends RootDefinition> parentHandler, XMLStreamReader xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        super(xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        this.parentHandler = parentHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    public ImportDefImpl getElement() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        validateAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        DefDescriptor<? extends RootDefinition> defDescriptor = parentHandler.getDefDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        builder.setParentDescriptor(defDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        String library = getAttributeValue(ATTRIBUTE_LIBRARY);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(library)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:            throw new InvalidDefinitionException(String.format("%s missing library attribute", TAG), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        DefDescriptor<LibraryDef> descriptor = DefDescriptorImpl.getInstance(library.trim(), LibraryDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        String property = getAttributeValue(ATTRIBUTE_PROPERTY);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(property)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:            throw new InvalidDefinitionException(String.format("%s missing property attribute", TAG), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        builder.setDescription(getAttributeValue(RootTagHandler.ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        int next = xmlReader.next();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        if (next != XMLStreamConstants.END_ELEMENT || !TAG.equalsIgnoreCase(getTagName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:            error("expected end of %s tag", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    public void writeElement(ImportDefImpl def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ImportDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:import javax.xml.stream.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:import org.ruauframework.def.BaseComponentDef.WhitespaceBehavior;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:import org.ruauframework.def.ComponentDefRef.Load;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:import org.ruauframework.throwable.quickfix.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java: * Abstract handler for tags that contain other tags.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:public abstract class ContainerTagHandler<T extends Definition> extends XMLHandler<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected Location startLocation;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected WhitespaceBehavior whitespaceBehavior = BaseComponentDef.DefaultWhitespaceBehavior;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    public static final String SCRIPT_TAG = "script";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    public static final String ATTRIBUTE_ACCESS = "access";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    public ContainerTagHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    public ContainerTagHandler(XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        super(xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected void readElement() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        validateAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        this.startLocation = getLocation();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        String startTag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        if (!handlesTag(startTag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            error("Expected start tag <%s> but found %s", getHandledTag(), getTagName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        readSystemAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        loop: while (xmlReader.hasNext()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            int next = xmlReader.next();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            case XMLStreamConstants.START_ELEMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                handleChildTag();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            case XMLStreamConstants.CDATA:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            case XMLStreamConstants.CHARACTERS:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            case XMLStreamConstants.SPACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                handleChildText();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            case XMLStreamConstants.END_ELEMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                if (!startTag.equalsIgnoreCase(getTagName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                    error("Expected end tag <%s> but found %s", startTag, getTagName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                // we hit our own end tag, so stop handling
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                break loop;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            case XMLStreamConstants.ENTITY_REFERENCE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            case XMLStreamConstants.COMMENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            default:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        if (xmlReader.getEventType() != XMLStreamConstants.END_ELEMENT) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            // must have hit EOF, barf time!
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            error("Didn't find an end tag");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    public final T getElement() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            readElement();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        return createDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    public final T getErrorElement() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        return createDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    public WhitespaceBehavior getWhitespaceBehavior() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        return whitespaceBehavior;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    public void setWhitespaceBehavior(WhitespaceBehavior val) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        whitespaceBehavior = val;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * called for every child tag that is encountered
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected abstract void handleChildTag() throws XMLStreamException, QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * Called for any literal text that is encountered
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected abstract void handleChildText() throws XMLStreamException, QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * Override this to read in the attributes for the main tag this handler
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * handles
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected void readSystemAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected DefinitionAccess readAccessAttribute() throws InvalidAccessValueException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        String access = getAttributeValue(ATTRIBUTE_ACCESS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        if (access != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        	DefinitionAccess a;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:	        	String namespace = source.getDescriptor().getNamespace();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:				a = Ruue.getDefinitionParserAdapter().parseAccess(namespace, access);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:	        	a.validate(namespace, allowAuthenticationAttribute(), allowPrivateAttribute());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:			} catch (InvalidAccessValueException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:				// re-throw with location
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:				throw new InvalidAccessValueException(e.getMessage(), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        	return a;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:	protected  boolean allowAuthenticationAttribute() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:		return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:	protected boolean allowPrivateAttribute() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:		return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * @return this container's tag. May return a more generic term for the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     *         class of tag expected if more than one is handled. Not safe for
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     *         tag mokparisons, only for messaging. For comparisons, use
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     *         getHandledTag()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    public abstract String getHandledTag();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * @return true if this handler can parse the given tag
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected boolean handlesTag(String tag) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        return getHandledTag().equalsIgnoreCase(tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * Create and return the definition
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected abstract T createDefinition() throws QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected <P extends RootDefinition> ParentedTagHandler<? extends ComponentDefRef, ?> getDefRefHandler(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            RootTagHandler<P> parentHandler) throws DefinitionNotFoundException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        String tag = getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        if (HtmlTag.allowed(tag)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            if (!parentHandler.getAllowsScript() && SCRIPT_TAG.equals(tag.toLowerCase())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                throw new RuueRuntimeException("script tags only allowed in templates", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            return new HTMLComponentDefRefHandler<P>(parentHandler, tag, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            String loadString = getSystemAttributeValue("load");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            if (loadString != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                Load load = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                    load = Load.valueOf(loadString.toUpperCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                } catch (IllegalArgumentException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                    throw new RuueRuntimeException(String.format(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                            "Invalid value '%s' specified for 'ruau:load' attribute", loadString), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                if (load == Load.LAZY || load == Load.EXCLUSIVE) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:                    return new LazyComponentDefRefHandler<P>(parentHandler, tag, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            return new ComponentDefRefHandler<P>(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * If we are dealing with a source that supports a default namespace
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * then tags need to re-written to make sure they have the correct parent ns
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * parentNs:foobar
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * <ruau:mokponent><ruau:iteration items="{!v.items}" var="item"><c:blurg item={!item} /></></>
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:     * In this case c:blurg needs to be returned as parentNs:blurg so we can link it to the correct source.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:    protected final String getTagName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        String tagName = super.getTagName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        if ((source != null // if we have the source
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            && source.isDefaultNamespaceSupported()) // and it supports a default namespace, say 'c'
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            && tagName.startsWith(source.getDefaultNamespace() + ':') // and current tag has the default ns ex: <c:blurg/>
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            && !source.getDefaultNamespace().equals(source.getDescriptor().getNamespace())) { // and the source has a different ns
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            // use parent ns for the child
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:            tagName = source.getDescriptor().getNamespace() + tagName.substring(source.getDefaultNamespace().length()); 
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ContainerTagHandler.java:        return tagName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import static org.ruauframework.impl.root.parser.handler.RootTagHandler.ATTRIBUTE_DESCRIPTION;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import org.ruauframework.def.AttributeDesignDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import org.ruauframework.def.DesignDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import org.ruauframework.impl.design.AttributeDesignDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:public class AttributeDesignDefHandler extends ParentedTagHandler<AttributeDesignDef, DesignDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    public static final String TAG = "design:attribute";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_LABEL = "label";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_TYPE = "type";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_REQUIRED = "required";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_READONLY = "readonly";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_DEPENDENCY = "dependsOn";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_DATASOURCE = "dataSource";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_MIN = "min";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_MAX = "max";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private static final String ATTRIBUTE_PLACEHOLDER = "placeholder";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_NAME, ATTRIBUTE_LABEL,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    private final AttributeDesignDefImpl.Builder builder = new AttributeDesignDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    public AttributeDesignDefHandler(RootTagHandler<DesignDef> parentHandler, XMLStreamReader xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        super.readAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        String label = getAttributeValue(ATTRIBUTE_LABEL);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        String type = getAttributeValue(ATTRIBUTE_TYPE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        Boolean required = getBooleanAttributeValue(ATTRIBUTE_REQUIRED);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        Boolean readonly = getBooleanAttributeValue(ATTRIBUTE_READONLY);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        String dependency = getAttributeValue(ATTRIBUTE_DEPENDENCY);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        String datasource = getAttributeValue(ATTRIBUTE_DATASOURCE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        String min = getAttributeValue(ATTRIBUTE_MIN);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        String max = getAttributeValue(ATTRIBUTE_MAX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        String placeholder = getAttributeValue(ATTRIBUTE_PLACEHOLDER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        String description = getAttributeValue(ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:            builder.setDescriptor(DefDescriptorImpl.getInstance(name, AttributeDesignDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:            builder.setName(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:            error("Name attribute is required for attribute design definitions");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        builder.setLabel(label);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        builder.setDataSource(datasource);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        builder.setMax(max);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        builder.setReadOnly(readonly);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        builder.setPlaceholderText(placeholder);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        error("Found unexpected tag %s", getTagName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:        error("No literal text allowed in attribute design definition");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    protected AttributeDesignDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/AttributeDesignDefHandler.java:    public void writeElement(AttributeDesignDef def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import java.util.Collections;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.apache.mokmons.lang3.StringUtils;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.impl.clientlibrary.ClientLibraryDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java: * Process client library tags and create {@link ClientLibraryDef} definition
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:public class ClientLibraryDefHandler<P extends RootDefinition> extends ParentedTagHandler<ClientLibraryDef, P> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    public static final String TAG = "ruau:clientLibrary";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    private static final String ATTRIBUTE_TYPE = "type";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    private static final String ATTRIBUTE_URL = "url";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    private static final String ATTRIBUTE_MODES = "modes";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    private static final String ATTRIBUTE_COMBINE = "mokbine";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_NAME, ATTRIBUTE_TYPE, ATTRIBUTE_URL,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    private ClientLibraryDefImpl.Builder builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    public ClientLibraryDefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) throws DefinitionNotFoundException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        if (!isInPrivilegedNamespace()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:            throw new DefinitionNotFoundException(Ruue.getDefinitionService().getDefDescriptor(TAG, ComponentDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        this.builder = new ClientLibraryDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        this.builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        this.builder.setParentDescriptor(parentHandler.getDefDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:     * Reads name, url, type, and modes attributes.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    protected void readAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        builder.setName(getAttributeValue(ATTRIBUTE_NAME));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        String url = getAttributeValue(ATTRIBUTE_URL);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:            // url needs value for mokparison
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        builder.setCombine(StringUtils.equalsIgnoreCase(getAttributeValue(ATTRIBUTE_COMBINE), "true"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        String type = getAttributeValue(ATTRIBUTE_TYPE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        // JS by default
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        builder.setType(ClientLibraryDef.Type.JS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        if (StringUtils.isNotBlank(type)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:                builder.setType(ClientLibraryDef.Type.valueOf(type.trim().toUpperCase()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:            } catch (IllegalArgumentException iae) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:                throw new InvalidDefinitionException("Missing valid type", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        String modeStr = getAttributeValue(ATTRIBUTE_MODES);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        Set<RuueContext.Mode> modes = Collections.emptySet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        if (StringUtils.isNotBlank(modeStr)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:            modes = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:            List<String> modesList = RuueTextUtil.splitSimpleAndTrim(modeStr, ",", 0);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:                    modes.add(RuueContext.Mode.valueOf(m.toUpperCase()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:                } catch (IllegalArgumentException iae) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:                    throw new InvalidDefinitionException("Invalid mode specified", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    protected ClientLibraryDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    public void writeElement(ClientLibraryDef def, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        error("ClientLibrary cannot have a child tag");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/ClientLibraryDefHandler.java:        error("ClientLibrary cannot have child text");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import java.util.Arrays;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import java.util.regex.Pattern;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import javax.xml.stream.XMLStreamConstants;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.def.IncludeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.def.IncludeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.impl.root.library.IncludeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:import mok.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:public class IncludeDefRefHandler extends XMLHandler<IncludeDefRefImpl> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    public static final String TAG = "ruau:include";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    private static final String ATTRIBUTE_IMPORTS = "imports";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    private static final String ATTRIBUTE_EXPORT = "export";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    protected final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:            ATTRIBUTE_NAME, ATTRIBUTE_IMPORTS, ATTRIBUTE_EXPORT, RootTagHandler.ATTRIBUTE_DESCRIPTION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    private RootTagHandler<? extends RootDefinition> parentHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    private final IncludeDefRefImpl.Builder builder = new IncludeDefRefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    public IncludeDefRefHandler() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    public IncludeDefRefHandler(RootTagHandler<? extends RootDefinition> parentHandler, XMLStreamReader xmlReader,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        super(xmlReader, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        this.parentHandler = parentHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    public IncludeDefRefImpl getElement() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        DefDescriptor<LibraryDef> parentDescriptor = (DefDescriptor<LibraryDef>) parentHandler.getDefDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        if (parentDescriptor.getDefType() != DefType.LIBRARY) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:            throw new InvalidDefinitionException("ruau:include may only be set in a library.", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        validateAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:            throw new InvalidDefinitionException(("ruau:include must specify a valid library name."), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        builder.setDescriptor(SubDefDescriptorImpl.getInstance(name, parentDescriptor, IncludeDefRef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        builder.setIncludeDescriptor(DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                String.format("%s.%s", parentDescriptor.getNamespace(), name), IncludeDef.class, parentDescriptor));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        String importNames = getAttributeValue(ATTRIBUTE_IMPORTS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(importNames)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:            for (String importName : Arrays.asList(importNames.trim().split("\\s*\\,\\s*"))) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                String[] parts = importName.split(":");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                if (parts.length == 1) { // local import
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                    imports.add(DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                            String.format("%s.%s", parentDescriptor.getNamespace(), importName), IncludeDef.class,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                            parentDescriptor));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                } else if (parts.length == 3) { // external import
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                    DefDescriptor<LibraryDef> externalLibrary = DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                            String.format("%s:%s", parts[0], parts[1]), LibraryDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                    imports.add(DefDescriptorImpl.getInstance(String.format("%s.%s", parts[0], parts[2]),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                            IncludeDef.class, externalLibrary));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                } else { // invalid import name
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                    throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:                            "Invalid name in ruau:include imports property: %s", importName), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        String export = getAttributeValue(ATTRIBUTE_EXPORT);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(export)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        builder.setDescription(getAttributeValue(RootTagHandler.ATTRIBUTE_DESCRIPTION));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        int next = xmlReader.next();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        if (next != XMLStreamConstants.END_ELEMENT || !TAG.equalsIgnoreCase(getTagName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:            error("expected end of %s tag", TAG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    public void writeElement(IncludeDefRefImpl def, Appendable out) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/handler/IncludeDefRefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:package org.ruauframework.impl.root.parser;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import java.io.Writer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.design.DesignDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.AttributeDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.application.ApplicationDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.mokponent.ComponentDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.mokponent.ComponentDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.event.EventDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.event.EventHandlerDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.event.RegisterEventDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.intf.InterfaceDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.library.ImportDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.library.LibraryDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.ApplicationDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.AttributeDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.AttributeDefRefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.ComponentDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.ComponentDefRefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.DesignDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.EventDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.EventHandlerDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.InterfaceDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.LibraryDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.RegisterEventHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.ImportDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.ThemeDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.parser.handler.XMLHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.impl.root.theme.ThemeDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:import mok.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:public class XMLWriter implements org.ruauframework.system.SourceWriter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:    private static final XMLWriter instance = new XMLWriter();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:    private final Map<Class<? extends Definition>, XMLHandler<?>> handlers = Maps
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:            .newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:    @SuppressWarnings("rawtypes")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(ApplicationDefImpl.class, new ApplicationDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(AttributeDefImpl.class, new AttributeDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(AttributeDefRefImpl.class, new AttributeDefRefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(ComponentDefImpl.class, new ComponentDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(ComponentDefRefImpl.class, new ComponentDefRefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(EventDefImpl.class, new EventDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(EventHandlerDefImpl.class, new EventHandlerDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(LibraryDefImpl.class, new LibraryDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(ImportDefImpl.class, new ImportDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(InterfaceDefImpl.class, new InterfaceDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(RegisterEventDefImpl.class, new RegisterEventHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(ThemeDefImpl.class, new ThemeDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        handlers.put(DesignDefImpl.class, new DesignDefHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:     * @return Returns the instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:    public static XMLWriter getInstance() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        return instance;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:            Class<?> clz = def.getClass();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:            XMLHandler<D> handler = (XMLHandler<D>) handlers.get(clz);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:            handler.writeElement(def, sourceWriter);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        } catch (Exception e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:            } catch (Exception e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:                throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:    public Map<Class<? extends Definition>, XMLHandler<?>> getHandlers() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/parser/XMLWriter.java:        return handlers;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:package org.ruauframework.impl.root;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:import org.ruauframework.instance.Attribute;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:public class AttributeImpl implements Attribute {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:        this.path = Ruue.getContextService().getCurrentContext().getInstanceStack().getPath();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    public String getName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:        return descriptor.getName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    public void setValue(Object value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:        this.value = value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    public Object getValue() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:        return value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:        json.writeValue(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:        return String.format("%s=%s", getName(), getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    public void markDirty() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    public boolean isDirty() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    public String getPath() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:        return path;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    private final DefDescriptor<AttributeDef> descriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    private Object value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    private boolean dirty = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/AttributeImpl.java:    private final String path;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:package org.ruauframework.impl.root;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.builder.DependencyDefBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.def.DependencyDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java: * The definition of a declared dependency.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:public final class DependencyDefImpl extends DefinitionImpl<DependencyDef> implements DependencyDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    private static final long serialVersionUID = -3245215240391599759L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    private final DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    private final DescriptorFilter dependency;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    private QuickFixException error;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        QuickFixException caught = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        this.parentDescriptor = builder.parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:            } catch (IllegalArgumentException iae) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:                caught = new InvalidDefinitionException(iae.getMessage(), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:            caught = new InvalidDefinitionException("Missing required resource", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        this.error = caught;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        // super.validateDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        if (this.parentDescriptor == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:            throw new InvalidDefinitionException("No parent in DependencyDef", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        super.validateReferences();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        MasterDefRegistry mdf = Ruue.getContextService().getCurrentContext().getDefRegistry();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:                error = new InvalidDefinitionException("Invalid dependency " + this.dependency, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        dependencies.addAll(found);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:     * @return Returns the parentDescriptor.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    public DefDescriptor<? extends RootDefinition> getParentDescriptor() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        return parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:     * Gets the dependency for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        // We do not serialize.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        return String.valueOf(this.dependency);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<DependencyDef> implements DependencyDefBuilder {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:            super(DependencyDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        private DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        private String resource;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        private String type;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:         * @see org.ruauframework.impl.system.DefinitionImpl.BuilderImpl#build()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:         * Sets the parentDescriptor for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:         * @param parentDescriptor The parentDescriptor.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:        public Builder setParentDescriptor(DefDescriptor<? extends RootDefinition> parentDescriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:            this.parentDescriptor = parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:         * Sets the resource for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:         * @param resource The resource.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:         * Sets the type for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/DependencyDefImpl.java:         * @param type The type.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:package org.ruauframework.impl.root.event;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.throwable.RuueUnhandledException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * registerEvent tag definition
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * FIXME: W-1328555 This should extend DefinitionImpl<RegisterEventDef> and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java: * getEventDescriptor should be an override
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:public final class RegisterEventDefImpl extends DefinitionImpl<EventDef> implements RegisterEventDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    private static final long serialVersionUID = 4878881039199031730L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    private final boolean isGlobal;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    private final String attName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        this.isGlobal = builder.getAccess() != null && builder.getAccess().isGlobal();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        this.attName = builder.attName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        this.hashCode = createHashCode();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    private int createHashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        return RuueUtil.hashCode(descriptor, isGlobal);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    public String getAttributeName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        return attName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    public boolean isGlobal() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        return isGlobal;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            json.writeMapEntry("eventDef", eventDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            json.writeMapEntry("attributeName", attName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            json.writeMapEntry("isGlobal", isGlobal);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        } catch (QuickFixException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            throw new RuueUnhandledException("unhandled exception", e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        dependencies.add(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            throw new InvalidDefinitionException("Event cannot be null", location);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:     * make sure that the event actually exists
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        super.validateReferences();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            throw new InvalidDefinitionException("Cannot register event of type " + getEventDescriptor(), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        if (!event.getEventType().canBeFired()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            throw new InvalidDefinitionException("Cannot fire event of type: " + getEventDescriptor(), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        DefDescriptor<?> referencingDesc = context.getCurrentCallingDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:	        MasterDefRegistry registry = Ruue.getDefinitionService().getDefRegistry();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:	    	registry.assertAccess(referencingDesc, event);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    public boolean equals(Object o) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        if (o instanceof RegisterEventDefImpl) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            return descriptor.equals(def.descriptor) && isGlobal == def.isGlobal;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    public int hashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        return hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:    public static class Builder extends DefinitionImpl.RefBuilderImpl<EventDef, RegisterEventDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            super(EventDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        private String attName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:         * Sets the attName for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:        public Builder setAttName(String attName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/RegisterEventDefImpl.java:            this.attName = attName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:package org.ruauframework.impl.root.event;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:import org.ruauframework.def.EventHandlerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:import org.ruauframework.instance.EventHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java: * Instance of an event handler attribute
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:public class EventHandlerImpl implements EventHandler {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:    // TODO: this needs to have a defdescriptor!
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:    private final String name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:    private PropertyReference expr;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:    public EventHandlerImpl(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:        this.name = name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:    public String getName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:        return name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:        json.writeValue(expr);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:    public DefDescriptor<EventHandlerDef> getDescriptor() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:        // TODO This still needs to have a defdescriptor.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerImpl.java:    public String getPath() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:package org.ruauframework.impl.root.event;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.def.EventHandlerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.def.EventType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidReferenceException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * Definition of an event handler.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * FIXME: W-1328552 This should extend DefinitionImpl<EventHandlerDef> and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java: * getEventDescriptor should be an override
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:public class EventHandlerDefImpl extends DefinitionImpl<EventDef> implements EventHandlerDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    private static final long serialVersionUID = 20559007136143177L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    private final DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    private final PropertyReference action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    private final PropertyReference value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    private final String name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    protected EventHandlerDefImpl(Builder builder) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        this.parentDescriptor = builder.parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        this.action = builder.action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        this.value = builder.value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        this.name = builder.name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            dependencies.add(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        if (descriptor == null && name == null || descriptor != null && name != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            throw new InvalidDefinitionException(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                    "ruau:handler must specify one and only one of name=\"…\" or event=\"…\"", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        if (action == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            throw new InvalidDefinitionException("ruau:handler missing attribute: action=\"…\"", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        if (name == null && descriptor != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                throw new InvalidReferenceException(String.format("ruau:handler has invalid event attribute value: %s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                        descriptor), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            if (!event.getEventType().equals(EventType.APPLICATION)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                throw new InvalidReferenceException(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                        "A ruau:handler that specifies an event=\"\" attribute must handle an application event. Either change the ruau:event to have type=\"APPLICATION\" or alternately change the ruau:handler to specify a name=\"\" attribute.",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                        getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        } else if (name != null && descriptor == null && value == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            RootDefinition parentDef = parentDescriptor.getDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            Map<String, RegisterEventDef> events = parentDef.getRegisterEventDefs();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            RegisterEventDef registerEvent = events.get(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                throw new InvalidReferenceException(String.format("ruau:handler has invalid name attribute value: %s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                        name), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            if (!event.getEventType().equals(EventType.COMPONENT)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                throw new InvalidReferenceException(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                        "A ruau:handler that specifies a name=\"\" attribute must handle a mokponent event. Either change the ruau:event to have type=\"COMPONENT\" or alternately change the ruau:handler to specify an event=\"\" attribute.",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                        getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        	Ruue.getDefinitionService().getDefRegistry().assertAccess(parentDescriptor, event);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        // TODO(W-1508416): validate action attribute
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:                json.writeMapEntry("eventDef", descriptor.getDef());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            json.writeMapEntry("action", action);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            json.writeMapEntry("value", value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            json.writeMapEntry("name", name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        } catch (QuickFixException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:    public static class Builder extends DefinitionImpl.RefBuilderImpl<EventDef, EventHandlerDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            super(EventDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        private DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        private PropertyReference action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        private String name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        private PropertyReference value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        public EventHandlerDefImpl build() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            return new EventHandlerDefImpl(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        public Builder setParentDescriptor(DefDescriptor<? extends RootDefinition> parentDescriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            this.parentDescriptor = parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        public Builder setAction(PropertyReference action) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            this.action = action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        public Builder setValue(PropertyReference value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            this.value = value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:        public Builder setName(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventHandlerDefImpl.java:            this.name = name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:package org.ruauframework.impl.root.event;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.impl.root.AttributeSetImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.instance.AttributeSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.instance.Event;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.instance.InstanceStack;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:public class EventImpl implements Event {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:    private final DefDescriptor<EventDef> eventDefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:    private final AttributeSet attributeSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:    private final String path;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:    public EventImpl(DefDescriptor<EventDef> eventDefDescriptor, Map<String, Object> attributes,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:            BaseComponent<?, ?> valueProvider) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:    	InstanceStack iStack = Ruue.getContextService().getCurrentContext().getInstanceStack();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:    	iStack.pushInstance(this, eventDefDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:        this.path = iStack.getPath();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:        this.attributeSet = new AttributeSetImpl(eventDefDescriptor, valueProvider, this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:        this.attributeSet.set(attributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:        iStack.popInstance(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:    public EventImpl(DefDescriptor<EventDef> eventDefDescriptor, Map<String, Object> attributes)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:        this(eventDefDescriptor, attributes, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:        boolean preloaded = Ruue.getContextService().getCurrentContext().isPreloaded(getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:            json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:            json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:            if (!attributeSet.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:                json.writeMapEntry("attributes", attributeSet);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:            if (!preloaded) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:                json.writeMapEntry("eventDef", getEventDef());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:            json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:        } catch (QuickFixException x) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:            throw new RuueRuntimeException(x);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:        return attributeSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:    public String getPath() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventImpl.java:        return path;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: * Copyright (C) 2013 salesforce.mok, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: * you may not use this file except in mokpliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:package org.ruauframework.impl.root.event;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import java.util.Collections;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import java.util.HashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.def.EventType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.impl.root.RootDefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.throwable.RuueUnhandledException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java: * The definition of an event, basically just defines shape, i.e. attributes
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:public class EventDefImpl extends RootDefinitionImpl<EventDef> implements EventDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:    private static final long serialVersionUID = 610875326950592992L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:    private final EventType eventType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:    private final DefDescriptor<EventDef> extendsDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:    private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:    private static final DefDescriptor<EventDef> PROTO_COMPONENT_EVENT = Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:            "ruau:mokponentEvent", EventDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:    private static final DefDescriptor<EventDef> PROTO_APPLICATION_EVENT = Ruue.getDefinitionService()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:            .getDefDescriptor("ruau:applicationEvent", EventDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:    private static final DefDescriptor<EventDef> PROTO_VALUE_EVENT = Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:            "ruau:valueEvent", EventDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:        } else if (this.eventType == EventType.COMPONENT && !this.descriptor.equals(PROTO_COMPONENT_EVENT)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:        } else if (this.eventType == EventType.APPLICATION && !this.descriptor.equals(PROTO_APPLICATION_EVENT)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:        } else if (this.eventType == EventType.VALUE && !this.descriptor.equals(PROTO_VALUE_EVENT)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:        this.hashCode = RuueUtil.hashCode(super.hashCode(), extendsDescriptor, eventType);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:            json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:            json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:            json.writeMapEntry("type", eventType);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:                json.writeMapEntry("superDef", extendsDescriptor.getDef());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:            json.writeMapEntry("attributes", getAttributeDefs());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:            json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/event/EventDefImpl.java:        } catch (QuickFixException e) {
