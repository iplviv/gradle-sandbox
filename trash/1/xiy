ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("wrong number of X-FRAME-OPTIONS header lines", 1, headers.length);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("DENY", headers[0].getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //6.if we set ancestor resources with [null], SAMEORIGIN get written into X-FRAME-OPTIONS
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @ThreadHostileTest("swaps config adapter")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @UnAdaptableTest("CSP is different between ruau-stand-alone and core")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testSpecialCspSameOriginAncestor() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Header[] headers = doSpecialCspTest("'self'", (String)null);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("wrong number of X-FRAME-OPTIONS header lines", 1, headers.length);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("SAMEORIGIN", headers[0].getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //7.if we set ancestor resources with null [], we won't change X-FRAME-OPTIONS
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @ThreadHostileTest("swaps config adapter")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @UnAdaptableTest("CSP is different between ruau-stand-alone and core")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testSpecialCspAnyAncestor() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Header[] headers = doSpecialCspTest("*", (String[]) null);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("wrong number of X-FRAME-OPTIONS header lines", 0, headers.length);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testHTMLTemplateCachingWhenAppCacheIsEnable() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // An application with isOnePageApp set to true and useAppcache set to
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // isOnePageApp overrides useAppCache specification
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        DefDescriptor<ApplicationDef> desc = addSourceAutoCleanup(ApplicationDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "<ruau:application isOnePageApp='true' useAppcache='true'></ruau:application>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // Expect the get request to be set for long cache
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertResponseSetToLongCache(String.format("/%s/%s.app", desc.getNamespace(), desc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // An application with useAppcache set to true and no specification for
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // isOnePageApp
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        desc = addSourceAutoCleanup(ApplicationDef.class, "<ruau:application useAppcache='true'></ruau:application>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // Expect the get request to be set for no caching
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertResponseSetToNoCache(String.format("/%s/%s.app", desc.getNamespace(), desc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // A component and RuueBaseServlet.isManifestEnabled() is false
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "<ruau:component ></ruau:component>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // Expect the get request to be set for long cache
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertResponseSetToLongCache(String.format("/%s/%s.cmp", cmpDesc.getNamespace(), cmpDesc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * Wiggle factor.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * This is intended to allow for variance between the local date and the server date, along with any latency that
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * might occur. Currently it is set to 1 hour, which should be more than enough to account for offsets, but short
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * enough so that we don't really care.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    private final static long WIGGLE_FACTOR = (1000L * 60 * 60 * 1);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * Submit a request and check that the 'long cache' is set correctly.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * See documentation for {@link #WIGGLE_FACTOR}.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * @param url the url
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    private void assertResponseSetToLongCache(String url) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Date expected = new Date(System.currentTimeMillis() + RuueBaseServlet.LONG_EXPIRE - WIGGLE_FACTOR);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("Failed to execute request successfully.", HttpStatus.SC_OK, getStatusCode(response));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("Expected response to be marked for long cache",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                String.format("max-age=%s, public", RuueBaseServlet.LONG_EXPIRE / 1000),
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                response.getFirstHeader(HttpHeaders.CACHE_CONTROL).getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertDefaultAntiClickjacking(response, true, true);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        String expiresHdr = response.getFirstHeader(HttpHeaders.EXPIRES).getValue();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Date expires = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.ENGLISH).parse(expiresHdr);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // We show all of the related dates/strings to help with debugging.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertTrue(String.format("Expires header is earlier than expected. Expected !before %s, got %s (%s).",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * Submit a request and check that the 'no cache' is set correctly.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * We are very generous with the expires time here, as we really don't care other than to have it well in the past.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * @param url the url path.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    private void assertResponseSetToNoCache(String url) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Date expected = new Date(System.currentTimeMillis());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("Failed to execute request successfully.", HttpStatus.SC_OK, getStatusCode(response));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("Expected response to be marked for no-cache", "no-cache, no-store",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                response.getFirstHeader(HttpHeaders.CACHE_CONTROL).getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("no-cache", response.getFirstHeader(HttpHeaders.PRAGMA).getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertDefaultAntiClickjacking(response, true, true);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        String expiresHdr = response.getFirstHeader(HttpHeaders.EXPIRES).getValue();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Date expires = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.ENGLISH).parse(expiresHdr);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // We show all of the related dates/strings to help with debugging.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertTrue(String.format("Expires header should be in the past. Expected before %s, got %s (%s).",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    /** Runs a test with special CSP */
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    private Header[] doSpecialCspTest(String expectCspAncestors, String... ancestors) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        ContentSecurityPolicy mockCsp = new MockCsp(ancestors);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        MockConfigAdapter mci = getMockConfigAdapter();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            // An application with isOnePageApp set to true
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            DefDescriptor<ApplicationDef> desc = addSourceAutoCleanup(ApplicationDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                    "<ruau:application isOnePageApp='true'></ruau:application>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            HttpGet get = obtainGetMethod(String.format("/%s/%s.app", desc.getNamespace(), desc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            Header[] headers = response.getHeaders("X-FRAME-OPTIONS");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            Map<String, String> csp = getCSP(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            assertEquals("frame-ancestors is wrong", expectCspAncestors, csp.get("frame-ancestors"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            assertEquals("script-src is wrong", "'self'", csp.get("script-src"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            assertEquals("style-src is wrong", "'self'", csp.get("style-src"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            assertEquals("connect-src is wrong", "www.itrustu.com/ www.also.com/other", csp.get("connect-src"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            assertEquals("font-src is wrong", "*", csp.get("font-src"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            assertEquals("img-src is wrong", "*", csp.get("img-src"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            assertEquals("object-src is wrong", "'none'", csp.get("object-src"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            assertEquals("media-src is wrong", "*", csp.get("media-src"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            assertEquals("default-src is wrong", "'self'", csp.get("default-src"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            return headers;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        } finally {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            ServiceLocatorMocker.unmockServiceLocator();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * Verify the Script tag to fetch the Ruue Framework JS has nonce. The initial get request for an application gets a
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * template as response. Part of the template response should be a script tag which fetches the Ruue FW JS. The URL
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * for the js file should have nonce indicating the last mod of the JS group.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testJSFrameworkUrlHasNonce() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        DefDescriptor<ApplicationDef> desc = addSourceAutoCleanup(ApplicationDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "<ruau:application render='client'></ruau:application>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        HttpGet get = obtainGetMethod(String.format("/%s/%s.app", desc.getNamespace(), desc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, getStatusCode(response));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // Fetch the latest timestamp of the JS group and construct URL for DEV mode.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        String expectedFWUrl = String.format("/ruauFW/javascript/%s/ruau_dev.js",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                Ruue.getConfigAdapter().getRuueFrameworkNonce());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        String scriptTag = String.format("<script src=\"%s\" ></script>", expectedFWUrl);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertTrue("Expected Ruue FW Script tag not found. Expected to see: " + scriptTag,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                getResponseBody(response).contains(scriptTag));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertDefaultAntiClickjacking(response, true, true);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testGetUnhandledError() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        DefDescriptor<ApplicationDef> desc = addSourceAutoCleanup(ApplicationDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "<ruau:application><ruau:attribute name='bah'/></ruau:application>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        HttpGet get = obtainGetMethod(String.format("/%s/%s.app", desc.getNamespace(), desc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, getStatusCode(httpResponse));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertTrue("Expected null descriptor error message but got: " + response,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                response.contains("descriptor is null"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * Verify providing invalid DefDescriptor format to the ruau.tag param results in the proper handled Exception and
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * not an RuueUnhandledException, which results in a Gack on SFDC.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testInvalidDefDescriptorFormat() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        String url = String.format("/ruau?ruau.tag=foo:bar:baz");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, getStatusCode(httpResponse));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertTrue("Expected 'SystemErrorException: Invalid Descriptor Format' but got: " + response,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                response.contains("SystemErrorException: Invalid Descriptor Format: foo:bar:baz"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertFalse("Invalid ruau.tag input should not result in an RuueUnhandledException. " + response,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                response.contains("RuueUnhandledException: Unable to process your request"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import java.text.SimpleDateFormat;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import java.util.Arrays;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import java.util.Calendar;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import java.util.Date;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.apache.commons.lang3.StringUtils;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.apache.http.Header;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.apache.http.HttpHeaders;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.apache.http.HttpResponse;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.apache.http.client.methods.HttpGet;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.apache.http.message.BasicHeader;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.apache.http.util.EntityUtils;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * Automation to verify the implementation of RuueFrameworkServlet. RuueFrameworkServlet responds to requests of pattern
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * /ruauFW/* This config is stored in ruau/dist/config/web.xml for ruau running on jetty. In SFDC build, the config is
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java: * in main-sfdc/config/ruau.conf RuueFrameworkServlet sets resources to be cached for 45 days.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:public class RuueFrameworkServletHttpTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public final String sampleBinaryResourcePath = "/ruauFW/resources/ruau/ruauIdeLogo.png";
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public final String sampleTextResourcePath = "/ruauFW/resources/ruau/resetCSS.css";
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public final String sampleJavascriptResourcePath = "/ruauFW/javascript/ruau_dev.js";
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public final String sampleJavascriptResourcePathWithNonce = "/ruauFW/javascript/%s/ruau_dev.js";
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public final String sampleBinaryResourcePathWithNonce = "/ruauFW/resources/%s/ruau/ruauIdeLogo.png";
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public final String sampleTextResourcePathWithNonce = "/ruauFW/resources/%s/ruau/resetCSS.css";
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    private final long timeWindowExpiry = 600000; // ten minute expiration test window
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public RuueFrameworkServletHttpTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    private boolean ApproximatelyEqual(long a, long b, long delta) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        return (Math.abs(a - b) < delta);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    private SimpleDateFormat getHttpDateFormat() {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        return new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Execute a get method and check that we got a long cache response.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    private int checkLongCache(HttpResponse httpResponse, String mimeType) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("RuueFrameworkServlet failed to fetch a valid resource request.", HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertNotNull(getResponseBody(httpResponse));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String charset = getCharset(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String responseMime = httpResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        if (mimeType.startsWith("text/")) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            assertEquals("Framework servlet not responding with correct encoding type.", RuueBaseServlet.UTF_ENCODING,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                    charset);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            assertTrue("Framework servlet not responding with correct mime type expected " + mimeType
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                    + " got " + responseMime, responseMime.startsWith(mimeType + ";"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            assertEquals("Framework servlet not responding with correct mime type", mimeType,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        SimpleDateFormat df = getHttpDateFormat();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        Date currentDate = new Date();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        long expirationMillis = (df.parse(httpResponse.getFirstHeader(HttpHeaders.EXPIRES).getValue()).getTime()
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                - currentDate.getTime());
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertTrue("RuueFrameworkServlet is not setting the right value for expires header.",
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                ApproximatelyEqual(expirationMillis, RuueBaseServlet.LONG_EXPIRE, timeWindowExpiry));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        return statusCode;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    private int checkExpired(HttpResponse response, String mimeType) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        int statusCode = getStatusCode(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        SimpleDateFormat df = getHttpDateFormat();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("RuueFrameworkServlet failed to return ok.", HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String charset = getCharset(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String responseMime = response.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        if (mimeType.startsWith("text/")) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            assertEquals("Framework servlet not responding with correct encoding type.", RuueBaseServlet.UTF_ENCODING,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                    charset);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            assertTrue("Framework servlet not responding with correct mime type expected " + mimeType
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                    + " got " + responseMime, responseMime.startsWith(mimeType + ";"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            assertEquals("Framework servlet not responding with correct mime type", mimeType,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        long expirationMillis = df.parse(response.getFirstHeader(HttpHeaders.EXPIRES).getValue()).getTime();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertTrue("RuueFrameworkServlet is not setting the right value for expires header.",
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                expirationMillis < System.currentTimeMillis());
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        return statusCode;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    protected HttpGet obtainNoncedGetMethod(String noncedPath, boolean fake) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        if (fake) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            nonce = "thisisnotanonce";
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            nonce = Ruue.getConfigAdapter().getRuueFrameworkNonce();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String realPath = String.format(noncedPath, nonce);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        return obtainGetMethod(realPath);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Verify that RuueFrameworkServlet can handle bad resource paths. 1. Non existing resource path. 2. Empty resource
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * path. 3. Access to root directory or directory walking.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public void testBadResourcePaths() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String[] badUrls = { "/ruauFW", "/ruauFW/", "/ruauFW/root/",
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                // BUG "/ruauFW/resources/ruau/..", Causes a 500
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                "/ruauFW/resources/ruau/../../",
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                // BUG "/ruauFW/resources/ruau/../../../../", causes a 400
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                "/ruauFW/home/", "/ruauFW/resources/ruau/home", "/ruauFW/resources/foo/bar",
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                // Make sure the regex used in implementation doesn't barf
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                "/ruauFW/resources/ruau/resources/ruau/ruauIdeLogo.png",
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                "/ruauFW/resources/ruau/ruauIdeLogo.png/resources/ruau/" };
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        for (String url : badUrls) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            int statusCode = getStatusCode(perform(get));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:            assertEquals("Expected:" + HttpStatus.SC_NOT_FOUND + " but found " + statusCode + ", when trying to reach:"
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                    + url, HttpStatus.SC_NOT_FOUND, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    private void verifyResourceAccess(String resourcePath, int expectedResponseStatus, String failureMsg)
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainGetMethod(resourcePath);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        int statusCode = getStatusCode(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals(failureMsg, expectedResponseStatus, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Verify that incomplete resource path returns SC_NOT_FOUND(404). Subsequent requests for valid resource on the
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * same path are successful.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String[] parts = sampleBinaryResourcePath.split("/");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        // Accessing folder(which might have had previous valid access) as file
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String incompletePath = StringUtils.join(Arrays.copyOfRange(parts, 0, parts.length - 1), "/");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        verifyResourceAccess(incompletePath, HttpStatus.SC_NOT_FOUND,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                "Expected server to return a 404 status for folder as file.");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        // Accessing a valid folder
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        verifyResourceAccess(incompletePath + "/", HttpStatus.SC_NOT_FOUND,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                "Expected server to return a 404 status for folders(incomplete paths).");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        // Subsequent requests for filed on same path are accepted and serviced
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        verifyResourceAccess(sampleBinaryResourcePath, HttpStatus.SC_OK,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                "Expected server to return a 200 status for valid resource.");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Test that RuueFrameworkServlet inspects the date header in the request and sends 200 even though
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * If-Modified-Since header indicates that resource is not stale, but has no fwUid or nonce
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public void testResourceCachingWithoutUidNonce() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        Calendar stamp = Calendar.getInstance();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        stamp.add(Calendar.DAY_OF_YEAR, 45);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        Header[] headers = new Header[] { new BasicHeader(HttpHeaders.IF_MODIFIED_SINCE,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz").format(stamp.getTime())) };
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainGetMethod(sampleBinaryResourcePath, false, headers);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("Expected server to return a 200 for unexpired cache without fwUid or nonce.", HttpStatus.SC_OK,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertNotNull(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(httpResponse, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Test that RuueFrameworkServlet inspects the date header in the request and sends 304(SC_NOT_MODIFIED) if the
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * If-Modified-Since header indicates that resource is not stale.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public void testResourceCachingWithUid() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        Calendar stamp = Calendar.getInstance();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        stamp.add(Calendar.DAY_OF_YEAR, 45);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainNoncedGetMethod(sampleBinaryResourcePathWithNonce, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.setHeader(HttpHeaders.IF_MODIFIED_SINCE,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz").format(stamp.getTime()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("Expected server to return a 304 for unexpired cache.", HttpStatus.SC_NOT_MODIFIED, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertNull(getResponseBody(httpResponse));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(httpResponse, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Verify the Vary header is set to Accept-Encoding. This should be set for cacheable and compressed js/css files.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * UnAdaptableTest because SFDC removes vary header
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public void testHasVaryHeader() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainNoncedGetMethod(sampleTextResourcePath, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        Header varyHeader = response.getFirstHeader(HttpHeaders.VARY);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertNotNull("Vary header is not set.", varyHeader);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("Vary header set to wrong value.", "Accept-Encoding", varyHeader.getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(response, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Verify that RuueFrameworkServlet responds successfully to valid request for a binary resource.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public void testRequestBinaryResourceWithNonce() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainNoncedGetMethod(sampleBinaryResourcePathWithNonce, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        SimpleDateFormat df = getHttpDateFormat();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        int statusCode;
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        checkLongCache(response, "image/png");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get = obtainNoncedGetMethod(sampleBinaryResourcePathWithNonce, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        // set the if modified since to a long time ago.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.setHeader(HttpHeaders.IF_MODIFIED_SINCE, df.format(new Date(1)));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        statusCode = getStatusCode(perform(get));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("RuueFrameworkServlet failed to return not modified.", HttpStatus.SC_NOT_MODIFIED, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get = obtainNoncedGetMethod(sampleBinaryResourcePathWithNonce, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.setHeader(HttpHeaders.IF_MODIFIED_SINCE, df.format(new Date(System.currentTimeMillis() + 24 * 3600 * 1000)));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        statusCode = getStatusCode(perform(get));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("RuueFrameworkServlet failed to return not modified.", HttpStatus.SC_NOT_MODIFIED, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get = obtainNoncedGetMethod(sampleBinaryResourcePathWithNonce, true);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        checkExpired(response, "image/png");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(response, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Verify that RuueFrameworkServlet responds successfully to valid request for a binary resource.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public void testRequestBinaryResourceShortExpire() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainGetMethod(sampleBinaryResourcePath, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String contentType = httpResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String expires = httpResponse.getFirstHeader(HttpHeaders.EXPIRES).getValue();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("RuueFrameworkServlet failed to fetch a valid resource request.", HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertNotNull(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("Framework servlet not responding with correct mime type", "image/png", contentType);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        SimpleDateFormat df = getHttpDateFormat();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        Date currentDate = new Date();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        long expirationMillis = (df.parse(expires).getTime() - currentDate.getTime());
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertTrue("RuueFrameworkServlet is not setting the right value for expires header.",
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                ApproximatelyEqual(expirationMillis, RuueBaseServlet.SHORT_EXPIRE, timeWindowExpiry));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(httpResponse, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Verify that RuueFrameworkServlet responds successfully to valid request for a text resource.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainNoncedGetMethod(sampleTextResourcePathWithNonce, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        SimpleDateFormat df = getHttpDateFormat();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        checkLongCache(response, "text/css");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get = obtainNoncedGetMethod(sampleTextResourcePathWithNonce, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        // set the if modified since to a long time ago.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.setHeader(HttpHeaders.IF_MODIFIED_SINCE, df.format(new Date(1)));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        int statusCode = getStatusCode(perform(get));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("RuueFrameworkServlet failed to return not modified.", HttpStatus.SC_NOT_MODIFIED, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get = obtainNoncedGetMethod(sampleTextResourcePathWithNonce, true);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(response, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Verify that RuueFrameworkServlet responds successfully to valid request for a text resource.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainGetMethod(sampleTextResourcePath);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        String charset = getCharset(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("RuueFrameworkServlet failed to fetch a valid resource request.", HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertNotNull(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertEquals("Framework servlet not responding with correct encoding type.", RuueBaseServlet.UTF_ENCODING,
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                charset);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertTrue("Framework servlet not responding with correct mime type",
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                httpResponse.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue().startsWith("text/css;"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        SimpleDateFormat df = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        Date currentDate = new Date();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        long expirationMillis = (df.parse(httpResponse.getFirstHeader(HttpHeaders.EXPIRES).getValue()).getTime()
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                - currentDate.getTime());
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertTrue("RuueFrameworkServlet is not setting the right value for expires header.",
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:                ApproximatelyEqual(expirationMillis, RuueBaseServlet.SHORT_EXPIRE, timeWindowExpiry));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(httpResponse, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Verify that RuueFrameworkServlet responds successfully to valid request for a javascript resource.
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public void testRequestJavascriptResourceNoExpire() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainGetMethod(sampleJavascriptResourcePath);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        checkExpired(response, "text/javascript");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(response, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:     * Verify that RuueFrameworkServlet responds successfully to valid request for nonced ruau js
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    public void testRequestJavascriptResourceLongExpire() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainNoncedGetMethod(sampleJavascriptResourcePathWithNonce, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        checkLongCache(response, "text/javascript");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(response, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    @ThreadHostileTest("PRODUCTION")
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        getMockConfigAdapter().setIsProduction(true);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainGetMethod("/ruauFW/resources/moment/moment.js");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        checkExpired(httpResponse, "text/javascript");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(httpResponse, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertTrue(response.contains("(function(e){"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:    @ThreadHostileTest("PRODUCTION")
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        getMockConfigAdapter().setIsProduction(true);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        HttpGet get = obtainGetMethod("/ruauFW/resources/codemirror/js/codemirror.js");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        checkExpired(httpResponse, "text/javascript");
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertTrue(response.contains("function setDefaults("));
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        assertDefaultAntiClickjacking(httpResponse, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueFrameworkServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:public class ExceptionHandlingHTTPTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:    public ExceptionHandlingHTTPTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:     * Test to verify row and column numbers in stacktrace on Exceptions.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        // Verify -1,-1 aren't line/col numbers in stacktrace if Location doesn't provide them
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        ServerAction a = new ServerAction(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:                "java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$throwExceptionNoLineNums",
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        a.run();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        Map<String, Object> error = (Map<String, Object>) a.getErrors().get(0);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        String message = (String) error.get("message");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        assertFalse("Location should not put out -1,-1 as the line/column", message.contains("-1,-1"));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        // Verify correct line/column numbers present in stacktrace when Location provides them
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        a = new ServerAction(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:                "java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$throwExceptionWithLineNums",
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        a.run();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        error = (Map<String, Object>) a.getErrors().get(0);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        message = (String) error.get("message");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingHTTPTest.java:        assertTrue("Location does not have correct line/column numbers", message.contains("4444,55555"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:import org.ruauframework.test.annotation.RuueTestLabels;
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * Automation to verify the handling of urls by RuueRewriteFilter.
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java: * RuueRewriteFilter forwards requests to RuueServlet.
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:public class RuueRewriteFilterHttpTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:    public RuueRewriteFilterHttpTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:    public void testDoFilterOfValidURLs() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Didn't forward url with namespace and component name.", "/ruau/text.cmp", HttpStatus.SC_OK);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Didn't forward url with namespace and application name.", "/test/fakeApplication.app",
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:                HttpStatus.SC_OK);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Didn't forward url with variables and mode specification.",
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:                "/ruau/text.cmp?value=DUTCH&ruau.mode=DEV", HttpStatus.SC_OK);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:    public void _testDoFilterOfMalformedURLs() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url without namespace.", "//text.cmp", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url without component name.", "/ruau/.cmp?ruau.mode=PROD",
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:                HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url without namespace.", "//text.app", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url without application name.", "/ruau/.app", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url without namespace.", "/text.cmp", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url while posting directly to servlet without component name.", "/ruau/",
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:                HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url while posting directly to ruau servlet.", "/ruau",
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:                HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url with double suffix", "/ruau/text.cmp.cmp", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url with double mixed suffix", "/ruau/text.cmp.app",
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:                HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url with double suffix", "/ruau.app/text.cmp", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url with bad suffix", "/ruau/text.cmpp", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url with * for namespace", "/*/text.cmp", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url with * for component name", "/ruau/*.cmp", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url with * for namespace and component name", "/*/*.cmp",
ruau/ruau/src/test/java/org/ruauframework/http/RuueRewriteFilterHttpTest.java:                HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.controller.java.ServletConfigController;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:import org.openqa.selenium.support.ui.WebDriverWait;
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java: * What should you see when something goes wrong. {@link ThreadHostile} due to setProdConfig and friends.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:public class ExceptionHandlingUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public ExceptionHandlingUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private static final String baseAppTag = "<ruau:application %s>%s</ruau:application>";
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private static final String errorBoxPath = "//div[@class='ruauMsgMask ruauForcedErrorBox']//div[@id='ruauErrorMessage']";
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private void setProdConfig() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        Ruue.getContextService().endContext();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        Ruue.getContextService().startContext(Mode.DEV, Format.HTML, Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private void setProdContextWithoutConfig() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        Ruue.getContextService().endContext();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        Ruue.getContextService().startContext(Mode.PROD, Format.HTML, Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private void setDevContextWithoutConfig() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        Ruue.getContextService().endContext();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        Ruue.getContextService().startContext(Mode.DEV, Format.HTML, Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private String getAppUrl(String attributeMarkup, String bodyMarkup) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        String appMarkup = String.format(baseAppTag, attributeMarkup, bodyMarkup);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<ApplicationDef> add = addSourceAutoCleanup(ApplicationDef.class, appMarkup);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        return String.format("/%s/%s.app", add.getNamespace(), add.getName());
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Due to duplicate div#ruauErrorMessage on exceptions from server rendering, use different CSS selector to check
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * exception message. W-1308475 - Never'd removal/change of duplicate div#ruauErrorMessage
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private void assertNoStacktraceServerRendering() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        WebElement elem = findDomElement(By.xpath(errorBoxPath));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:            fail("error message not found");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        String actual = elem.getText().replaceAll("\\s+", " ");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertEquals("Unable to process your request", actual);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private void assertNoStacktrace() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        String actual = ruauUITestingUtil.getRuueErrorMessage().replaceAll("\\s+", " ");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertEquals("Unable to process your request", actual);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Due to duplicate div#ruauErrorMessage on exceptions from server rendering, use different CSS selector to check
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * exception message. W-1308475 - Never'd removal/change of duplicate div#ruauErrorMessage
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private void assertStacktraceServerRendering(String messageStartsWith, String... causeStartsWith) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        WebElement elem = findDomElement(By.xpath(errorBoxPath));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:            fail("error message not found");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        String actual = elem.getText().replaceAll("\\s+", " ");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertStacktraceCommon(actual, messageStartsWith, causeStartsWith);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private void assertStacktrace(String messageStartsWith, String... causeStartsWith) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        String actual = ruauUITestingUtil.getRuueErrorMessage().replaceAll("\\s+", " ");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertStacktraceCommon(actual, messageStartsWith, causeStartsWith);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private void assertQuickFixStacktrace(String messageStartsWith, String... causeStartsWith) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        String actual = ruauUITestingUtil.getQuickFixCause().replaceAll("\\s+", " ");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertStacktraceCommon(actual, messageStartsWith, causeStartsWith);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    private void assertStacktraceCommon(String actual, String messageStartsWith, String... causeStartsWith)
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        if (!actual.contains(messageStartsWith)) {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:            fail("unexpected error message - expected <" + messageStartsWith + "> but got <" + actual + ">");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        for (String expectedCause : causeStartsWith) {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:            if (!actual.contains(expectedCause)) {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                fail("unexpected cause - expected <" + expectedCause + "> but got <" + actual + ">");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Generic error message displayed in PRODUCTION if component provider instantiation throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    @ThreadHostileTest("PRODUCTION")
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testProdCmpProviderThrowsDuringInstantiation() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                InterfaceDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:interface provider='java://org.ruauframework.impl.java.provider.TestProviderThrowsDuringInstantiation'></ruau:interface>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertNoStacktrace();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * QuickFix displayed if provider throws during instantiation.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testCmpProviderThrowsDuringInstantiation() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                InterfaceDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:interface provider='java://org.ruauframework.impl.java.provider.TestProviderThrowsDuringInstantiation'></ruau:interface>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertQuickFixStacktrace(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "java.lang.RuntimeException: that was intentional at org.ruauframework.impl.java.provider.TestProviderThrowsDuringInstantiation.",
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "(TestProviderThrowsDuringInstantiation.java:");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Generic error message displayed in PRODUCTION if application provider instantiation throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    @ThreadHostileTest("PRODUCTION")
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testProdAppProviderThrowsDuringInstantiation() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "provider='java://org.ruauframework.impl.java.provider.TestProviderThrowsDuringInstantiation'", ""));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertNoStacktrace();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * QuickFix displayed if provider throws during instantiation.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testAppProviderThrowsDuringInstantiation() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "provider='java://org.ruauframework.impl.java.provider.TestProviderThrowsDuringInstantiation'", ""));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertQuickFixStacktrace("that was intentional at org.ruauframework.impl.java.provider.TestProviderThrowsDuringInstantiation.");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Generic error message displayed in PRODUCTION if component provider instantiation throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    @ThreadHostileTest("PRODUCTION")
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                InterfaceDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:interface provider='java://org.ruauframework.impl.java.provider.TestProviderThrowsDuringProvide'></ruau:interface>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("access='GLOBAL'", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertNoStacktrace();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Stacktrace displayed in non-PRODUCTION if component provider instantiation throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                InterfaceDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:interface provider='java://org.ruauframework.impl.java.provider.TestProviderThrowsDuringProvide'></ruau:interface>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertStacktrace("java.lang.RuntimeException: out of stock at .", cdd.toString());
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Generic error message displayed in PRODUCTION if component model instantiation throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    @ThreadHostileTest("PRODUCTION")
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testProdCmpModelThrowsDuringInstantiation() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:component model='java://org.ruauframework.impl.java.model.TestModelThrowsDuringInstantiation'></ruau:component>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("access='GLOBAL'", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertNoStacktrace();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Stacktrace displayed in non-PRODUCTION if component model instantiation throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testCmpModelThrowsDuringInstantiation() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:component model='java://org.ruauframework.impl.java.model.TestModelThrowsDuringInstantiation'></ruau:component>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertStacktrace(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "java.lang.RuntimeException: surprise! at org.ruauframework.impl.java.model.TestModelThrowsDuringInstantiation.",
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "(TestModelThrowsDuringInstantiation.java:");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Generic error message displayed in PRODUCTION if component renderer instantiation throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    @ThreadHostileTest("PRODUCTION")
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testProdCmpRendererThrowsDuringInstantiation() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:component renderer='java://org.ruauframework.impl.renderer.sampleJavaRenderers.TestRendererThrowsDuringInstantiation'></ruau:component>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertNoStacktrace();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Stacktrace displayed in non-PRODUCTION if component renderer instantiation throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testCmpRendererThrowsDuringInstantiation() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:component renderer='java://org.ruauframework.impl.renderer.sampleJavaRenderers.TestRendererThrowsDuringInstantiation'></ruau:component>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertQuickFixStacktrace(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "java.lang.RuntimeException: invisible me at org.ruauframework.impl.renderer.sampleJavaRenderers.TestRendererThrowsDuringInstantiation.",
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "(TestRendererThrowsDuringInstantiation.java:");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Generic error message displayed in PRODUCTION if component renderer throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    @ThreadHostileTest("PRODUCTION")
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:component renderer='java://org.ruauframework.impl.renderer.sampleJavaRenderers.TestRendererThrowingException'></ruau:component>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("access='GLOBAL'", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertNoStacktraceServerRendering();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Stacktrace displayed in non-PRODUCTION if component renderer throws.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> cdd = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:component renderer='java://org.ruauframework.impl.renderer.sampleJavaRenderers.TestRendererThrowingException'></ruau:component>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(getAppUrl("", String.format("<%s:%s/>", cdd.getNamespace(), cdd.getName())));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertStacktraceServerRendering("org.ruauframework.throwable.RuueExecutionException: org.ruauframework."
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                + "renderer.ComponentRenderer: org.ruauframework.throwable.RuueExecutionException: org.ruauframework."
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                + "renderer.HtmlRenderer: org.ruauframework.throwable.RuueExecutionException: org.ruauframework."
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                + "renderer.HtmlRenderer: org.ruauframework.throwable.RuueExecutionException: org.ruauframework."
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                + "renderer.ExpressionRenderer: org.ruauframework.throwable.RuueExecutionException: org.ruauframework."
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                + "renderer.ComponentRenderer: org.ruauframework.throwable.RuueExecutionException: org.ruauframework."
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                + "impl.renderer.sampleJavaRenderers.TestRendererThrowingException: java.lang.ArithmeticException: From TestRendererThrowingException at");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Parse error stack trace for application includes filename along with row,col
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testAppThrowsWithFileName() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        // load the definition in the loader
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        DefDescriptor<?> add = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                ApplicationDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                "<ruau:application '></ruau:application>");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(String.format("/%s/%s.app", add.getNamespace(), add.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        // Verifying common bits of parser (sjsxp vs woodstox) error
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertQuickFixStacktrace("org.ruauframework.throwable.RuueUnhandledException:");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertQuickFixStacktrace(String.format("markup://%s:%s:", add.getNamespace(), add.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertQuickFixStacktrace("[2,19]");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Parse error stack trace for controller includes filename
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testControllerThrowsWithFileName() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        String fileName = "ruautest/parseError";
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        openRaw(fileName + ".cmp");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertQuickFixStacktrace("org.ruauframework.throwable.RuueRuntimeException: ");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertQuickFixStacktrace("ruautest/parseError/parseErrorController.js");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:     * Default handler for ClientOutOfSync will reload the page.
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:    public void testClientOutOfSyncDefaultHandler() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        open("/updateTest/updateWithoutHandling.cmp?text=initial");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        // make a client-side change to the page
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        findDomElement(By.cssSelector(".update")).click();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        waitForElementText(findDomElement(By.cssSelector(".uiOutputText")), "modified", true, 3000);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        assertTrue("Page was not changed after client action",
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                ruauUITestingUtil.getBooleanEval("return !!document.__PageModifiedTestFlag"));
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        // make server POST call with outdated lastmod
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        // Wait till prior prior client-side change is gone indicating page
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        // reload
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        WebDriverWait wait = new WebDriverWait(getDriver(), 30);
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        wait.until(new ExpectedCondition<Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:            public Boolean apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:                return !ruauUITestingUtil.getBooleanEval("return !!document.__PageModifiedTestFlag");
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        // Wait for page to reload and ruau framework initialization
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        ruauUITestingUtil.waitForRuueInit();
ruau/ruau/src/test/java/org/ruauframework/http/ExceptionHandlingUITest.java:        waitForElementText(findDomElement(By.cssSelector(".uiOutputText")), "initial", true, 3000);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:package org.ruauframework.system;
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:import java.io.Reader;
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:import java.security.MessageDigest;
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:import java.security.NoSuchAlgorithmException;
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:import java.util.Arrays;
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:import org.ruauframework.impl.source.StringSource;
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:import org.ruauframework.test.RuueTestCase;
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:import org.ruauframework.util.text.Hash;
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:public class SourceTest extends RuueTestCase {
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:    private final static int DEFAULT_HASHCODE = 3;
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:    public SourceTest(String name) throws NoSuchAlgorithmException {
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:    private int getHashCode(String string) throws NoSuchAlgorithmException {
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        return Arrays.hashCode(MessageDigest.getInstance("MD5").digest(string.getBytes()));
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:    private void assertHash(Hash hash, boolean isSet, int hashCode) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(isSet, hash.isSet());
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(hashCode, hash.hashCode());
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:     * HashingReader does not set hashCode until end of stream.
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:    public void testHashingReaderProgress() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        int expectedHashCode = getHashCode("hi");
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        Hash hash = src.getHash();
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        // hash not set initially
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, false, DEFAULT_HASHCODE);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        // hash still not set
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        Reader reader = src.getHashingReader();
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, false, DEFAULT_HASHCODE);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        // read part of source, hash still not set
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals('h', reader.read());
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, false, DEFAULT_HASHCODE);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        // read more source, hash still not set
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals('i', reader.read());
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, false, DEFAULT_HASHCODE);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        // nothing more to read, hash now set
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(-1, reader.read());
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, true, expectedHashCode);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        // still nothing to read, hash remains same
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(-1, reader.read());
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, true, expectedHashCode);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:     * Hash computed based on bytes read rather than full buffer contents.
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:    public void testHashingReaderLargerBuffer() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        int expectedHashCode = getHashCode("hi");
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        Hash hash = src.getHash();
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        Reader reader = src.getHashingReader();
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        char[] buffer = new char[50];
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(2, reader.read(buffer));
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, false, DEFAULT_HASHCODE);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals("hi", new String(buffer, 0, 2));
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(-1, reader.read(buffer));
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, true, expectedHashCode);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:     * Hashing reader doesn't choke on null source content.
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:    public void testHashingReaderNull() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        int expectedHashCode = getHashCode("");
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        Hash hash = src.getHash();
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        Reader reader = src.getHashingReader();
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        char[] buffer = new char[50];
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(-1, reader.read(buffer));
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, true, expectedHashCode);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(-1, reader.read(buffer));
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, true, expectedHashCode);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:     * Hashing reader doesn't choke on empty source content.
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:    public void testHashingReaderEmpty() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        int expectedHashCode = getHashCode("");
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        Hash hash = src.getHash();
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        Reader reader = src.getHashingReader();
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        char[] buffer = new char[50];
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(-1, reader.read(buffer));
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, true, expectedHashCode);
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertEquals(-1, reader.read(buffer));
ruau/ruau/src/test/java/org/ruauframework/system/SourceTest.java:        assertHash(hash, true, expectedHashCode);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:package org.ruauframework.system;
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:public class LocationTest extends UnitTestCase {
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:    private static final Location testLocationFileOnly = new Location("filenameonly", 10);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:    private static final Location testLocation = new Location("filename", 5, 5, 10);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:    public LocationTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:    public void testLocationStringIntInt() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        Location testLocationLocal = new Location("filename", 5, 5, 10);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertNotNull(testLocationLocal);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:    public void testLocationString() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        Location testLocationFileOnlyLocal = new Location("filename", 10);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertNotNull(testLocationFileOnlyLocal);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:    public void testGetFileName() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals("filenameonly", testLocationFileOnly.getFileName());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals("filename", testLocation.getFileName());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse("filenameonly".equals(testLocation.getFileName()));
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse("filename".equals(testLocationFileOnly.getFileName()));
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals(-1, testLocationFileOnly.getLine());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals(5, testLocation.getLine());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse(-1 == testLocation.getLine());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse(5 == testLocationFileOnly.getLine());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals(-1, testLocationFileOnly.getColumn());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals(5, testLocation.getColumn());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse(-1 == testLocation.getColumn());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse(5 == testLocationFileOnly.getColumn());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals("filenameonly", testLocationFileOnly.toString());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals("filename:5,5", testLocation.toString());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse("filenameonly".equals(testLocation.toString()));
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse("filename:5,5".equals(testLocationFileOnly.toString()));
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:    public void testEquals() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        Location testLocationLocal = new Location("filename", 5, 5, 10);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        Location testLocationFileOnlyLocal = new Location("filenameonly", 10);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals(testLocationLocal, testLocation);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals(testLocationFileOnlyLocal, testLocationFileOnly);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse(testLocationLocal.equals(testLocationFileOnly));
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse(testLocationFileOnlyLocal.equals(testLocation));
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse(testLocationLocal.equals("string"));
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertFalse(testLocationFileOnlyLocal.equals("string"));
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:    public void testHashCode() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        Location testLocationLocal = new Location("filename", 5, 5, 10);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        Location testLocationFileOnlyLocal = new Location("filenameonly", 10);
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals(testLocationLocal.hashCode(), testLocation.hashCode());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertEquals(testLocationFileOnlyLocal.hashCode(), testLocationFileOnly.hashCode());
ruau/ruau/src/test/java/org/ruauframework/system/LocationTest.java:        assertTrue(testLocationFileOnlyLocal.hashCode() != testLocation.hashCode());
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:package org.ruauframework.component.ui.datePickerManager;
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:import org.ruauframework.test.WebDriverTestCase.ExcludeBrowsers;
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * Excluding mobile browsers because they have readOnly text fields. Excluding Safari because it does not acknowledge
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * that a value was placed in the inputText box. It works manually though.
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java: * @author mkohanfars
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:public class DatePickerManagerUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:    public String URL = "/uitest/datePickerManager_Test.cmp";
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:    private final String TEST_DATE_TO_USE = "4/15/2013";
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:    private final String DATE_INPUT_BOX_SEL = "input[class*='date_input_box']";
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:    private final String DATE_ICON_SEL = "//a[@class='datePicker-openIcon display uiInput uiInputDate'][2]";
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:    public DatePickerManagerUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:     * This test is checking for instances where an inputDateTrigger does not have a value attribute set, and that it
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:     * still opens to the correct value
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:    public void testDatepickerOpensToCorrectValue() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        // Making sure the textBox is empty so we always start at the same date
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        element.clear();
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        // Reopening the calendar and Grabbing date directly above it, clicking on it, then verifying that it is the
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        // correct date.
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        openAndCheckDate(By.linkText("8"), "04/08/2013");
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:    private void openAndCheckDate(By loc, String date) {
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        // Grabbing the Date Icon and click on it to open the calendar
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        WebElement element = findDomElement(By.xpath(DATE_ICON_SEL));
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        // Grabbing the date that the datePicker opened to. Then verifying that it is correct
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:        assertEquals("The date selected and the date in the inputText box do not match", date,
ruau/ruau/src/test/java/org/ruauframework/component/ui/datePickerManager/DatePickerManagerUITest.java:                element.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:package org.ruauframework.perfTest;
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:import org.ruauframework.test.WebDriverTestCase.CheckAccessibility;
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java: * Automation to verify UIPerf marks for rerender cycle.
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:@CheckAccessibility(false)
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:public class RerenderMarksUITest extends PerfMetricsTestCase {
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:    public RerenderMarksUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:     * Simple scenario where a top level attribute change initiates a rerender cycle. Subsequent rerender of the same
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:     * component should also be logged in UIPerf.
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:    public void testRerenderMarksHaveComponentName() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        Map<String, String> logStats = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        open("/performanceTest/ui_button.cmp", Mode.CADENCE);
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        clearUIPerfStats();
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        WebElement button = getDriver().findElement(By.cssSelector("button[class~='uiButton']"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        waitForElementTextPresent(getDriver().findElement(By.cssSelector("div[class~='changeCount']")), "1");
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        logStats.putAll(getUIPerfStats(Lists.newArrayList("Rerendering-2: ['markup://performanceTest:ui_button']")));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        assertTrue("Did not find UIPerf marks with component information for Rerender cycle.",
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:                logStats.isEmpty());
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        logStats.clear();
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        waitForElementTextPresent(getDriver().findElement(By.cssSelector("div[class~='changeCount']")), "2");
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        logStats.putAll(getUIPerfStats(Lists.newArrayList("Rerendering-3: ['markup://performanceTest:ui_button']")));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        assertTrue("Did not mark multiple Rerender of same component.",
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:                logStats.isEmpty());
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:     * Scenario where 1. Top level attribute change causes a rerender 2. Attribute value change causes multiple
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:     * component rerender 3. Server action where no component rerender is caused.
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:    public void testRerenderMarksHaveAllComponentNames() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        Map<String, String> logStats = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        open("/performanceTest/perfApp.app", Mode.CADENCE);
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        clearUIPerfStats();
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        // Mark an attribute as dirty at the root component
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        WebElement button = getDriver().findElement(By.cssSelector("button[class~='bkgColor']"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        waitForElementAppear(By.cssSelector("tr[class~='grey']"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        logStats.putAll(getUIPerfStats(Lists.newArrayList("Rerendering-3: ['markup://performanceTest:perfApp']")));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        assertTrue("Rerender of root component not marked in UIPerf.",
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:                logStats.isEmpty());
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        logStats.clear();
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        // Make a value change to cause multiple component rerender, the UIPerf mark should have qualified names of the
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        WebElement innerButton = getDriver().findElement(By.cssSelector("button[class~='changeIteratonIndex']"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        waitForElementDisappear("Iteration never rerendered after end index changed.",
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:                By.xpath("//div[@class='performanceTestIterateBasicData']/table/tr[11]"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        // Changing iteration end index only rerenders iterations with number of items greater than new end index
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        logStats.putAll(getUIPerfStats(Lists
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:                .newArrayList("Rerendering-4: ['markup://performanceTest:perfApp','markup://ruau:iteration','markup://ruau:iteration']")));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        assertTrue("Multiple component Rerender should be marked with all componentNames.",
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:                logStats.isEmpty());
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        logStats.clear();
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        // An action that does not result in a component rerender
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        innerButton = getDriver().findElement(By.cssSelector("button[class~='simpleServerAction']"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        waitForCondition("return $A.getRoot()._simpleServerActionComplete");
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        logStats.putAll(getUIPerfStats(Lists.newArrayList("Rerendering-5: []")));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        assertTrue(
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:                "Server action that causes no components to rerender should be logged but with no component names.",
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:                logStats.isEmpty());
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java://        // Server action should cause no rerender and hence rerender mark should be 0
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java://        assertEquals("", logStats.get("Rerendering-5: []"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/RerenderMarksUITest.java:        logStats.clear();
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java:package org.ruauframework.perfTest;
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * Base class for testing UIPerf performance marks.
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java: * Note that UIPerf is only loaded in PTEST (and Cadence) modes.
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java:public class PerfMetricsTestCase extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java:    public PerfMetricsTestCase(String name) {
ruau/ruau/src/test/java/org/ruauframework/perfTest/PerfMetricsTestCase.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:package org.ruauframework.perfTest;
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java: * Tests to verify contents of Action XHR marks.
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:public class ActionXHRMarksUITest extends PerfMetricsTestCase {
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:    public ActionXHRMarksUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:     * Verify "<BG>" is included in XHR mark when background action is sent.
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:    public void testBackgroundActionMark() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        Map<String, String> logStats = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        open("/test/UIPerfActionMarksTest.cmp", Mode.CADENCE);
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        WebElement button = getDriver().findElement(By.cssSelector(".backgroundButton"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        waitForElementTextPresent(getDriver().findElement(By.cssSelector(".outputText")), "Background action complete");
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        logStats.putAll(getUIPerfStats(Lists.newArrayList("Received Response - XHR 2: ['echoTextBackground<BG>']")));
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        assertTrue("Did not receive background Action XHR mark with Action name and '<BG>' tag.",
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:                logStats.containsKey("Received Response - XHR 2: ['echoTextBackground<BG>']"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:     * Verify action name is appended to end of XHR mark.
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:    public void testForegroundActionMark() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        Map<String, String> logStats = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        open("/test/UIPerfActionMarksTest.cmp", Mode.CADENCE);
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        waitForElementTextPresent(getDriver().findElement(By.cssSelector(".outputText")), "Foreground action complete");
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        logStats.putAll(getUIPerfStats(Lists.newArrayList("Received Response - XHR 2: ['echoText']")));
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        assertTrue("Did not receive foreground Action XHR mark with Action name.",
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:                logStats.containsKey("Received Response - XHR 2: ['echoText']"));
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:     * Multiple actions sent in same XHR. Verify all action names present.
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:    public void testMultipleForegroundActionsMark() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        Map<String, String> logStats = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        open("/test/UIPerfActionMarksTest.cmp", Mode.CADENCE);
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        waitForElementTextPresent(getDriver().findElement(By.cssSelector(".outputText")), "Fore1Fore2Fore3");
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        logStats.putAll(getUIPerfStats(Lists
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:                .newArrayList("Received Response - XHR 2: ['echoText','echoText','echoText']")));
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:        assertTrue("Did not receive foreground Action XHR with multiple Action names appended.",
ruau/ruau/src/test/java/org/ruauframework/perfTest/ActionXHRMarksUITest.java:                logStats.containsKey("Received Response - XHR 2: ['echoText','echoText','echoText']"));
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java:package org.ruauframework;
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java:import junit.framework.TestSuite;
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java:import org.ruauframework.test.TestInventory;
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java:import org.ruauframework.test.TestInventory.Type;
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java:public class RuueWebDriverTestSuite {
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java:    public static TestSuite suite() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java:        TestInventory inventory = ServiceLocator.get().get(TestInventory.class, "ruauTestInventory");
ruau/ruau/src/test/java/org/ruauframework/RuueWebDriverTestSuite.java:        suite.setName("ruau webdriver tests");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:package org.ruauframework.archetype;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import org.apache.http.HttpResponse;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import org.apache.http.client.methods.HttpGet;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import org.ruauframework.util.IOUtil;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import java.io.File;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import java.io.FileReader;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import java.io.InputStream;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import java.io.InputStreamReader;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import java.net.ConnectException;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import java.net.ServerSocket;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * Tests for using simple archetype. Note: These won't pass in Eclipse JUnit
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * runner due to lack of privileges when starting Jetty. Also, the tests will
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * fail the first few times running on a particular machine since mvn will have
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java: * to download dependencies not yet stored in the local repository, and this
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:public class RuueArchetypeSimpleTestMANUAL extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private static class MavenArtifact {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        private final String artifactId;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        private final String groupId;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        private final String version;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        private MavenArtifact(String groupId, String artifactId, String version) {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            this.artifactId = artifactId;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private final static String ARCHETYPE_VERSION = "1.2.001";
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private final static String END_BUILD = "BUILD SUCCESS";
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private final static String archRepo = "http://repo.ruauframework.org/repo";
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private final static String archCatalog = "http://repo.ruauframework.org/libs-release-local/archetype-catalog.xml";
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private final MavenArtifact archetype;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private final MavenArtifact project;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private final String projectPackage;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private File workspace;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    public RuueArchetypeSimpleTestMANUAL(String name) {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        this(RuueArchetypeSimpleTestMANUAL.class.getName(), name, new MavenArtifact(
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                "org.ruauframework.ruau-archetypes", "ruau-archetype-simple", ARCHETYPE_VERSION), new MavenArtifact(
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                "myGroupId", "myArtifactId", "1.0-SNAPSHOT"), ".");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private RuueArchetypeSimpleTestMANUAL(String name, String testMethod, MavenArtifact archetype,
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            MavenArtifact project, String projectPackage) {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        this.archetype = archetype;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        this.projectPackage = projectPackage;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    public void testProjectCreation() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        workspace = new File(System.getProperty("java.io.tmpdir") + File.separator + getName()
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            // create a workspace to place the project files in
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            workspace.mkdirs();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            // generate a project from the archetype
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            Process genProcess = startProcess(workspace, ImmutableList.of("mvn", "archetype:generate",
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                    "-DarchetypeRepository=" + archRepo, "-DarchetypeCatalog=" + archCatalog, "-DarchetypeGroupId="
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                            + archetype.groupId, "-DarchetypeArtifactId=" + archetype.artifactId, "-DarchetypeVersion="
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                            + archetype.version, "-DgroupId=" + project.groupId, "-DartifactId=" + project.artifactId,
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                    "-Dversion=" + project.version, "-Dpackage=" + projectPackage, "-DinteractiveMode=false"));
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            goldMavenOutput(genProcess, "-creation.txt", "Failed to generate artifact!");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            File projectDir = new File(workspace, project.artifactId);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            assertDirectory(projectDir);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            verifyGeneratedResources(projectDir);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            Process buildProcess = startProcess(projectDir, ImmutableList.of("mvn", "install"));
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            goldMavenOutput(buildProcess, "-install.txt", "Failed to build new project!");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            // get a free port for jetty
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            int jettyPort = socket.getLocalPort();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            // start up jetty
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            jettyProcess = startProcess(projectDir, ImmutableList.of("mvn", "jetty:run", "-Djetty.port=" + jettyPort));
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            int status = 0;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                    HttpGet get = obtainGetMethod("/");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                    status = getStatusCode(response);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                    get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                    break;
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                } catch (ConnectException ce) {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                    Thread.sleep(1000);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            assertEquals("Failed to connect to server", HttpStatus.SC_OK, status);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            verifyDefaultDocument();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            verifySampleComponents();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            // if any errors in Jetty requests, let's print out the Jetty
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            // console output for diag before killing the
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                InputStream is = jettyProcess.getInputStream();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                int len = is.available();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                is.read(buf);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        } finally {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                    jettyProcess.exitValue();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                } catch (IllegalThreadStateException e) {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            // cleanup generated workspace
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            IOUtil.delete(workspace);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private void verifyGeneratedResources(File projectDir) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        // assertDirectory(new File(projectDir,
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        // "src/main/java/org/ruauframework"));
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        goldFileText(IOUtil.readText(new FileReader(new File(projectDir, "pom.xml"))), "-pom.xml");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        goldFileText(IOUtil.readText(new FileReader(new File(projectDir, String.format(
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                "src/main/webapp/WEB-INF/components/%1$s/%1$s/%1$s.app", project.artifactId)))), "-sample.app");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private void verifyDefaultDocument() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        HttpGet get = obtainGetMethod("/");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        assertEquals("Failed requesting default doc", HttpStatus.SC_OK, getStatusCode(httpResponse));
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        String response = getResponseBody(httpResponse).replaceAll("\\s", "");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        assertEquals("Unexpected default doc content",
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:                String.format("<script>window.location=\"/%s/%1$s.app\";</script>", project.artifactId), response);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private void verifySampleComponents() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        HttpGet get = obtainGetMethod(String.format("/%1$s/%1$s.app", project.artifactId));
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        assertEquals("Failed requesting sample app", HttpStatus.SC_OK, getStatusCode(httpResponse));
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        goldFileText(body, "-sample.html");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private Process startProcess(File workingDir, List<String> command) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        ProcessBuilder builder = new ProcessBuilder(command);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        builder.redirectErrorStream(true);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        return builder.start();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private void goldMavenOutput(Process process, String suffix, String description) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        int status = process.waitFor();
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        String output = IOUtil.readText(new InputStreamReader(process.getInputStream()));
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        if (status != 0) {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            fail(description + "  Process output:\n" + output);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        int index = output.lastIndexOf(END_BUILD);
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        // ignore path refs
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        output = output.replace(workspace.getAbsolutePath(), "TEMPDIR");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        // ignore download progress updates
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        output = output.replaceAll("\n(?:\\s*\\d+ .?B)+", "");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        output = output.replaceAll("\\s*Downloading: [^\n]+", "");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        output = output.replaceAll("\\s*Downloaded: [^\n]+", "");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:        output = output.replaceAll("\\s*Installing [^\n]+", "");
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:    private void assertDirectory(File file) {
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            fail("Directory not found at " + file.getAbsolutePath());
ruau/ruau/src/test/java/org/ruauframework/archetype/RuueArchetypeSimpleTestMANUAL.java:            fail("Expected a directory for " + file.getAbsolutePath());
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:package org.ruauframework.impl.security;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.apache.http.HttpResponse;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.apache.http.client.methods.HttpPost;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.apache.http.util.EntityUtils;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.ruauframework.http.RuueBaseServlet;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.ruauframework.test.annotation.RuueTestLabels;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * This test verifies that the ruau servlet checks for CSRF token before
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * servicing any requests. All requests to ruau are posted to /ruau and handled
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * by the RuueServlet. A CSRF token is generated with the very first request and
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * sent back to the Client. Every subsequent request from the client has the
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * CSRF token embedded as a request parameter.
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * @hierarchy Ruue.Security
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java: * @userStory a07B0000000DV9S
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:public class CSRFTokenValidationHttpTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:    public CSRFTokenValidationHttpTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:    private Map<String, String> makeBasePostParams() {
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<String, Object> message = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<String, Object> actionInstance = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        actionInstance.put("descriptor",
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:                "java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$getString");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<String, Object> actionParams = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        actionParams.put("param", "some string");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        actionInstance.put("params", actionParams);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<?, ?>[] actions = { actionInstance };
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        message.put("actions", actions);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        String jsonMessage = Json.serialize(message);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<String, String> params = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        params.put("message", jsonMessage);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        return params;
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:     * Test to post a request to ruau servlet without a CSRF token. This test
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:     * tries to request a action defined on a controller. But the request does
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:     * not have a valid CSRF token, hence the request should fail to fetch the
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<String, String> params = makeBasePostParams();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        params.put("ruau.context", String.format("{\"mode\":\"FTEST\",\"fwuid\":\"%s\"}",
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:                Ruue.getConfigAdapter().getRuueFrameworkNonce()));
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        HttpPost post = obtainPostMethod("/ruau", params);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        post.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        assertNotNull(response);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        if (statusCode != HttpStatus.SC_OK || !response.endsWith("/*ERROR*/")) {
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:            fail("Should not be able to post to ruau servlet without a valid CSRF token");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        if (response.startsWith(RuueBaseServlet.CSRF_PROTECT)) {
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<String, Object> json = (Map<String, Object>) new JsonReader().read(response);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        assertEquals(true, json.get("exceptionEvent"));
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<String, Object> event = (Map<String, Object>) json.get("event");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        assertEquals("Expected to see a ruau:systemError event", "markup://ruau:systemError", event.get("descriptor"));
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        assertEquals("Missing parameter value for ruau.token",
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:                ((Map<String, Object>) ((Map<String, Object>) ((Map<String, Object>) (event.get("attributes")))
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:                        .get("value")).get("values")).get("message"));
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Object f = json.get("defaultHandler");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        assertEquals(JsFunction.class, f.getClass());
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        assertEquals("$A.error('unknown error');", ((JsFunction) f).getBody());
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:     * Test to post a request to ruau servlet with an invalid CSRF token. This
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:     * test tries to request a action defined on a controller. But the request
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:     * does not have a valid CSRF token, hence the request should fail to fetch
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:    // W-1064983 - NO CSRF validation currently
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:    public void _testVerifyPostWithInvalidToken() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<String, String> params = makeBasePostParams();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        // Invalid token
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        params.put("ruau.token", "invalid");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        params.put("ruau.context", "{\"mode\":\"FTEST\"}");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        HttpPost post = obtainPostMethod("/ruau", params);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        post.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        if (statusCode != HttpStatus.SC_NOT_FOUND) {
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:            fail("Should not be able to post to ruau servlet with an invalid CSRF token");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:     * Test to post a request to ruau servlet with a valid CSRF token. This test
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:     * tries to request an action defined on a controller.
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:    public void testVerifyPostWithValidToken() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        Map<String, String> params = makeBasePostParams();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        // Valid token
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        params.put("ruau.token", getCsrfToken());
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        params.put("ruau.context", "{\"mode\":\"FTEST\"}");
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        HttpPost post = obtainPostMethod("/ruau", params);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        post.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/impl/security/CSRFTokenValidationHttpTest.java:        assertEquals("Failed to post to ruau servlet", HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:package org.ruauframework.impl.source;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import java.util.HashSet;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import java.util.Set;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import java.util.concurrent.ConcurrentHashMap;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import java.util.concurrent.atomic.AtomicLong;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import java.util.concurrent.locks.Lock;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import java.util.concurrent.locks.ReentrantLock;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import javax.annotation.Nullable;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.ControllerDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.Definition;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.DesignDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.DocumentationDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.EventDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.HelperDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.IncludeDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.LibraryDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.ModelDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.NamespaceDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.ProviderDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.RendererDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.StyleDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.def.ThemeDef;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.system.Parser.Format;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.system.PrivilegedNamespaceSourceLoader;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.system.Source;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.system.SourceListener.SourceMonitorEvent;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import org.ruauframework.system.SourceLoader;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import com.google.common.base.Preconditions;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import com.google.common.collect.ImmutableSet;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * This source loader allows tests to load and unload source from strings.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * This loader is a singleton to ensure that it can be authoritative for the "string" namespace.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * FIXME: W-1933490!!!! The namespaces map is very dangerous here, as it is mutable in ways that ruau does not expect.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * There is a lock to ensure that the read/modify/write operations that are used by source 'put' methods are atomic, but
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * that does not guarantee coherency. In particular, we may lie to ruau and say that we have namespaces that we don't,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * or provide descriptors via find that ruau will not be able to find because it has a fixed idea of the namespaces
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java: * represented. This could be fixed by providing a fixed view into the namespaces provided.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:public class StringSourceLoader implements SourceLoader, PrivilegedNamespaceSourceLoader {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public static final String DEFAULT_NAMESPACE = "string";
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public static final String OTHER_NAMESPACE = "string1";
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public static final String DEFAULT_CUSTOM_NAMESPACE = "cstring";
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public static final String OTHER_CUSTOM_NAMESPACE = "cstring1";
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private static final String DEFAULT_NAME_PREFIX = "thing";
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private static final Set<String> PREFIXES = ImmutableSet.of(
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private static final Set<DefType> DEFTYPES = ImmutableSet.of(
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * A counter that we can use to guarantee unique names across multiple calls to add a source.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private static AtomicLong counter = new AtomicLong();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private static Lock nsLock = new ReentrantLock();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * A helper to hold the singleton instance.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private static class SingletonHolder {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private static final StringSourceLoader INSTANCE = new StringSourceLoader();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public static StringSourceLoader getInstance() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * This map stores all of the sources owned by this loader, split into namespaces.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private final Map<String, Map<DefDescriptor<? extends Definition>, StringSource<? extends Definition>>> namespaces = new ConcurrentHashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private final Map<String, Map<DefDescriptor<? extends Definition>, StringSource<? extends Definition>>> customNamespaces = new ConcurrentHashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private StringSourceLoader() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        namespaces.put(DEFAULT_NAMESPACE,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                new ConcurrentHashMap<DefDescriptor<? extends Definition>, StringSource<? extends Definition>>());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        namespaces.put(OTHER_NAMESPACE,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                new ConcurrentHashMap<DefDescriptor<? extends Definition>, StringSource<? extends Definition>>());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        customNamespaces.put(DEFAULT_CUSTOM_NAMESPACE,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                new ConcurrentHashMap<DefDescriptor<? extends Definition>, StringSource<? extends Definition>>());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        customNamespaces.put(OTHER_CUSTOM_NAMESPACE,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                new ConcurrentHashMap<DefDescriptor<? extends Definition>, StringSource<? extends Definition>>());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * Generate a {@link DefDescriptor} with a unique name. If namePrefix does not contain a namespace, the descriptor
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * will be created in the 'string' namespace. If namePrefix does not contain the name portion (i.e. it is null,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * empty, or just a namespace with the trailing delimiter), 'thing' will be used as the base name.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param namePrefix if non-null, then generate some name with the given prefix for the descriptor.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param defClass the interface of the type definition
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @return a {@link DefDescriptor} with name that is guaranteed to be unique in the string: namespace.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public final <D extends Definition, B extends Definition> DefDescriptor<D> createStringSourceDescriptor(
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            @Nullable String namePrefix, Class<D> defClass, @Nullable DefDescriptor<B> bundle) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        DescriptorInfo descriptorInfo = DescriptorInfo.get(defClass);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        String namespace;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        String name;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        if (namePrefix == null || namePrefix.isEmpty()) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            namespace = DEFAULT_NAMESPACE;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            name = DEFAULT_NAME_PREFIX;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            int idx = namePrefix.indexOf(descriptorInfo.getDelimiter());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                namespace = DEFAULT_NAMESPACE;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                name = namePrefix;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            } else if (idx == namePrefix.length() - 1) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                namespace = namePrefix.substring(0, idx);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                name = DEFAULT_NAME_PREFIX;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                namespace = namePrefix.substring(0, idx);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                name = namePrefix.substring(idx + 1);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        return descriptorInfo.getDescriptor(namespace, name + counter.incrementAndGet(), bundle);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * Load a new definition.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param defClass the definition class that this source will represent
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param contents the source contents
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param namePrefix if non-null, then generate some name with the given prefix for the descriptor.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param isPrivilegedNamespace if true, namespace is privileged
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @return the created {@link StringSource}
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @throws IllegalStateException when loading a definition that already exists with the same descriptor.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public final <D extends Definition> StringSource<D> addSource(Class<D> defClass, String contents,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            @Nullable String namePrefix, boolean isPrivilegedNamespace) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        return putSource(defClass, contents, namePrefix, false, isPrivilegedNamespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * Load a definition.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param defClass the definition class that this source will represent
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param contents the source contents
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param namePrefix if non-null, then generate some name with the given prefix for the descriptor.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param overwrite if true, overwrite any previously loaded definition
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param isPrivilegedNamespace if true, namespace is privileged
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @return the created {@link StringSource}
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public final <D extends Definition> StringSource<D> putSource(Class<D> defClass, String contents,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            @Nullable String namePrefix, boolean overwrite, boolean isPrivilegedNamespace) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        return putSource(defClass, contents, namePrefix, overwrite, isPrivilegedNamespace, null);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * Load a definition.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param defClass the definition class that this source will represent
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param contents the source contents
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param namePrefix if non-null, then generate some name with the given prefix for the descriptor.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param overwrite if true, overwrite any previously loaded definition
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param isPrivilegedNamespace if true, namespace is privileged
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @return the created {@link StringSource}
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public final <D extends Definition, B extends Definition> StringSource<D> putSource(Class<D> defClass, String contents,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            @Nullable String namePrefix, boolean overwrite, boolean isPrivilegedNamespace, @Nullable DefDescriptor<B> bundle) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        DefDescriptor<D> descriptor = createStringSourceDescriptor(namePrefix, defClass, bundle);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        return putSource(descriptor, contents, overwrite, isPrivilegedNamespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * Load a definition.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param descriptor the DefDescriptor key for the loaded definition
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param contents the source contents
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param overwrite if true, overwrite any previously loaded definition
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @return the created {@link StringSource}
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public final <D extends Definition> StringSource<D> putSource(DefDescriptor<D> descriptor, String contents,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            boolean overwrite) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * Load a definition.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param descriptor the DefDescriptor key for the loaded definition
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param contents the source contents
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param overwrite if true, overwrite any previously loaded definition
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param isPrivilegedNamespace if true, namespace is privileged
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @return the created {@link StringSource}
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public final <D extends Definition> StringSource<D> putSource(DefDescriptor<D> descriptor, String contents,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            boolean overwrite, boolean isPrivilegedNamespace) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        Format format = DescriptorInfo.get(descriptor.getDefType().getPrimaryInterface()).getFormat();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        StringSource<D> source = new StringSource<>(descriptor, contents, descriptor.getQualifiedName(), format);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        return putSource(descriptor, source, overwrite, isPrivilegedNamespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private final <D extends Definition> StringSource<D> putSource(DefDescriptor<D> descriptor,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            StringSource<D> source, boolean overwrite, boolean isPrivilegedNamespace) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            String namespace = descriptor.getNamespace();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            Map<DefDescriptor<? extends Definition>, StringSource<? extends Definition>> sourceMap;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            if (isPrivilegedNamespace) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                sourceMap = namespaces.get(namespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                sourceMap = customNamespaces.get(namespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            if (sourceMap == null) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                sourceMap = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                if (isPrivilegedNamespace) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                    namespaces.put(namespace, sourceMap);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                    customNamespaces.put(namespace, sourceMap);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                boolean containsKey = sourceMap.containsKey(descriptor);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                Preconditions.checkState(overwrite || !containsKey);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                if (containsKey) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            sourceMap.put(descriptor, source);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        } finally {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        // notify source listeners of change
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        Ruue.getDefinitionService().onSourceChanged(descriptor, event, null);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * Remove a definition from the source loader.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param descriptor the descriptor identifying the loaded definition to remove.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public final void removeSource(DefDescriptor<?> descriptor) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            String namespace = descriptor.getNamespace();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            Map<DefDescriptor<? extends Definition>, StringSource<? extends Definition>> sourceMap;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            if (namespaces.containsKey(namespace)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                sourceMap = namespaces.get(namespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                Preconditions.checkState(sourceMap != null);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                Preconditions.checkState(sourceMap.remove(descriptor) != null);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                if (!DEFAULT_NAMESPACE.equals(namespace) && !OTHER_NAMESPACE.equals(namespace) && sourceMap.isEmpty()) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                    namespaces.remove(namespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            else if (customNamespaces.containsKey(namespace)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                sourceMap = customNamespaces.get(namespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                Preconditions.checkState(sourceMap != null);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                Preconditions.checkState(sourceMap.remove(descriptor) != null);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                if (!DEFAULT_CUSTOM_NAMESPACE.equals(namespace) && !OTHER_CUSTOM_NAMESPACE.equals(namespace)
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                        && sourceMap.isEmpty()) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                    customNamespaces.remove(namespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        } finally {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        // notify source listeners of change
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        Ruue.getDefinitionService().onSourceChanged(descriptor, SourceMonitorEvent.DELETED, null);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * Remove a definition from the source loader.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:     * @param source the loaded definition to remove.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public final void removeSource(StringSource<?> source) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public Set<DefDescriptor<?>> find(DescriptorFilter matcher) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        Set<DefDescriptor<?>> ret = Sets.newHashSet();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        for (String namespace : namespaces.keySet()) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            if (matcher.matchNamespace(namespace)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                for (DefDescriptor<?> desc : namespaces.get(namespace).keySet()) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                    if (matcher.matchDescriptorNoNS(desc)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                        ret.add(desc);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        for (String namespace : customNamespaces.keySet()) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            if (matcher.matchNamespace(namespace)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                for (DefDescriptor<?> desc : customNamespaces.get(namespace).keySet()) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                    if (matcher.matchDescriptorNoNS(desc)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                        ret.add(desc);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public <D extends Definition> Set<DefDescriptor<D>> find(Class<D> primaryInterface, String prefix,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            String namespace) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        Set<DefDescriptor<D>> ret = Sets.newHashSet();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        Map<DefDescriptor<? extends Definition>, StringSource<? extends Definition>> sourceMap = null;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        if (namespaces.containsKey(namespace)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            sourceMap = namespaces.get(namespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        else if (customNamespaces.containsKey(namespace)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            sourceMap = customNamespaces.get(namespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        if (sourceMap != null) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            for (DefDescriptor<? extends Definition> desc : sourceMap.keySet()) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                if (desc.getDefType().getPrimaryInterface() == primaryInterface && desc.getPrefix().equals(prefix)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                    ret.add((DefDescriptor<D>) desc);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public Set<String> getNamespaces() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        Set<String> allNamespaces = new HashSet<>(namespaces.keySet());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        Set<String> cNamespaces = new HashSet<>(customNamespaces.keySet());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        allNamespaces.addAll(cNamespaces);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        return ImmutableSet.copyOf(allNamespaces);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        Map<DefDescriptor<? extends Definition>, StringSource<? extends Definition>> sourceMap = null;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        if (namespaces.containsKey(descriptor.getNamespace())) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            sourceMap = namespaces.get(descriptor.getNamespace());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        else if (customNamespaces.containsKey(descriptor.getNamespace())) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            sourceMap = customNamespaces.get(descriptor.getNamespace());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        if (sourceMap != null) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            StringSource<D> ret = (StringSource<D>) sourceMap.get(descriptor);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                // return a copy of the StringSource to emulate other Sources (hash is reset)
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            if (descriptor.getDefType().equals(DefType.NAMESPACE)) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                Format format = DescriptorInfo.get(descriptor.getDefType().getPrimaryInterface()).getFormat();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                return new StringSource<>(descriptor, "", descriptor.getQualifiedName(),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                        format);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    private static enum DescriptorInfo {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        APPLICATION(ApplicationDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ":"),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        COMPONENT(ComponentDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ":"),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        EVENT(EventDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ":"),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        LIBRARY(LibraryDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ":"),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        INTERFACE(InterfaceDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ":"),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        LAYOUTS(LayoutsDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ":"),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        NAMESPACE(NamespaceDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ""),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        CONTROLLER(ControllerDef.class, Format.JS, DefDescriptor.JAVASCRIPT_PREFIX, "."),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        HELPER(HelperDef.class, Format.JS, DefDescriptor.JAVASCRIPT_PREFIX, "."),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        MODEL(ModelDef.class, Format.JS, DefDescriptor.JAVASCRIPT_PREFIX, "."),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        PROVIDER(ProviderDef.class, Format.JS, DefDescriptor.JAVASCRIPT_PREFIX, "."),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        RENDERER(RendererDef.class, Format.JS, DefDescriptor.JAVASCRIPT_PREFIX, "."),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        STYLE(StyleDef.class, Format.CSS, DefDescriptor.CSS_PREFIX, "."),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        TESTSUITE(TestSuiteDef.class, Format.JS, DefDescriptor.JAVASCRIPT_PREFIX, "."),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        DOCUMENTATION(DocumentationDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ":"),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        THEME(ThemeDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ":"),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        DESIGN(DesignDef.class, Format.XML, DefDescriptor.MARKUP_PREFIX, ":"),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        INCLUDE(IncludeDef.class, Format.JS, DefDescriptor.JAVASCRIPT_PREFIX, ".");
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private static Map<Class<? extends Definition>, DescriptorInfo> infoMap;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private final Class<? extends Definition> defClass;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private final Format format;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private final String prefix;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private final String delimiter;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private <D extends Definition> DescriptorInfo(Class<D> defClass, Format format, String prefix, String delimiter) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            this.defClass = defClass;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            this.format = format;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            map(defClass, this);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private void map(Class<? extends Definition> defClass, DescriptorInfo info) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            if (infoMap == null) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                infoMap = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            infoMap.put(defClass, info);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private static DescriptorInfo get(Class<? extends Definition> defClass) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            return infoMap.get(defClass);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private <D extends Definition, B extends Definition> DefDescriptor<D> getDescriptor(String namespace,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                String name, DefDescriptor<B> bundle) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            return (DefDescriptor<D>) Ruue.getDefinitionService()
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                            String.format("%s://%s%s%s", prefix, namespace,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                                    delimiter, name == null ? "" : name),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:                            defClass, bundle);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private Format getFormat() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:            return format;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        private String getDelimiter() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:    public boolean isPrivilegedNamespace(String namespace) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceLoader.java:        return namespace != null && namespaces.containsKey(namespace);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:package org.ruauframework.impl.source;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import java.io.IOException;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import java.io.Reader;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import java.io.StringReader;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import java.io.StringWriter;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import java.io.Writer;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import org.ruauframework.def.Definition;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import org.ruauframework.system.Parser.Format;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import org.ruauframework.system.Source;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import org.ruauframework.system.SourceListener.SourceMonitorEvent;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:import org.ruauframework.util.IOUtil;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:public class StringSource<D extends Definition> extends Source<D> {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    private static final long serialVersionUID = 8822758262106180101L;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    private final transient StringData data;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    public StringSource(DefDescriptor<D> descriptor, String contents, String id, Format format) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        super(descriptor, id, format);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        data = new StringData();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:            data.write(contents);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:     * Copy an existing StringSource with shared backing data.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:     * @param original
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    public StringSource(StringSource<D> original) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        super(original.getDescriptor(), original.getSystemId(), original.getFormat());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        data = original.data;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    public long getLastModified() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        return data.lastModified;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    public Reader getReader() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        return new StringReader(data.getBuffer().toString());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        // This looks very strange, but it causes the hash to be calculated. 
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        // We could perhaps do this other ways, but for the moment, we will
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        // force it through a hashing reader.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:            IOUtil.copyStream(getHashingReader(), sw);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        } catch (IOException e) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:            throw new RuueRuntimeException(e);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        return data;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    /** StringSource returns a "URL" like "markup://string:foo". */
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        return getSystemId(); // e.g. "markup://string:thing"
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    public boolean exists() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        return data.getBuffer().length() > 0;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    public boolean addOrUpdate(CharSequence newContents) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:            data.getBuffer().setLength(0);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:            data.write(newContents.toString());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:            Ruue.getDefinitionService().onSourceChanged(getDescriptor(), SourceMonitorEvent.CHANGED, null);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    public void clearContents() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        data.getBuffer().setLength(0);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        data.touch();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        Ruue.getDefinitionService().onSourceChanged(getDescriptor(), SourceMonitorEvent.CHANGED, null);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    public long setLastModified(long lastModified) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        long previous = data.lastModified;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        data.lastModified = lastModified;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:    private class StringData extends StringWriter {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        long lastModified = System.currentTimeMillis();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        public void write(char[] cbuf) throws IOException {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        public void write(char[] cbuf, int off, int len) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:        private void touch() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSource.java:            lastModified = System.currentTimeMillis();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:package org.ruauframework.impl.source;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:import java.io.IOException;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:import org.ruauframework.def.Definition;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java: * A DefDescriptor for Definitions that aren't normally retrieved from the DefinitionService
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:public class StringSourceDescriptor<D extends Definition> implements DefDescriptor<D> {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private static final long serialVersionUID = -1192915630107573061L;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private final String namespace;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private final String name;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private final String qualifiedName;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private final String descriptorName;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private final String prefix;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private final String nameParameters;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private final DefType defType;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private D definition;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    private final int hashCode;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public StringSourceDescriptor(String namespace, String name, String qualifiedName, String descriptorName,
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:            String prefix, String nameParameters, DefType defType, D definition) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        this.namespace = namespace;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        this.name = name;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        this.qualifiedName = qualifiedName;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        this.descriptorName = descriptorName;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        this.nameParameters = nameParameters;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        this.hashCode = Lists.<String> newArrayList(name == null ? null : name.toLowerCase(),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:                namespace == null ? null : namespace.toLowerCase(),
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:                prefix == null ? null : prefix.toLowerCase(), defType.ordinal() + "").hashCode();
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public void serialize(Json json) throws IOException {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        json.writeValue(qualifiedName);
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public int compareTo(DefDescriptor<?> other) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        int value;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        value = getQualifiedName().compareToIgnoreCase(other.getQualifiedName());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        if (value != 0) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:            return value;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        return getDefType().compareTo(other.getDefType());
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public String getName() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        return name;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public String getQualifiedName() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        return qualifiedName;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public String getDescriptorName() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        return descriptorName;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public String getNamespace() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        return namespace;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public String getNameParameters() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        return nameParameters;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public boolean isParameterized() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        return nameParameters != null;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public boolean exists() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public final int hashCode() {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        return hashCode;
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:    public boolean equals(Object o) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        if (o instanceof DefDescriptor) {
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:            return getDefType() == e.getDefType() && name.equalsIgnoreCase(e.getName())
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:                    && (namespace == null ? e.getNamespace() == null : namespace.equalsIgnoreCase(e.getNamespace()))
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:                    && (prefix == null ? e.getPrefix() == null : prefix.equalsIgnoreCase(e.getPrefix()));
ruau/ruau/src/test/java/org/ruauframework/impl/source/StringSourceDescriptor.java:        return false;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:package org.ruauframework.impl;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.apache.http.HttpHeaders;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.apache.http.HttpResponse;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.apache.http.client.methods.HttpGet;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.apache.http.client.methods.HttpPost;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.apache.http.client.methods.HttpRequestBase;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.ruauframework.http.RuueBaseServlet;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.ruauframework.test.client.UserAgent;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * Test class to perform sanity tests on RuueServlet with all possible modes.
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * @hierarchy Ruue.Configuration
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java: * @userStory a07B0000000Dtmj
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:public class RuueFormatsHttpTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    private final String componentTag = "&ruau.tag=ruautest:test_TokenValidation";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    private final String quickFixComponentTag = "&ruau.tag=foo:bar";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    private static Map<Format, String> FORMAT_CONTENTTYPE = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    static {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        FORMAT_CONTENTTYPE.put(Format.JSON, Json.MIME_TYPE + ";charset=" + RuueBaseServlet.UTF_ENCODING);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        FORMAT_CONTENTTYPE.put(Format.JS, "text/javascript;charset=" + RuueBaseServlet.UTF_ENCODING);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        FORMAT_CONTENTTYPE.put(Format.HTML, "text/html;charset=" + RuueBaseServlet.UTF_ENCODING);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        FORMAT_CONTENTTYPE.put(Format.CSS, "text/css;charset=" + RuueBaseServlet.UTF_ENCODING);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        FORMAT_CONTENTTYPE.put(Format.MANIFEST, "text/cache-manifest;charset=" + RuueBaseServlet.UTF_ENCODING);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        FORMAT_CONTENTTYPE.put(Format.SVG, "image/svg+xml;charset=" + RuueBaseServlet.UTF_ENCODING);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    public RuueFormatsHttpTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    private void requestAndAssertContentType(HttpRequestBase method, String url, Format format, boolean expectHeaders)
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        String contentType = response.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        // Eliminate the spaces separating the content Type specification
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        contentType = RuueTextUtil.arrayToString(contentType.split(";\\s+"), ";", -1, false);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        assertEquals(String.format(
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                "Received wrong Content-Type header%nURL(or Action): %s%nContent:%s%nRequest type:%s", url,
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getResponseBody(response), method.getMethod()), FORMAT_CONTENTTYPE.get(format), contentType);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        assertDefaultAntiClickjacking(response, expectHeaders, false);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    private void getOnRuueServlet(Format f, String tag) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        String url = String.format("/ruau?%s&ruau.mode=FTEST&ruau.format=%s", tag, f.toString());
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        requestAndAssertContentType(get, url, f, tag.length() > 0);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    private void postOnRuueServlet(Format f, Boolean causeException) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        Map<String, Object> message = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        Map<String, Object> actionInstance = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        actionInstance.put("descriptor",
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                "java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$getString");
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        Map<?, ?>[] actions = { actionInstance };
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        message.put("actions", actions);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        String jsonMessage = Json.serialize(message);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        Map<String, String> params = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        params.put("message", jsonMessage);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        if (!causeException) {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            params.put("ruau.token", getCsrfToken());
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        params.put("ruau.context", String.format("{\"mode\":\"FTEST\",\"fwuid\":\"%s\"}",
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                Ruue.getConfigAdapter().getRuueFrameworkNonce()));
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        params.put("ruau.format", "JSON");
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        HttpPost post = obtainPostMethod("/ruau", params);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                "java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$getString", f,
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                !causeException);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:     * Basic sanity testing for all Valid Formats that can be specified for RuueServlet.
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    public void testResponseHeadersFromRuueServlet() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        for (Format format : Format.values()) {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            switch (format) {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case JSON:
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Valid component post request
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                postOnRuueServlet(format, false);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                postOnRuueServlet(format, true);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case HTML:
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Valid component get request
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueServlet(format, this.componentTag);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueServlet(format, this.quickFixComponentTag);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueServlet(format, "");
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case JS:// No implementation for this format
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case CSS:// No implementation for this format
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case SVG:// No implementation for this format
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case MANIFEST:// No implementation for this format
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            default:
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                fail(String.format("A new format value (%s) was added, update this test", format));
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    private void getOnRuueResourceServlet(Format f, String url) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:     * Sanity testing for all valid formats that can be specified for RuueResourceServlet.
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:    public void testResponseHeadersFromRuueResourceServlet() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        String modeAndPreload;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:        for (Format format : Format.values()) {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            switch (format) {
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case JSON:
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Valid preload namespace
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                modeAndPreload = "{'mode':'DEV','preloads':['preloadTest']}";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                url = "/l/" + RuueTextUtil.urlencode(modeAndPreload) + "/app.json?ruau.token=+"
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueResourceServlet(format, url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Cause exception by not specifying CSRF token
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // The response looks much like a JSON string as much as it
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // looks like a piece of JS
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                modeAndPreload = "{'mode':'DEV','preloads':['preloadTest']}";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                url = "/l/" + RuueTextUtil.urlencode(modeAndPreload) + "/app.json";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueResourceServlet(format, url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case HTML:// No implementation for this format
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case JS:
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Valid preload namespace
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                modeAndPreload = "{'mode':'DEV','preloads':['preloadTest']}";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                url = "/l/" + RuueTextUtil.urlencode(modeAndPreload) + "/app.js";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueResourceServlet(format, url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Bad preload namespace, should cause an exception in
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // RuueResourceServlet.
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // But the response should still be in JavaScript mime type
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                modeAndPreload = "{'mode':'DEV','preloads':['test']}";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                url = "/l/" + RuueTextUtil.urlencode(modeAndPreload) + "/app.js";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueResourceServlet(format, url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case CSS:
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Valid preload namespace
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                modeAndPreload = "{'mode':'DEV','preloads':['preloadTest']}";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                url = "/l/" + RuueTextUtil.urlencode(modeAndPreload) + "/app.css";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueResourceServlet(format, url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Bad preload namespace, should cause an exception in
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // RuueResourceServlet.
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                modeAndPreload = "{'mode':'DEV','preloads':['test']}";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                url = "/l/" + RuueTextUtil.urlencode(modeAndPreload) + "/app.css";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueResourceServlet(format, url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case MANIFEST:
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                String appManifestUrl = "{'mode':'DEV','app':'appCache:testApp'}";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                url = "/l/" + RuueTextUtil.urlencode(appManifestUrl) + "/app.manifest";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueResourceServlet(format, url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            case SVG:
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Valid preload namespace
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                modeAndPreload = "{'mode':'DEV','preloads':['preloadTest']}";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                url = "/l/" + RuueTextUtil.urlencode(modeAndPreload) + "/app.svg";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueResourceServlet(format, url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // Bad preload namespace, should cause an exception in
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                // RuueResourceServlet.
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                modeAndPreload = "{'mode':'DEV','preloads':['test']}";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                url = "/l/" + RuueTextUtil.urlencode(modeAndPreload) + "/app.svg";
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                getOnRuueResourceServlet(format, url);
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            default:
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                fail(String.format("A new format value (%s) was added, update this test", format));
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/impl/RuueFormatsHttpTest.java:            modeAndPreload = null;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:package org.ruauframework.impl.caching;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.apache.http.HttpResponse;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.apache.http.client.methods.HttpPost;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.http.RuueBaseServlet;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.test.annotation.RuueTestLabels;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * Test class to verify that clientside cache is invalidated by Ruue Servlet.
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * @hierarchy Ruue.Caching
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java: * @userStorySyncIdOrName a07B0000000Dj10
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:@ThreadHostileTest("relies on getLastMod")
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:public class RuueServletCacheInvalidationHttpTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:    public RuueServletCacheInvalidationHttpTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:     * Verify that RuueServlet returns an error code in the response body when
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:     * an expired lastmod timestamp is used in a POST request.
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        RuueContext ctx = startContext("ruautest:test_TokenValidation", ComponentDef.class);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        HttpResponse httpResponse = perform(post);                                                        // days
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        post.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        assertTrue("Ruue servlet should return 200.", statusCode == HttpStatus.SC_OK);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        assertOutdated(response);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:     * Verify that RuueServlet returns usable content in the response body when
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:     * valid lastmod timestamp is used in a POST request.
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:    public void testPostRequestWithValidUID() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        RuueContext ctx = startContext("ruautest:test_TokenValidation", ComponentDef.class);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        HttpPost post = getPostMethod(ctx, false);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        post.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        if (HttpStatus.SC_OK != statusCode) {
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:            fail(String.format("Unexpected status code <%s>, expected <%s>, response:%n%s", statusCode,
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:                    HttpStatus.SC_OK, response));
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        assertTrue("RuueServlet did not accept lastMod param.", response.startsWith(RuueBaseServlet.CSRF_PROTECT));
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:     * Convenience method to create a POST object to invoke a server side action.
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:     * This method is very specific to this test, please do not use it for any
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:     * @param ctx
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:     * @param modified
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:    private HttpPost getPostMethod(RuueContext ctx, boolean modified) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        Map<String, Object> message = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        Map<String, Object> actionInstance = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        actionInstance.put("descriptor",
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:                "java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$getString");
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        Map<String, Object> actionParams = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        actionParams.put("param", "some string");
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        actionInstance.put("params", actionParams);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        @SuppressWarnings("rawtypes")
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        Map[] actions = { actionInstance };
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        message.put("actions", actions);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        String jsonMessage = Json.serialize(message);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        Map<String, String> params = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        params.put("message", jsonMessage);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        params.put("ruau.token", getCsrfToken());
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        String serContext = getRuueTestingUtil().getSerializedRuueContextWithModifiedUID(ctx, modified);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        params.put("ruau.context", serContext);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        return obtainPostMethod("/ruau", params);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:    private RuueContext startContext(String qualifiedName, Class<? extends BaseComponentDef> clazz) {
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        return Ruue.getContextService().startContext(Mode.PROD, Format.JSON, Authentication.AUTHENTICATED,
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:                Ruue.getDefinitionService().getDefDescriptor(qualifiedName, clazz));
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:    private void assertOutdated(String response) {
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:            fail("respose should end with " + "/*ERROR*/");
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        Map<String, Object> json = (Map<String, Object>) new JsonReader().read(jsonString);
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        Map<String, Object> event = (Map<String, Object>) json.get("event");
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:            if (descriptor != null && descriptor.equals("markup://ruau:clientOutOfSync")) {
ruau/ruau/src/test/java/org/ruauframework/impl/caching/RuueServletCacheInvalidationHttpTest.java:        fail("unexpected response: " + response);
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java:package org.ruauframework.impl.java.provider;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java:import org.ruauframework.def.ComponentConfigProvider;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java:import org.ruauframework.system.Annotations.Provider;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java: * A provider that doesn't provide anything - used for tests.
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/EmptyConfigProvider.java:public class EmptyConfigProvider implements ComponentConfigProvider {
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:package org.ruauframework.impl.java.provider;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import java.util.Iterator;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import org.ruauframework.def.ComponentConfigProvider;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import org.ruauframework.instance.Attribute;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import org.ruauframework.instance.AttributeSet;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:public class MockConfigProvider implements ComponentConfigProvider {
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:        BaseComponent<?, ?> component = Ruue.getContextService().getCurrentContext().getCurrentComponent();
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:        config.setDescriptor(Ruue.getDefinitionService().getDefDescriptor("markup://ui:outputText", ComponentDef.class)); 
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:        String text = (String)component.getAttributes().getValue("providedAttribute");
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:        Map<String, Object> attributes = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:        attributes.put("value", text);
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:        config.setAttributes(attributes);
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:        //Tamper the current component and remove unwanted attributes
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:    static void removeAttribute(BaseComponent<?,?> component, String name) throws QuickFixException {
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:            if (componentAttributes.getValue(name) != null) {
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:                Iterator<Attribute> iterator = componentAttributes.iterator();
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:                while (iterator.hasNext()) {
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:                    Attribute attribute = iterator.next();
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:                    if (attribute.getName().equalsIgnoreCase(name)) {
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:                        iterator.remove();
ruau/ruau/src/test/java/org/ruauframework/impl/java/provider/MockConfigProvider.java:                        break;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:package org.ruauframework.instance;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import static org.mockito.Mockito.verify;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import static org.mockito.Mockito.verifyZeroInteractions;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import java.io.IOException;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import org.ruauframework.adapter.ConfigAdapter;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import org.ruauframework.def.Definition;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import org.ruauframework.test.ServiceLocatorMocker;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import org.ruauframework.util.ServiceLoader;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java: * Unit tests for InstanceStack.java.
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:public class InstanceStackTest extends UnitTestCase {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public InstanceStackTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:     * setUp mocks Ruue.getConfigAdapter().isPrivilegedNamespace().
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	 mci = Mockito.mock(ConfigAdapter.class);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	 Mockito.when(mci.isPrivilegedNamespace((String)Mockito.any())).thenReturn(true);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	 ServiceLoader msl = ServiceLocatorMocker.mockServiceLocator();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	 Mockito.when(msl.get(ConfigAdapter.class)).thenReturn(mci);    	 
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:     * tearDown un-mocks Ruue.getConfigAdapter().isPrivilegedNamespace().
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void tearDown() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        ServiceLocatorMocker.unmockServiceLocator();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        super.tearDown();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    // Simplified implementation of Instance for testing. We really only care about the path string.
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    // FIXME: This shoule be a mock.
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    private class TestInstance implements Instance<Definition> {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        private final String path;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        protected final DefDescriptor<Definition> descriptor;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        private DefDescriptor<Definition> createMockDescriptor(String namespace) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        	@SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:			DefDescriptor<Definition> desc = Mockito.mock(DefDescriptor.class);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        	Mockito.when(desc.getNamespace()).thenReturn(namespace);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        public TestInstance() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            this.path = "testInstance";
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            this.descriptor = createMockDescriptor("ruau");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        public TestInstance(String path) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        	this.path = path;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        	this.descriptor = createMockDescriptor("ruau");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        public TestInstance(String namespace, String name) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        	this.path = namespace;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        	this.descriptor = createMockDescriptor(namespace);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        public String getPath() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            return this.path;
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        public void serialize(Json json) throws IOException {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testPath() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("InstanceStack constructor should set path to base", "/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        Instance<?> ti = new TestInstance();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(ti, ti.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        // Set and clear attributes
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeName("attr1");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Setting attribute name should append name to path", "/*[0]/attr1", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.clearAttributeName("attr1");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Clearing attribute name should remove name from path", "/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeName("body");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Setting attribute name as body should append '*' to path", "/*[0]/*", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.clearAttributeName("body");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeName("realbody");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Setting attribute name as realbody should append '+' to path", "/*[0]/+", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.clearAttributeName("realbody");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        // Set and clear indexes
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeName("attr2");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeIndex(42);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("/*[0]/attr2[42]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.clearAttributeIndex(42);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("/*[0]/attr2", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testPopInstanceToTopIncrementsIndex() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("InstanceStack constructor should set path to base", "/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance ti = new TestInstance();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(ti, ti.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.popInstance(ti);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Popping to top of stack should increment index", "/*[1]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(ti, ti.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.popInstance(ti);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Popping to top of stack should increment index", "/*[2]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testMarkParentNoCurrentInstance() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("InstanceStack constructor should set path to base", "/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance parent = new TestInstance("parentBase");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.markParent(parent);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Marking parent should set path to the parent's path", "parentBase", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.clearParent(parent);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Clearing parent should reset path to original base path", "/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testMarkParentMultipleTimes() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("InstanceStack constructor should set path to base", "/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance parent = new TestInstance("parent");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.markParent(parent);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Marking parent should set path to the parent's path", "parent", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.markParent(parent);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Marking additional parent should not update path", "parent", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.clearParent(parent);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("parent", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.clearParent(parent);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Clearing both parents should reset path to original base path", "/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testErrorWrongParent() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        // Mark a new parent without clearing the first
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.markParent(new TestInstance("parent"));
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            iStack.markParent(new TestInstance("different parent"));
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            fail("Expected error when marking parent that's different than the current instance");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        } catch (Exception expected) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            assertExceptionMessage(expected, RuueRuntimeException.class, "Don't know how to handle setAttribute here");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        // Clear an instance that hasn't been marked as a parent
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.markParent(new TestInstance("parent"));
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            iStack.clearParent(new TestInstance("different parent"));
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            fail("Expected error when clearing parent that's different than the current instance");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        } catch (Exception expected) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            assertExceptionMessage(expected, RuueRuntimeException.class, "mismatched clear parent");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testErrorPushPopDifferentInstances() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance ti = new TestInstance("instance1");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(ti, ti.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            iStack.popInstance(new TestInstance("instance2"));
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            fail("Expected error when trying to pop different instance than previously pushed");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        } catch (Exception expected) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            assertExceptionMessage(expected, RuueRuntimeException.class, "mismatched instance pop");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testErrorSetAttributeNameWithoutClearing() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance ti = new TestInstance("instance");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(ti, ti.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeName("first");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            iStack.setAttributeName("second");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            fail("Expected error when setting second attribute without clearing first");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        } catch (Exception expected) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            assertExceptionMessage(expected, RuueRuntimeException.class, "Setting name illegally");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance ti = new TestInstance("instance");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(ti, ti.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            iStack.setAttributeIndex(1);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            fail("Expected error when setting attribute index without setting attribute name first");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        } catch (Exception expected) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            assertExceptionMessage(expected, RuueRuntimeException.class, "no name when index set");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testErrorClearIndexWithoutSettingIndex() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance ti = new TestInstance();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(ti, ti.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeName("attribute");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            iStack.clearAttributeIndex(1);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            fail("Expected error when clearing attribute index before setting an index");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        } catch (Exception expected) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            assertExceptionMessage(expected, RuueRuntimeException.class, "mismatched clearAttributeIndex");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testErrorClearIndexWhileDifferentIndexSet() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance ti = new TestInstance();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(ti, ti.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeName("attribute");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeIndex(11);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            iStack.clearAttributeIndex(22);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            fail("Expected error when clearing attribute index when different index is set");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        } catch (Exception expected) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            assertExceptionMessage(expected, RuueRuntimeException.class, "mismatched clearAttributeIndex");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testErrorSetIndexWithoutClearingPreviousIndex() {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance ti = new TestInstance();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(ti, ti.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeName("attribute");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.setAttributeIndex(42);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            iStack.setAttributeIndex(43);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            fail("Expected error when setting a new attribute index without clearing previous one");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        } catch (Exception expected) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:            assertExceptionMessage(expected, RuueRuntimeException.class, "missing clearAttributeIndex");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    private BaseComponent<?, ?> getComponentWithPath(final String path) {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        BaseComponent<?, ?> comp = Mockito.mock(BaseComponent.class);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        Mockito.when(comp.getPath()).thenReturn(path);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        Mockito.when(comp.hasLocalDependencies()).thenReturn(true);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        Map<String, BaseComponent<?, ?>> comps = iStack.getComponents();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertNotNull("Components should never be null", comps);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Components should empty", 0, comps.size());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        BaseComponent<?, ?> x = getComponentWithPath("a");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.registerComponent(x);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        comps = iStack.getComponents();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertNotNull("Components should never be null", comps);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Components should have one component", 1, comps.size());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Components should have x", x, comps.get("a"));
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        BaseComponent<?, ?> y = getComponentWithPath("b");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.registerComponent(y);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        comps = iStack.getComponents();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertNotNull("Components should never be null", comps);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Components should have two components", 2, comps.size());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Components should have x", x, comps.get("a"));
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Components should have y", y, comps.get("b"));
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("nextId should be initialized to 1", 1, iStack.getNextId());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("nextId should increment", 2, iStack.getNextId());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("nextId should increment again", 3, iStack.getNextId());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:     * Verify registered components are serialized in alphabetical order
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testSerializeAsPart() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        Json jsonMock = Mockito.mock(Json.class);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        BaseComponent<?, ?> a = getComponentWithPath("a");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        BaseComponent<?, ?> b = getComponentWithPath("b");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        BaseComponent<?, ?> c = getComponentWithPath("c");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.registerComponent(b);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.registerComponent(c);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.registerComponent(a);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.serializeAsPart(jsonMock);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        List<BaseComponent<?, ?>> sorted = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        sorted.add(a);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        sorted.add(b);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        sorted.add(c);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        verify(jsonMock).writeMapKey("components");
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        verify(jsonMock).writeArray(sorted);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:     * Verify nothing serialized if no registered components
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    public void testSerializeAsPartNoComponents() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        Json jsonMock = Mockito.mock(Json.class);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.serializeAsPart(jsonMock);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertEquals("Components should empty when no registered components", 0, iStack.getComponents().size());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        verifyZeroInteractions(jsonMock);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	String namespace_Priv = "previlege";
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	String namespace_UnPriv = "unprevilege";
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	String name1 = "one";
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	String name2 = "two";
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	String name3 = "three";
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	String name4 = "four";
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	Mockito.when(mci.isPrivilegedNamespace(namespace_Priv)).thenReturn(true);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	Mockito.when(mci.isPrivilegedNamespace(namespace_UnPriv)).thenReturn(false);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    	//create empty stack, sanity check
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        InstanceStack iStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertFalse("stack should has topUnprivileged=null at the beginning", iStack.isUnprivileged());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        //start pushing
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance one = new TestInstance(namespace_Priv,name1);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(one, one.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertFalse("topUnprivileged is still null after pushing in one previleged instance:instance1", iStack.isUnprivileged());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance two = new TestInstance(namespace_UnPriv,name2);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(two, two.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertTrue("topUnprivileged should become first unprivilege instance:instance2", iStack.isUnprivileged());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance three = new TestInstance(namespace_Priv,name3);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(three, three.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertTrue("topUnprivileged should remain unchanged after pushing in a new privilege instance:instance3", iStack.isUnprivileged());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        TestInstance four = new TestInstance(namespace_UnPriv,name4);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.pushInstance(four, four.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertTrue("topUnprivileged should be unchanged after pushing in a new unprivilege instance:instance4", iStack.isUnprivileged());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        //start poping
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.popInstance(four);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertTrue("topUnprivileged should be unchanged after poping out unprivilege instance:instance4", iStack.isUnprivileged());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.popInstance(three);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertTrue("topUnprivileged should be unchanged after poping out privilege instance:instance3", iStack.isUnprivileged());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.popInstance(two);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertFalse("topUnprivileged should become null after poping out first unprivilege instance:instance2", iStack.isUnprivileged());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        iStack.popInstance(one);
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:        assertFalse("topUnprivileged should be unchanged(null) after poping out instance1", iStack.isUnprivileged());
ruau/ruau/src/test/java/org/ruauframework/instance/InstanceStackTest.java:    private ConfigAdapter mci;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:package org.ruauframework.instance;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:import java.lang.reflect.InvocationTargetException;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:import java.lang.reflect.Method;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:public class ActionDelegateTest extends UnitTestCase {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:    public ActionDelegateTest(String name) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:    // A class to remove the 'abstract'
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:    private static class MyDelegateAction extends ActionDelegate {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        public MyDelegateAction(Action delegate) {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:            super(delegate);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:    private void oneCall(Map<String, Method> methodMap, Map<String,Boolean> calledMap, String name,
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:            Object... args) throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        Action spied = Mockito.mock(Action.class);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        Action delegate = new MyDelegateAction(spied);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:            methodMap.get(name).invoke(delegate, args);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        } catch (InvocationTargetException ite) {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:            throw ite.getTargetException();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        methodMap.get(name).invoke(verified, args);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        calledMap.put(name, Boolean.TRUE);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:    public void testCallsFunctions() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        Map<String,Method> methodMap = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        Map<String,Boolean> calledMap = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        for (Method m : Action.class.getMethods()) {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:            assertFalse("Duplicate method name "+m.getName(), methodMap.containsKey(m.getName()));
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:            methodMap.put(m.getName(), m);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:            calledMap.put(m.getName(), Boolean.FALSE);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "getDescriptor");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "getPath");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "serialize", (Object)null);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "getId");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "setId", new String("id"));
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "run");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "add", (Object)null);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "getActions");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "getReturnValue");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "getState");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "getErrors");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "logParams", (Object)null);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "isStorable");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "setStorable");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "getParams");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        oneCall(methodMap, calledMap, "getInstanceStack");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:        for (Method m : Action.class.getMethods()) {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionDelegateTest.java:            assertTrue(m.getName()+"was not called", calledMap.get(m.getName()));
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:package org.ruauframework.instance;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import java.io.IOException;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import org.ruauframework.def.ActionDef;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import org.ruauframework.def.ControllerDef;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import org.ruauframework.system.LoggingContext;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import org.ruauframework.throwable.RuueExecutionException;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:public class AbstractActionImplTest extends UnitTestCase {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    public AbstractActionImplTest(String name) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    // A class to remove the 'abstract'
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    // We do not verify any of the actual functions here, except to use run to change the state.
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    private static class MyAction extends AbstractActionImpl<ActionDef> {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        public MyAction(DefDescriptor<ControllerDef> controllerDescriptor, ActionDef actionDef,
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:                Map<String, Object> paramValues) {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:            super(controllerDescriptor, actionDef, paramValues);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        public void run() throws RuueExecutionException {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        public Object getReturnValue() {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        public void serialize(Json json) throws IOException {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        public void setState(State state) {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:            this.state = state;
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        ActionDef def = Mockito.mock(ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("id should be initialized to null", null, test.getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.setId("a");
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("setId should work the first time.", "a", test.getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("setId should work a second time.", "b", test.getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("setId should work a third time.", null, test.getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    private Action getActionWithId(String id) {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        ActionDef def = Mockito.mock(ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        ActionDef def = Mockito.mock(ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        List<Action> actions = test.getActions();
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertNotNull("Actions should never be null", actions);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Actions should empty", 0, actions.size());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        List<Action> newActions = Lists.newArrayList(getActionWithId("a"), getActionWithId("b"));
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.add(newActions);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        actions = test.getActions();
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertNotNull("Actions should never be null", actions);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Actions should be length 2", 2, actions.size());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Action 'a' should be first", "a", actions.get(0).getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Action 'b' should be first", "b", actions.get(1).getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        newActions = Lists.newArrayList(getActionWithId("c"), getActionWithId("d"));
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.add(newActions);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        actions = test.getActions();
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertNotNull("Actions should never be null", actions);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Actions should be length 4", 4, actions.size());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Action 'a' should be first", "a", actions.get(0).getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Action 'b' should be first", "b", actions.get(1).getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Action 'c' should be first", "c", actions.get(2).getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Action 'd' should be first", "d", actions.get(3).getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    public void testState() {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        ActionDef def = Mockito.mock(ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("state should be initialized to new", Action.State.NEW, test.getState());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.setState(Action.State.RUNNING);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("state should be able to change", Action.State.RUNNING, test.getState());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    public void testStorable() {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        ActionDef def = Mockito.mock(ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("isStorable should be initialized to false", false, test.isStorable());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.setStorable();
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("isStorable should change on setStorable", true, test.isStorable());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("id should change on setStorable", "s", test.getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.setStorable();
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("isStorable should not change on second setStorable", true, test.isStorable());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("id should change on second setStorable", "s", test.getId());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        ActionDef def = Mockito.mock(ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        DefDescriptor<ActionDef> expectedDesc = Mockito.mock(DefDescriptor.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertSame("descriptor should work", expectedDesc, test.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    public void testParams() {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        Map<String, Object> params = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        ActionDef def = Mockito.mock(ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        Action test = new MyAction(null, def, params);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        LoggingContext.KeyValueLogger logger = Mockito.mock(LoggingContext.KeyValueLogger.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertSame("params should be initialized", params, test.getParams());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        params.put("a", "b");
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.logParams(logger);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        // logable values of null should avoid calls to the logger.
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        Mockito.verifyNoMoreInteractions(logger);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        Mockito.when(def.getLoggableParams()).thenReturn(Lists.newArrayList("a", "b"));
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.logParams(logger);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        Mockito.verify(logger, Mockito.times(1)).log("a", "b");
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        Mockito.verifyNoMoreInteractions(logger);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("params can be initialized to null", null, test.getParams());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.logParams(logger);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        // params of null should avoid calls to the logger.
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        Mockito.verifyNoMoreInteractions(logger);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    public void testInstanceStack() {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        ActionDef def = Mockito.mock(ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        InstanceStack iStack = test.getInstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Instance stack should be initialized without action ID as path", "/*[0]", iStack.getPath());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        assertEquals("Subsequent calls to getInstanceStack should return same InstanceStack", iStack,
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:                test.getInstanceStack());
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:     * Verify we can set an Id after we get an InstaceStack. Used to threw Exception, now valid.
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:    public void testSetIdWithInstanceStackSet() {
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        ActionDef def = Mockito.mock(ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/instance/AbstractActionImplTest.java:        test.getInstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:package org.ruauframework.instance;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:import static org.mockito.Matchers.any;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:import static org.mockito.Matchers.anyListOf;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:import static org.mockito.Mockito.*;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:import java.util.Collections;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:public class ActionWithKeyOverrideTest extends UnitTestCase {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:    public ActionWithKeyOverrideTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        } catch (IllegalArgumentException iae) {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:            assertEquals(ActionWithKeyOverride.ERROR_ACTIONASKEY_MISSING, iae.getMessage());
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        final Action actionAsKey = mock(Action.class);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:            new ActionWithKeyOverride(actionAsKey, null);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        } catch (IllegalArgumentException iae) {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:            assertEquals(ActionWithKeyOverride.ERROR_ACTIONTOEXECUTE_MISSING, iae.getMessage());
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        final Action actionAsKey = mock(Action.class);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        final Action actionToExecute = mock(Action.class);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        Action action = new ActionWithKeyOverride(actionAsKey, actionToExecute);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionAsKey, times(1)).setStorable();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).setStorable();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        assertNotNull("ActionWithKeyOverride was not properly created.", action);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:    public void testDelegations() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        final Action actionAsKey = mock(Action.class);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        final Action actionToExecute = mock(Action.class);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        Action action = new ActionWithKeyOverride(actionAsKey, actionToExecute);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        // Should delegate to actionAsKey
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.getParams();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.getDescriptor();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.isStorable();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.setStorable();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.getId();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.setId("test");
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.getInstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.run();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.add(Collections.<Action>emptyList());
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.getActions();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.getReturnValue();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.getState();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.getErrors();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        action.serialize(null);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        // Should delegate to actionToExecute.
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        // Delegates to actionAsKey
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionAsKey, times(1)).getParams();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionAsKey, times(1)).getDescriptor();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionAsKey, times(1)).isStorable();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        // 2 because ActionWithKeyOverride constructor sets this on actionAsKey.
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionAsKey, times(2)).setStorable();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionAsKey, times(1)).getId();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionAsKey, times(1)).setId(any(String.class));
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        // These delegate to both.
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).setId(any(String.class));
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).getInstanceStack();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(2)).setStorable();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        // Delegates to actionToExecute
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).run();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).add(anyListOf(Action.class));
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).getActions();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).getReturnValue();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).getState();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).getErrors();
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verify(actionToExecute, times(1)).serialize(any(Json.class));
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verifyNoMoreInteractions(actionAsKey);
ruau/ruau/src/test/java/org/ruauframework/instance/ActionWithKeyOverrideTest.java:        verifyNoMoreInteractions(actionToExecute);
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java:package org.ruauframework;
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java:import junit.framework.TestSuite;
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java:import org.ruauframework.test.TestInventory;
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java:import org.ruauframework.test.TestInventory.Type;
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java:public class RuueUnitTestSuite {
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java:    public static TestSuite suite() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java:        TestInventory inventory = ServiceLocator.get().get(TestInventory.class, "ruauTestInventory");
ruau/ruau/src/test/java/org/ruauframework/RuueUnitTestSuite.java:        suite.setName("ruau unit tests");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:package org.ruauframework.components.ruau.model;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:import org.openqa.selenium.support.ui.WebDriverWait;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java: * ruau:interation UI tests.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:public class RuueModelExceptionUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:    public RuueModelExceptionUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        openNoRuue("/ruautest/testModelThatThrowsInRenderer.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        ruauUITestingUtil.waitForDocumentReady();
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        List<WebElement> errorBoxes = getDriver().findElements(By.cssSelector(".ruauForcedErrorBox"));
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        assertEquals("Element not found", 1, errorBoxes.size());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        assertTrue("Error not displayed", errorBoxes.get(0).isDisplayed());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:    public void testModelSerializationException() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        openNoRuue("/ruautest/testModelThatThrows.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        ruauUITestingUtil.waitForDocumentReady();
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        List<WebElement> errorBoxes = getDriver().findElements(By.cssSelector(".ruauForcedErrorBox"));
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        assertEquals("Renderer element found", 0, errorBoxes.size());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        WebDriverWait wait = new WebDriverWait(getDriver(), timeoutInSecs);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        errorBoxes = wait.until(new ExpectedCondition<List<WebElement>>() {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:            public List<WebElement> apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:                List<WebElement> errors = getDriver().findElements(By.cssSelector(".ruauErrorBox"));
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:                if (errors.size() > 0 && errors.get(0).isDisplayed()) {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/model/RuueModelExceptionUITest.java:        assertNotNull(errorBoxes);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:package org.ruauframework.components.ruau.iteration;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java: * ruau:interation UI tests.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:public class IterationUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:    public IterationUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:    public void testSimpleIteration() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        open("/iterationTest/simpleIteration.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // check out some actions linked up since they don't show up in DOM
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        assertEquals(4, buttons.size());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        buttons.get(0).click(); // button class=.button6
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        assertEquals("action run by button6", e.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        buttons.get(3).click(); // button class=.button9
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        assertEquals("action run by button9", e.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        String clientHtml = (String) ruauUITestingUtil.getEval("return arguments[0].innerHTML;", root);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        openNoRuue("/iterationTest/simpleIterationServer.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        String serverHtml = (String) ruauUITestingUtil.getEval("return arguments[0].innerHTML;", root);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("<!---->", ""); // remove comments
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("</br>", ""); // remove expanded br
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("\"\\s*\"", ""); // join separated text
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("\\s+", " "); // replace whitespace with a single space
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll(" data-ruau-rendered-by=\"[^\"]+\"", ""); // remove client data tags
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // Should we maybe just disable this test for ie8?
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // For ie8 className does not have quotes so get rid of them everywhere.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll(" class=\"([^>\"]+)\"", " class=$1");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll(" class=\"([^>\"]+)\"", " class=$1");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("\\s+", " "); // replace whitespace with a single space
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll(" id=\"[^\"]+\"", ""); // server renders ruau:id as id
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // fix for ie7 and ie8,
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // as id of div does not have quotes
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll(" id=[^>]+", "");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // remove default button type in ie8
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll(" type=submit", "");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll(" type=submit", "");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // needs an extra space
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("(?i)</DIV>from", "</DIV> from");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("(?i)<BR>from", "<BR> from");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // space between div tags
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("> <", "><");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("> <", "><");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // uppercased tags
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("DIV", "div");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("BUTTON", "button");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("BR", "br");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("DIV", "div");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("BUTTON", "button");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("BR", "br");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        assertEquals(clientHtml, serverHtml);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:     * nestedIteration.cmp uses nested iteration, model list of maps, shadowed var/indexVar scoping Compare
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:     * client-rendered and server-rendered versions, and gold file diff.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:    public void testNestedIteration() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        open("/iterationTest/nestedIteration.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        String clientHtml = (String) ruauUITestingUtil.getEval("return arguments[0].innerHTML;", root);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        openNoRuue("/iterationTest/nestedIterationServer.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        String serverHtml = (String) ruauUITestingUtil.getEval("return arguments[0].innerHTML;", root);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("<!---->", ""); // remove comments
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll("\\s+", " "); // replace whitespace
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                                                         // with a single space
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll(";\"", "\""); // replace semicolon
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                                                         // and doubleQuotes
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                                                         // with a doubleQuotes
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.replaceAll(" data-ruau-rendered-by=\"[^\"]+\"", ""); // remove
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                                                                                     // data
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                                                                                     // tags
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("\\s+", " "); // replace whitespace
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                                                         // with a single space
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll(";\"", "\""); // replace semicolon
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                                                         // and doubleQuotes
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                                                         // with a doubleQuotes
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // for ie7 and 8, servers adds extra tbody with space
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("<(?i)/?tbody> ", ""); // server has extra
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("</DIV>but indexVar", "</DIV> but indexVar");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        serverHtml = serverHtml.replaceAll("<(?i)/?tbody>", ""); // server has extra
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        assertEquals(clientHtml, serverHtml);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        // in ie 8 clientHtml has:
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:        clientHtml = clientHtml.toLowerCase() // tags are in caps
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                .replaceAll("scope=row", "scope=\"row\"") // does not have extra quotes
ruau/ruau/src/test/java/org/ruauframework/components/ruau/iteration/IterationUITest.java:                .replaceAll("> <", "><"); // has extra spaces between tags
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:package org.ruauframework.components.ruau.forEach;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * Test components using ForEach loops. This is a web driver test case to check
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java: * for foreach rendering.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:public class ForEachUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    public ForEachUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    private static String FOREACH_COMPONENT = "<ruau:component access=\"GLOBAL\" model=\"java://org.ruauframework.impl.java.model.TestJavaModel\">"
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:            + "<ruau:iteration items=\"{!m.%s}\" var=\"i\">{!i}</ruau:iteration>"
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:            + "</div>\n" + "</ruau:component>";
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    private static String FOREACH_APP = "<ruau:application access=\"GLOBAL\" render=\"client\" model=\"java://org.ruauframework.impl.java.model.TestJavaModel\">"
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:            + "<ruau:iteration items=\"{!m.%s}\" var=\"i\">{!i}</ruau:iteration>"
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:            + "</div>" + "</ruau:application>";
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    private static String FOREACH_APP_SERVER = "<ruau:application access=\"GLOBAL\" render=\"server\" model=\"java://org.ruauframework.impl.java.model.TestJavaModel\">"
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:            + "<ruau:iteration items=\"{!m.%s}\" var=\"i\">{!i}</ruau:iteration>"
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:            + "</div>" + "</ruau:application>";
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    private String getListContent() {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:     * Test ForEach iteration over a list of Strings.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    public void testForEachStringList() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        String componentText = String.format(FOREACH_COMPONENT, "stringList");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        loadComponent("foreachstringlist_client", componentText, true);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        assertEquals("foreach content text didn't match (Client)", "onetwothree", getListContent());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        loadComponent("foreachstringlist_server", componentText, false);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        assertEquals("foreach content text didn't match (Server)", "onetwothree", getListContent());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:     * Test ForEach iteration over empty list.
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    public void testForEachEmpty() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        String componentText = String.format(FOREACH_COMPONENT, "emptyList");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        loadComponent("foreachemptylist_client", componentText, true);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        assertEquals("foreach content text didn't match (Client)", "", getListContent());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        loadComponent("foreachemptylist_server", componentText, false);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        assertEquals("foreach content text didn't match (Server)", "", getListContent());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    public void testForEachNull() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        String componentText = String.format(FOREACH_COMPONENT, "stringListNull");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        loadComponent("foreachnulllist_client", componentText, true);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        assertEquals("foreach content text didn't match (Client)", "", getListContent());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        loadComponent("foreachnulllist_server", componentText, false);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        assertEquals("foreach content text didn't match (Server)", "", getListContent());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    public void testForEachApp() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        String appText = String.format(FOREACH_APP, "stringList");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        loadApplication("stringlist_client", appText, true);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        assertEquals("foreach content text", "onetwothree", getListContent());
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:    public void testForEachAppServer() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        String appText = String.format(FOREACH_APP_SERVER, "stringList");
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        loadApplication("stringlist_server", appText, false);
ruau/ruau/src/test/java/org/ruauframework/components/ruau/forEach/ForEachUITest.java:        assertEquals("foreach content text", "onetwothree", getListContent());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:package org.ruauframework.components.ui.listView;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:import java.util.ArrayList;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:public class ListViewTestModel {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:        return new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:    public List<Map<String, String>> getGeneratedListData() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:        return ListViewTestData.GENERATED_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:    public List<Map<String, String>> getSpecifiedListData() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:        return ListViewTestData.SPECIFIED_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:    public List<Map<String, String>> getNestedColumnsListData() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:        return ListViewTestData.NESTED_COLUMNS_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:    public List<Map<String, String>> getNestedColumnsFieldsMapsFromNonLeafNodeColumnsListData() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestModel.java:        return ListViewTestData.NESTED_COLUMNS_BAD_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:package org.ruauframework.components.ui.listView;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import java.util.ArrayList;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import java.util.Arrays;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:public class ListViewUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    private final static String EMPTY_LIST_MESSAGE = "No records to display.";
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    private final String URL = "/uitest/listView_Test.app";
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    public ListViewUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    public void testEmptyListGeneratedColumns() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tableElement = driver.findElement(By.id("ui:listView:test-empty-list-generated-columns"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tHeadElement = tableElement.findElement(By.tagName("thead"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tBodyElement = tableElement.findElement(By.tagName("tbody"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tFootElement = tableElement.findElement(By.tagName("tfoot"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        // Header
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("The thead in an empty list with single-level generated columns thead should contain one row",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                getNumRows(tHeadElement) == 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("Empty list with generated columns should not contain any header cells",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                getCellsInRow(tHeadElement, "th").size() == 0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("Empty list tbody should contain one row", tBodyElement.findElements(By.tagName("tr")).size() == 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> bodyCellElements = getCellsInRow(getRowAt(tableElement, "tbody", 0), "td");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("Empty list tbody's single row should contain one cell", bodyCellElements.size() == 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertEquals("Empty list message was not present or was not what was expected",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                getEmptyLisViewMessage(tableElement), EMPTY_LIST_MESSAGE);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("tfoot element should contain no rows", tFootElement.findElements(By.tagName("tr")).size() == 0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tableElement = driver.findElement(By.id("ui:listView:test-empty-list-specified-columns"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tHeadElement = tableElement.findElement(By.tagName("thead"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tBodyElement = tableElement.findElement(By.tagName("tbody"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tFootElement = tableElement.findElement(By.tagName("tfoot"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        // Header
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("The thead in an empty list with single-level specified columns thead should contain one row",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                getNumRows(tHeadElement) == 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> headerCellElements = getCellsInRow(getRowAt(tableElement, "thead", 0), "th");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertEquals("Empty list with specified columns should contain one header cell for each column",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                ListViewTestData.SPECIFIED_COLUMN_TITLES.length, headerCellElements.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertEquals("Actual header cell titles did not match expected",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                Arrays.asList(ListViewTestData.SPECIFIED_COLUMN_TITLES), getTextFromElements(headerCellElements));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("Empty list tbody should contain one row", tBodyElement.findElements(By.tagName("tr")).size() == 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> bodyCellElements = getCellsInRow(getRowAt(tableElement, "tbody", 0), "td");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("Empty list tbody's single row should contain one cell", bodyCellElements.size() == 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertEquals("Empty list message was not present or was not what was expected",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                getEmptyLisViewMessage(tableElement), EMPTY_LIST_MESSAGE);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("tfoot element should contain no rows", tFootElement.findElements(By.tagName("tr")).size() == 0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    public void testListGeneratedColumns() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<Map<String, String>> expectedData = ListViewTestData.GENERATED_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tableElement = driver.findElement(By.id("ui:listView:test-list-generated-columns"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tHeadElement = tableElement.findElement(By.tagName("thead"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tBodyElement = tableElement.findElement(By.tagName("tbody"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tFootElement = tableElement.findElement(By.tagName("tfoot"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        // Header
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("The thead should contain one row", getNumRows(tHeadElement) == 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> headerCellElements = getCellsInRow(getRowAt(tableElement, "thead", 0), "th");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertEquals("List should contain one header cell for each column", expectedData.get(0).size(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                headerCellElements.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<String> headerCells = getTextFromElements(headerCellElements);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        for (String headerCell : headerCells) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            assertTrue("Actual header cell title did not match expected", expectedData.get(0).containsKey(headerCell));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("list tbody did not contain expected number of rows", tBodyElement.findElements(By.tagName("tr"))
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                .size() == expectedData.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        for (int i = 0; i < expectedData.size(); ++i) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            List<WebElement> rowCellElements = getCellsInRow(getRowAt(tableElement, "tbody", i), "td");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            Map<String, String> row = expectedData.get(i);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            assertEquals("Expected number of cells in row did not match actual", row.size(), rowCellElements.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                assertEquals("Expected cell value did not match actual", row.get(headerCells.get(j)), rowCellElements
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("tfoot element should contain no rows", tFootElement.findElements(By.tagName("tr")).size() == 0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<Map<String, String>> expectedData = ListViewTestData.SPECIFIED_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tableElement = driver.findElement(By.id("ui:listView:test-list-specified-columns"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tHeadElement = tableElement.findElement(By.tagName("thead"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tBodyElement = tableElement.findElement(By.tagName("tbody"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tFootElement = tableElement.findElement(By.tagName("tfoot"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        // Header
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("The thead in an empty list with single-level specified columns thead should contain one row",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                getNumRows(tHeadElement) == 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> headerCellElements = getCellsInRow(getRowAt(tableElement, "thead", 0), "th");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertEquals("List should contain one header cell for each column", ListViewTestData.NUM_COLS_SPECIFIED_DATA,
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                headerCellElements.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<String> headerCells = getTextFromElements(headerCellElements);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        for (int i = 0; i < ListViewTestData.NUM_COLS_SPECIFIED_DATA; ++i) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            assertTrue("Actual header cell title did not match expected",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                    ListViewTestData.SPECIFIED_COLUMN_TITLES[i].equals(headerCells.get(i)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("list tbody did not contain expected number of rows", tBodyElement.findElements(By.tagName("tr"))
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                .size() == expectedData.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        for (int i = 0; i < ListViewTestData.NUM_ROWS_SPECIFIED_DATA; ++i) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            List<WebElement> rowCellElements = getCellsInRow(getRowAt(tableElement, "tbody", i), "td");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            Map<String, String> row = expectedData.get(i);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            assertEquals("Expected number of cells in row did not match actual",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                    ListViewTestData.NUM_COLS_SPECIFIED_DATA, rowCellElements.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                assertEquals("Expected type:text cell value did not match actual",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                        row.get(headerCells.get(j).toLowerCase()), rowCellElements.get(j).getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            // Fourth column will be Type:Email
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            assertTrue(
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                    "Email 'mailto' link was not present or did not contain correct text",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                    isElementPresentInElementWithText("a", rowCellElements.get(3),
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                            row.get(headerCells.get(3).toLowerCase())));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            assertTrue("Cell did not contain, or contained more than one, checkbox", inputFields.size() == 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            assertTrue(
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                    "Link was not present or did not contain correct text",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                    isElementPresentInElementWithText("a", rowCellElements.get(5),
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                            row.get(headerCells.get(5).toLowerCase())));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            // Seventh column will be Type:Index, whose value should be equal to
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            String expectedIndexValue = new Integer(i + 1).toString();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            assertEquals("Index cell did not contain expected value", expectedIndexValue, rowCellElements.get(6)
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            // Eighth column will be Type:Html, which should contain a div with
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            // First, we need to get rid of the html tags that enclose the
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            String rawHtml = row.get(headerCells.get(7).toLowerCase());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            String expectedHtmlCellText = rawHtml.substring(rawHtml.indexOf('>') + 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            assertTrue("Html cell did not contain expected markup",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("tfoot element should contain no rows", tFootElement.findElements(By.tagName("tr")).size() == 0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tableElement = driver.findElement(By.id("ui:listView:test-list-events-webdriver-test"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tBodyElement = tableElement.findElement(By.tagName("tbody"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        tBodyElement.findElement(By.tagName("tr")).findElement(By.tagName("td")).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("Test component's cell click handler was not invoked after click event",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                isGlobalVariableDefinedInWindow("cellClickFired"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    // For some reason Android doesn't want to click on the header element. This test isn't really relevant to Android
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    // anyway though because the actual use case would be touch events instead of clicks.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    public void testHeaderClickEvent() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tableElement = driver.findElement(By.id("ui:listView:test-list-events-webdriver-test"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tHeadElement = tableElement.findElement(By.tagName("thead"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        tHeadElement.findElement(By.tagName("tr")).findElement(By.tagName("th")).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        assertTrue("Test component's header click handler was not invoked after click event",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:                isGlobalVariableDefinedInWindow("headerClickFired"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * Check whether a variable is defined in a currently open browser window
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param variableName name of the variable we're looking for
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @return true if the variable is present, false otherwise
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    private boolean isGlobalVariableDefinedInWindow(String variableName) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        String script = "return !(typeof " + variableName + " === 'undefined')";
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        return (Boolean) ruauUITestingUtil.getRawEval(script);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * Check whether an html element with some particular text is a child of another element
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param tagName tag of element we are looking for
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param parentElement parent of the element we are looking for
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param text the text we'd like to check for
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @return true if element is present and text matches, false otherwise
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    private boolean isElementPresentInElementWithText(String tagName, WebElement parentElement, String text) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> linkElements = parentElement.findElements(By.tagName(tagName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            return false;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        if (linkElements.get(0).getText().equals(text)) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        return false;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * Given a list of WebElements, get a new list containing the text from each element
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param elements list of WebElements
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @return list containing text from each element
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    private List<String> getTextFromElements(List<WebElement> elements) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<String> result = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:            result.add(element.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * Get a presumably empty listview's empty message
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param tableElement main element of listview
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @return the text that appears in the canonical empty listview message location
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    private String getEmptyLisViewMessage(WebElement tableElement) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement tBodyElement = tableElement.findElement(By.tagName("tbody"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> bodyRowElements = tBodyElement.findElements(By.tagName("tr"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        return bodyRowElements.get(0).findElement(By.tagName("td")).getText();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * Get a particular row element
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param tableElement main element of listview
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param parentContainerTagName tagname of the row's parent container
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param location of the row we want to retrieve
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    private WebElement getRowAt(WebElement tableElement, String parentContainerTagName, int index) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        WebElement parentContainerElement = tableElement.findElement(By.tagName(parentContainerTagName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> rowElements = parentContainerElement.findElements(By.tagName("tr"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * Given an element corresponding to a row, return a list of the header or cell elements in the order in which they
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * appear
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param rowElement a thead, tbody, or tfoot row element
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param cellTagName tag name of the cell type ('td' or 'th')
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @return list of cell elements contained in rowElement
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    private List<WebElement> getCellsInRow(WebElement rowElement, String cellTagName) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> cellElements = rowElement.findElements(By.tagName(cellTagName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * Get the number of rows that an element contains
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @param parentContainerElement
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:     * @return the number of rows contained in parentContainerElement
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:    private int getNumRows(WebElement parentContainerElement) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewUITest.java:        List<WebElement> rowElements = parentContainerElement.findElements(By.tagName("tr"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:package org.ruauframework.components.ui.listView;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:import java.util.ArrayList;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:public class ListViewTestData {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    public final static List<Map<String, String>> GENERATED_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    public final static List<Map<String, String>> SPECIFIED_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    public final static List<Map<String, String>> NESTED_COLUMNS_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    public final static List<Map<String, String>> NESTED_COLUMNS_BAD_LIST_DATA;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    public final static int NUM_ROWS_GENERATED_DATA = 2;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    public final static int NUM_COLS_GENERATED_DATA = 3;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    public final static int NUM_ROWS_SPECIFIED_DATA = 4;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    public final static String[] SPECIFIED_COLUMN_TITLES = { "Type:Empty String", "Type:Undefined", "Type:Text",
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            "Type:Email", "Type:Checkbox", "Type:Link", "Type:Index", "Type:Html" };
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    public final static int NUM_COLS_SPECIFIED_DATA = SPECIFIED_COLUMN_TITLES.length;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:    static {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:        GENERATED_LIST_DATA = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            Map<String, String> map = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:                map.put("Column " + j, "value at (" + i + ", " + j + ")");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            GENERATED_LIST_DATA.add(map);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:        SPECIFIED_LIST_DATA = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            Map<String, String> row = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("type:empty string", "1st text value " + i);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("type:undefined", "2nd text value " + i);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("type:text", "3rd text value " + i);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("type:email", "test " + i + "@email.com");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("type:link", "http://na" + i + ".salesforce.com");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("type:html", "<div style=\"background-color:blue\">i'm in a blue div " + i + "</div>");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            SPECIFIED_LIST_DATA.add(row);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:        NESTED_COLUMNS_LIST_DATA = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            Map<String, String> row = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // Keys in this map correspond to hard-wired fieldName attributes of
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // columns in a list in
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // listView_Test.app. That list has nested columns, and only those
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // columns that are leaf-node
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // level columns are keyed from here.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("third row 0, leaf 0", "row " + i + ", value 0");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("third row 1, leaf 1", "row " + i + ", value 1");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("third row 2, leaf 2", "row " + i + ", value 2");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("second row 2, leaf 3", "row " + i + ", value 3");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("first row 1, leaf 4", "row " + i + ", value 4");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            NESTED_COLUMNS_LIST_DATA.add(row);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:        NESTED_COLUMNS_BAD_LIST_DATA = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            Map<String, String> row = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // Keys in this map correspond to hard-wired fieldName attributes of
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // columns in a list in
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // listView_Test.app. That list has nested columns, and only those
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // columns that are non-leaf-node
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // level columns are keyed from here. Non-leaf-node columns
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // shouldn't be map-able to fields in the
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            // list. So none of these fields would actually appear in the list.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("first row 0", "This should not appear in list");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("second row 0", "This should not appear in list");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            row.put("second row 1", "This should not appear in list");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listView/ListViewTestData.java:            NESTED_COLUMNS_BAD_LIST_DATA.add(row);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:package org.ruauframework.components.ui.inputError;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:public class InputErrorUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    WebElement clearBtn;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    WebElement status;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    final String INPUT_CMP_LOCATOR = "uiInput";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    final String STATUS_CMP_LOCATOR = "uiOutputText";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    final String ERR_CSS = "inputError";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    final String STATUS_ERROR = "Got Error";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    final String STATUS_CLEAR = "Cleared error";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    final String URL = "/uitest/inputError_Test.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    final String URL_CST = "/uitest/inputError_CustomTest.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    public InputErrorUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:     * Test error handling setting errors when firing onError event. Test error handling clearing errors when firing
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:     * onClearErrors event. Test error handling setting a custom error component.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        String expectedErrorMsg = "Custom Error Msg: Error Happens!";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        setWebElements("ErrorFireOnErrorEvent", "ClearFireOnClearErrrorsEvent");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        waitForElementTextPresent(status, STATUS_ERROR);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        assertTrue("Incorrect error message: " + errorText, errorText.startsWith(expectedErrorMsg));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        clearBtn.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        waitForElementTextPresent(status, STATUS_CLEAR);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        assertEquals("Error message not cleared", "", errorElement.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:     * Test error handling setting a custom error component.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    // uncomment after bug: W-1412621
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        setWebElements("ErrorFireOnErrorEvent", "ClearFireOnClearErrrorsEvent");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        induceError("Custom Error Msg: Error Happens!", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        clearError(true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:     * Test error handling from server errors.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        setWebElements("ErrorServer", "ClearNoEvent");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        induceError("Error Happens!", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        clearError(true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:     * Test error handling setting errors without firing error events just setting SimpleValue attributes. Test error
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:     * handling clearing errors without firing clear events just setting SimpleValue attributes.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        setWebElements("ErrorNoEvent", "ClearNoEvent");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        induceError("Error Happens!", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        clearError(true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:     * Test error handling without setting error message on SimpleValue. Test error handling clearing errors setting
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:     * error message to null on SimpleValue.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    public void testErrorWithoutSettingErrorMessage() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        setWebElements("ErrorNoErrMsg", "ClearNoEvent");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        induceError(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        clearError(false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    private void setWebElements(String errorBtnLocator, String clearBtnLocator) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        input = d.findElement(By.className(INPUT_CMP_LOCATOR));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        errorBtn = d.findElement(By.xpath("//div[@id='" + errorBtnLocator + "']/button"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        clearBtn = d.findElement(By.xpath("//div[@id='" + clearBtnLocator + "']/button"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        status = d.findElement(By.className(STATUS_CMP_LOCATOR));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    private void induceError(String errMsg, boolean verifyErrMsg) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        waitForElementTextPresent(status, STATUS_ERROR);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:            verifyErrorMessage(input, errMsg);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    private void clearError(boolean verifyErrMsg) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        // Sometimes running ios tests through SauceLabs can be very slow. Watching the video recording, it appears to
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        // not be done processing the previous click when we try to send this click causing the click to be ignored and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        // the test to timeout on the following wait.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:            waitFor(3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        clearBtn.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        waitForElementTextPresent(status, STATUS_CLEAR);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:            verifyNoErrorMessage();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        verifyCss(input, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    private void verifyErrorMessage(WebElement element, String expectedErrorMsg) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        // Note that we wait for the element to appear in our dom, as we are racing with
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        // it (and we lose this race on fast machines).
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        waitForElementAppear(By.className("uiInputDefaultError"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        WebElement errorElement = d.findElement(By.className("uiInputDefaultError"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        assertTrue("Incorrect error message: " + errorText, errorText.contains(expectedErrorMsg));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    private void verifyNoErrorMessage() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        assertFalse("Did not expect an error message", isElementPresent(By.className("uiInputDefaultError")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:    private void verifyCss(WebElement element, boolean isError) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:        String inputClassValue = element.getAttribute("class");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:            assertTrue("On input error css not added", inputClassValue.contains(ERR_CSS));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputError/InputErrorUITest.java:            assertFalse("On input error css should not be present", inputClassValue.contains(ERR_CSS));
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java: * limitations under the License.
