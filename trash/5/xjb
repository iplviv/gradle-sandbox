ruau/ruau/src/test/java/org/ruauframework/test/TestExecutor.java:            return testClass.getMethod(((TestCase) test).getName()).isAnnotationPresent(ThreadHostileTest.class);
ruau/ruau/src/test/java/org/ruauframework/test/TestExecutor.java:        } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/TestExecutor.java:            return false;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:import org.openqa.selenium.remote.DesiredCapabilities;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:// If you get a "/ by zero" WebDriverException, then most likely the Grid node tried to use an unavailable port.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:// Check available ports and make sure the low value is NOT 1024, and the high value is NOT 65535.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:// - to view port range: sysctl net.ipv4.ip_local_port_range
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:// - to set port range: sudo sysctl -w net.ipv4.ip_local_port_range="1025 32000"
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:// - to save port range: edit /etc/sysctl.conf and edit/add property for net.ipv4.ip_local_port_range = 1025 32000
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:public interface WebDriverProvider {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:     * Get a a {@link WebDriver} instance.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:     * @param capabilities
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:    WebDriver get(DesiredCapabilities capabilities);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:     * Release any long held resources, e.g. pooled driver instances.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverProvider.java:    void release();
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:import java.io.ByteArrayOutputStream;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:import java.io.IOException;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:import java.io.PrintWriter;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:import java.util.Collection;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:import java.util.Locale;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:import javax.servlet.ServletOutputStream;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:import javax.servlet.http.Cookie;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:import javax.servlet.http.HttpServletResponse;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * A testing mock of {@link HttpServletResponse}. The implementations here all do nothing (and return null, zero, etc.),
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java: * so override what you need to.
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:public class DummyHttpServletResponse implements HttpServletResponse {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:     * {@link HttpServletResponse} includes a lot of utility methods; if those are used, the dummy really should
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:     * implement them. So our base class here throws this {@link RuntimeException} if those are called.
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public static class NotImplementedException extends RuntimeException {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:        private static final long serialVersionUID = 4533660990974185099L;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:            super(String.format("If %s is called, it should have been overridden by a subclass", method));
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public String getCharacterEncoding() {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public ServletOutputStream getOutputStream() throws IOException {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:        return new PrintWriter(new ByteArrayOutputStream());
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void setCharacterEncoding(String charset) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public boolean isCommitted() {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:        return false;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void setLocale(Locale loc) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public Locale getLocale() {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void addCookie(Cookie cookie) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:     * An addition to fetch a cookie for validation.
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public Cookie getCookie(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public boolean containsHeader(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:        return false;
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void sendRedirect(String location) throws IOException {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:        throw new NotImplementedException("sendRedirect(location)");
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void setDateHeader(String name, long date) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void addDateHeader(String name, long date) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void setHeader(String name, String value) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void addHeader(String name, String value) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void setIntHeader(String name, int value) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void addIntHeader(String name, int value) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void setStatus(int sc) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public void setStatus(int sc, String sm) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public int getStatus() {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public String getHeader(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public Collection<String> getHeaders(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/DummyHttpServletResponse.java:    public Collection<String> getHeaderNames() {
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java: * Mock beans should be reset after each test.
ruau/ruau/src/test/java/org/ruauframework/test/MockBean.java:public interface MockBean {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import java.util.EnumSet;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import java.util.Map.Entry;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import java.util.Set;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import junit.framework.Test;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import junit.framework.TestSuite;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.apache.http.NameValuePair;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.apache.http.client.utils.URLEncodedUtils;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.apache.http.message.BasicNameValuePair;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.def.TestCaseDef;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.service.ContextService;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.test.annotation.WebDriverTest;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java: * TODO(W-1386863): investigate why/fix the thread hostile nature of these tests.
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:public class ComponentJSTestSuiteTest extends TestSuite {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:    public static TestSuite suite() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        TestSuite suite = new NamespaceTestSuite("*");
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        suite.setName("JS component tests");
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:    private static class FailTestCase extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private final Throwable cause;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private FailTestCase(DefDescriptor<TestSuiteDef> descriptor, Throwable cause) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            super(descriptor.getQualifiedName());
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            this.cause = cause;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        public void runTest() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            throw cause;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:    public static class NamespaceTestSuite extends TestSuite {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        public NamespaceTestSuite(String namespace) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            super(namespace);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            ContextService contextService = Ruue.getContextService();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            boolean contextStarted = false;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            if (!contextService.isEstablished()) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                contextStarted = true;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                contextService.startContext(Mode.JSTEST, Format.JSON, Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            Map<String, TestSuite> subSuites = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                DescriptorFilter filter = new DescriptorFilter("js://"+namespace, DefType.TESTSUITE.toString());
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                        test = new FailTestCase(descriptor, t);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    String testNamespace = descriptor.getNamespace();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    if (namespace.equals(testNamespace)) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                        addTest(test);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                        TestSuite subSuite = subSuites.get(testNamespace);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                            subSuite = new TestSuite(testNamespace);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                            subSuites.put(testNamespace, subSuite);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                            addTest(subSuite);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                        subSuite.addTest(test);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                System.err.println("Failed to load component tests for namespace: " + namespace);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                t.printStackTrace();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            } finally {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                if (contextStarted) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:    private static class ComponentTestSuite extends TestSuite {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private final DefDescriptor<TestSuiteDef> descriptor;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private ComponentTestSuite(TestSuiteDef suiteDef) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            super(String.format("%s:%s", suiteDef.getDescriptor().getNamespace(), suiteDef.getDescriptor().getName()));
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            for (TestCaseDef caseDef : suiteDef.getTestCaseDefs()) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                addTest(new ComponentTestCase(this, caseDef));
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                ext = ".app";
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            return String.format("/%s/%s%s?ruau.mode=%s&ruau.testReset=true", descriptor.getNamespace(),
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    descriptor.getName(), ext, mode);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            ContextService contextService = Ruue.getContextService();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            boolean isEstablished = contextService.isEstablished();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            if (!isEstablished) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                contextService.startContext(Mode.AUTOJSTEST, Format.JSON, Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            } finally {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                if (!isEstablished) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:    public static class ComponentTestCase extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private ComponentTestCase(ComponentTestSuite suite, TestCaseDef caseDef) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            this.name = String.format("%s$%s", suite.descriptor.getQualifiedName().replaceAll("://", "_"),
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    caseDef.getName());
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            this.caseDef = caseDef;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            for (String browser : caseDef.getBrowsers()) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                String token = browser.trim().toUpperCase();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                if (token.charAt(0) == '-') {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    set = targetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    set.add(BrowserType.valueOf(token));
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                } catch (IllegalArgumentException e) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    fail("Unknown BrowserType: " + browser);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private String getUrl() {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            DefType defType = caseDef.getDefType();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            String baseUrl = suite.getUrl(defType);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            Set<Entry<String, Object>> attributes = caseDef.getAttributeValues().entrySet();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            if (attributes.isEmpty()) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                return baseUrl;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                String hash = "";
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                List<NameValuePair> newParams = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                for (Entry<String, Object> entry : attributes) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    String value = entry.getValue().toString();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    if (key.equals("__layout")) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                        hash = value;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                        newParams.add(new BasicNameValuePair(key, value));
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                return baseUrl + "&" + URLEncodedUtils.format(newParams, "UTF-8") + hash;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        public String getTestUrlForManualRun() {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            return suite.getUrl(caseDef.getDefType(), Mode.JSTEST) + "&test=" + caseDef.getName();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        public String getName() {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            return name;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        public String getQualifiedName() {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            return caseDef.getDescriptor().getQualifiedName() + btype;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        public void testRun() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            addMocksToTestContextLocalDef(caseDef.getLocalDefs());
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            String ret = (String) ruauUITestingUtil.getEval(String.format(
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    "return window.ruau.test.run('%s', '%s', 30)",
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    RuueTextUtil.escapeForJavascriptString(caseDef.getName()),
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                    RuueTextUtil.escapeForJavascriptString(suite.getCode())));
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            if (ret != null && !"null".equals(ret)) {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                Map<String, Object> e = (Map<String, Object>) new JsonReader()
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                        .read(ret);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:                fail((String) e.get("message"));
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            // Actions run on servers need special handling because their call
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            // back methods are called asynchronously.
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            // This check is to make sure all such calls were complete
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            waitForCondition("return window.ruau.test.isComplete()", 30);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        public Set<BrowserType> getTargetBrowsers() {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            return targetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        protected Set<String> getRuueErrorsExpectedDuringInit() {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            return caseDef.getRuueErrorsExpectedDuringInit();
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        public Set<String> getTestLabels() {
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:            return Sets.newHashSet(caseDef.getTestLabels());
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private final ComponentTestSuite suite;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private final TestCaseDef caseDef;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private final String name;
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private final Set<BrowserType> targetBrowsers = EnumSet.noneOf(BrowserType.class);
ruau/ruau/src/test/java/org/ruauframework/test/ComponentJSTestSuiteTest.java:        private final Set<BrowserType> excludedBrowsers = EnumSet.noneOf(BrowserType.class);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import java.net.URL;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import java.util.Collection;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import java.util.LinkedList;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import java.util.Queue;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import java.util.Scanner;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import java.util.concurrent.Callable;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import javax.annotation.concurrent.GuardedBy;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import org.apache.http.NameValuePair;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import org.apache.http.client.utils.URLEncodedUtils;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import org.apache.http.message.BasicNameValuePair;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import org.openqa.selenium.remote.DesiredCapabilities;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java: * Get pooled WebDriver instances for Ruue tests.
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:public class PooledRemoteWebDriverFactory extends RemoteWebDriverFactory {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:    private final Map<DesiredCapabilities, Queue<PooledRemoteWebDriver>> pools = Maps.newConcurrentMap();
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:    public PooledRemoteWebDriverFactory(URL serverUrl) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:    public class PooledRemoteWebDriver extends AdaptiveWebElementDriver {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:         * The pool containing this web driver instance.
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        @GuardedBy("PooledRemoteWebDriverFactory.this")
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        private final Collection<PooledRemoteWebDriver> pool;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                DesiredCapabilities capabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            super(serverUrl, capabilities);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        // append a query param to avoid possible browser caching of pages
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            // save any fragment
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            int hashLoc = url.indexOf('#');
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            String hash = "";
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            if (hashLoc >= 0) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                hash = url.substring(hashLoc);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                url = url.substring(0, hashLoc);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            // update query with a nonce
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            if (!"about:blank".equals(url)) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                List<NameValuePair> newParams = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                URLEncodedUtils.parse(newParams, new Scanner(qs), "UTF-8");
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                newParams.add(new BasicNameValuePair("browser.nonce", String.valueOf(System.currentTimeMillis())));
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                url = url + "?" + URLEncodedUtils.format(newParams, "UTF-8") + hash;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            // don't close the final window; otherwise, we can't reuse it
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            if (getWindowHandles().size() > 1) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        private void dismissAlerts() {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                // if more than 10 alerts, something must be wrong
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                    switchTo().alert().accept();
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                // all alerts are now dismissed
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            // close up to 10 windows, except the final window
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            for (int i = 0; (getWindowHandles().size() > 1) && (i < 10); i++) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            // cleanup donAmE cookies (hopefully you're not on an external site)
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            manage().deleteAllCookies();
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            synchronized (PooledRemoteWebDriverFactory.this) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                pool.add(this);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        private void superQuit() {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:    public synchronized WebDriver get(final DesiredCapabilities capabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        // default to use a pooled instance unless the test explicitly requests a brand new instance
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        Object reuseBrowser = capabilities.getCapability(WebDriverProvider.REUSE_BROWSER_PROPERTY);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        if ((reuseBrowser != null) && (reuseBrowser.equals(false))) {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            return super.get(capabilities);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        Queue<PooledRemoteWebDriver> pool = pools.get(capabilities);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            pools.put(capabilities, pool);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            final Queue<PooledRemoteWebDriver> thisPool = pool;
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            return retry(new Callable<WebDriver>() {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                public WebDriver call() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:                    return new PooledRemoteWebDriver(thisPool, serverUrl, capabilities);
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:            }, MAX_GET_RETRIES, getGetDriverTimeout(capabilities), "Failed to get a new PooledRemoteWebDriver");
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:    public synchronized void release() {
ruau/ruau/src/test/java/org/ruauframework/test/PooledRemoteWebDriverFactory.java:        for (Queue<PooledRemoteWebDriver> pool : pools.values()) {
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:package org.ruauframework.test.controller;
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:import org.ruauframework.adapter.LoggingAdapter;
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:import org.ruauframework.system.Annotations.Controller;
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:import org.ruauframework.test.adapter.TestLoggingAdapter;
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:public class TestLoggingAdapterController {
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:    public static void beginCapture() {
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:        LoggingAdapter adapter = Ruue.get(LoggingAdapter.class);
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:        if (!(adapter instanceof TestLoggingAdapter)) {
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:            throw new Error("TestLoggingAdapter not configured!");
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:        ((TestLoggingAdapter) adapter).clear();
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:        ((TestLoggingAdapter) adapter).beginCapture();
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:    public static List<Map<String, Object>> endCapture() {
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:        LoggingAdapter adapter = Ruue.get(LoggingAdapter.class);
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:        if (!(adapter instanceof TestLoggingAdapter)) {
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:            throw new Error("TestLoggingAdapter not configured!");
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:        ((TestLoggingAdapter) adapter).endCapture();
ruau/ruau/src/test/java/org/ruauframework/test/controller/TestLoggingAdapterController.java:        return ((TestLoggingAdapter) adapter).getLogs();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:package org.ruauframework.test.perf;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:import org.ruauframework.test.WebDriverTestCase.TargetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:import org.ruauframework.test.perf.core.AbstractPerfTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:import org.ruauframework.test.perf.metrics.PerfMetrics;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:import org.ruauframework.test.perf.metrics.PerfMetricsCollector;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:import org.ruauframework.test.perf.metrics.PerfRunsCollector;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java: * Miscellaneous tests for the perf framework.
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:@TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:public final class MiscPerfFrameworkTest extends AbstractPerfTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    public MiscPerfFrameworkTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        return 0; // run only the first warmup run
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    protected int numPerfRuueRuns() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        return 0; // run only the first warmup run
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // public void testTakeHeapSnapshot() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // logger.warning("skipping test requiring chromedriver 2.10: " + getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // openTotallyRaw("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // Map data = perfWebDriverUtil.takeHeapSnapshot();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // PerfWebDriverUtil.showHeapSnapshot(data);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // PerfWebDriverUtil.writeHeapSnapshot(data, new File(System.getProperty("java.io.tmpdir")
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // + "/perf/heap/wd.heapsnapshot"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // JSONObject summary = PerfWebDriverUtil.analyzeHeapSnapshot(data);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // int nodeCount = summary.getInt("node_count");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // int totalSize = summary.getInt("total_size");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // assertTrue("node_count: " + nodeCount, nodeCount > 10000);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // assertTrue("total_size: " + totalSize, totalSize > 1000000);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // public void testJSMemoryUsage() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // logger.warning("skipping test requiring chromedriver 2.10: " + getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // int startSize = getBrowserJSHeapSize();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // openTotallyRaw("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // int delta = getBrowserJSHeapSize() - startSize;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    // assertTrue("delta js heap size: " + delta, delta > 1000000);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        startProfile();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        openTotallyRaw("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        Map<String, ?> profileData = endProfile();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        if (profileData != null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            // profileData is null if chromedriver doesn't support profiling
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            JSONObject metrics = PerfWebDriverUtil.analyzeCPUProfile(profileData);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            PerfResultsUtil.writeJSProfilerData(profileData, "testProfile");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:    public void testUsedJSHeapSize() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        openTotallyRaw("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        long size = perfWebDriverUtil.getUsedJSHeapSize();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue("JS Heap Size: " + size, size > 1000);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        openTotallyRaw("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        // check the data is returned and has expected fields
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        List<Map<String, ?>> data = perfWebDriverUtil.getResourceTimingData();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue("num requests: " + data.size(), data.size() >= 5);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        Map<String, ?> entry = data.get(0);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue(entry.containsKey("startTime"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue(entry.containsKey("connectStart"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue(entry.containsKey("connectEnd"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue(entry.containsKey("donAmELookupStart"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue(entry.containsKey("duration"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue(entry.containsKey("fetchStart"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue(entry.containsKey("requestStart"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        assertTrue(entry.containsKey("responseStart"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:        // PerfWebDriverUtil.showResourceTimingData(data);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            PerfMetricsCollector perfData = new PerfMetricsCollector(this, PerfRunMode.TIMELINE);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            perfData.startCollecting();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            open("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            PerfMetrics metrics = perfData.stopCollecting();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            runs.addRun(metrics);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            PerfMetricsCollector perfData = new PerfMetricsCollector(this, PerfRunMode.TIMELINE);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            perfData.startCollecting();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            open("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            PerfMetrics metrics = perfData.stopCollecting();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MiscPerfFrameworkTest.java:            runs.addRun(metrics);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:package org.ruauframework.test.perf.custom;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:import org.ruauframework.test.perf.core.CustomPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:public final class RadioMenuListComponentTest extends CustomPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:    public RadioMenuListComponentTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:        setComponentDef(getDefDescriptor("performanceTest:ui_menu_radioMenu"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:    public void TODO_testChangeMenuItem() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:        // Open a menu and select an item.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:        WebElement item = currentDriver.findElement(By.cssSelector(".radioItem2"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RadioMenuListComponentTest.java:        waitForElementPresent(item);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:package org.ruauframework.test.perf.custom;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:import org.ruauframework.test.perf.core.CustomPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:public final class IterationComponentTest extends CustomPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:    public IterationComponentTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        setComponentDef(getDefDescriptor("performanceTest:ruau_iteration"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:    public void TODO_testChangeItemValue() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        // Change value of an item at index 20.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        final int rowIndex = 20;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        final String rowValue = "new test value";
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        WebElement valueInputText = currentDriver.findElement(By.cssSelector(".itemValue"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        valueInputText.sendKeys(rowValue);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        WebElement button = currentDriver.findElement(By.cssSelector(".changeValue"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:            public Boolean apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:                WebElement row = d.findElements(By.cssSelector(".container div")).get(rowIndex);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:                return rowValue.equals(row.findElement(By.cssSelector(".uiOutputText")).getText());
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:    public void TODO_testChangePageSize() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        WebElement inputText = currentDriver.findElement(By.cssSelector(".pageSize"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        WebElement button = currentDriver.findElement(By.cssSelector(".changePageSize"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:            public Boolean apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:                return d.findElements(By.cssSelector(".container div")).size() < 25;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:    public void TODO_testChangePageCount() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        final int pageSize = 25;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        final int pageCount = 20;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        WebElement inputText = currentDriver.findElement(By.cssSelector(".pageCount"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        inputText.clear();
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        inputText.sendKeys(Integer.toString(pageCount));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        WebElement button = currentDriver.findElement(By.cssSelector(".changePageCount"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:        waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:            public Boolean apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IterationComponentTest.java:                return d.findElements(By.cssSelector(".container div")).size() > pageCount * pageSize;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:package org.ruauframework.test.perf.custom;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:import org.ruauframework.test.perf.core.CustomPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:public final class InfiniteListComponentTest extends CustomPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:    public InfiniteListComponentTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:        setComponentDef(getDefDescriptor("performanceTest:ui_infiniteList"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:    public void TODO_testShowMore() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:        // Load more data.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:        final int expectedNumberOfRows = 50;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:        waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:            public Boolean apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:    public void TODO_testRefresh() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InfiniteListComponentTest.java:        waitFor(5);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:package org.ruauframework.test.perf.custom;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:import org.ruauframework.test.perf.core.CustomPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:public final class RenderIfComponentTest extends CustomPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:    public RenderIfComponentTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        setComponentDef(getDefDescriptor("performanceTest:ruau_renderif"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:    public void TODO_testChangeCount() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        // Change number of first level renderIf's to 200.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        final int numberOfRows = 200;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        inputText.clear();
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        WebElement button = currentDriver.findElement(By.cssSelector(".changeCount"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:            public Boolean apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:                return d.findElements(By.cssSelector(".container div")).size() > numberOfRows;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:    public void TODO_testChangeNestedCount() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        // Change number of second level renderIf's to 5.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        inputText.clear();
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/RenderIfComponentTest.java:        WebElement button = currentDriver.findElement(By.cssSelector(".changeNestedCount"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:package org.ruauframework.test.perf.custom;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:import org.ruauframework.test.perf.core.CustomPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:public final class IfComponentTest extends CustomPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:    public IfComponentTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:        super(name, getDefDescriptor("performanceTest:ruau_if"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:    public void testIf() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:        ruauUITestingUtil.getRawEval("var c = $A.PERFCORE.getCreatedComponent(); c.set('v.enabled', true)");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:    public void testElse() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:        ruauUITestingUtil
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/IfComponentTest.java:                .getRawEval("var c = $A.PERFCORE.getCreatedComponent(); c.set('v.branch', false); c.set('v.enabled', true)");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:package org.ruauframework.test.perf.custom;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:import org.ruauframework.test.perf.core.CustomPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:public final class DatePickerComponentTest extends CustomPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:    public DatePickerComponentTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:        setComponentDef(getDefDescriptor("performanceTest:ui_datePicker"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:    public void TODO_testChangeYear() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:        // Change calendar year.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/DatePickerComponentTest.java:        WebElement element = currentDriver.findElement(By.cssSelector(".nextYear"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:package org.ruauframework.test.perf.custom;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:import org.ruauframework.test.perf.core.CustomPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:public final class CheckboxMenuListComponentTest extends CustomPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:    public CheckboxMenuListComponentTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:        setComponentDef(getDefDescriptor("performanceTest:ui_menu_checkBox"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:    public void TODO_testChangeMenuItem() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:        // Open a menu and check multiple items.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/CheckboxMenuListComponentTest.java:        waitForElementPresent(item);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:package org.ruauframework.test.perf.custom;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:import org.ruauframework.test.perf.core.CustomPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:public final class ActionMenuListComponentTest extends CustomPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:    public ActionMenuListComponentTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:        setComponentDef(getDefDescriptor("performanceTest:ui_menu_actionMenu"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:    public void TODO_testChangeMenuItem() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:        // Open a menu and select an item.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:        WebElement item = currentDriver.findElement(By.cssSelector(".actionItem4"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/ActionMenuListComponentTest.java:        waitForElementPresent(item);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:package org.ruauframework.test.perf.custom;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:import org.ruauframework.test.perf.core.CustomPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:import org.openqa.selenium.support.ui.Select;
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:public final class InputSelectComponentTest extends CustomPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:    public InputSelectComponentTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:        setComponentDef(getDefDescriptor("performanceTest:ui_inputSelect"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:    public void TODO_testSelectOption() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/custom/InputSelectComponentTest.java:        // Change selected dropdown option.
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:package org.ruauframework.test.perf;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:import org.ruauframework.test.SauceUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:import org.ruauframework.test.perf.core.AbstractPerfTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:import org.ruauframework.test.perf.metrics.PerfMetrics;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:import org.ruauframework.test.perf.metrics.PerfMetricsComparator;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * Checks that the metrics we measure are the expected ones. The idea is to measure the metrics manually, input the
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * values in this test class and then have this test class verify that our automated ways of getting the metrics get the
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java: * exact same values.
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:public final class MeasuringPerfMetricsTest extends AbstractPerfTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    public MeasuringPerfMetricsTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    private static final String LABEL_MOCK = "Mock value for 'label' attribute";
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    protected int numPerfRuueRuns() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        return getName().equals("testButton") ? 1 : 0;
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:     * Overriding to check the expected metrics are meaused
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    protected void perfTearDown(PerfMetrics actual) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        String testName = getName();
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        if (testName.equals("testButton")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:            verifyButton(actual);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        } else if (testName.equals("testLabel")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:            verifyLabel(actual);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        } else if (testName.equals("testDummyPerf")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:            verifyDummyPerf(actual);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:            fail("TODO: " + testName + ": " + actual.toLongString());
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    // ui:button: basic simple ref case
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:     * Test loading component using /perfTest/perf.app
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    private void verifyButton(PerfMetrics actual) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        expected.setMetric("Timeline.Rendering.Layout", 2);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        expected.setMetric("Timeline.Painting.Paint", 2); // button + image
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        // Ruue Stats metrics:
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        expected.setMetric("Ruue.CreateComponent.component.added", 9);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        expected.setMetric("Ruue.RenderComponent.rerender.removed", 0);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        assertMetrics(expected, actual);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        // verify the component was loaded
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        assertEquals("button loaded", LABEL_MOCK,
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:                RuueTextUtil.urldecode(currentDriver.findElement(By.cssSelector(".uiButton")).getText()));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        // MedianPerfMetric networkMetric = (MedianPerfMetric) median.getMetric("Network.encodedDataLength");
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    // ui:label: perf.app was not showing the label in the page
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    public void testLabel() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        runWithPerfApp(getDefDescriptor("ui:label"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    private void verifyLabel(PerfMetrics actual) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        expected.setMetric("Timeline.Rendering.Layout", 1);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        expected.setMetric("Timeline.Painting.Paint", 1);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        assertMetrics(expected, actual);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        // verify the component was loaded
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        assertEquals("label loaded", LABEL_MOCK,
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:                RuueTextUtil.urldecode(currentDriver.findElement(By.cssSelector(".uiLabel")).getText()));
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    private void verifyDummyPerf(PerfMetrics actual) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        if (!SauceUtil.areTestsRunningOnSauce()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:            logger.warning("skipping test because not running in SauceLabs: " + getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        expected.setMetric("Timeline.Rendering.Layout", 2);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        expected.setMetric("Timeline.Painting.Paint", 3);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        assertMetrics(expected, actual);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    private void assertMetrics(PerfMetrics expected, PerfMetrics actual) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        String differentMessage = new NoVariabilityPerfMetricsComparator().compare(expected, actual);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        if (differentMessage != null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:            fail(differentMessage);
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:    private static class NoVariabilityPerfMetricsComparator extends PerfMetricsComparator {
ruau/ruau/src/test/java/org/ruauframework/test/perf/MeasuringPerfMetricsTest.java:        protected int getAllowedVariability(String metricName) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java:package org.ruauframework.test.perf.components;
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java:import org.ruauframework.test.perf.core.ComponentPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java:public final class PerfLoadComponentTest extends ComponentPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java:    public PerfLoadComponentTest(String name, DefDescriptor<ComponentDef> desc) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/components/PerfLoadComponentTest.java:        super(name, desc);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:package org.ruauframework.test.perf.core;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import java.io.Serializable;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import java.net.MalformedURLException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import java.net.URISyntaxException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import java.net.URLEncoder;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import java.util.logging.Level;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import java.util.logging.Logger;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.def.AttributeDef;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.test.WebDriverTestCase.TargetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.test.perf.PerfMockAttributeValueProvider;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.test.perf.PerfWebDriverUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.openqa.selenium.Dimension;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import org.openqa.selenium.support.ui.WebDriverWait;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import com.google.common.collect.ImmutableMap;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:@TargetBrowsers({ BrowserType.GOOGLECHROME })
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:public abstract class AbstractPerfTestCase extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    protected static final Logger logger = Logger.getLogger(AbstractPerfTestCase.class.getSimpleName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    private String testName;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    public AbstractPerfTestCase(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        // needs to temporarily be set to something non-null as getName() should never return null
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        testName = name;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    public void setTestName(String testName) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        this.testName = testName;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    public final String getName() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        return testName;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    public final boolean isPerfTest() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:     * Don't store details to decrease gold files size
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    public final boolean storeDetailsInGoldFile() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        return false;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:     * @return 5 runs (3 was too little)
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    protected final Dimension getWindowSize() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        // use same size as OnePhoneContext.java: 548x320 (1/2 iPhone 5?)
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    protected final void runWithPerfApp(DefDescriptor<ComponentDef> descriptor) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            setupContext(mode, RuueContext.Format.JSON, descriptor);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            String relativeUrl = "/perfTest/perf.app?";
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            Map<String, Object> attributeValues = getComponentAttributeValues(descriptor);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            Map<String, Serializable> hash = ImmutableMap.of("componentDef", descriptor.getQualifiedName(),
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    "attributes",
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    ImmutableMap.of("values", attributeValues));
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            relativeUrl += "ruau.mode=" + mode;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            relativeUrl += "#" + URLEncoder.encode(Json.serialize(hash), "UTF-8");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            String url = getAbsoluteURI(relativeUrl).toString();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            logger.info("invoking perf.app: " + url);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                loadComponent(url, descriptor);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            } catch (ThreadDeath td) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            } catch (Throwable th) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                if (PerfWebDriverUtil.isInfrastructureError(th)) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    // retry if a possible infrastructure error
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    logger.log(Level.WARNING, "infrastructure error, retrying", th);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    loadComponent(url, descriptor);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        } finally {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            Ruue.getContextService().endContext();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    private void loadComponent(String url, DefDescriptor<ComponentDef> descriptor) throws MalformedURLException,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        openTotallyRaw(url);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        // wait for component loaded or ruau error message
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        final By componentRendered = By.cssSelector("[data-app-rendered-component]");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        final By ruauErrorMessage = By.id("ruauErrorMessage");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        // don't use the RuueUITestingUtil wait that does extra checks/processing
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            public By apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                if (d.findElement(ruauErrorMessage).isDisplayed()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    return ruauErrorMessage;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    // check for the case where both the componentRendered and ruauErrorMessage are displayed
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    if (d.findElement(ruauErrorMessage).isDisplayed()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                        return ruauErrorMessage;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        By locatorFound = new WebDriverWait(currentDriver, 60).withMessage("Error loading " + descriptor).until(
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        if (locatorFound == ruauErrorMessage) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            fail("Error loading " + descriptor.getName() + ": "
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    + currentDriver.findElement(ruauErrorMessage).getText());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        // check for internal errors
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        if (locatorFound == componentRendered) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            if (text != null && text.contains("internal server error")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                fail("Error loading " + descriptor.getDescriptorName() + ": " + text);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    protected PerfMockAttributeValueProvider getMockAttributeValueProvider() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        return PerfMockAttributeValueProvider.DEFAULT_INSTANCE;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    private Map<String, Object> getComponentAttributeValues(DefDescriptor<ComponentDef> componentDefDefDescriptor)
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        Map<String, Object> params = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        Map<DefDescriptor<AttributeDef>, AttributeDef> attrs = componentDefDefDescriptor.getDef().getAttributeDefs();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        for (Map.Entry<DefDescriptor<AttributeDef>, AttributeDef> attr : attrs.entrySet()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            Object attributeValue = getMockAttributeValueProvider().getAttributeValue(componentDefDefDescriptor,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                    attr.getValue());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:            if (attributeValue != null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:                params.put(attr.getKey().getName(), attributeValue);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        return params;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    protected static final DefDescriptor<ComponentDef> getDefDescriptor(String qualifiedName) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        return Ruue.getDefinitionService().getDefDescriptor(qualifiedName, ComponentDef.class);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    protected void profileStart(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        ruauUITestingUtil.getRawEval(String.format("$A.PERFCORE.profileStart('%s');", name));
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:    protected void profileEnd(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/AbstractPerfTestCase.java:        ruauUITestingUtil.getRawEval(String.format("$A.PERFCORE.profileEnd('%s');", name));
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:package org.ruauframework.test.perf.core;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:import org.ruauframework.test.annotation.PerfCmpTest;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java: * Base class for Ruue WebDriver tests.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:public abstract class ComponentPerfAbstractTestCase extends AbstractPerfTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:    public ComponentPerfAbstractTestCase(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:    public ComponentPerfAbstractTestCase(String name, DefDescriptor<ComponentDef> desc) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:    public abstract void testRun() throws Throwable;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:    public final String getGoldFileName() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfAbstractTestCase.java:        return descriptor.getNamespace() + '/' + descriptor.getName();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:package org.ruauframework.test.perf.core;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:import org.ruauframework.test.annotation.PerfCustomTest;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:import org.ruauframework.test.perf.metrics.PerfMetricsComparator;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:import org.openqa.selenium.support.ui.WebDriverWait;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:import com.google.common.base.Function;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java: * Base class for Ruue WebDriver tests.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:public abstract class CustomPerfAbstractTestCase extends AbstractPerfTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    private static final String PERF_START_MARKER_SUFFIX = ":start";
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    private static final String PERF_END_MARKER_SUFFIX = ":end";
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    public CustomPerfAbstractTestCase(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    public CustomPerfAbstractTestCase(String name, DefDescriptor<ComponentDef> desc) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    protected void superRunTest() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:        profileStart(getPerfStartMarker());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:        profileEnd(getPerfEndMarker());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    public String getPerfStartMarker() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:        return this.getName() + PERF_START_MARKER_SUFFIX;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    public String getPerfEndMarker() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:        return this.getName() + PERF_END_MARKER_SUFFIX;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    public final String getGoldFileName() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:        return descriptor.getNamespace() + '/' + descriptor.getName() + '_' + this.getName();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    public PerfMetricsComparator getPerfMetricsComparator() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    private static final PerfMetricsComparator CUSTOM_COMPARATOR = new PerfMetricsComparator() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:        protected int getAllowedVariability(String metricName) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:            // TODO: allow bigger variability if necessary
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:            return super.getAllowedVariability(metricName);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:    protected final <V> V waitUntil(final Function<? super WebDriver, V> function) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:        return new WebDriverWait(currentDriver, timeoutInSecs)
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:                    public V apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfAbstractTestCase.java:                        return function.apply(d);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:package org.ruauframework.test.perf.core;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import java.util.Enumeration;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import java.util.Set;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import java.util.logging.Logger;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import junit.framework.Test;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import junit.framework.TestSuite;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import org.ruauframework.test.TestInventory;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import org.ruauframework.test.TestInventory.Type;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import org.ruauframework.test.annotation.PerfTestSuite;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:public class FrameworkPerfTestSuiteTest extends TestSuite {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:    private static final Logger LOG = Logger.getLogger(FrameworkPerfTestSuiteTest.class.getSimpleName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:    public static TestSuite suite() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:        return new FrameworkPerfTestSuiteTest();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:    private FrameworkPerfTestSuiteTest() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:        super("Framework Perf tests");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:        createTestCases();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:    private void createTestCases() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:        if (System.getProperty("skipFrameworkPerfTests") != null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:            LOG.info("Skipping " + getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:        LOG.info("Bootstrapping " + getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:        Set<TestInventory> inventories = ServiceLocator.get().getAll(TestInventory.class);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:            addSuite(child);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:    private void addSuite(TestSuite suite) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:            for (Enumeration<?> tests = suite.tests(); tests.hasMoreElements();) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:                if (next instanceof TestSuite) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:                    addSuite((TestSuite) next);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:                } else if (next instanceof FrameworkPerfAbstractTestCase) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:                    LOG.info("Adding Framework TestCase:" + next.toString());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfTestSuiteTest.java:                    addTest(next);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:package org.ruauframework.test.perf.core;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import java.lang.reflect.Constructor;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import java.util.Set;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import java.util.Vector;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import java.util.logging.Level;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import java.util.logging.Logger;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import junit.framework.Test;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import junit.framework.TestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import junit.framework.TestSuite;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.service.ContextService;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.test.TestInventory;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.test.TestInventory.Type;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.test.annotation.PerfTestSuite;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import com.google.common.collect.ImmutableSet;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:public class ComponentPerfSuiteTest extends TestSuite {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    // List components that we can't able to instantiate from client side.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    // The reason could be a dependency to a server side model. Eg. ui:inputDate
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    // ui:action cmp shold be abstract?
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    private static final Set<String> BLACKLISTED_COMPONENTS = ImmutableSet.of(
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            "markup://ui:inputDate" // server side dependency
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            , "markup://ui:action" // this should be abstract
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            , "markup://perf:dummyPerf"
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    private static final Logger LOG = Logger.getLogger(ComponentPerfSuiteTest.class.getSimpleName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    public ComponentPerfSuiteTest(String name) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        LOG.info("ComponentPerfSuiteTest: " + name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        setName(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        createTestCases();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:     * @return the list of namespaces to create tests for
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    protected List<String> getNamespaces() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        return ImmutableList.of("ui", "perf");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:     * Components that we aren't able to instantiate from client side. The reason could be a dependency to a server side
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:     * model. Eg. ui:inputDate ui:action cmp should be abstract?
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    protected Set<String> getBlacklistedComponents() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    protected void createTestCases() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        LOG.info("createTestCases: starting");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        for (String namespace : getNamespaces()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                addTest(new NamespacePerfTestSuite(namespace));
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                LOG.log(Level.WARNING, "cannot load namespace " + namespace, e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    public static TestSuite suite() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:     * Override to patch the test case, i.e. for SFDC core
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    protected TestCase patchPerfComponentTestCase(ComponentPerfAbstractTestCase test,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        test.setTestName("perf_" + test.getClass().getSimpleName() + '_' + descriptor.getDescriptorName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    public final class NamespacePerfTestSuite extends TestSuite {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        public NamespacePerfTestSuite(String namespace) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            super(namespace);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            ContextService contextService = Ruue.getContextService();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            boolean contextStarted = false;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            if (!contextService.isEstablished()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                contextStarted = true;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                contextService.startContext(Mode.PTEST, Format.JSON, Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            Map<String, TestSuite> subSuites = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                DefDescriptor<ComponentDef> matcher = definitionService.getDefDescriptor(
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                        String.format("markup://%s:*", namespace), ComponentDef.class);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                Set<DefDescriptor<ComponentDef>> descriptors = definitionService.find(matcher);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                    if (descriptor.getDef().isAbstract()
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                            || getBlacklistedComponents().contains(descriptor.getQualifiedName())) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                    } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                        test = new FailTestCase(descriptor, t);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                    String testNamespace = descriptor.getNamespace();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                    if (namespace.equals(testNamespace)) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                        addTest(test);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                        TestSuite subSuite = subSuites.get(testNamespace);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                            subSuite = new TestSuite(testNamespace);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                            subSuites.put(testNamespace, subSuite);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                            addTest(subSuite);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                        subSuite.addTest(test);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                LOG.log(Level.WARNING, "Failed to load component tests for namespace: " + namespace, t);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            } finally {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                if (contextStarted) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    private class ComponentSuiteTest extends TestSuite {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            super(descriptor.getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            TestInventory inventory = ServiceLocator.get().get(TestInventory.class, "ruauTestInventory");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            Vector<Class<? extends Test>> testClasses = inventory.getTestClasses(Type.PERFCMP);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            for (Class<? extends Test> testClass : testClasses) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                    Constructor<? extends Test> constructor = testClass.getConstructor(String.class,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                            DefDescriptor.class);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                    ComponentPerfAbstractTestCase test = (ComponentPerfAbstractTestCase) constructor.newInstance(
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                    addTest(patchPerfComponentTestCase(test, descriptor));
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:                    LOG.log(Level.WARNING, "exception instantiating " + testClass.getName(), e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:    private static class FailTestCase extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        private final Throwable cause;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        private FailTestCase(DefDescriptor<?> descriptor, Throwable cause) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            super(descriptor.getQualifiedName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            this.cause = cause;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:        public void runTest() throws Throwable {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/ComponentPerfSuiteTest.java:            throw cause;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:package org.ruauframework.test.perf.core;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import java.util.Enumeration;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import java.util.Set;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import java.util.logging.Logger;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import junit.framework.Test;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import junit.framework.TestSuite;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import org.ruauframework.test.TestInventory;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import org.ruauframework.test.TestInventory.Type;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import org.ruauframework.test.annotation.PerfTestSuite;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:public class CustomPerfTestSuiteTest extends TestSuite {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:    private static final Logger LOG = Logger.getLogger(CustomPerfTestSuiteTest.class.getSimpleName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:    public static TestSuite suite() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:    private CustomPerfTestSuiteTest() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:        createTestCases();
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:    private void createTestCases() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:            LOG.info("Skipping " + getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:        LOG.info("Bootstrapping " + getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:        Set<TestInventory> inventories = ServiceLocator.get().getAll(TestInventory.class);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:            addSuite(child);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:    private void addSuite(TestSuite suite) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:            for (Enumeration<?> tests = suite.tests(); tests.hasMoreElements();) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:                if (next instanceof TestSuite) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:                    addSuite((TestSuite) next);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:                } else if (next instanceof CustomPerfAbstractTestCase) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:                    LOG.info("Adding Custom TestCase:" + next.toString());
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/CustomPerfTestSuiteTest.java:                    addTest(next);
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java:package org.ruauframework.test.perf.core;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java:import org.ruauframework.test.annotation.PerfFrameworkTest;
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java: * Base class for Ruue WebDriver tests.
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java:@PerfFrameworkTest
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java:public abstract class FrameworkPerfAbstractTestCase extends AbstractPerfTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java:    public FrameworkPerfAbstractTestCase(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/core/FrameworkPerfAbstractTestCase.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:package org.ruauframework.test.perf.rdp;
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:import org.ruauframework.test.perf.core.AbstractPerfTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:import org.ruauframework.test.perf.metrics.PerfMetric;
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:import org.ruauframework.test.perf.metrics.PerfMetricsCollector;
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:import org.json.JSONArray;
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:public final class RDPAnalyzerTest extends AbstractPerfTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:    public RDPAnalyzerTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:    protected boolean runPerfWarmupRun() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        return 0; // run only the first warmup run
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:    protected int numPerfRuueRuns() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        return 0; // run only the first warmup run
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        return 0; // run only the first warmup run
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:    // TODO: remove @UnAdaptableTest once we also use SauceLabs for perf tests in autobuild
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        openTotallyRaw("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        // UC: verify raw protocol notifications:
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        List<RDPNotification> notifications = getRDPNotifications();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        // checks has expected events:
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue(RDP.Timeline.eventRecorded + " not found",
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                RDPUtil.containsMethod(notifications, RDP.Timeline.eventRecorded));
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue(RDP.Network.loadingFinished + " not found",
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                RDPUtil.containsMethod(notifications, RDP.Network.loadingFinished));
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue(RDP.Page.domContentEventFired + " not found",
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                RDPUtil.containsMethod(notifications, RDP.Page.domContentEventFired));
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue(RDP.Page.loadEventFired + " not found",
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                RDPUtil.containsMethod(notifications, RDP.Page.loadEventFired));
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        // UC: extract/verify Network metrics
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        RDPAnalyzer analyzer = new RDPAnalyzer(notifications, getPerfStartMarker(), getPerfEndMarker());
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        List<PerfMetric> networkMetrics = analyzer.analyzeNetworkDonAmE();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertEquals("Network.numRequests", requestsMetric.getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        int numRequests = requestsMetric.getIntValue();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue("numRequests: " + numRequests, numRequests >= 6);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertEquals("Network.encodedDataLength", bytesMetric.getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertEquals("bytes", bytesMetric.getUnits());
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue("bytes: " + bytesMetric.getIntValue() + ": " + bytesMetric.toString(), bytesMetric.getIntValue() > 0);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        JSONArray requests = bytesMetric.getDetails();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue("num requests: " + requests.length(), requests.length() == numRequests);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        // UC: extract/verify Timeline event metrics
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        Map<String, TimelineEventStats> timelineEventsStats = analyzer.analyzeTimelineDonAmE();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        TimelineEventStats paintStats = timelineEventsStats.get("Paint");
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue("num paints: " + paintStats.getCount(), paintStats.getCount() >= 1);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        // UC: getTimeline() gets info from last getTimeline() call
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        // we shouldn't get any more events in the timeline at this point
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertEquals(0, getRDPNotifications().size());
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:     * Checks the timeline has the marks we are adding
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:    public void testTimelineMarks() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        List<RDPNotification> notifications = getRDPNotifications();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        RDPAnalyzer analyzer = new RDPAnalyzer(notifications, getPerfStartMarker(), getPerfEndMarker());
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        // UC: check start and end mark are at beginning/end of filtered timeline
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        List<JSONObject> filteredTimeline = analyzer.getFilteredFlattenedTimelineEvents();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        JSONObject lastEntry = filteredTimeline.get(filteredSize - 1);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue(firstEntry.toString(),
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                TimelineEventUtil.containsTimelineTimeStamp(firstEntry, getPerfStartMarker()));
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue(lastEntry.toString(),
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                TimelineEventUtil.containsTimelineTimeStamp(lastEntry, getPerfEndMarker()));
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        // UC: check the marks exists and in the right order
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        List<String> marks = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        for (JSONObject timelineEvent : analyzer.getFilteredFlattenedTimelineEvents()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:            String mark = TimelineEventUtil.isTimelineTimeStamp(timelineEvent);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:            if (mark != null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                marks.add(mark);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertEquals("[PERF:start, START:cmpCreate, END:cmpCreate, START:cmpRender, END:cmpRender, PERF:end]",
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                marks.toString());
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        metricsCollector.startCollecting();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        RDPAnalyzer analyzer = metricsCollector.getRDPAnalyzer();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        List<JSONObject> fulDevToolsLog = analyzer.getDevToolsLog();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue("dev tools log size: " + fullSize, fulDevToolsLog.size() > 10);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        // UC: dev tools log between marks
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        List<JSONObject> trimmedDevToolsLog = analyzer.getFilteredDevToolsLog();
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue("full " + fullSize + ", trimmed " + trimmedSize, trimmedSize < fullSize);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        JSONObject lastEntry = trimmedDevToolsLog.get(trimmedSize - 1);
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue(firstEntry.toString(),
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                TimelineEventUtil.containsTimelineTimeStamp(firstEntry, getPerfStartMarker()));
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:        assertTrue(lastEntry.toString(),
ruau/ruau/src/test/java/org/ruauframework/test/perf/rdp/RDPAnalyzerTest.java:                TimelineEventUtil.containsTimelineTimeStamp(lastEntry, getPerfEndMarker()));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:package org.ruauframework.test.perf;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import java.io.StringReader;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import java.util.ArrayList;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import java.util.logging.Level;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import java.util.logging.Logger;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.ruauframework.test.SauceUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.ruauframework.test.WebDriverTestCase.UnexpectedError;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.ruauframework.test.perf.rdp.CPUProfilerAnalyzer;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.ruauframework.test.perf.rdp.RDPNotification;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.ruauframework.util.RuueUITestingUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.JavascriptExecutor;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.TimeoutException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.UnsupportedCommandException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.WebDriverException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.logging.LogEntry;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.logging.LogType;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.logging.LoggingPreferences;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.remote.CapabilityType;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import org.openqa.selenium.remote.DesiredCapabilities;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java: * Utility WebDriver methods related to performance
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:public final class PerfWebDriverUtil {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    private static final Logger LOG = Logger.getLogger(PerfWebDriverUtil.class.getSimpleName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    private static final LoggingPreferences PERFORMANCE_LOGGING_PREFS;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    static {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // NOTE: need to create single LoggingPreferences object to be reused as LoggingPreferences
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // doesn't implement hashCode()/equals() correctly
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        PERFORMANCE_LOGGING_PREFS.enable(LogType.PERFORMANCE, Level.INFO);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // logPrefs.enable(LogType.BROWSER, Level.ALL);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // Level.FINE for LogType.DRIVER shows all dev tools requests and responses
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // logPrefs.enable(LogType.DRIVER, Level.WARNING);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // N/A in chromedriver: logPrefs.enable(LogType.PROFILER, Level.ALL);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // N/A in chromedriver: logPrefs.enable(LogType.CLIENT, Level.ALL);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // N/A in chromedriver: logPrefs.enable(LogType.SERVER, Level.ALL);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * Adds capabilites to request collecting WebDriver performance data
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public static void addLoggingCapabilities(DesiredCapabilities capabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        capabilities.setCapability(CapabilityType.LOGGING_PREFS, PERFORMANCE_LOGGING_PREFS);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * Pretty-prints the data from the Resource Timing API
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public static void showResourceTimingData(List<Map<String, Object>> data) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        for (Map<String, Object> entry : data) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            } catch (JSONException e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                throw new RuntimeException(String.valueOf(entry), e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    // instance:
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    private final WebDriver driver;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    private final RuueUITestingUtil ruauUITestingUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public PerfWebDriverUtil(WebDriver driver, RuueUITestingUtil ruauUITestingUtil) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        this.ruauUITestingUtil = ruauUITestingUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * @return new RDPNotifications since the last call to this method
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public List<RDPNotification> getRDPNotifications() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        List<RDPNotification> events = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            if (LOG.isLoggable(Level.FINE)) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            String message = logEntry.getMessage();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            // logMessage is: {"message":{"method":"Timeline.eventRecorded","params":{...
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                JSONObject json = new JSONObject(message);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                JSONObject event = json.getJSONObject("message");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                events.add(new RDPNotification(event, webview));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            } catch (JSONException e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                LOG.log(Level.WARNING, message, e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public void addTimelineTimeStamp(String label) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        ((JavascriptExecutor) driver).executeScript("console.timeStamp('" + label + "')");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * @param type one of the LogTypes, i.e. LogType.PERFORMANCE
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * @return log entries accumulated since the last time this method was called
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    private List<LogEntry> getLogEntries(String type) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            return driver.manage().logs().get(type).getAll();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        } catch (WebDriverException ignore) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    private static final List<LogEntry> NO_ENTRIES = ImmutableList.of();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    // window.performance
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * @return the usedJSHeapSize from window.performance.memory
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public long getUsedJSHeapSize() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        return (long) ((JavascriptExecutor) driver).executeScript("return window.performance.memory.usedJSHeapSize");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * See https://developers.google.com/chrome-developer-tools/docs/network and http://www.w3.org/TR/resource-timing
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * @return Resource Timing API performance
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public List<Map<String, ?>> getResourceTimingData() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        List<Map<String, ?>> entries = (List<Map<String, ?>>) ((JavascriptExecutor) driver)
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                .executeScript("return window.performance.getEntries()");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    // UIPerfStats:
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public void clearUIPerfStats() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        ruauUITestingUtil.getEval("$A.Perf.removeStats()");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public Map<String, String> getUIPerfStats(String stage, List<String> transactionsToGather) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        Map<String, String> stats = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        String json = ruauUITestingUtil.getEval("return $A.util.json.encode($A.Perf.toJson())").toString();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        json = json.replace("\\\"", "\"");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        StringReader in = new StringReader(json);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        Map<?, ?> message = (Map<?, ?>) new JsonReader().read(in);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        ArrayList<HashMap<?, ?>> measures = (ArrayList<HashMap<?, ?>>) message
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                .get("measures");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        for (HashMap<?, ?> marks : measures) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            if (!transactionsToGather.isEmpty()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                if (!transactionsToGather.contains(marks.get("measure")) &&
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                        // IE10 list of measures was not in the same order
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                        // as expected in transactionsToGather so need to
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                        // make sure measure and transactionsToGather are
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                        // similar
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                        !RuueTextUtil.stringsHaveSameContent(
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                                (String) marks.get("measure"),
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                                transactionsToGather.get(0))) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            String measureName = marks.get("measure").toString()
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:                    + (stage != null ? ("_" + stage) : "");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            stats.put(measureName, marks.get("et").toString());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        return stats;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    // JS heap snapshot
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * See https://code.google.com/p/chromedriver/issues/detail?id=519<br/>
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * Note: slow, each call takes a couple of seconds
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * @return JS heap snapshot
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public Map<String, ?> takeHeapSnapshot() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        if (SauceUtil.areTestsRunningOnSauce()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            throw new UnsupportedOperationException("required 2.10 chromedriver still not available in SauceLabs");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        long startTime = System.currentTimeMillis();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        Map<String, ?> snapshot = (Map<String, ?>) ((JavascriptExecutor) driver).executeScript(":takeHeapSnapshot");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        LOG.info("took heap snapshot in " + (System.currentTimeMillis() - startTime) + " ms");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        return snapshot;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * Analyzes the data in the snapshot and returns summary data
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public static JSONObject analyzeHeapSnapshot(Map<String, ?> data) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        Map<String, ?> metadata = (Map<String, ?>) data.get("snapshot");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        int nodeCount = ((Number) metadata.get("node_count")).intValue();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // "node_fields": ["type","name","id","self_size","edge_count"]
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        List<Number> nodes = (List<Number>) data.get("nodes");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        int totalSize = 0;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            totalSize += nodes.get(5 * i + 3).intValue();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            json.put("total_size", totalSize);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        } catch (JSONException e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    // JavaScript CPU Profiler
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * Start JavaScript CPU profiler
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public void startProfile() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            ((JavascriptExecutor) driver).executeScript(":startProfile");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        } catch (UnsupportedCommandException e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            // happens about .5% of the time
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            LOG.log(Level.WARNING, ":startProfile failed, retrying", e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            ((JavascriptExecutor) driver).executeScript(":startProfile");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * Stop JavaScript CPU profiler and return profile info
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public Map<String, ?> endProfile() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        // takes about 300ms for ui:button
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        Map<String, ?> retval = null;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            retval = (Map<String, ?>) ((JavascriptExecutor) driver).executeScript(":endProfile");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        } catch (UnsupportedCommandException e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            // happens about .5% of the time
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            LOG.log(Level.WARNING, ":endProfile failed, retrying", e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            retval = (Map<String, ?>) ((JavascriptExecutor) driver).executeScript(":endProfile");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        if (retval == null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            LOG.warning(":endProfile returned no results");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        return (Map<String, ?>) retval.get("profile");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public static JSONObject analyzeCPUProfile(Map<String, ?> profile) throws JSONException {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        return new CPUProfilerAnalyzer(profile).analyze();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:     * @return true if the test failure is most likely an infrastructure error (i.e. SauceLabs problem)
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:    public static boolean isInfrastructureError(Throwable testFailure) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        if (testFailure instanceof UnexpectedError) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            testFailure = testFailure.getCause();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        if (testFailure instanceof TimeoutException) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            // i.e. ruau did not even load
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        if (testFailure instanceof UnsupportedCommandException) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            // org.openqa.selenium.UnsupportedCommandException: ERROR Job 2cf6026df5514bd1a859b1a82ef1c25a is not in
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            // progress. It may have recently finished, or experienced an error. You can learn more at
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            // https://saucelabs.com/jobs/2cf6026df5514bd1a859b1a82ef1c25a Command duration or timeout: 122 milliseconds
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            String m = testFailure.getMessage();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:            if (m != null && m.contains("is not in progress")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfWebDriverUtil.java:        return false;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:package org.ruauframework.test.perf;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:import java.io.File;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:import org.ruauframework.test.perf.PerfResultsUtil.ResultsJSON;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:public final class PerfResultsUtilTest extends UnitTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:        ResultsJSON resultsJSON = new ResultsJSON(false);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:        // has build info
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:        assertNotNull(build);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:        resultsJSON.addResultsFile(new File(PerfResultsUtil.RESULTS_DIR + "/goldfiles/ui/label.json"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:        resultsJSON.addResultsFile(new File(PerfResultsUtil.RESULTS_DIR + "/goldfiles/ui/console.json"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:        resultsJSON.addResultsFile(new File(PerfResultsUtil.RESULTS_DIR + "/goldfiles/ui/button.json"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:        resultsJSON.addResultsFile(new File(PerfResultsUtil.RESULTS_DIR + "/timelines/iteration.json"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:        assertEquals(
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:                "{\"timelines\":{\"list\":[\"iteration.json\"]},\"goldfiles\":{\"ui\":{\"list\":[\"button.json\",\"console.json\",\"label.json\"]}}}",
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:        assertEquals(
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtilTest.java:                "{\"timelines\":{\"list\":[\"iteration.json\"]},\"goldfiles\":{\"ui\":{\"list\":[\"button.json\",\"label.json\"]}}}",
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java:package org.ruauframework.test.perf;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java: * Example PerfTests.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java:public final class PerfUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java:    public PerfUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java:    public void testLabel() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java:        openTotallyRaw("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfUITest.java:        openTotallyRaw("/ui/button.cmp?label=Push");
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:package org.ruauframework.test.perf.metrics;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import java.util.logging.Level;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import java.util.logging.Logger;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.ruauframework.test.WebDriverTestCase.PerfRunMode;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.ruauframework.test.perf.PerfResultsUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.ruauframework.test.perf.PerfWebDriverUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.ruauframework.test.perf.rdp.CPUProfilerAnalyzer;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.ruauframework.test.perf.rdp.RDPAnalyzer;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.ruauframework.test.perf.rdp.RDPNotification;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.ruauframework.test.perf.rdp.TimelineEventStats;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.ruauframework.test.perf.rdp.TimelineEventUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.json.JSONArray;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:import org.openqa.selenium.WebDriverException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java: * Collects and holds raw perf metrics data for a test case
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:public final class PerfMetricsCollector {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private static final Logger LOG = Logger.getLogger(PerfMetricsCollector.class.getSimpleName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    // NOTE: cannot do both JS profiler and heap in the same run, browser gets too slow or hangs
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private static final boolean CAPTURE_JS_HEAP_METRICS = false; // slow: 7 secs/call
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private final WebDriverTestCase test;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private long startMillis;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private int startBrowserJSHeapSizeBytes;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private long elapsedMillis;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private int deltaBrowserJSHeapSizeBytes;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private List<RDPNotification> notifications;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private Map<String, Map<String, Map<String, List<Object>>>> ruauStats;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private Map<String, ?> jsProfilerData;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private Map<String, ?> heapSnapshot;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private RDPAnalyzer rdpAnalyzer;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private final PerfRunMode perfRunMode;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    public PerfMetricsCollector(WebDriverTestCase test, PerfRunMode perfRunMode) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    public RDPAnalyzer getRDPAnalyzer() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        return rdpAnalyzer;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    public void startCollecting() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        case TIMELINE:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            test.getRDPNotifications(); // to reset logs
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        case PROFILE:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            test.startProfile();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                startBrowserJSHeapSizeBytes = getBrowserJSHeapSize(test.takeHeapSnapshot());
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        default:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        startMillis = System.currentTimeMillis();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        elapsedMillis = System.currentTimeMillis() - startMillis;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        case TIMELINE:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            // get timeline before anything else so only events from the test appear
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            notifications = test.getRDPNotifications();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        case PROFILE:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            jsProfilerData = test.endProfile();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                heapSnapshot = test.takeHeapSnapshot();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                deltaBrowserJSHeapSizeBytes = getBrowserJSHeapSize(heapSnapshot) - startBrowserJSHeapSizeBytes;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        case AURASTATS:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                ruauStats = test.getRuueStats();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            } catch (WebDriverException e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                // TODO: happens for framework tests
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        default:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        return analyze();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    // private:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:     * Analyzes the raw perf data and returns relevant metrics
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private PerfMetrics analyze() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            case TIMELINE:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                metrics.setMetric(new PerfMetric("WallTime", elapsedMillis, "milliseconds"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                rdpAnalyzer = new RDPAnalyzer(notifications, test.getPerfStartMarker(), test.getPerfEndMarker());
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                // add "Network..." metrics:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                for (PerfMetric metric : rdpAnalyzer.analyzeNetworkDonAmE()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                // add "Timeline..." metrics:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                Map<String, TimelineEventStats> timelineEventsStats = rdpAnalyzer.analyzeTimelineDonAmE();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                for (TimelineEventStats stats : timelineEventsStats.values()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                    metric.setName(TimelineEventUtil.toMetricName(stats.getType()));
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                    metric.setValue(stats.getCount());
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                    JSONArray details = stats.getDetails();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                    if (details != null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                        metric.setDetails(details);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                metrics.setDevToolsLog(rdpAnalyzer.getFilteredDevToolsLog());
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            case PROFILE:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                // TODO: filter jsProfilerData?
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                metrics.setJSProfilerData(jsProfilerData);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                JSONObject jscpuMetrics = new CPUProfilerAnalyzer(jsProfilerData).analyze();
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                metrics.setMetric("Profile.JSCPU.timeProgram", jscpuMetrics.get("timeProgramMillis"), "millis");
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                metrics.setMetric("Profile.JSCPU.numIslands", jscpuMetrics.get("numIslands"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                metrics.setMetric("Profile.JSCPU.maxDepth", jscpuMetrics.get("maxDepth"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                    metrics.setHeapSnapshot(heapSnapshot);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                    metrics.setMetric("Profile.JSMEM.deltaHeap", deltaBrowserJSHeapSizeBytes, "bytes");
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            case AURASTATS:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                // "CreateComponent": {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                // "afterRender": {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                // "added": [],
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                if (ruauStats != null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                    String ruauStatsContents = new JSONObject(ruauStats).toString(2);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                    PerfResultsUtil.writeRuueStats(ruauStatsContents, test.getGoldFileName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                    for (String name : ruauStats.keySet()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                        Map<String, Map<String, List<Object>>> nameValue = ruauStats.get(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                        for (String method : nameValue.keySet()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                            Map<String, List<Object>> methodValue = nameValue.get(method);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                            for (String what : methodValue.keySet()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                                List<Object> value = methodValue.get(what);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                                metrics.setMetric("Ruue." + name + '.' + method + '.' + what, value.size());
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            default:
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:                break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            LOG.log(Level.WARNING, test.getName(), e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:     * @return the current browser JS heap size in bytes
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:    private static int getBrowserJSHeapSize(Map<String, ?> snapshot) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        JSONObject summary = PerfWebDriverUtil.analyzeHeapSnapshot(snapshot);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:            return summary.getInt("total_size");
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        } catch (JSONException e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        sb.append(test.getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        sb.append(",elapsed=" + elapsedMillis);
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        sb.append(",RDP=" + ((notifications != null) ? notifications : 0));
ruau/ruau/src/test/java/org/ruauframework/test/perf/metrics/PerfMetricsCollector.java:        sb.append(']');
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:package org.ruauframework.test.perf;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.io.BufferedWriter;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.io.File;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.io.FileOutputStream;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.io.FileWriter;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.io.IOException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.io.OutputStreamWriter;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.util.logging.Level;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import java.util.logging.Logger;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import org.ruauframework.test.perf.metrics.PerfMetrics;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import org.ruauframework.util.IOUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import org.ruauframework.util.test.PerfGoldFilesUtil;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import org.json.JSONArray;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import com.google.common.base.Charsets;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java: * Utility methods related to the results generated by the perf runs.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:public final class PerfResultsUtil {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    private static final Logger LOG = Logger.getLogger(PerfResultsUtil.class.getSimpleName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    public static final File RESULTS_DIR;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    static {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        // use ruau.perf.results.dir if set
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        String resultsPath = System.getProperty("ruau.perf.results.dir", null);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        // else use ruau-integration-test/target/perf/results if running in ruau
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        if (resultsPath == null && new File("../ruau-integration-test").exists()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            resultsPath = "../ruau-integration-test/target/perf/results";
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                resultsPath = new File(resultsPath).getCanonicalPath();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            } catch (IOException e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                LOG.log(Level.WARNING, "error canonicalizing " + resultsPath, e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        // else target/perf/results
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        if (resultsPath == null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            resultsPath = "target/perf/results";
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        RESULTS_DIR = new File(resultsPath);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        LOG.info("perf results dir: " + RESULTS_DIR.getAbsolutePath());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    public enum PerformanceMetrics {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        AURA_STATS("ruaustats"),
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        HEAPS("heaps", ".heapsnapshot"),
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        private final String value;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        private final String fileExtension;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        private PerformanceMetrics(String value) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            this(value, ".json");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        private PerformanceMetrics(String value, String fileExtension) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            this.value = value;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        public File getFile(String fileName) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            File dir = new File(RESULTS_DIR, value);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            return new File(dir, fileName + fileExtension);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        public static PerformanceMetrics getPerformanceMetricsFromType(String metricsType) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            for (PerformanceMetrics result : PerformanceMetrics.values()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                if (result.value.equalsIgnoreCase(metricsType)) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            throw new IllegalArgumentException("unknown metricsType: " + metricsType);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    public static File writeGoldFile(PerfMetrics metrics, String fileName, boolean storeDetails) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        File file = PerformanceMetrics.GOLD_FILES.getFile(fileName);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        RESULTS_JSON.addResultsFile(file);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            ALL_GOLDFILES_JSON.addGoldfile(fileName, metrics);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        } catch (JSONException e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            LOG.log(Level.WARNING, "error generating _all.json", e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        return writeFile(file, PerfGoldFilesUtil.toGoldFileText(metrics, storeDetails), "goldfile");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    public static File writeRuueStats(String ruauStatsContents, String fileName) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        File file = PerformanceMetrics.AURA_STATS.getFile(fileName);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        RESULTS_JSON.addResultsFile(file);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        return writeFile(file, ruauStatsContents, "Ruue Stats");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    private static File writeFile(File file, String contents, String what) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        OutputStreamWriter writer = null;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            IOUtil.mkdirs(file.getParentFile());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            writer = new OutputStreamWriter(new FileOutputStream(file), "UTF-8");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            LOG.info("wrote " + what + ": " + file.getAbsolutePath());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            LOG.log(Level.WARNING, "error writing " + file.getAbsolutePath(), e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        } finally {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:     * Writes the dev tools log for a perf test run to
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:     * System.getProperty("ruau.perf.results.dir")/timelines/testName_timeline.json
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    public static File writeDevToolsLog(List<JSONObject> timeline, String fileName, String userAgent) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        File file = PerformanceMetrics.TIMELINES.getFile(fileName);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            RESULTS_JSON.addResultsFile(file);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            LOG.log(Level.WARNING, "error writing " + file.getAbsolutePath(), e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    private static void writeDevToolsLog(List<JSONObject> timeline, File file, String userAgent) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            file.getParentFile().mkdirs();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            LOG.info("wrote dev tools log: " + file.getAbsolutePath());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        } finally {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:     * Writes the JavaScript CPU profile data for a perf test run to
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:     * System.getProperty("ruau.perf.results.dir")/profiles/testName_profile.cpuprofile
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    public static File writeJSProfilerData(Map<String, ?> jsProfilerData, String fileName) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        File file = PerformanceMetrics.PROFILES.getFile(fileName);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            file.getParentFile().mkdirs();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                FileOutputStream out = new FileOutputStream(file);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                writer = new BufferedWriter(new OutputStreamWriter(out, Charsets.US_ASCII));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                writer.write(new JSONObject(jsProfilerData).toString());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                RESULTS_JSON.addResultsFile(file);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                LOG.info("wrote JavaScript CPU profile: " + file.getAbsolutePath());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            } finally {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            LOG.log(Level.WARNING, "error writing " + file.getAbsolutePath(), e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    // JS heap snapshot
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:     * Writes the heap snapshot into a file, this file can be loaded into chrome dev tools -> Profiles -> Load
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    public static File writeHeapSnapshot(Map<String, ?> data, String fileName) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        File file = PerformanceMetrics.HEAPS.getFile(fileName);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            file.getParentFile().mkdirs();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            FileOutputStream out = new FileOutputStream(file);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            // write using same format as CDT Save:
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            // https://developers.google.com/chrome-developer-tools/docs/heap-profiling
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            writer = new BufferedWriter(new OutputStreamWriter(out, Charsets.US_ASCII));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            writer.write(JSONObject.quote("snapshot"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            new JSONObject((Map<String, ?>) data.get("snapshot")).write(writer);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            writeList(writer, "nodes", (List<?>) data.get("nodes"), 5, false);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            writeList(writer, "edges", (List<?>) data.get("edges"), 3, false);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            writeList(writer, "trace_function_infos", (List<?>) data.get("trace_function_infos"), 1, false);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            writeList(writer, "trace_tree", (List<?>) data.get("trace_tree"), 1, false);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            writeList(writer, "strings", (List<?>) data.get("strings"), 1, true);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            RESULTS_JSON.addResultsFile(file);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            LOG.info("wrote heap snapshot: " + file.getAbsolutePath());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        } finally {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    static void writeList(BufferedWriter writer, String key, List<?> list, int numPerLine, boolean last)
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            if (entry instanceof String) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        if (!last) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    // generate Results.json:
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    public static final ResultsJSON RESULTS_JSON = new ResultsJSON(true);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:     * Generates a Results.json file pointing to all the artifacts generated in a perf test run.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    public static final class ResultsJSON {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        private final JSONObject json = new JSONObject();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        private int numResultFilesAdded;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        ResultsJSON(boolean writeOnJVMExit) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                addBuildInfo(build, "jenkins_build_number", "BUILD_NUMBER");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                addBuildInfo(build, "jenkins_build_id", "BUILD_ID");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                addBuildInfo(build, "git_branch", "GIT_BRANCH", "CURRENT_GIT_BRANCH");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                addBuildInfo(build, "git_commit", "GIT_COMMIT", "CURRENT_GIT_COMMIT");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                addBuildInfo(build, "ruau_version", "AURA_VERSION");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                addBuildInfo(build, "author_email", "AUTHOR_EMAIL");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                addBuildInfo(build, "changelists", "CHANGELISTS");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                LOG.log(Level.WARNING, "error adding build info", e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                Runtime.getRuntime().addShutdownHook(new Thread() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        void addResultsFile(File file) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                JSONArray list = getListParent(file).getJSONArray("list");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                // put filenames sorted in the JSONArray
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                String fileName = file.getName();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                    if (fileName.compareTo(list.getString(i)) < 0) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                        break;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                list.put(insertIndex, fileName);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                LOG.log(Level.WARNING, "error adding results file: " + file, e);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                JSONObject parent = getListParent(file);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                JSONArray list = parent.getJSONArray("list");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                JSONArray trimmedList = new JSONArray();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                String fileName = file.getName();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                    String value = list.getString(i);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                    if (!fileName.equals(value)) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                        trimmedList.put(value);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                parent.put("list", trimmedList);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        private JSONObject getListParent(File file) throws JSONException {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            String relativePath = file.getParentFile().getPath();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            relativePath = relativePath.substring(RESULTS_DIR.getPath().length() + 1);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            String[] folders = relativePath.split("/");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            JSONObject parent = json.getJSONObject("results");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                if (!parent.has(folder)) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                    parent.put(folder, new JSONObject());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                parent = parent.getJSONObject(folder);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            if (!parent.has("list")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                parent.put("list", new JSONArray());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            return parent;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        private static void addBuildInfo(JSONObject build, String key, String... envvars) throws JSONException {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            for (String envvar : envvars) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                String value = System.getenv(envvar);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                if (value != null && value.trim().length() > 0) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                    build.put(key, value);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    // write a _all.json for each namespace
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    private static final AllGoldfilesJSON ALL_GOLDFILES_JSON = new AllGoldfilesJSON(true);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:     * Writes a single _all.json containing all the goldfiles in a namespace
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:    private static final class AllGoldfilesJSON {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        private final Map<String, JSONObject> namespaceToAllJson = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        AllGoldfilesJSON(boolean writeOnJVMExit) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                Runtime.getRuntime().addShutdownHook(new Thread() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                        if (namespaceToAllJson.size() > 0) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                            // write the goldfile inside each namespace
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                            for (String namespace : namespaceToAllJson.keySet()) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                                File file = new File(RESULTS_DIR + "/goldfiles/" + namespace + "/_all.json");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                                writeFile(file, namespaceToAllJson.get(namespace).toString(), namespace + "/_all.json");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:        void addGoldfile(String fileName, PerfMetrics metrics) throws JSONException {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            int index = fileName.lastIndexOf('/');
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            String namespace = (index != -1) ? fileName.substring(0, index) : "";
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            String componentName = fileName.substring(index + 1);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            if (!namespaceToAllJson.containsKey(namespace)) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:                namespaceToAllJson.put(namespace, new JSONObject());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            JSONObject allJson = namespaceToAllJson.get(namespace);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfResultsUtil.java:            allJson.put(componentName, metrics.toJSONArrayWithoutDetails());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:package org.ruauframework.test.perf;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import com.google.common.collect.ImmutableMap;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import org.ruauframework.def.AttributeDef;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import java.util.Date;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * Creates a mock value for a component attribute based on its type.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * Inherit this class to provide a custom mock attribute date provider
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java: * eg. A custom component namespaces could provide different values for white/black list attributes
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:public class PerfMockAttributeValueProvider {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:    public static final PerfMockAttributeValueProvider DEFAULT_INSTANCE = new PerfMockAttributeValueProvider();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:    private static final Map<String, List<String>> blacklistedAttributes;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:    private static final Map<String, Map<String, Object>> whitelistedAttributes;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:    static {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        Map<String, List<String>> blacklist = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        blacklist.put("ui:carousel", ImmutableList.of("priv_snap"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        blacklist.put("ui:carouselDeprecated", ImmutableList.of("priv_snap"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        blacklist.put("ui:scroller", ImmutableList.of("snap", "plugins"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        blacklist.put("ui:scrollerDeprecated", ImmutableList.of("snap"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        // We wouldn't need this output* whitelist attribute if
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        // Components that inherit from ui:output abstract cmp could have overridden
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        // value attribute to the correct concrete type.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        // Eg. ui:outputLabel, value attr type should be a String instead of Object.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        Map<String, Map<String, Object>> whitelist = Maps.newTreeMap();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        whitelist.put("ui:outputEmail", ImmutableMap.<String, Object>of("value", "outputEmail@mock.value"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        whitelist.put("ui:outputLabel", ImmutableMap.<String, Object>of("value", "Mock value for 'outputLabel.value' attribute"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        whitelist.put("ui:outputTextArea", ImmutableMap.<String, Object>of("value", "Mock value for 'outputTextArea.value' attribute"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        whitelist.put("ui:outputRichText", ImmutableMap.<String, Object>of("value", "Mock value for 'outputRichText.value' attribute"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        whitelist.put("ui:outputSelect", ImmutableMap.<String, Object>of("value", "Mock value for 'outputSelect.value' attribute"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        whitelist.put("ui:dataGridSummaryCell", ImmutableMap.<String, Object>of("type", "MAX"));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        blacklistedAttributes = ImmutableMap.copyOf(blacklist);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        whitelistedAttributes = ImmutableMap.copyOf(whitelist);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:    protected Map<String, List<String>> getBlacklistedAttributes() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        return blacklistedAttributes;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:    protected Map<String, Map<String, Object>> getWhitelistedAttributes() {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:    public Object getAttributeValue(DefDescriptor<ComponentDef> componentDesc, AttributeDef attributeDef) throws QuickFixException {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        if (!needsAttributeMocking(componentDesc, attributeDef)) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        Object attributeValue;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        String descriptorName = componentDesc.getDescriptorName();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        Map<String, Map<String, Object>> whitelistedAttributes = getWhitelistedAttributes();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        if (whitelistedAttributes.containsKey(descriptorName)
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:                && (attributeValue = whitelistedAttributes.get(descriptorName).get(attributeDef.getName())) != null) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            return attributeValue;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        // If attribute value is not predefined in whitelisted components list
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        // use the attribute descriptor type to generate a random value.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        String className = attributeDef.getTypeDef().getDescriptor().getDescriptorName();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        Boolean isArrayType = className.endsWith("[]");
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        if (isArrayType) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            className = className.substring(0, className.length() - 2);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        Object value = getMockAttributeValue(className, attributeDef);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        return isArrayType ? new Object[]{value} : value;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:    private Object getMockAttributeValue(String descriptorName, AttributeDef attributeDef) throws QuickFixException {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        if (descriptorName.equals("String")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            return String.format("Mock value for '%s' attribute", attributeDef.getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        } else if (descriptorName.equals("Boolean")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        } else if (descriptorName.equals("Date") || descriptorName.equals("DateTime")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            return new Date();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        } else if (descriptorName.equals("Decimal") || descriptorName.equals("Double")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        } else if (descriptorName.equals("Integer")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        } else if (descriptorName.equals("Long")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        } else if (descriptorName.equals("Object") || descriptorName.equals("Map")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            return ImmutableMap.of("name", attributeDef.getName());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        } else if (descriptorName.equals("Ruue.Component")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            // TODO: This returns a mock data provider component,
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            // It covers most of list component such ui:list, ui:autocompleteList, ui:infiniteList, ui:autocomplete
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            // We may need to provide different mock Component as we expand our test.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            return Ruue.getInstanceService().getInstance("perfTest:registeredComponentsDataProvider", ComponentDef.class);
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        } else if (descriptorName.equals("Ruue.ComponentDefRef")) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            // This mock ComponentDefRef is geared toward for list/autocomplete mock components.
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            // see comment in Ruue.Component mock value above
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            return ImmutableMap.<String, Object>of("componentDef", "ui:menuItem",
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:                    "attributes", ImmutableMap.<String, ImmutableMap<?, ?>>of("values", ImmutableMap.of("label", "Mock ui:menuItem label")));
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        throw new InvalidDefinitionException(String.format("Value for '%s' is not defined", attributeDef.getName()), attributeDef.getTypeDef().getLocation());
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:    private Boolean needsAttributeMocking(DefDescriptor<ComponentDef> componentDesc, AttributeDef attributeDef) throws QuickFixException {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        String descriptorName = componentDesc.getDescriptorName();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        Map<String, List<String>> blacklistedAttributes = getBlacklistedAttributes();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        if (blacklistedAttributes.containsKey(descriptorName) && blacklistedAttributes.get(descriptorName).contains(attributeDef.getName())) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            return false;
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        if ("ruau://String".equals(attributeDef.getTypeDef().getDescriptor().getQualifiedName())) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            AttributeDefRef valueRef = attributeDef.getDefaultValue();
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:            if (valueRef == null ||
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:                    (valueRef.getValue() == null || valueRef.getValue().toString().isEmpty())) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/PerfMockAttributeValueProvider.java:        return attributeDef.isRequired();
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java:package org.ruauframework.test.perf.framework;
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java:import org.ruauframework.test.perf.core.FrameworkPerfAbstractTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java: * Example FrameworkPerfTests.
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java:public final class SimpleFrameworkTest extends FrameworkPerfAbstractTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java:    public SimpleFrameworkTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java:    public void testLabel() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java:        openTotallyRaw("/ui/label.cmp?label=foo");
ruau/ruau/src/test/java/org/ruauframework/test/perf/framework/SimpleFrameworkTest.java:        openTotallyRaw("/ui/button.cmp?label=Push");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import java.io.IOException;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import java.io.UnsupportedEncodingException;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import java.net.MalformedURLException;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import java.net.URI;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import java.net.URISyntaxException;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import java.util.ArrayList;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.commons.lang3.CharEncoding;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.Header;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.HttpResponse;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.NameValuePair;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.client.CookieStore;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.client.entity.UrlEncodedFormEntity;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.client.methods.HttpGet;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.client.methods.HttpPost;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.client.protocol.ClientContext;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.client.utils.URLEncodedUtils;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.cookie.Cookie;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.impl.client.DefaultHttpClient;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.impl.cookie.BasicClientCookie;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.message.BasicNameValuePair;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.protocol.BasicHttpContext;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.protocol.HttpContext;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.apache.http.util.EntityUtils;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.def.ActionDef;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.http.RuueBaseServlet;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.instance.Action;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.instance.InstanceStack;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.system.LoggingContext.KeyValueLogger;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.throwable.RuueExecutionException;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java: * Base class with some helper methods specific to Ruue.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:public abstract class RuueHttpTestCase extends IntegrationTestCase {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    public RuueHttpTestCase(String name) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Given a URL to post a GET request, this method compares the actual status code of the response with an expected
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * status code.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param msg Error message that should be displayed if the actual response does not match the expected response
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param url URL to be used to execute the GET request
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param statusCode expected status code of response
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected void assertUrlResponse(String msg, String url, int statusCode)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        HttpGet get = obtainGetMethod(new URI(null, url, null).toString());
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        int status = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        assertEquals(msg, statusCode, status);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Helper method to check that a response has the default X-FRAME-OPTIONS and
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Content-Security-Policy headers.  If your test doesn't use the default security policy,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * you get to roll your own validation of that, of course.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Asserts if anything is wrong.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * As a safety provision, if the config adapter *isn't* recognized as "ours," we don't
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * check anything.  (This covers the fact that inside SFDC, we have a different config
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * adapter with a different default CSP.)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param response
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param guarded  If {@code true}, check that we HAVE headers.  If {@code false}, check that they are absent.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param allowInline Allows inline script-src and style-src
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected void assertDefaultAntiClickjacking(HttpResponse response, boolean guarded, boolean allowInline) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        String adapterClassName = Ruue.getConfigAdapter().getClass().getName();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        if (adapterClassName.equals("org.ruauframework.impl.adapter.ConfigAdapterImpl") ||
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                adapterClassName.equals("org.ruauframework.impl.adapter.MockConfigAdapterImpl")) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            Header[] headers = response.getHeaders("X-FRAME-OPTIONS");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            if (guarded) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                Map<String, String> csp = getCSP(response);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("frame-ancestors is wrong", "'self'", csp.get("frame-ancestors"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                if (allowInline) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                    assertEquals("script-src is wrong", "'self' chrome-extension: 'unsafe-eval' 'unsafe-inline'", csp.get("script-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                    assertEquals("style-src is wrong", "'self' chrome-extension: 'unsafe-inline'", csp.get("style-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                    assertEquals("script-src is wrong", "'self' chrome-extension:", csp.get("script-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                    assertEquals("style-src is wrong", "'self' chrome-extension:", csp.get("style-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                // These maybe aren't strictly "anti-clickjacking", but since we're testing the rest of the default CSP:
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("font-src is wrong", "*", csp.get("font-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("img-src is wrong", "*", csp.get("img-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("media-src is wrong", "*", csp.get("media-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("default-src is wrong", "'self'", csp.get("default-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("object-src is wrong", "'self'", csp.get("object-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("connect-src is wrong", "'self' http://invalid.salesforce.com", csp.get("connect-src"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("wrong number of X-FRAME-OPTIONS header lines", 1, headers.length);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("SAMEORIGIN", headers[0].getValue());
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                headers = response.getHeaders("Content-Security-Policy");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals(0, headers.length);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                // Check X-FRAME-OPTIONS vis-a-vis CSP
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("wrong number of X-FRAME-OPTIONS header lines", 0, headers.length);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Helper to take the Content-Security-Policy header and break it into its individual components.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * If the header is missing, this will fail the test with an assertion.  Otherwise, a map keyed by
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * the various CSP directives (script-src, style-src, etc.) with the literal values of each
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param response
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @return a map of directive to value.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected Map<String, String> getCSP(HttpResponse response) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        Header[] headers = response.getHeaders("Content-Security-Policy");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        assertEquals("wrong number of CSP header lines", 1, headers.length);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        String[] split = headers[0].getValue().split(";");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        Map<String, String> csp = new HashMap<String, String>();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        return getTestServletConfig().getBaseUrl().getHost();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Clear cookies from httpclient cookie store
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected void clearCookies() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        getCookieStore().clear();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Adds cookie with name and value
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param name cookie name
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param value cookie value
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected void addCookie(String name, String value) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        BasicClientCookie cookie = makeCookie(name, value);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        addCookie(cookie);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param donAmE cookie domain
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param name cookie name
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param value cookie value
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param path cookie path
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected void addCookie(String donAmE, String name, String value,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            String path) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        BasicClientCookie cookie = makeCookie(donAmE, name, value, path);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        addCookie(cookie);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param cookie cookie
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected void addCookie(Cookie cookie) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        getCookieStore().addCookie(cookie);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Creates HttpContext with httpclient cookie store. Allows cookies to be part of specific request method.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        HttpContext localContext = new BasicHttpContext();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        return localContext;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param donAmE cookie domain
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param name cookie name
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param path cookie path
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected void assertNoCookie(String donAmE, String name, String path)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        Cookie expected = makeCookie(donAmE, name, null, path);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            if (expected.equals(cookie)) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                fail("Cookie was not deleted: " + cookie);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param donAmE cookie domain
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param name cookie name
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param value cookie value
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param path cookie path
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected void assertCookie(String donAmE, String name, String path,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            String value) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        Cookie expected = makeCookie(donAmE, name, value, path);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            if (expected.equals(cookie)) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals("Wrong cookie value!", expected.getValue(),
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        cookie.getValue());
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        fail("Missing cookie, expected " + expected);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Creates cookie with only provided name and value
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param name cookie name
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param value cookie value
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected BasicClientCookie makeCookie(String name, String value)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        BasicClientCookie cookie = makeCookie(getHost(), name, value, "/");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Creates cookie
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param donAmE cookie domain
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param name cookie name
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param value cookie value
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param path cookie path
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected BasicClientCookie makeCookie(String donAmE, String name,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            String value, String path) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        BasicClientCookie cookie = new BasicClientCookie(name, value);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        cookie.setDonAmE(domain);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        cookie.setPath(path);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Gets all cookies in httpclient cookie store
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        return ((DefaultHttpClient) getHttpClient()).getCookieStore();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * This gets a simple context string that uses a single preload.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected String getSimpleContext(Format format, boolean modified)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        return getRuueTestingUtil().getContext(Mode.DEV, format,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                "ruautest:test_SimpleServerRenderedPage", ApplicationDef.class,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Given the a path on the api server, return a {@link HttpPost} that has the appropriate headers and server name.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param path the relative path to the server, such as <tt>/services/Soap</tt> or
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *            <tt>/servlet/servlet.SForceMailMerge</tt>.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param params a set of name value string pairs to use as parameters to the post call.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @return a {@link HttpPost}
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @throws MalformedURLException if the path is invalid.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected HttpPost obtainPostMethod(String path, Map<String, String> params)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            throws MalformedURLException, URISyntaxException,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        HttpPost post = new HttpPost(getTestServletConfig().getBaseUrl()
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                .toURI().resolve(path).toString());
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        List<NameValuePair> nvps = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        if (params != null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            for (Map.Entry<String, String> entry : params.entrySet()) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                nvps.add(new BasicNameValuePair(entry.getKey(), entry
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        .getValue()));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            post.setEntity(new UrlEncodedFormEntity(nvps, CharEncoding.UTF_8));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Given a path on the api server, return a {@link HttpGet} that has the appropriate headers and server name.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param path the relative path to the server, such as <tt>/services/Soap</tt> or
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *            <tt>/servlet/servlet.SForceMailMerge</tt> Follows redirects by default.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @return a {@link HttpGet}
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @throws MalformedURLException if the path is invalid.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected HttpGet obtainGetMethod(String path)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        return obtainGetMethod(path, true, null);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected HttpGet obtainGetMethod(String path, boolean followRedirects)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        return obtainGetMethod(path, followRedirects, null);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected HttpGet obtainGetMethod(String path, Header[] headers)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        return obtainGetMethod(path, true, headers);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Build a URL for a get from the given parameters with all the standard parameters set.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * This is a convenience function to make gets more consistent. It sets:
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *   <li>ruau.tag: the descriptor to get.</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *   <li>ruau.defType: the type of the descriptor.</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *   <li>ruau.context: the context, including
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *       <li>loaded: the descriptor + type from above.</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *       <li>fwUID: the framework UID</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *       <li>mode: from the parameters</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *       <li>format: from the parameters</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param mode the Ruue mode to use.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param format the format (HTML vs JSON) to use
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param desc the name of the descriptor to set as the primary object.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param type the type of descriptor.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param params extra parameters to set.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param headers extra headers.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected HttpGet obtainRuueGetMethod(Mode mode, Format format,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            String desc, Class<? extends BaseComponentDef> type,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            Map<String, String> params, Header[] headers)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            throws QuickFixException, MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        return obtainRuueGetMethod(mode, format, Ruue.getDefinitionService()
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                .getDefDescriptor(desc, type), params, headers);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * Build a URL for a get from the given parameters with all the standard parameters set from a descriptor.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * This is a convenience function to make gets more consistent. It sets:
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *   <li>ruau.tag: the name of the descriptor to get.</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *   <li>ruau.defType: the type of the descriptor.</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *   <li>ruau.context: the context, including
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *       <li>loaded: the descriptor + type from above.</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *       <li>fwUID: the framework UID</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *       <li>mode: from the parameters</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     *       <li>format: from the parameters</li>
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param mode the Ruue mode to use.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param format the format (HTML vs JSON) to use
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param desc the descriptor to set as the primary object.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param params extra parameters to set.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:     * @param headers extra headers.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    protected HttpGet obtainRuueGetMethod(Mode mode, Format format,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            DefDescriptor<? extends BaseComponentDef> desc,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            Map<String, String> params, Header[] headers)
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            throws QuickFixException, MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        List<NameValuePair> urlparams = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        urlparams.add(new BasicNameValuePair("ruau.tag", String.format("%s:%s",
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                desc.getNamespace(), desc.getName())));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        urlparams.add(new BasicNameValuePair("ruau.defType", desc.getDefType()
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        for (Map.Entry<String, String> entry : params.entrySet()) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            urlparams.add(new BasicNameValuePair(entry.getKey(), entry
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                    .getValue()));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        urlparams.add(new BasicNameValuePair("ruau.context",
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                getRuueTestingUtil().getContext(mode, format, desc, false)));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        String query = URLEncodedUtils.format(urlparams, "UTF-8");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        // final url Request to be send to server
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        return obtainGetMethod("ruau?" + query, true, headers);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:    public class ServerAction implements Action {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private final ArrayList<String> qualifiedName;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private ArrayList<Map<String, Object>> actionParams;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private State state = State.NEW;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private Object returnValue;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private List<Object> errors;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private HttpPost post;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private String rawResponse;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private String contextValue;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private ArrayList<State> stateList = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private ArrayList<List<Object>> errorsList = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private ArrayList<Object> returnValueList = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public ServerAction(String qualifiedName, Map<String, Object> actionParams) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	this.qualifiedName = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	this.qualifiedName.add(qualifiedName);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	this.actionParams = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            if(actionParams != null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            	this.actionParams.add(actionParams);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            	this.actionParams.add(null);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * Constructor for Server action using two array lists
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * Note that each list must be of equal length or will throw an IllegalArgumentException
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * @param qualifiedName
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * @param actionParams
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public ServerAction(ArrayList<String> qualifiedName, ArrayList<Map<String,Object>> actionParams) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	this.qualifiedName = qualifiedName;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	this.actionParams = actionParams;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	if(qualifiedName == null || actionParams == null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        		throw new IllegalArgumentException("Cannot pass in a null list. You can pass in a list of null parameters if parameters are not yet known");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	//Now will verify that we have actions and params
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	if(this.qualifiedName.toArray().length != this.actionParams.toArray().length) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        		throw new IllegalArgumentException("Number of action names does not match number of action parameters");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * Will insert the given key-value pair as a parameter in the first entry of the action parameters list.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * Corresponds with the first entry in the qualified names list.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * @param name Description of parameter
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * @param value Object of action parameter
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * @return Returns instance of Server Action
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public ServerAction putParam(String name, Object value) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            if (actionParams.get(0) == null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                actionParams.add(0,Maps.newHashMap(new HashMap<String,Object>()));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            actionParams.get(0).put(name, value);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * Will insert the given key-value pair as a parameter for the given qualified name.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * Throws IllegalArguementException if qualified name is not found.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * Cannot distinguish between multiple qualified names with the same name.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * @param qualifiedName The name of the qualified Name you are adding a parameter for.
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * @param name Description of the parameter
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * @param value Object of the action parameter
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:         * @return Returns instance of Server Action
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public ServerAction putParamUsingQName(String qualifiedName, String name, Object value) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	int index = this.qualifiedName.indexOf(qualifiedName);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        		throw new IllegalArgumentException("Qualified name does not exist.");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	if(actionParams.get(index)==null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        		actionParams.add(index,Maps.newHashMap(new HashMap<String,Object>()));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	actionParams.get(index).put(name, value);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public ServerAction setContext(String value) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            contextValue = value;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                Map<String, Object> message = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                ArrayList<Map<String,Object>> actionInstanceArray = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                for(int i = 0;i<qualifiedName.size();i++){
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                	Map<String, Object> actionInstance = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                	actionInstance.put("descriptor", qualifiedName.get(i));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                	if(actionParams.get(i) != null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                		actionInstance.put("params", actionParams.get(i));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                	actionInstanceArray.add(actionInstance);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                message.put("actions", actionInstanceArray.toArray());
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                String jsonMessage = Json.serialize(message);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                Map<String, String> params = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                params.put("message", jsonMessage);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                params.put("ruau.token", getTestServletConfig().getCsrfToken());
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                if (contextValue != null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                    params.put("ruau.context", contextValue);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                    RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        context.setFrameworkUID(Ruue.getConfigAdapter().getRuueFrameworkNonce());
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        Ruue.getSerializationService().write(context, null, RuueContext.class, sb, "HTML");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        params.put("ruau.context", sb.toString());
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        params.put("ruau.context", getSimpleContext(Format.JSON, false));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                post = obtainPostMethod("/ruau", params);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            return Ruue.getDefinitionService().getDefDescriptor(qualifiedName.get(0),
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                    ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public ArrayList<String> getQualifiedName() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	return qualifiedName;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public DefDescriptor<ActionDef> getDescriptor(String qualifiedName) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	return Ruue.getDefinitionService().getDefDescriptor(qualifiedName,ActionDef.class);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public void serialize(Json json) throws IOException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public void run() throws RuueExecutionException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals(HttpStatus.SC_OK, getStatusCode(response));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                rawResponse = getResponseBody(response);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                assertEquals(
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        RuueBaseServlet.CSRF_PROTECT,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        rawResponse.substring(0,
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                                RuueBaseServlet.CSRF_PROTECT.length()));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                Map<String, Object> json = (Map<String, Object>) new JsonReader()
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        .read(rawResponse
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                                .substring(RuueBaseServlet.CSRF_PROTECT
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                ArrayList<Map<String,Object>> actions = (ArrayList<Map<String, Object>>) json.get("actions");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                for(Map<String,Object> action: actions) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                	this.stateList.add(State.valueOf(action.get("state").toString()));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                	this.returnValueList.add(action.get("returnValue"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                	this.errorsList.add((List<Object>) action.get("error"));
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                //for legacy uses
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                Map<String, Object> action = (Map<String, Object>) ((List<Object>) json
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                        .get("actions")).get(0);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                this.state = State.valueOf(action.get("state").toString());
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                this.returnValue = action.get("returnValue");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                this.errors = (List<Object>) action.get("error");
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:                throw new RuueExecutionException(e, null);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public String getrawResponse() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	return this.rawResponse;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public void add(List<Action> actions) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            // Only 1 action supported for now
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            return ImmutableList.of((Action) this);
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public Object getReturnValue() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            return returnValue;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public ArrayList<Object> getReturnValueList() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	return returnValueList;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public State getState() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            return state;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public ArrayList<State> getStateList() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        	return stateList;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public ArrayList<List<Object>> getErrorsList() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public void logParams(KeyValueLogger paramLogger) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public boolean isStorable() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            return false;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public void setStorable() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public Map<String, Object> getParams() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        private final InstanceStack instanceStack = new InstanceStack();
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public InstanceStack getInstanceStack() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:            return instanceStack;
ruau/ruau/src/test/java/org/ruauframework/test/RuueHttpTestCase.java:        public String getPath() {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import java.util.EnumSet;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import java.util.Properties;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import java.util.Set;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import org.openqa.selenium.Dimension;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import org.openqa.selenium.Platform;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import org.openqa.selenium.chrome.ChromeOptions;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import org.openqa.selenium.firefox.FirefoxProfile;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import org.openqa.selenium.internal.BuildInfo;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import org.openqa.selenium.remote.DesiredCapabilities;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:import org.uiautomation.ios.IOSCapabilities;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * Utility methods related to WebDriver
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * Test cases can be annotated with @TargetBrowsers and @ExcludeBrowsers. These annotations are applicable for
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java: * Methods(TestCase) and Classes.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:public final class WebDriverUtil {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:    private static String SELENIUM_VERSION = null;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:    private static Set<BrowserType> defaultBrowsers = EnumSet.of(BrowserType.GOOGLECHROME);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:    private static Set<BrowserType> availableBrowsers = null;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:    private enum ExtraCapability {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        TABLET("deviceType", "tablet"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        LANDSCAPE("deviceOrientation", "landscape"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        PORTRAIT("deviceOrientation", "portrait"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        DISABLE_NATIVE_EVENTS("webdriverEnableNativeEvents", "false"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        SIMULATOR_SCALE_IPAD("simulatorScale", ".35"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        SIMULATOR_SCALE_IPHONE("simulatorScale", ".5");
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private final String value;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private final String name;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private ExtraCapability(String name, String value) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            this.name = name;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            this.value = value;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private String getCapabilityName() {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            return this.name;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private String getValue() {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            return this.value;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        FIREFOX(DesiredCapabilities.firefox(), "29", ExtraCapability.DISABLE_NATIVE_EVENTS),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        IE11(DesiredCapabilities.internetExplorer(), "11", "Windows 8.1"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        IE10(DesiredCapabilities.internetExplorer(), "10", "Windows 2012"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        IE9(DesiredCapabilities.internetExplorer(), "9", "Windows 7"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        IE8(DesiredCapabilities.internetExplorer(), "8", Platform.WINDOWS),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        IE7(DesiredCapabilities.internetExplorer(), "7", Platform.WINDOWS),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        GOOGLECHROME(DesiredCapabilities.chrome(), "34", Platform.ANY),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        SAFARI(DesiredCapabilities.safari(), "7", "OS X 10.9"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        ANDROID_PHONE(DesiredCapabilities.android(), "4", "Linux", ExtraCapability.PHONE, ExtraCapability.PORTRAIT),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        ANDROID_TABLET(DesiredCapabilities.android(), "4", "Linux", ExtraCapability.TABLET, ExtraCapability.LANDSCAPE),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        IPAD(IOSCapabilities.ipad("Safari"), "7.1", "Mac 10.9", ExtraCapability.SIMULATOR_SCALE_IPAD),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        IPHONE(IOSCapabilities.iphone("Safari"), "7.1", "Mac 10.9", ExtraCapability.SIMULATOR_SCALE_IPHONE);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private final DesiredCapabilities capability;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private final String version;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private final String IOSDRIVER_VERSION = "sauce-storage:iosserver066.jar";
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private BrowserType(DesiredCapabilities capabilities, String version, ExtraCapability... extraCapabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            this.capability = capabilities;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            // capabilities for ios-driver common to ipad/iphone
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            if (capabilities instanceof IOSCapabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                this.capability.setCapability("simulator", "true");
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                this.capability.setCapability("iosdriver-version", IOSDRIVER_VERSION);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                this.capability.setCapability("variation", (String) null);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            initExtraCapabilities(extraCapabilities);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private BrowserType(DesiredCapabilities capabilities, String version, String platform,
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                ExtraCapability... extraCapabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            this(capabilities, version, extraCapabilities);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            if (capabilities != null) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                this.capability.setCapability("platform", platform);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private BrowserType(DesiredCapabilities capabilities, String version, Platform platform,
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                ExtraCapability... extraCapabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            this(capabilities, version, extraCapabilities);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            if (capabilities != null) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                this.capability.setPlatform(platform);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        private void initExtraCapabilities(ExtraCapability... extraCapabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            for (ExtraCapability extra : extraCapabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                // newer versions of firefox no longer support native events
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                if (extra.getCapabilityName().equals(ExtraCapability.DISABLE_NATIVE_EVENTS.getCapabilityName())
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                        && this.capability.getBrowserName().equals("firefox")) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                    firefoxProfile.setEnableNativeEvents(Boolean.parseBoolean(extra.getValue()));
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                    this.capability.setCapability("firefox_profile", firefoxProfile);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                    this.capability.setCapability(extra.getCapabilityName(), extra.getValue());
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        public DesiredCapabilities getCapability() {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            return new DesiredCapabilities(this.capability);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:         * Set the version only when requesting capabilities from SauceLab.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:    public static Set<BrowserType> getBrowserListForTestRun(Set<BrowserType> targetBrowsers,
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        if (targetBrowsers == null || targetBrowsers.isEmpty()) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            targetBrowsers = EnumSet.allOf(BrowserType.class);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        targetBrowsers.retainAll(getSupportedBrowserTypes());
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            targetBrowsers.removeAll(excludeBrowsers);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        return targetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:     * Allow override of browser from command line using -Dwebdriver.browser.type=""
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:    public static Set<BrowserType> getSupportedBrowserTypes() {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        if (availableBrowsers == null) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            String browserTypeSysVar = System.getProperty(WebDriverProvider.BROWSER_TYPE_PROPERTY);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            if (browserTypeSysVar == null) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                availableBrowsers = EnumSet.copyOf(defaultBrowsers);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                availableBrowsers = EnumSet.noneOf(BrowserType.class);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                    for (String b : browserTypeSysVar.split(",")) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                        availableBrowsers.add(BrowserType.valueOf(b.trim().toUpperCase()));
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                } catch (IllegalArgumentException e) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                    Assert.fail(String.format(
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                            "Invalid browser specification. Check system property %s - currently set to: %s",
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                            WebDriverProvider.BROWSER_TYPE_PROPERTY, browserTypeSysVar));
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        return EnumSet.copyOf(availableBrowsers);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:     * Get the expected Selenium client version based on the current server version. Used when requesting drivers from
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:     * Sauce.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:    public static String getSeleniumClientVersion() {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            String version = new BuildInfo().getReleaseLabel();
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            if (version.matches("^\\d+\\.\\d+\\.\\d+$")) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                    p.load(WebDriverUtil.class.getResourceAsStream("/VERSION.txt"));
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                    SELENIUM_VERSION = String.format("%s%s", p.getProperty("selenium.core.version"),
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:                    throw new Error("Unable to determine Selenium version");
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:    public static synchronized ChromeOptions addChromeOptions(DesiredCapabilities capabilities, Dimension windowSize) {
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        List<String> arguments = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        arguments.add("--ignore-gpu-blacklist");
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:            arguments.add("window-size=" + windowSize.width + ',' + windowSize.height);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        options.addArguments(arguments);
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        // To remove message "You are using an unsupported command-line flag: --ignore-certificate-errors.
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        // Stability and security will suffer."
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        // Add an argument 'test-type'
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        options.addArguments("test-type");
ruau/ruau/src/test/java/org/ruauframework/test/WebDriverUtil.java:        capabilities.setCapability(ChromeOptions.CAPABILITY, options);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:package org.ruauframework.test.testsetrunner;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import java.util.Collection;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import java.util.Collections;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import java.util.LinkedList;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import junit.framework.Test;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * This model exposes a view on the {@link TestSetRunnerState} for
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * {@link RuueEnabled} access. Because all the model state is shared, this class
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java: * itself does not hold any state.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:@ThreadSafe
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:public class TestSetRunnerModel {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:	private String scope;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:		Object scope_param = Ruue.getContextService().getCurrentContext().getCurrentComponent().getAttributes().getValue("scope");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:		if(scope_param!=null) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:			scope = scope_param.toString();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:     * @return a sorted list of tests by their inventory key
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:        List<String> testNames = new LinkedList<>();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:        Map<String, Test> inventory = getTestSetRunnerState().getInventory();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:        for (Test t : inventory.values()) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:            testNames.add(t.toString());
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:        Collections.sort(testNames);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:        return testNames;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:	private TestSetRunnerState getTestSetRunnerState() {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:		// Use container tests only when specified, otherwise return classic inventory
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:		if (scope != null && scope.equalsIgnoreCase("perf")) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:			return TestSetRunnerState.getPerfInstance();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:			return TestSetRunnerState.getInstance();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:     * @return the collection of test properties in the same order as
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:     *         {@link #getTestsWithPropsMap()}.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:    public Collection<Map<String, Object>> getTestsWithProps() {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:        return getTestsWithPropsMap().values();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:     * @return the test properties map.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:    public Map<String, Map<String, Object>> getTestsWithPropsMap() {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerModel.java:        return getTestSetRunnerState().getTestsWithPropertiesMap();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:package org.ruauframework.test.testsetrunner;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import java.util.Collection;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import java.util.Collections;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import java.util.EnumSet;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import java.util.Enumeration;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import java.util.SortedMap;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import javax.annotation.concurrent.GuardedBy;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import junit.framework.Test;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import junit.framework.TestSuite;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import org.ruauframework.test.ComponentJSTestSuiteTest.ComponentTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import org.ruauframework.test.IntegrationTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import org.ruauframework.test.TestInventory;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import org.ruauframework.test.TestInventory.Type;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import org.ruauframework.test.perf.core.AbstractPerfTestCase;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:import com.google.common.collect.Maps;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * An encapsulation of all of the state held by the {@link TestSetRunnerModel}.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * This state is not kept in the model itself because it is currently impossible
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * to create lazy singleton objects that adhere to the contract of {@link Model}
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * FIXME: This setup is not scoped to a user or page state. Two users can stomp
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * on each other's test results.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * FIXME: There is no stickiness to ensure that client side polls are reaching
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * the server that is running tests on its behalf if the deploy has multiple
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * appServers.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * FIXME: Individual tests are tracked with just a bag of properties rather than
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java: * as a strongly typed client-visible model.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:@ThreadSafe
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:public class TestSetRunnerState {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * A helper to allow for lazy initialization of the the
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * {@link TestSetRunnerState}.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    private static class SingletonHolder {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        private static TestSetRunnerState INSTANCE = new TestSetRunnerState();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    private static class PerfSingletonHolder {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        private static TestSetRunnerState PERF_INSTANCE = new TestSetRunnerState(TestInventory.PERF_TESTS);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * The inventory tracks all test cases available for execution.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    @GuardedBy("this")
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    private Map<String, Test> inventory = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * Parallel to the inventory, this map is used as a data bag to store
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * various properties about tests (e.g. status, exceptions, etc...)
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    @GuardedBy("this")
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    private SortedMap<String, Map<String, Object>> testsWithPropsMap = Maps.newTreeMap();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * @return the singleton instance.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    public static TestSetRunnerState getInstance() {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    public static TestSetRunnerState getPerfInstance() {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    private TestSetRunnerState(EnumSet<TestInventory.Type> scope) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    	populateInventory(scope);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    private TestSetRunnerState() {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * @return an unmodifiable view of the test inventory.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    public synchronized Map<String, Test> getInventory() {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        return Collections.unmodifiableMap(inventory);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * @return an unmodifiable view of the test properties map.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    public synchronized Map<String, Map<String, Object>> getTestsWithPropertiesMap() {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        return Collections.unmodifiableMap(testsWithPropsMap);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * Populates the model by querying for all implementations of
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * @param scope 
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    private synchronized void populateInventory(EnumSet<Type> scope) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        // Load the inventory in a separate thread.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        InventoryPopulator populator = new InventoryPopulator(scope);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        Thread t = new Thread(populator, "TestSetRunnerState Inventory Populator");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        t.start();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        } catch (InterruptedException e) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:            // TODO Auto-generated catch block
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:            e.printStackTrace();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * We load the test inventory in a separate thread because some test
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * constructors start/stop the {@link RuueContext}. If we load them in the
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * requesting thread, they end up corrupting the context for the
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    private class InventoryPopulator implements Runnable {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        private EnumSet<Type> scope;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:		public InventoryPopulator(EnumSet<Type> scope) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:            Collection<TestInventory> inventories = ServiceLocator.get().getAll(TestInventory.class);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                        addSuite(suite);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:            for (Test t : inventory.values()) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                Map<String, Object> testWithProps = Maps.newHashMap();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                testWithProps.put("name", t.toString());
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                testWithProps.put("selected", false);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                testWithProps.put("status", "Not Run Yet");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                testWithProps.put("isInteg", t instanceof IntegrationTestCase);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                testWithProps.put("isPerf", t instanceof AbstractPerfTestCase);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                if (t instanceof ComponentTestCase) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                    url = ((ComponentTestCase) t).getTestUrlForManualRun();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                testsWithPropsMap.put(t.toString(), testWithProps);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:         * @param suite the suite to add to the model.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        private void addSuite(TestSuite suite) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:            for (Enumeration<Test> e = suite.tests(); e.hasMoreElements();) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                if (test instanceof TestSuite) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:                    addSuite((TestSuite) test);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * Modify a property of a test
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * @param test identifies the test
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * @param key the key of the property
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:     * @param value the new value
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:    public synchronized void setTestProp(String test, String key, Object value) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        Map<String, Object> testProps = testsWithPropsMap.get(test);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerState.java:        testProps.put(key, value);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:package org.ruauframework.test.testsetrunner;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import java.util.Enumeration;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import junit.framework.TestFailure;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import junit.framework.TestResult;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import org.ruauframework.system.Annotations.Controller;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import org.ruauframework.system.Annotations.Key;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import org.ruauframework.test.TestExecutor.TestRun;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:import org.ruauframework.test.TestExecutor;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java: * This controller handles the execution and result collection of test cases on behalf of client-initiated requests.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:public class TestSetRunnerController {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:     * @param tests the tests to execute
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:    public static void runTestSet(@Key("testSet") List<String> tests) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:        changeStatus(tests, "ENQUEUED");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:        for (String name : tests) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            StatefulTestRun testRunner = new StatefulTestRun(name);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            TestExecutor.getInstance().submit(testRunner);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:     * Bulk update the status of the given tests and clear any exceptions they might have.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:     * @param tests the tests to update
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:     * @param status the new status to give to the tests
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:    private static void changeStatus(List<String> tests, String status) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            TestSetRunnerState testRunnerState = TestSetRunnerState.getInstance();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            testRunnerState.setTestProp(t, "status", status);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            testRunnerState.setTestProp(t, "exception", "");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:     * Query the current status of test execution.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:    @RuueEnabled
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:    public static Map<String, Object> pollForTestRunStatus() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:        Map<String, Object> r = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:        Map<String, Map<String, Object>> m = TestSetRunnerState.getInstance().getTestsWithPropertiesMap();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:        r.put("testsRunning", TestExecutor.getInstance().isActive());
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:        r.put("testsWithPropsMap", m);
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:     * A {@link Callable} adapter to schedule a test for execution and collect its results.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:    private static class StatefulTestRun extends TestRun {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:        private final String testName;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:        public StatefulTestRun(String testName) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            super(TestSetRunnerState.getInstance().getInventory().get(testName), new TestResult());
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            this.testName = testName;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:        public TestResult call() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            TestSetRunnerState testRunnerState = TestSetRunnerState.getInstance();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            assert (test != null) : "Encountered an unknown test: " + testName;
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            testRunnerState.setTestProp(testName, "status", "RUNNING");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            super.call();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            // Gather the results.
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:            if (result.wasSuccessful()) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                testRunnerState.setTestProp(testName, "status", "PASSED");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                testRunnerState.setTestProp(testName, "status", "FAILED");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                StringBuffer res = new StringBuffer("Failures:\n");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                for (Enumeration<TestFailure> fs = result.failures(); fs.hasMoreElements();) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                    TestFailure f = fs.nextElement();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                    testRunnerState.setTestProp(testName, "exception", "Failure\n" + f.trace());
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                    f.exceptionMessage();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                    res.append(f.exceptionMessage()).append("\n");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                res.append("Errors:\n");
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                for (Enumeration<TestFailure> fs = result.errors(); fs.hasMoreElements();) {
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                    TestFailure f = fs.nextElement();
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                    testRunnerState.setTestProp(testName, "exception", "Error\n" + f.trace());
ruau/ruau/src/test/java/org/ruauframework/test/testsetrunner/TestSetRunnerController.java:                    res.append(f.exceptionMessage()).append("\n");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:public class RuueTestingMarkupUtil {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:	protected final static String baseApplicationTag = "<ruau:application %s>%s</ruau:application>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String baseComponentTag = "<ruau:component %s>%s</ruau:component>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeStringMarkup = "<ruau:attribute name=%s type='String'/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeBooleanMarkup = "<ruau:attribute name=%s type='Boolean'/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeObjectMarkup = "<ruau:attribute name=%s type='Object'/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeCmpMarkup = "<ruau:attribute name=%s type='Ruue.Component'/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeListMarkup = "<ruau:attribute name=%s type='List'/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeStringListMarkup = "<ruau:attribute name=%s type='String[]'/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeBooleanListMarkup = "<ruau:attribute name=%s type='Boolean[]'/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeObjectListMarkup = "<ruau:attribute name=%s type='Object[]'/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeCmpListMarkup = "<ruau:attribute name=%s type='Ruue.Component[]'/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeStringMarkupWithDefault = "<ruau:attribute name=%s type='String' default=%s/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeBooleanMarkupWithDefault = "<ruau:attribute name=%s type='Boolean' default=%s/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeObjectMarkupWithDefault = "<ruau:attribute name=%s type='Object' default=%s/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeCmpMarkupWithDefault = "<ruau:attribute name=%s type='Ruue.Component' default=%s/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeListMarkupWithDefault = "<ruau:attribute name=%s type='List' default=%s/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeStringListMarkupWithDefault = "<ruau:attribute name=%s type='String[]' default=%s/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeBooleanListMarkupWithDefault = "<ruau:attribute name=%s type='Boolean[]' default=%s/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeObjectListMarkupWithDefault = "<ruau:attribute name=%s type='Object[]' default=%s/>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:    protected final static String attributeCmpListMarkupWithDefault = 
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			"<ruau:attribute name=%s type='Ruue.Component[]'>" + "%s" + "</ruau:attribute>";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:	public String getCommonAttributeMarkup(boolean getString, boolean getBoolean, boolean getObject, 
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			boolean getComponent) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		String attributeMarkup="";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeStringMarkup,"'strAttr'");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		if(getBoolean) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeBooleanMarkup,"'booleanAttr'");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeObjectMarkup,"'objAttr'");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeCmpMarkup,"'cmpAttr'");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		return attributeMarkup;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:	public String getAllCommonAttributeMarkup() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		return getCommonAttributeMarkup(true,true,true,true);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:	public String getCommonAttributeWithDefaultMarkup(boolean getString, boolean getBoolean, boolean getObject, 
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			boolean getComponent, String defaultString, String defaultBoolean, String defaultObject, String defaultComponent) 
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		String attributeMarkup="";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeStringMarkupWithDefault,"'strAttrDefault'",defaultString);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		if(getBoolean) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeBooleanMarkupWithDefault,"'booleanAttrDefault'", defaultBoolean);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeObjectMarkupWithDefault,"'objAttrDefault'", defaultObject);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeCmpMarkupWithDefault,"'cmpAttrDefault'", defaultComponent);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		return attributeMarkup;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:	public String getCommonAttributeListMarkup(boolean getList, boolean getString, boolean getBoolean, boolean getObject, 
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			boolean getComponent) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		String attributeMarkup="";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeListMarkup,"'strList'");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeStringListMarkup,"'stringList'");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		if(getBoolean) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeBooleanListMarkup,"'booleanList'");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeObjectListMarkup,"'objList'");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeCmpListMarkup,"'cmps'");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		return attributeMarkup;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:	public String getAllCommonAttributeListMarkup() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		return getCommonAttributeListMarkup(true,true,true,true,true);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:	public String getCommonAttributeListWithDefaultMarkup(boolean getList, boolean getString, boolean getBoolean, boolean getObject, 
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			boolean getComponent, String defaultList, String defaultString, String defaultBoolean, String defaultObject, String defaultComponent) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		String attributeMarkup="";
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeListMarkupWithDefault,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:					"'strListDefault'", defaultList);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = 
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:					attributeMarkup+String.format(attributeStringListMarkupWithDefault,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:							"'stringListDefault'",defaultString);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		if(getBoolean) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeBooleanListMarkupWithDefault,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:					"'booleanListDefault'",defaultBoolean);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeObjectListMarkupWithDefault,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:					"'objListDefault'",defaultObject);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:			attributeMarkup = attributeMarkup+String.format(attributeCmpListMarkupWithDefault,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:					"'cmpsDefault'",defaultComponent);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingMarkupUtil.java:		return attributeMarkup;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import java.net.URL;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import java.util.concurrent.Callable;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import java.util.concurrent.ExecutorService;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import java.util.concurrent.Executors;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import java.util.concurrent.FutureTask;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import java.util.concurrent.TimeUnit;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import java.util.logging.Level;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import java.util.logging.Logger;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:import org.openqa.selenium.remote.DesiredCapabilities;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java: * Basic provider of RemoteWebDrivers.
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:public class RemoteWebDriverFactory implements WebDriverProvider {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:    protected final int MAX_GET_RETRIES = 3;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:    protected final URL serverUrl;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:    private final long GETDRIVER_TIMEOUT_DEFAULT = 300;
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:    private final ExecutorService executorService = Executors.newCachedThreadPool();
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:    public RemoteWebDriverFactory(URL serverUrl) {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:    public WebDriver get(final DesiredCapabilities capabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:        return retry(new Callable<WebDriver>() {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:            public WebDriver call() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:                return new AdaptiveWebElementDriver(serverUrl, capabilities);
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:        }, MAX_GET_RETRIES, getGetDriverTimeout(capabilities), "Failed to get a new RemoteWebDriver");
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:    protected long getGetDriverTimeout(DesiredCapabilities capabilities) {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:            return Long.parseLong(capabilities.getCapability(WebDriverProvider.GETDRIVER_TIMEOUT_PROPERTY).toString());
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:        } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:            return Long.parseLong(System.getProperty(GETDRIVER_TIMEOUT_PROPERTY));
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:        } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:    protected <T> T retry(final Callable<T> callable, int retries, long retryTimeout, String msg) {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:            FutureTask<T> task = new FutureTask<>(callable);
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:            executorService.execute(task);
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:                return task.get(retryTimeout, TimeUnit.SECONDS);
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:            } catch (Throwable t) {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:                task.cancel(true);
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:                Logger.getLogger(getClass().getName()).log(Level.WARNING, msg, t);
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:        throw new Error(msg + String.format(" after %s tries", retries));
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:    public void release() {
ruau/ruau/src/test/java/org/ruauframework/test/RemoteWebDriverFactory.java:        // nothing to release here
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:package org.ruauframework.test;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.io.IOException;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.util.Collection;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.util.Scanner;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.util.Set;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.util.concurrent.CountDownLatch;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.util.concurrent.TimeUnit;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import java.util.concurrent.atomic.AtomicLong;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import javax.annotation.Nullable;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.apache.http.NameValuePair;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.apache.http.client.utils.URLEncodedUtils;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.apache.http.message.BasicNameValuePair;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.def.Definition;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.impl.source.StringSourceLoader;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.system.Source;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.system.SourceListener;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.system.SourceListener.SourceMonitorEvent;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:public class RuueTestingUtil {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public static final long CACHE_CLEARING_TIMEOUT_SECS = 60;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    private static AtomicLong nonce = new AtomicLong(System.currentTimeMillis());
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    private Set<DefDescriptor<?>> cleanUpDds;
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public void tearDown() {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        if (cleanUpDds != null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            StringSourceLoader loader = StringSourceLoader.getInstance();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            for (DefDescriptor<?> dd : cleanUpDds) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:                loader.removeSource(dd);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            cleanUpDds.clear();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Get a unique value for use in tests
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Get a unique value and append it to a provided string
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Retrieves the source of a component resource. Note: Works only for markup://string:XXXXX components and not for
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * any other namespace. By default, test util is aware of StringSourceLoader only.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param descriptor Descriptor of the resource you want to see the source of
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        // Look up in the registry if a context is available. Otherwise, we're
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        // probably running a context-less unit test
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        // and better be using StringSourceLoader
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            return StringSourceLoader.getInstance().getSource(descriptor);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * update source for a resource
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param desc definition descriptor of the resource
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param content new content for the descriptor
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public void updateSource(DefDescriptor<?> desc, String content) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        src.addOrUpdate(content);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Generate a {@link DefDescriptor} with a unique name. If namePrefix does not contain a namespace, the descriptor
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * will be created in the 'string' namespace. If namePrefix does not contain the name portion (i.e. it is null,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * empty, or just a namespace with the trailing delimiter), 'thing' will be used as the base name.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param namePrefix if non-null, then generate some name with the given prefix for the descriptor.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param defClass the interface of the type definition
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param bundle the bundle for this descriptor
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @return a {@link DefDescriptor} with name that is guaranteed to be unique in the string: namespace.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public final <D extends Definition, B extends Definition> DefDescriptor<D> createStringSourceDescriptor(
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            @Nullable String namePrefix, Class<D> defClass, DefDescriptor<B> bundle) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        return StringSourceLoader.getInstance().createStringSourceDescriptor(namePrefix, defClass, bundle);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Convenience method to create a description and load a source in one shot.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param defClass interface of the definition represented by this source
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param contents source contents
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @return the {@link DefDescriptor} for the created definition
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public <T extends Definition> DefDescriptor<T> addSourceAutoCleanup(Class<T> defClass, String contents) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        return addSourceAutoCleanup(defClass, contents, null);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Convenience method to create a description and load a source in one shot.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param defClass interface of the definition represented by this source
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param contents source contents
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param namePrefix package name prefix
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @return the {@link DefDescriptor} for the created definition
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public <T extends Definition> DefDescriptor<T> addSourceAutoCleanup(Class<T> defClass, String contents,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            String namePrefix) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        return addSourceAutoCleanup(defClass, contents, namePrefix, true);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Convenience method to create a description and load a source in one shot.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param defClass interface of the definition represented by this source
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param contents source contents
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param namePrefix package name prefix
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param isPrivilegedNamespace if true, namespace is privileged
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @return the {@link DefDescriptor} for the created definition
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public <T extends Definition> DefDescriptor<T> addSourceAutoCleanup(Class<T> defClass, String contents,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            String namePrefix, boolean isPrivilegedNamespace) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        StringSourceLoader loader = StringSourceLoader.getInstance();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        DefDescriptor<T> descriptor = loader.addSource(defClass, contents, namePrefix, isPrivilegedNamespace).getDescriptor();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        markForCleanup(descriptor);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Convenience method to create a description and load a source in one shot.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param descriptor descriptor for the source to be created
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param contents source contents
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @return the {@link DefDescriptor} for the created definition
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public <T extends Definition> DefDescriptor<T> addSourceAutoCleanup(DefDescriptor<T> descriptor, String contents) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    	return addSourceAutoCleanup(descriptor, contents, true);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Convenience method to create a description and load a source in one shot.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param descriptor descriptor for the source to be created
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param contents source contents
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @return the {@link DefDescriptor} for the created definition
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public <T extends Definition> DefDescriptor<T> addSourceAutoCleanup(DefDescriptor<T> descriptor, String contents, boolean isPrivilegedNamespace) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        StringSourceLoader loader = StringSourceLoader.getInstance();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        loader.putSource(descriptor, contents, false, isPrivilegedNamespace);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        markForCleanup(descriptor);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Remove a definition from the source loader.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param descriptor the descriptor identifying the loaded definition to remove.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        StringSourceLoader.getInstance().removeSource(descriptor);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        if (cleanUpDds != null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            cleanUpDds.remove(descriptor);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Clear cached defs from the system. When mocking a def, if the def has already been cached, as itself, or as part
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * of a preloaded set, the mock will not be effective, so it's safer to clear any cached defs after setting up mocks
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * but before executing a test. This relies on source change notifications to get the servlets to clear their
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * caches.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param defs the Definitions to be cleared from any caches
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public static <T extends Definition> void clearCachedDefs(Collection<T> defs) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        final DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        final Set<DefDescriptor<?>> cached = Sets.newHashSet();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:                cached.add(def.getDescriptor());
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        // Wait for the change notifications to get processed. We expect listeners to get processed in the order in
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        final CountDownLatch latch = new CountDownLatch(cached.size());
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            private Set<DefDescriptor<?>> descriptors = Sets.newHashSet(cached);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            public void onSourceChanged(DefDescriptor<?> source, SourceMonitorEvent event, String filePath) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:                    latch.countDown();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:                    definitionService.unsubscribeToChangeNotification(this);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        definitionService.subscribeToChangeNotification(listener);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        for (DefDescriptor<?> desc : cached) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            definitionService.onSourceChanged(desc, SourceMonitorEvent.CHANGED, null);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        if (!latch.await(CACHE_CLEARING_TIMEOUT_SECS, TimeUnit.SECONDS)) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            throw new RuueRuntimeException(String.format(
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:                    "Timed out after %s seconds waiting for cached Ruue definitions to clear: %s",
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    private void markForCleanup(DefDescriptor<?> desc) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        if (cleanUpDds == null) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            cleanUpDds = Sets.newHashSet();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        cleanUpDds.add(desc);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Start a context and set up default values.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    protected RuueContext setupContext(Mode mode, Format format, DefDescriptor<? extends BaseComponentDef> desc) 
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        RuueContext ctxt = Ruue.getContextService().startContext(mode, format, Authentication.AUTHENTICATED, desc);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        ctxt.setFrameworkUID(Ruue.getConfigAdapter().getRuueFrameworkNonce());
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        ctxt.addLoaded(desc, uid);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * restart context.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public void restartContext() throws QuickFixException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        DefDescriptor<? extends BaseComponentDef> cmp = context.getApplicationDescriptor();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        Ruue.getContextService().endContext();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        RuueContext newctxt = setupContext(context.getMode(), context.getFormat(), cmp);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        newctxt.addLoaded(cmp, uid);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Get a context for use with a get/post.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param mode the Ruue mode to use.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param format the format (HTML vs JSON) to use
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param desc the descriptor name to set as the primary object.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param type the type of descriptor.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param modified break the context uid.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public String getContext(Mode mode, Format format, String desc, Class<? extends BaseComponentDef> type,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            boolean modified) throws QuickFixException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        return getContext(mode, format, Ruue.getDefinitionService().getDefDescriptor(desc, type), modified);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Get a context as a string.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param mode the Ruue mode to use.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param format the format (HTML vs JSON) to use
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param desc the descriptor to set as the primary object.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param modified break the context uid.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public String getContext(Mode mode, Format format, DefDescriptor<? extends BaseComponentDef> desc,
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            boolean modified) throws QuickFixException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        RuueContext ctxt = setupContext(mode, format, desc);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            String uid = modifyUID(ctxt.getLoaded().get(desc));
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            ctxt.addLoaded(desc, uid);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        ctxtString = getSerializedRuueContext(ctxt);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        Ruue.getContextService().endContext();
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Get a serialized context with a possibly modified UID.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * FIXME: this should be cleaned out.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public String getSerializedRuueContextWithModifiedUID(RuueContext ctx, boolean modify) throws QuickFixException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        String uid = ctx.getDefRegistry().getUid(null, ctx.getApplicationDescriptor());
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        ctx.addLoaded(ctx.getApplicationDescriptor(), uid);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        return getSerializedRuueContext(ctx);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Serialize a context.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * This simply runs the serialization and handles exceptions.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @param ctx the context to serialize.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @return the serialized context as a string
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * @throws QuickFixException if the serialization service does (unlikely).
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:    public String getSerializedRuueContext(RuueContext ctx) throws QuickFixException {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            Ruue.getSerializationService().write(ctx, null, RuueContext.class, sb, "HTML");
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        } catch (IOException e) {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            // This should never happen, stringbuilders don't throw IOException.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            throw new RuueRuntimeException(e);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:     * Make a UID be incorrect.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        char flip = sb.charAt(3);
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        // change the character.
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        if (flip == 'a') {
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:            flip = 'a';
ruau/ruau/src/test/java/org/ruauframework/test/RuueTestingUtil.java:        sb.setCharAt(3, flip);
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java: * limitations under the License.
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:package test.model;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import java.io.IOException;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import java.util.ArrayList;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import java.util.Collections;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import java.util.EnumSet;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import java.util.HashMap;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import java.util.List;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import java.util.Map;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import java.util.Set;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import junit.framework.TestSuite;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.test.ComponentJSTestSuiteTest;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.test.TestInventory;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.test.WebDriverProvider;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.test.WebDriverUtil;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:public class ExcludedTestsListModel {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:    private int totalTestCount;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:    private final Map<WebDriverUtil.BrowserType, Browser> browserMap;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        // Initialize map
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        browserMap = new HashMap<>();
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        for (BrowserType bt : BrowserType.values()) {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            Browser b = new Browser(bt.name());
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            browserMap.put(bt, b);
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        // Set the browser types to all browsers so logic in WebDriverUtil.getBrowserListForTestRun works
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        String allBrowsers = EnumSet.allOf(WebDriverUtil.BrowserType.class).toString();
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        String allBrowsersTrimmed = allBrowsers.substring(1, allBrowsers.length() - 1);
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        System.setProperty(WebDriverProvider.BROWSER_TYPE_PROPERTY, allBrowsersTrimmed);
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        // We only ignore browsers on Web tests, so just grab those
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        Set<TestInventory> testInventories = ServiceLocator.get().getAll(TestInventory.class);
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:     * Go down the nested TestSuites until we get down to the individual tests, then find out what browsers each test
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:     * doesn't run on and increment our counters.
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:    private void processTestSuite(TestSuite suite) {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            if (!ts.getName().equals("JS component tests")) {
