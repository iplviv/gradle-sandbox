ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:.uitestLocalizationComponent_Test.down {
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	padding: 2px;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:/* label text alongside fields*/
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:.uitestLocalizationComponent_Test .bText {
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	font-family: monospace;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	padding-top: 5px;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:.uitestLocalizationComponent_Test .custom {
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	font-weight: normal;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	padding:0;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:/* heading */
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:.uitestLocalizationComponent_Test.underline{
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	text-decoration: underline;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	padding-bottom: 10px;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	display: block;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	padding-left: 5px;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:/* serialized output component */
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:.uitestLocalizationComponent_Test .opt {
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	color: black;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	display: inline-block;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:/* message block for exception */
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:.uitestLocalizationComponent_Test .uiMessage h4 {
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.css:	font-weight: normal;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:        // calculate and save number of times submit has been clicked
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:        var submitCount = component.get("v.submitCount");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:        component.find("outSubmitCount").set("v.value", ++submitCount);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:    goToServer : function(controller, component, event, cmpName, inValue) {
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:        $A.log("Calling server side echo api:"+"c.echo" + cmpName);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:        var a = component.get("c.echo" + cmpName);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:        a.setParams({
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:            inVar : inValue
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:        a.setCallback(component, function(action){
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:            if (action.getState() === "SUCCESS") {
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:                var retValue = action.getReturnValue();
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:                var outputCmpName = "out" + cmpName;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:                $A.log("Success! Value from server:"+retValue+" typeof(value):"+typeof(retValue));
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:                component.find(outputCmpName).set("v.value", retValue);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:                $A.test.fail("Fail: " + action.getError().message);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestHelper.js:        $A.enqueueAction(a);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        // find out who clicked submit and display inputed value
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var cmpName = event.source.get("v.buttonTitle");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var inputCmpName = "in" + cmpName;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var outputCmpName = "out" + cmpName;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        $A.log("Input Value (" + cmpName + "): ");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        $A.log(outputCmpName);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var inputCmpValue = component.find(inputCmpName).get("v.value");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        $A.log(inputCmpValue);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        helper.goToServer(this, component, event, cmpName, inputCmpValue);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var cmpName = event.source.get("v.buttonTitle");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var inputCmpName = "in" + cmpName;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var outputCmpName = "out" + cmpName;
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        //server side api to call
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var a = component.get("c.getOutput"+cmpName+"Cmp");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var b = component.get("c.echo"+cmpName);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var inputCmpValue = component.find(inputCmpName).get("v.value");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        $A.log("input cmpName:"+inputCmpName+" value:"+inputCmpValue+" typeof(value):"+typeof(inputCmpValue));
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        a.setParams({
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:            inVar : inputCmpValue
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        var currentCmp = component.find("cmpCtr"+cmpName);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        $A.log("Calling server side api:"+"c.getOutput"+cmpName+"Cmp");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        a.setCallback(component, function(action){
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:            if (action.getState() === "SUCCESS") {
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:                var is = $A.services.component.newComponentDeprecated(action.getReturnValue());
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:                if (!is.get("v.value")) {
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        $A.enqueueAction(a);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_TestController.js:        helper.goToServer(this, component, event, cmpName, inputCmpValue);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    limitations under the License.
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:<ruau:application access="unauthenticated" controller="java://org.ruauframework.impl.java.controller.TestControllerLocalization" model="java://org.ruauframework.impl.java.model.TestModelLocalization">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ruau:attribute name="hardCoded" type="String" default="Values hard coded on server.." description="Description"/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ruau:attribute name="submitCount" type="number"/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ruau:registerevent name="press" type="ui:press"/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <script type="text/javascript">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        document.addEventListener('touchmove', function (e) { e.preventDefault(); }, false);
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <div id="outSubmitCountDiv" class="banner top">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        Submit count: <ui:outputText ruau:id="outSubmitCount" value="0"/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <div id="localeDataDiv" class="banner down">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <u>Locale data</u> (You can change your browser locale from browser's language settings)<br/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <ruau:iteration items="{!m.localeData}" var="i">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <ui:outputText ruau:id="currentLocale" value="{!i}"/><br/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        </ruau:iteration>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="title">Input Number</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <span class="bText">Enter Number in System Locale: <ui:inputNumber ruau:id="inNumber" value="{!m.numberBigDecimal}"/></span>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <ui:button buttonTitle="Number" label="Submit" class="custom" press="{!c.submitCmp}"/> <br/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Localized Number value:
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div ruau:id="cmpCtrNumber" class="bText opt">- -</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Non-Localized Number value: <ui:outputText ruau:id="outNumber" value=""/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ui:message severity="info">{!v.hardCoded}</ui:message>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ruau:iteration items="{!m.numbers}" var="i">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="title">Output Number</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="bText">Number: <ui:outputNumber value='{!i}'/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    </ruau:iteration>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <!-- Input Date -->
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="title">Input Date</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <span class="bText">Enter Date: <ui:inputDate ruau:id="inDate" value="{!m.date}"/></span>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <ui:button buttonTitle="Date" label="Submit" class="custom" press="{!c.submitCmp}"/><br/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Localized Date value:
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div ruau:id="cmpCtrDate" class="bText opt">- -</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Non-Localized Date value: <ui:outputText ruau:id="outDate" value=""/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <!-- Output Date -->
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ui:message severity="info">{!v.hardCoded}</ui:message>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ruau:iteration items="{!m.dates}" var="i">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="title">Output Date</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="bText">Date: <ui:outputDate value='{!i}'/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    </ruau:iteration>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="title">Input Time</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <span class="bText">Enter Time: <ui:inputTime ruau:id="inTime" value="{!m.time}"/></span>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <ui:button buttonTitle="Time" label="Submit" class="custom" press="{!c.submitCmp}"/><br/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Localized Time value:
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div ruau:id="cmpCtrTime" class="bText opt">- -</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Non-Localized Time value: <ui:outputText ruau:id="outTime" value=""/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <!-- Here we are actually using outputDateTime component -->
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ui:message severity="info">{!v.hardCoded}</ui:message>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ruau:iteration items="{!m.times}" var="i">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="title">Output Date Time</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="bText">Date Time: <ui:outputDateTime value='{!i}'/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    </ruau:iteration>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <!-- Input Date Time -->
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="title">Input Date Time</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <span class="bText">Enter Date Time: <ui:inputDateTime ruau:id="inDateTime" value="{!m.dateTime}"/></span>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <ui:button buttonTitle="DateTime" label="Submit" class="custom" press="{!c.submitCmp}"/><br/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Localized Date Time value:
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div ruau:id="cmpCtrDateTime" class="bText opt">- -</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Non-Localized Date Time value: <ui:outputText ruau:id="outDateTime" value=""/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="title">Input Percent</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <span class="bText">Enter Percent: <ui:inputPercent ruau:id="inPercent" value="{!m.percent}"/></span>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <ui:button buttonTitle="Percent" label="Submit" class="custom" press="{!c.submitCmp}"/><br/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Localized Percent value:
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div ruau:id="cmpCtrPercent" class="bText opt">- -</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Non-Localized Percent value: <ui:outputText ruau:id="outPercent" value=""/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ui:message severity="info">{!v.hardCoded}</ui:message>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ruau:iteration items="{!m.percentages}" var="i">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="title">Output Percent</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="bText">Percent: <ui:outputPercent value='{!i}'/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    </ruau:iteration>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="title">Input Currency</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <span class="bText">Enter Currency: <ui:inputCurrency ruau:id="inCurrency" value="{!m.currency}"/></span>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <ui:button buttonTitle="Currency" label="Submit" class="custom" press="{!c.submitCmp}"/><br/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Localized Currency value:
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div ruau:id="cmpCtrCurrency" class="bText opt">- -</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Non-Localized Currency value: <ui:outputText ruau:id="outCurrency" value=""/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ui:message severity="info">{!v.hardCoded}</ui:message>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ruau:iteration items="{!m.currencies}" var="i">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="title">Output Currency</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="bText">Currency: <ui:outputCurrency value='{!i}'/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    </ruau:iteration>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <a href="#" class="underline">Unlocalized Components</a>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="title">Input Text</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <span class="bText">Enter Text: <ui:inputText ruau:id="inText" value="{!m.text}" maxlength="10"/></span>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <ui:button buttonTitle="Text" label="Submit" class="custom" press="{!c.submit}"/><br/>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="bText">Your Text: <ui:outputText ruau:id="outText" value=""/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ui:message severity="info">{!v.hardCoded}</ui:message>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    <ruau:iteration items="{!m.strings}" var="i">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:        <div class="container">
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="title">Output Text</div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:            <div class="bText">Text: <ui:outputText value="{!i}"/></div>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:    </ruau:iteration>
ruau/ruau/src/test/components/uitest/localizationComponent_Test/localizationComponent_Test.app:</ruau:application>
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:<ruau:component model="java://org.ruauframework.impl.java.model.TestJavaModel">
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    <ruau:attribute name="testCmpName" type="string" default="Number"/>
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    <ui:inputNumber ruau:id="Number" value="{!m.number}" updateOn="keyup"/> <br/> <!-- updateOn=keyup necessary for ipad automation. Webdriver does not handle updateOn=change well. -->
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    <ui:inputNumber ruau:id="UnsetNumber" updateOn="keyup"/> <br/> <!-- updateOn=keyup necessary for ipad automation. Webdriver does not handle updateOn=change well. -->
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:    <ruautest:baseInputTest cmpType="{!v.testCmpName}" ref="{!m.number}"/>
ruau/ruau/src/test/components/uitest/inputNumber_Test/inputNumber_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js:     * Verify undefined value renders nothing.
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js:    testValueUndefined: {
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js:            var cmp = component.find("undefined");
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js:            $A.test.assertEquals(null, cmp.getElement(), "unexpected elements");
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js:     * Verify null value renders nothing.
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js:    testValueNull: {
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js:            var cmp = component.find("null");
ruau/ruau/src/test/components/uitest/outputEmail/outputEmailTest.js:            $A.test.assertEquals(null, cmp.getElement(), "unexpected elements");
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    <ui:outputEmail ruau:id="undefined" label="undefined" value="{!v.undefined}"/>
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:    <ui:outputEmail ruau:id="null" label="null" value="{!false || null}"/>
ruau/ruau/src/test/components/uitest/outputEmail/outputEmail.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js:	updateTriggerLabel: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js:		helper.handleUpdateTriggerLabel(cmp, event, helper,"trigger");
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js:		cmp.find("outputStatus").set("v.value", "Event propogated to parent Div");
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js:	updateTriggerLabelForAttachToBody: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js:		helper.handleUpdateTriggerLabel(cmp, event, helper,"triggerAttachToBody");
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js:        cmp.set('v.stopClickPropagation', !cmp.get('v.stopClickPropagation'));
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js:        if(cmp.get('v.stopClickPropagation')){
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingController.js:        	cmp.find("outputStatus").set("v.value", "Event did not get propogated to parent Div");
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js:	handleUpdateTriggerLabel: function(cmp, event, helper,triggerId) {
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js:		var triggerCmp = cmp.find(triggerId);
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js:            var source = event.getSource();
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js:            var label = source.get("v.label");
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubblingHelper.js:            triggerCmp.set("v.label", label);
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:    limitations under the License.
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:<ruau:application model="java://org.ruauframework.component.ui.MenuTestModel">
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:<ruau:attribute name="eventBubbled" type="boolean"/>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:<ruau:attribute name="stopClickPropagation" type="Boolean"/>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:<div style="display:inline-block;width:50%;vertical-align:top;" onclick="{!c.clickPress}">
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:        <ui:menu ruau:id="uiMenu" class="clubMenu">
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:            <ui:menuTriggerLink class="trigger" ruau:id="trigger" label="Please pick your favorite soccer club" stopClickPropagation="{!v.stopClickPropagation}"/>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:            <ui:menuList class="actionMenu" ruau:id="actionMenu">
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:                <ui:actionMenuItem class="actionItem1" ruau:id="actionItem1" label="Bayern München" click="{!c.updateTriggerLabel}" hideMenuAfterSelected="{!v.hideMenuAfterSelected}"/>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:                <ui:actionMenuItem class="actionItem2" ruau:id="actionItem2" label="FC Barcelona" click="{!c.updateTriggerLabel}" disabled="true"/>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:                <ui:actionMenuItem class="actionItem3" ruau:id="actionItem3" label="Inter Milan" click="{!c.updateTriggerLabel}" hideMenuAfterSelected="{!v.hideMenuAfterSelected}"/>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:                <ui:actionMenuItem class="actionItem4" ruau:id="actionItem4" label="Manchester United" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:<ui:outputText ruau:id="outputStatus" value="Event Propogation To Parent Div did not happen"/> <br/><br/>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:<ui:button label="Toggle stopClickPropagation" press="{!c.toggle}"/>
ruau/ruau/src/test/components/uitest/menu_EventBubbling/menu_EventBubbling.app:</ruau:application>
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js:            var testCmp = cmp.find('outputNumberEmpty');
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertEquals('', $A.test.getText(testCmp.find('span').getElement()), "Should have displayed a blank value.");
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js:            var testCmp = cmp.find('outputNumberNull');
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertEquals('', $A.test.getText(testCmp.find('span').getElement()), "Should have displayed a blank value.");
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:<ruau:component model="java://org.ruauframework.impl.java.model.TestJavaModel">    
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    <ui:outputNumber ruau:id="outputNumberEmpty" value="{!m.stringEmpty}" /> <br/> 
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:    <ui:outputNumber ruau:id="outputNumberNull" value="{!m.stringNull}" /> <br/> 
ruau/ruau/src/test/components/uitest/outputNumber_FormattingWithNullOrEmptyStringTest/outputNumber_FormattingWithNullOrEmptyStringTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:<ruau:component extends="ui:dataProvider" model="java://org.ruauframework.impl.java.model.TestJavaModel"  description="A list data provider that understands Salesforce filters.">
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    <ruau:attribute name="dataType" type="String"/>
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    <ruau:handler name="init" value="{!this}" action="{!c.onInit}"></ruau:handler>
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:    <ruau:handler name="provide" action="{!c.onProvide}"></ruau:handler>
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProvider.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProviderController.js:		cmp.set('v.sortBy', cmp.get('m.defaultOrderByList'))
ruau/ruau/src/test/components/uitest/listSorterDataProvider/listSorterDataProviderController.js:		helper.fireDataChangeEvent(cmp, {columns: cmp.get('m.columns'), orderBy: cmp.get('m.defaultOrderByList')});
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:	<ruau:attribute name="testCmpName" type="String" default="Text"/>
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:	<ruau:attribute name="testContent" type="String"/>
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:	<a id="linkbefore" domId="linkbefore" class="linkbefore" href="">RichText</a><br/>
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    <ui:inputRichText ruau:id="Text" value="{!v.testContent}"/> <br/> 
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    <a id="linkafter" domId="linkafter" class="linkafter" href="">Custom Rich Text</a><br/>
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    <ui:inputRichText ruau:id="rtCustom"/> <br/>
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:    <ruautest:baseInputTest ruau:id="base" cmpType="{!v.testCmpName}" ref="{!v.testContent}"/>
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:			this.assertRichTextInitalized(component.find("Text"));
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:			this.assertRichTextInitalized(component.find("rtCustom"));
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:     * Test html content. Disabled because of flappyness: W-2431773
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    	attributes : {testContent: "<b>some content</b></html>"},
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    		this.assertRichTextInitalized(component.find("Text"));
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    		$A.test.clickOrTouch(component.find("base").find("submitBtn").getElement());
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    		var cmp = component.find("base").find("outputValue");
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    		$A.test.addWaitFor(false, function(){
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    			var content = cmp.get("v.value");
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    		var rtValue = component.find("Text").get("v.value");
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    		$A.test.assertEquals("<b>some content</b></html>", rtValue, 
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    			"Rich text value expected is incorrect");
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:	assertRichTextInitalized : function(rtCmp) {
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    	var textArea = rtCmp.find("textAreaElem");
ruau/ruau/src/test/components/uitest/inputRichText_Test/inputRichText_TestTest.js:    	$A.test.assertNotNull(textArea, "Component did not initialize correctly");	
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:    	var data;
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:        if (component.get("v.dataType") == "largeList") {
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:            data = component.get("m.listOf500Items");
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:        } else if (component.get("v.dataType") == "emptyList") {
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:            data = component.get("m.emptyList");
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:        	$A.log("listOfData");
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:            data = component.get("m.listOfData");
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:		$A.log(data);
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:        var dataProvider = component.getConcreteComponent();
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderHelper.js:        this.fireDataChangeEvent(dataProvider, data);
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProviderController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:<ruau:component extends="ui:dataProvider"
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:	description="A test data provider to test autocomplete component."
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:	model="java://org.ruauframework.impl.java.model.TestJavaModel">
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:	<ruau:attribute name="dataType" type="String"/> 
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:    <!-- <ruau:handler name="provide" action="{!c.provide}"/> -->
ruau/ruau/src/test/components/uitest/autocomplete_TestDataProvider/autocomplete_TestDataProvider.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    <ui:stamp>Default</ui:stamp><br/>
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    <ui:stamp severity="success">Success</ui:stamp><br/>
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    <ui:stamp severity="warning">Warning</ui:stamp><br/>
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    <ui:stamp severity="important">Important</ui:stamp><br/>
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    <ui:stamp severity="info">Info</ui:stamp><br/>
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:    <ui:stamp severity="inverse">Inverse</ui:stamp><br/>
ruau/ruau/src/test/components/uitest/stampdemo/stampdemo.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:<ruau:component extends="ui:inputRichText">
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:	<ruau:attribute name="value" type="String" default="abc"/>
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js:			this.assertRichTextInitalized();
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js:    assertRichTextInitalized : function() {
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js:    	$A.test.addWaitFor(true, function(){
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestTest.js:    			$A.test.getElementByClass("cke_wysiwyg_frame"));
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js:		var helper = cmp.getDef().getHelper();
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js:		var config = helper.getEditorConfig(cmp);
ruau/ruau/src/test/components/uitest/inputRichText_ExtendedTest/inputRichText_ExtendedTestHelper.js:		config["readOnly"] = true;
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:<ruau:component model="java://org.ruauframework.impl.java.model.TestJavaModel">    
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    <ui:inputNumber ruau:id="inputNumberEmpty" value="{!m.stringEmpty}" /> <br/> 
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:    <ui:inputNumber ruau:id="inputNumberNull" value="{!m.stringNull}" /> <br/> 
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js:            var testCmp = cmp.find('inputNumberEmpty');
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertEquals('', testCmp.getElement().value, "Should have displayed a blank value.");
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js:            var testCmp = cmp.find('inputNumberNull');
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/inputNumber_FormattingWithNullOrEmptyStringTest/inputNumber_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertEquals('', testCmp.getElement().value, "Should have displayed a blank value.");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:     * Test case created for W-2089843. Where anchor tags were not clickable on mobile. Running on all platforms that AutoComplete works on
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	        //Fire change event for autocomplete
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	        cmp.get('c.handleInputChangeAutoComplete').runDeprecated({"getParam":function(value){return "h";}});
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	    	//Grab Autocomplete List
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:		    var autoList = cmp.find("autoComplete").find("list");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	        //Get the anchor in the list to click as the user would
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	        var ul = autoList.getElement().getElementsByTagName("ul")[0];
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	        var listAnchors = ul.getElementsByTagName("a");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	        //assert
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	        var actual = cmp.find("autoComplete").find("input").find("txt").getElement().value;
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	        var expected = "hello world2"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestTest.js:	        $A.test.assertEquals(expected, actual, "List element in autocompleteList is not clickable!");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    handleInputChange: function(cmp, event, autoCompleteCmpName) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    	var acCmp = cmp.find(autoCompleteCmpName);
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        if (acCmp) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:            var matchEvt = acCmp.get("e.matchText");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:            matchEvt.setParams({
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:                keyword: event.getParam("value")
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:            matchEvt.fire();
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    handleSelectOption: function(cmp, event, autoCompleteCmpName) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    	var optionCmp = event.getParam("option");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    	var accCmp = cmp.find(autoCompleteCmpName);
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        var input = accCmp.find("input");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        var list = accCmp.find("list");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        var value = "";
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        if (optionCmp.isInstanceOf("uitest:autoComplete_CustomTemplate")) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        	value = optionCmp.get("v.value");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        } else if (optionCmp.isInstanceOf("ui:autocompleteOption")) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        	value = optionCmp.get("v.label");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        input.set("v.value", value);
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        list.set("v.visible", false);
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    handleMatchDone: function(cmp, event, autoCompleteCmpName) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    	var input = cmp.find(autoCompleteCmpName + "MatchSize");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    	input.set("v.value", event.getParam("size"));
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        console.log("For " + autoCompleteCmpName + " There are " + event.getParam("size") + " matched options.");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    matchFuncShowAll: function(cmp, event, autoCompleteCmpName) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        var autocomplete = cmp.find(autoCompleteCmpName);
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        var list = autocomplete.find("list");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        var keyword = list.get("v.keyword");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        var items = list.get("v.items");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:        for (var i = 0; i < items.length; i++) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:    handleToggleAction: function(cmp, event, autoCompleteCmpName) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:		var autocomplete = cmp.find(autoCompleteCmpName);
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:		var list = autocomplete.find("list");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:			list.set("v.visible", false);
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:			var matchEvt = autocomplete.get("e.inputChange");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:			var params = {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:				value : ""
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:			matchEvt.setParams(params);
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestHelper.js:			matchEvt.fire();
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeAutoComplete: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleInputChange(cmp, event, "autoComplete");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleKeyDown: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	cmp.find("outputLabel").set("v.value", "KeyDown Event Fired");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeNoData: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleInputChange(cmp, event, "autoCompleteNoData");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeLargeList: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleInputChange(cmp, event, "autoCompleteLargeList");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeCustomTemplate: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleInputChange(cmp, event, "autoCompleteCustomTemplate");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeCustomOption: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleInputChange(cmp, event, "autoCompleteCustomOption");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeEmptyListContent: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleInputChange(cmp, event, "autoCompleteEmptyListContent");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeMatchFunc: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleInputChange(cmp, event, "autoCompleteMatchFunc");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeToggle: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleInputChange(cmp, event, "autoCompleteToggle");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleSelectOptionAutoComplete: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleSelectOption(cmp, event, "autoComplete");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleSelectOptionNoData: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleSelectOption(cmp, event, "autoCompleteNoData");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleSelectOptionLargeList: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleSelectOption(cmp, event, "autoCompleteLargeList");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleSelectOptionCustomTemplate: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleSelectOption(cmp, event, "autoCompleteCustomTemplate");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleSelectOptionCustomOption: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleSelectOption(cmp, event, "autoCompleteCustomOption");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleSelectOptionEmptyListContent: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleSelectOption(cmp, event, "autoCompleteEmptyListContent");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleSelectOptionMatchFunc: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleSelectOption(cmp, event, "autoCompleteMatchFunc");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleSelectOptionToggle: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleSelectOption(cmp, event, "autoCompleteToggle");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeAutoCompleteMatchDone: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleMatchDone(cmp, event, "autoComplete");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeNoDataMatchDone: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleMatchDone(cmp, event, "autoCompleteNoData");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeLargeListMatchDone: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleMatchDone(cmp, event, "autoCompleteLargeList");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeCustomTemplateMatchDone: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleMatchDone(cmp, event, "autoCompleteCustomTemplate");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeCustomOptionMatchDone: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	helper.handleMatchDone(cmp, event, "autoCompleteCustomOption");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeEmptyListContentMatchDone: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleMatchDone(cmp, event, "autoCompleteEmptyListContent");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeMatchFuncMatchDone: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleMatchDone(cmp, event, "autoCompleteMatchFunc");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleOnBlur: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	cmp.find("outputLabelOnFocusAndBlur").set("v.value", "Blur Event Fired!!");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleOnFocus: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    	cmp.find("outputLabelOnFocusAndBlur").set("v.value", "Focus Event Fired!!");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleInputChangeToggleMatchDone: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleMatchDone(cmp, event, "autoCompleteToggle");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    matchFuncShowAllMatchFunc: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.matchFuncShowAll(cmp, event, "autoCompleteMatchFunc");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    matchFuncShowAllToggle: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.matchFuncShowAll(cmp, event, "autoCompleteToggle");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:    handleToggleActionToggle: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_TestController.js:        helper.handleToggleAction(cmp, event, "autoCompleteToggle");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:	<ui:autocomplete ruau:id="autoComplete" optionVar="row" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeAutoCompleteMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeAutoComplete}" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionAutoComplete}" label="Generic Auto Complete">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <ui:autocompleteOption label="{!row.label}" keyword="{!row.keyword}" value="{!row.value}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Match Count: <ui:outputText ruau:id="autoCompleteMatchSize" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <div>Autocomplete with no data provided</div><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <ui:autocomplete ruau:id="autoCompleteNoData" optionVar="row" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeNoDataMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeNoData}" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionNoData}" keydown="{!c.handleKeyDown}">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider dataType="emptyList"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <ui:autocompleteOption label="{!row.label}" keyword="{!row.keyword}" value="{!row.value}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Match Count: <ui:outputText ruau:id="autoCompleteNoDataMatchSize" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <div>Autocomplete with large list of data</div><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <ui:autocomplete ruau:id="autoCompleteLargeList" optionVar="row" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeLargeListMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeLargeList}" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionLargeList}" label="Large List Auto Complete" labelPosition="hidden">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider dataType="largeList"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <ui:autocompleteOption label="{!row.label}" keyword="{!row.keyword}" value="{!row.value}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:  	Match Count: <ui:outputText ruau:id="autoCompleteLargeListMatchSize" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <div>Autocomplete with custom template</div><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <ui:autocomplete ruau:id="autoCompleteCustomTemplate" optionVar="row" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeCustomTemplateMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeCustomTemplate}" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionCustomTemplate}">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autoComplete_CustomTemplate value="{!row.label}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Match Count: <ui:outputText ruau:id="autoCompleteCustomTemplateMatchSize" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <div>Autocomplete extending ui:autocompleteOption</div><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <ui:autocomplete ruau:id="autoCompleteCustomOption" optionVar="row" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeCustomOptionMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeCustomOption}" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionCustomOption}">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autoComplete_CustomOption label="{!row.label}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Match Count: <ui:outputText ruau:id="autoCompleteCustomOptionMatchSize" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <div>Autocomplete with updateOn attribute set</div><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <ui:autocomplete class="autoCompleteUpdateOn" ruau:id="autoCompleteUpdateOn" optionVar="row" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeNoDataMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeNoData}" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionNoData}" keydown="{!c.handleKeyDown}" updateOn="keydown,change">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider dataType="emptyList"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <ui:autocompleteOption label="{!row.label}" keyword="{!row.keyword}" value="{!row.value}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:	Event Fired: <ui:outputText ruau:id="outputLabel" class="outputLabel" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <ui:autocomplete ruau:id="autoCompleteEmptyListContent" optionVar="row"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeEmptyListContentMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeEmptyListContent}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionEmptyListContent}">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <ui:autocompleteOption label="{!row.label}" keyword="{!row.keyword}" value="{!row.value}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="emptyListContent">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        	<ui:outputText value="No matches found"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Match Count: <ui:outputText ruau:id="autoCompleteEmptyListContentMatchSize" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <div>Autocomplete with matchFunc</div><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <ui:autocomplete ruau:id="autoCompleteMatchFunc" optionVar="row"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeMatchFuncMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeMatchFunc}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionMatchFunc}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchFunc="{!c.matchFuncShowAllMatchFunc}">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <ui:autocompleteOption label="{!row.label}" keyword="{!row.keyword}" value="{!row.value}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Match Count: <ui:outputText ruau:id="autoCompleteMatchFuncMatchSize" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <div>Autocomplete with Focus and Blur event</div><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <ui:autocomplete class="autoCompleteFocus blur focus" ruau:id="autoCompleteFocus" optionVar="row" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeNoDataMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeNoData}" 
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionNoData}" focus="{!c.handleOnFocus}" blur="{!c.handleOnBlur}">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider dataType="emptyList"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <ui:autocompleteOption label="{!row.label}" keyword="{!row.keyword}" value="{!row.value}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Event Fired: <ui:outputText ruau:id="outputLabelOnFocusAndBlur" class="outputLabelOnFocusAndBlur" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    <ui:autocomplete ruau:id="autoCompleteToggle" optionVar="row"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchDone="{!c.handleInputChangeToggleMatchDone}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        inputChange="{!c.handleInputChangeToggle}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        selectListOption="{!c.handleSelectOptionToggle}"
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        matchFunc="{!c.matchFuncShowAllToggle}">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <uitest:autocomplete_TestDataProvider/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="listOption">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <ui:autocompleteOption label="{!row.label}" keyword="{!row.keyword}" value="{!row.value}" visible="{!row.visible}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        <ruau:set attribute="autocompleteButton">
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:            <ui:button label="Toggle" press="{!c.handleToggleActionToggle}"/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    </ui:autocomplete>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:    Match Count: <ui:outputText ruau:id="autoCompleteToggleMatchSize" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/autoComplete_Test/autoComplete_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:<ruau:component implements="ui:pagingInterface, ui:scrollerEmbeddable">
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    <ruau:handler name="showMore" action="{!c.showMore}"/>
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:    <ruau:handler name="refresh" action="{!c.refresh}"/>
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:	<div class="container" style="width: 320px; height:480px; border: 1px solid red; margin: 0px auto; overflow-x:hidden;">
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:	<ui:infiniteList enableRowSwipe="true" ruau:id="list" itemVar="row" currentPage="{!v.currentPage}" pageSize="{!v.pageSize}" totalItems="{!v.totalItems}">
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:		<ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:			<uitest:infiniteDataProvider currentPage="{!v.currentPage}" pageSize="{!v.pageSize}" totalItems="{!v.totalItems}"/>		
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:		</ruau:set>
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:		<ruau:set attribute="itemTemplate">
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:					<ruau:set attribute="swipeBody">
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:					</ruau:set>
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:		</ruau:set>
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:	<ui:button ruau:id="btnShowMore" class="btnShowMore" label="show more" press="{!c.showMore}"/><br/>
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:	<ui:button ruau:id="btnRefresh" class="btnRefresh" label="refresh" press="{!c.refresh}"/>
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js:        var list = component.find("list");
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_TestController.js:        var list = component.find("list");
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css: * limitations under the License.
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css:	padding: 0;
ruau/ruau/src/test/components/uitest/infiniteListRow_Test/infiniteListRow_Test.css:background-color: white;
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:<ruau:component controller="java://org.ruauframework.impl.java.controller.JavaTestController">
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:	<ui:inputText ruau:id="inputCmp" value=""/> <br/>
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:	Error Status: <ui:outputText ruau:id="outputStatus" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:	<div id="ErrorServer"><ui:button label="Error - From server" press="{!c.doServerError}"/></div>
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    <div id="ErrorNoEvent"><ui:button label="Error - No event fire" press="{!c.doErrorNoEventFire}"/></div>
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    <div id="ClearNoEvent"><ui:button label="Clear error - No event fire" press="{!c.clearErrorNoEventFire}"/></div>
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    <div id="ErrorNoErrMsg"><ui:button label="Error - No error message" press="{!c.doErrorNoErrorMsg}"/></div>
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:    <div id="ClearNullErrMsg"><ui:button label="Clear error - Null errors message" press="{!c.clearErrorNullErrorMsg}"/></div>
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		var a = component.get("c.throwsException");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		a.setParams({
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:            errorMsg : "Error Happens!"
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:        a.setCallback(component, function(action){
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:        	if (action.getState() === "SUCCESS") {
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:        		var retValue = action.getReturnValue();
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:	        	component.find("outputStatus").set("v.value", "EXPECTED ERROR but got: " + retValue);
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:	        	var errors = action.getError();
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:	        	var inputCmp = component.find("inputCmp");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:	    		inputCmp.setValid("v.value", false);
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:                inputCmp.addErrors("v.value", errors);
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:                component.find("outputStatus").set("v.value", "Got Error");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:        $A.enqueueAction(a);
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		var inputCmp = component.find("inputCmp");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		inputCmp.setValid("v.value", false);
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		inputCmp.addErrors("v.value", [{message:"Error Happens!"}]);
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		component.find("outputStatus").set("v.value", "Got Error");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:	clearErrorNoEventFire : function(component) {
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		var inputCmp = component.find("inputCmp");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		inputCmp.clearErrors("v.value");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		component.find("outputStatus").set("v.value", "Cleared error");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		var inputCmp = component.find("inputCmp");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		inputCmp.setValid("v.value", false);
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		component.find("outputStatus").set("v.value", "Got Error");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:	// TODO(tbliss): Adding a null error here still adds an entry to the errors object so the error is not cleared.
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:	clearErrorNullErrorMsg : function(component) {
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		var inputCmp = component.find("inputCmp");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:		inputCmp.clearErrors("v.value");
ruau/ruau/src/test/components/uitest/inputError_Test/inputError_TestController.js:	   	component.find("outputStatus").set("v.value", "Cleared error");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js: * distributed under the License is distributed on an "AS IS"BASIS,
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestModel.js:    items: [{title: "model tab 0"}, {title: "model tab 1"}, {title: "model tab 2"}, {title: "model tab 3"},{title: "model tab 4"},{title: "model tab 5"},{title: "model tab 6"}]
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css: * limitations under the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css:    padding: 20px;
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.css:    border-color: gray;
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    <ruau:attribute name="renderItem"      type="String" default="all"/>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    <ruau:attribute name="lazyRender"      type="Boolean" default="true"/>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    <ruau:attribute name="closable"        type="Boolean" default="false"/>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    <ruau:attribute name="conditionalShow" type="Boolean" default="true"/>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    <ruau:if isTrue="{! v.renderItem == 'basic' || v.renderItem == 'all'}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	    <div class="block">    
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        <h1 class="header">Basic Tabs</h1>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        <uitest:tabset_extendsTest ruau:id="tabset2" class="tabset1" lazyRenderTabs="{!v.lazyRender}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        	<ruau:if isTrue="{!!v.conditionalShow}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        		<ui:tab title="Dummy Tab" ruau:id="inputForActivateByIndex" closable="{!v.closable}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            	</ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            </ruau:if>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        	<ruau:if isTrue="{!v.conditionalShow}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        		<ui:tab title="Accounts" ruau:id="inputForActivateByIndex" closable="{!v.closable}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    tab 1 contents
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        	</ruau:if>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:tab title="Contacts" name="contacts" closable="{!v.closable}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    tab 2 contents
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            </ui:tab> 
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:tab title="Opportunities" closable="{!v.closable}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    tab 3 contents
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:tab title="Leads" closable="{!v.closable}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    tab 4 contents
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:tab title="Chatter" active="true" ruau:id="chatter" >
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    tab 5 contents
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:tab ruau:id="campaigns" name="icons">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                <ruau:set attribute="icon">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    <ui:outputText ruau:id="icon" value="Icon" />
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                </ruau:set>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    tab 6 contents
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:tab title="Dashboards" ruau:id="dashboard" closable="{!v.closable}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    tab 7 contents
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    <iframe id="myIframe" src="http://salesforce.com" height="200" width="500">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                        <p>This is my iframe</p>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    </iframe>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            </ui:tab> 
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        </uitest:tabset_extendsTest>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	    <div class="block">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                <ui:inputText ruau:id="inputTabTitle" class="inputTabTitle" placeholder="title" />
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                <ui:inputTextArea ruau:id="inputTabContent" placeholder="content" />
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                Closable: <ui:inputCheckbox ruau:id="inputTabClosable" value="closable" />
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                setActive: <ui:inputCheckbox ruau:id="setActive" value="isActive" />
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                <ui:button label="add tab" class="addTab" press="{!c.addTab}" />
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:button label="Update Tab Title"  press="{!c.updateTab}"/>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:button label="Activate By Index" press="{!c.activateTabByIndex}" ruau:id="activateByIndex"/>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:button label="Active By Title"   press="{!c.activateTabByName}" ruau:id="activateByName"/>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    </ruau:if>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    <ruau:if isTrue="{! v.renderItem == 'nestedTabs' || v.renderItem == 'all'}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	    <div class="block">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		    <h1 class="header">Nested Tabs</h1>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		    <ui:tabset class="nestedTabs">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		        <ui:tab title="tab1">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		            <ui:tabset ruau:id="nestedTabSet">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		                <ui:tab title="inner tab 1" ruau:id="nestedTab" closable="true">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		                    inner tab 1
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		                </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		                <ui:tab title="inner tab 2">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		                    inner tab 2
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		                </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		            </ui:tabset>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		        </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		        <ui:tab title="tab 2">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		            tab 2
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		        </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:		    </ui:tabset>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    </ruau:if>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:     <ruau:if isTrue="{! v.renderItem == 'noTabs'}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	    <div class="block">    
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        <h1 class="header">No Tabs</h1>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        <ui:tabset ruau:id="noTabsTabSet" class="tabset1" lazyRenderTabs="{!true}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        </ui:tabset>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    </ruau:if>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:    <ruau:if isTrue="{! v.renderItem == 'tab' || v.renderItem == 'all'}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	    <div class="block">    
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        <h1 class="header">Basic Tabs</h1>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        <uitest:tabset_extendsTest ruau:id="tabset2" class="tabset1" lazyRenderTabs="{!v.lazyRender}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:tab title="Accounts" ruau:id="inputForActivateByIndex" closable="{!v.closable}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                     <ui:inputText ruau:id="inputTabTitle" class="inputTabTitle" placeholder="title" />
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            </ui:tab>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            <ui:tab title="Contacts" name="contacts" closable="{!v.closable}">
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	                    tab 2 contents
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	            </ui:tab> 
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	        </uitest:tabset_extendsTest>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:	    <ui:inputTextArea ruau:id="inputTabContent"  class="inputTabContent" placeholder="content" />
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:     </ruau:if>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:    addTab: function(cmp, evt) {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        var title = "Dynamic";
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        var content = "Dynamically generated";
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        var closable = true;
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        var active = true;
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        var e = cmp.find('tabset2').get("e.addTab");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        e.setParams({tab: {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:            "closable": closable,
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:            "active": active,
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:                "componentDef": { descriptor:"markup://ruau:text" },
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:                "attributes": {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:                    "values": {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:                        "value": content
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:    updateTab: function(cmp) {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        cmp.find("icon").set("v.value", "new Title");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:    activateTabByName: function(cmp) {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        var name = cmp.find("campaigns").get('v.name');
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        var e = cmp.find('tabset2').get("e.activateTab");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        e.setParams({"name": name}).fire();
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:    activateTabByIndex: function(cmp) {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        var e = cmp.find('tabset2').get("e.activateTab");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestController.js:        e.setParams({"index": 6}).fire();
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	 * Test making sure that getting element by Index works correctly
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	testGettingTabByTabIndex : {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		attributes : {"renderItem" : "basic"},
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	this.activateElement(cmp, "Index");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	this.verifyNewlyActivatedElement("Index", "Dashboards");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:     * Test trying to get element by its tab name
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:    testGettingTabByTabName : {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:    	attributes : {"renderItem" : "basic"},
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	this.activateElement(cmp, "Name");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	this.verifyNewlyActivatedElement("Name","Icon");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:     * Making sure that not have any tabs still works fine
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	testEmptyTab : {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		attributes : {"renderItem" : "noTabs"},
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 var ulElem = cmp.find("noTabsTabSet").getElement().getElementsByTagName("ul")[0];
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 var ulChldrn = this.ignoreComments(ulElem.children);
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 $A.test.assertEquals(0, ulChldrn.length, "There should not be any tabs or errors present");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	 * Verifying lazy rendering works as expected, With Lazy rendering we should only have a new section 
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	 * when we click on a tab and activate
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	testLazyRendering : {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		attributes : {"renderItem" : "basic"},
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 * Get the active tab and verify that it matches the correct section 
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 * (in this case there should only be one section since we are loading things lazily)
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 var tabSet = cmp.find("tabset2").getElement();
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 var section = tabSet.getElementsByTagName("section");       	
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 $A.test.assertEquals(1, section.length, "Since we loading lazily we should only have one section on the page");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 //Verify that section and anchor aria-controled by id match
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 this.matchSectionAndAnchor(cmp.find("chatter").get("v.title"), "tab 5 contents");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 var lis = tabSet.getElementsByTagName("li");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 //Verify that the new active element is correct and its sections matches correctly
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	 this.matchSectionAndAnchor(cmp.find("dashboard").get("v.title"), "tab 7 contents");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	  * Specifically for IE7/8 since grabbing all of the children from a parent element will include comments
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		   	 var elementArray = [];
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		     for(var i = 0; i < elements.length; i++){
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		        if(elements[i].tagName != "!"){
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		        	elementArray.push(chldrn[i]);
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	return elementArray;		 
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	  * Code extracted to be used to activate tab by name and by index
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	 activateElement : function(cmp, activateBy){
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:     		//Pressing button to activate predetermined tab
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	cmp.find("activateBy"+activateBy).get("e.press").fire({});
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	var tmpFunc = this.getElement;
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	$A.test.addWaitFor(true, function(){
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    		return ($A.util.getText(tmpFunc("li", "tabItem uiTabItem active")[0]).indexOf("Chatter") < 0);
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	  * Verifying that the newly activated element is what we expect it to be
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	 verifyNewlyActivatedElement : function (activateBy, text){
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:        	//Get newly activated tab
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	var element = this.getElement("li", "tabItem uiTabItem active");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	//Verify that there is only one tab active
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	$A.test.assertEquals(element.length, 1, "There should only be one active tab");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	$A.test.assertNotUndefinedOrNull(element[0], "Finding an active element should not be null");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	var elmText = $A.util.getText(element[0]);
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	    	$A.test.assertEquals(text, elmText, "Did not find the correct tab by its' "+activateBy.toLowerCase());	    	
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	  * Helper code verifying that we are looking at the correct items
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	 matchSectionAndAnchor : function(tabText, bodyText){
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 //Get Element in three different ways (1 way for ie7, 1 way for ie 8 and another way for all other browsers)
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:         var activeLi = this.getElement("li", "tabItem uiTabItem active");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 var activeSection = this.getElement("section", "tabBody uiTab active");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 $A.test.assertEquals(1, activeLi.length, "There should only be one active list element");		 
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 $A.test.assertEquals(1, activeSection.length, "There should only be one active section element");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 //Grab the only elements
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 activeLi = activeLi[0];
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 activeSection = activeSection[0];
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 var activeLiText = $A.util.getText(activeLi);
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 var activeSectionText = $A.util.getText(activeSection);
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 $A.test.assertEquals(tabText, activeLiText, "Text from the active tab, does not match what the text of the active tab should be");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 $A.test.assertTrue(activeSectionText.indexOf(bodyText) > -1, "Text from the active section, does not match what the text of the active section should be");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 //check to make sure the correct items are set
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 var anchorAriaId = $A.util.getElementAttributeValue(activeLi.children[0], "aria-controls");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 var sectionId = $A.util.getElementAttributeValue(activeSection, "id");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:    	 $A.test.assertEquals(anchorAriaId, sectionId, "Aria Anchor Id and section Id do not match");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	 * Extracted function so that we can use a more sophisticated way of getting the element by class
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:	getElement : function(elmTagName, classToUse){
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 var activeElm  = $A.test.getElementByClass(classToUse);
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 //Custom way to get an element in ie8/7
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 if($A.util.isUndefinedOrNull(activeElm)) {
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:			 //IE8 custom way
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:				 activeElm = document.querySelectorAll(elmTagName + "." +classToUse.replace(/ /g, "."));
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:			 //IE7 custom way
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:				 activeElm = [];
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:				 var elmArray = document.getElementsByTagName(elmTagName);
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:				 var className = "";
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:				 for(var i = 0; i< elmArray.length; i++){
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:					 className = $A.util.getElementAttributeValue(elmArray[i], "class");
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:					 if(!$A.util.isUndefinedOrNull(className) && className.indexOf(classToUse) > -1){
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:						 activeElm.push(elmArray[i]);
ruau/ruau/src/test/components/uitest/tabset_Test/tabset_TestTest.js:		 return activeElm;
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:<ruau:component model="java://org.ruauframework.components.ruaudocs.SearchFilterTreeTestModel" >
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    <ruau:handler name="init" value="{!this}" action="{!c.doInit}" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    <ruaudocs:searchFilterTree ruau:id='searchTree'>
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:	    <ui:tree ruau:id="tree">
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		    <ui:treeNode ruau:id="root" title="root">
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		        <ui:treeNode ruau:id="iota" href="#iota" title="Iota is lonely" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		        <ui:treeNode ruau:id="A" title="A">
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		            <ui:treeNode ruau:id="mu" href="#mu" title="Moo cows" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		            <ui:treeNode ruau:id="B" title="VHS or Beta?">
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                <ui:treeNode ruau:id="lambda" href="#lambda" title="Lambda is after moo" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                <ui:treeNode ruau:id="D" title="D">
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                    <ui:treeNode ruau:id="gamma" href="#gamma" title="Gamma rays" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                    <ui:treeNode ruau:id="G" title="G has Rho as a child">
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                        <ui:treeNode ruau:id="pi" href="#pi" title="Pi is delicious" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                        <ui:treeNode ruau:id="rho" href="#rho" title="Rho Rho Rho your boat" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                        <ui:treeNode ruau:id="tau" href="#tau" title="Some argue Tau is better than Pi" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                <ui:treeNode ruau:id="E" title="E">
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                    <ui:treeNode ruau:id="alpha" href="#alpha" title="The alpha and the omega" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                    <ui:treeNode ruau:id="beta" href="#beta" title="Beta means Ship it" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                <ui:treeNode ruau:id="F" title="F" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                <ui:treeNode ruau:id="H" title="H">
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                    <ui:treeNode ruau:id="chi" href="#chi" title="Tea" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                    <ui:treeNode ruau:id="psi" href="#psi" title="Pressure Bars" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		                    <ui:treeNode ruau:id="omega" href="#omega" title="Where's alpha?" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		            <ui:treeNode ruau:id="C" title="C is lonely" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		    <ui:treeNode ruau:id="secondRoot" title="secondRoot">
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		       <ui:treeNode ruau:id="foo" href="#foo" title="foo" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:		       <ui:treeNode ruau:id="bar" href="#bar" title="bar" />
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:    </ruaudocs:searchFilterTree>
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTest.cmp:</ruau:component>
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js: * limitations under the License.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestController.js:      cmp.find('searchTree').set('v.tree', cmp.find('tree'));
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js: * limitations under the License.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * Fire the searchEvent on the searchFilterTree.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:    doSearch : function(cmp, searchTerm) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        var searchTree = cmp.find('searchTree');
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        searchTree.getEvent('search').setParams({
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            'searchTerm' : searchTerm
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * Convenience method for printing nodes in assertion messages.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        var string = node.get('v.item.title') || '' + node.get('v.title') || '';
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        string += " (" + (node.get('v.expanded') ? 'expanded' : 'collapsed');
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * @param cmp
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     *            the searchFilterTree
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * @param ids
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     *            an array of ruau:ids
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * @return An array of components correspdonding to the given ids.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        var nodes = [];
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        for ( var i = 0, n = ids.length; i < n; i++) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * Create a visitor to collect and validate the expansion state of a tree.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:    initExpansionValidator : function(expectedNodes, expectedState) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        var self = this;
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        if (!self.ExpansionValidator) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            self.ExpansionValidator = function(expectedNodes, expectedState) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                this.expansion = expectedState;
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                this.actual = [];
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            self.ExpansionValidator.prototype.visit = function(node) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            self.ExpansionValidator.prototype.accept = function(node) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                if (node.get('v.expanded') == this.expansion) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                    this.actual.push(node);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            self.ExpansionValidator.prototype.endVisit = function(node) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:             * Assert that the only nodes in the given expansion state were the
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            self.ExpansionValidator.prototype.validate = function() {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                this.actual = this.actual.sort();
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                $A.test.assertEquals(this.expected.length, this.actual.length,
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                        "Incorrect # of matching nodes");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                for ( var i = 0, n = this.expected.length; i < n; i++) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                    $A.test.assertTrue(this.actual[i] === this.expected[i],
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                                    + self.nodeToString(this.actual[i])
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        return new self.ExpansionValidator(expectedNodes, expectedState);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * Conveience method to run the expansion visitor and validation.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:    validateExpansion : function(root, expectedNodes, expectedState) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        var expansionVisitor = this.initExpansionValidator(expectedNodes,
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                expectedState);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        root.getEvent('makeVisitor').setParams({
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            "traverser" : "PreOrderTraverser",
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            "callback" : function(args) {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                args.visitor = expansionVisitor;
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                root.getEvent("traverse").setParams(args).fire();
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:        expansionVisitor.validate();
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * Make sure we can do a simple, one level search.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:    testOneLevelSearch : {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.doSearch(cmp, "iota");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            $A.test.assertTrue(cmp.find('root').get('v.expanded'))
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            $A.test.assertTrue(!cmp.find('A').get('v.expanded'));
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.validateExpansion(cmp.find('root'), this.idsToNodes(cmp, [
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                    "root", "iota" ]), true);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * Make sure we can search over multiple roots (aka the tree as the virtual
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.doSearch(cmp, "root");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            $A.test.assertTrue(cmp.find('root').get('v.expanded'));
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            $A.test.assertTrue(cmp.find('secondRoot').get('v.expanded'));
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            $A.test.assertTrue(!cmp.find('A').get('v.expanded'));
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.validateExpansion(cmp.find('A'), [], true); // A and all of
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                                                                // descendants
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                                                                // collapsed.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * Make sure that multiple matches are handled correctly.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:    testMultipleMatch : {
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            // Multiple matches under one root.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.doSearch(cmp, "beta");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.validateExpansion(cmp.find('root'), this.idsToNodes(cmp, [
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                    "root", "A", "B", "E", "beta" ]), true);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            // Multiple matches across roots
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.doSearch(cmp, "bar");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.validateExpansion(cmp.find('root'), this.idsToNodes(cmp, [
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.validateExpansion(cmp.find('secondRoot'), this.idsToNodes(cmp,
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:                    [ "secondRoot", "bar" ]), true);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * Queries that match every node should expand the entire tree, and those
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * that match none should collapse it.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            // A query that matches everything expands everything. So, none
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            // should be collapsed.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.doSearch(cmp, "\\w");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.validateExpansion(cmp.find('root'), [], false);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.validateExpansion(cmp.find('secondRoot'), [], false);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            // Conversely, a query that matches nothing collapses everything.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            // So, none should be expanded.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.doSearch(cmp, "hiybbprqag");
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.validateExpansion(cmp.find('root'), [], true);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            this.validateExpansion(cmp.find('secondRoot'), [], true);
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:     * Exercise the tree with a single model generated node.
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            cmp.find('searchTree').set('v.nodes', cmp.get('m.tree'));
ruau/ruau/src/test/components/docstest/searchFilterTreeTest/searchFilterTreeTestTest.js:            // TODO(cconroy): sadly this doesn't seem to actually update the tree..
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:    You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:    limitations under the License.
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:<ruau:application extensible="true">
ruau/ruau/src/test/components/updateTest/updateBase/updateBase.app:</ruau:application>
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:    limitations under the License.
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:<ruau:component render="client">
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:    <div class="clickableme" onclick="{!c.cssalert}">@@@TOKEN@@@</div>
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.cmp:</ruau:component>
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js:    cssalert:function(c){
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js:        var style = $A.test.getStyle(c.getElement(),"background-image");
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOtherController.js:        alert('@@@TOKEN@@@\n' + style.substring(style.lastIndexOf('?')+1,style.lastIndexOf(')')) + '\n' + $A.test.dummyFunction());
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateableOther/updateableOther.css:    background-image: url(/ruauFW/resources/qa/images/s.gif?@@@TOKEN@@@);
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    limitations under the License.
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:<ruau:component controller="java://org.ruauframework.impl.java.controller.JavaTestController" extensible="true">
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    <ruau:attribute name="text" type="string"/>
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    <ui:outputText value="{!v.text}"/>
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    <ui:button ruau:id="update" class="update" press="{!c.updateText}" label="update text"/>
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:    <ui:button ruau:id="trigger" class="trigger" press="{!c.sendOutdatedRequest}" label="call action"/>
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandling.cmp:</ruau:component>
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:    updateText:function(c,e,h){
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        document.__PageModifiedTestFlag = true;
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:     * this routine builds a request where the 'loaded' map is incorrect.
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:     * In order to do this it randomly picks a character from the UID, and replaces it with
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:     * some other character in the set of alphanumerics, making sure that it is different.
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:    sendOutdatedRequest:function(c,e,h){
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        var selection = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        var ctx = $A.getContext();
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        var nl = [];
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        var loaded = ctx.getLoaded();
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        for (var p in loaded) {
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        	if (loaded.hasOwnProperty(p)) {
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:	            var x = loaded[p];
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:	                var posn = Math.floor(Math.random() * (x.length-1));
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:	                var repl;
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:	                var orig = x.charAt(posn);
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:	                var rposn = selection.indexOf(orig);
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:	                    repl = Math.floor(Math.random() * (selection.length-1));
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:	                    repl = Math.floor(Math.random() * selection.length);
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:	                var r = selection.charAt(repl);
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        for (var q in nl) {
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        	if (nl.hasOwnProperty(q)) {
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        		loaded[q] = nl[q];
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        c.set("v.text", "i was updated");
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        var a = c.get("c.noArgs");
ruau/ruau/src/test/components/updateTest/updateWithoutHandling/updateWithoutHandlingController.js:        $A.enqueueAction(a);
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:    You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:    limitations under the License.
ruau/ruau/src/test/components/updateTest/updateWithPreload/updateWithPreload.app:<ruau:application preload="updateTest" extends="updateTest:updateWithoutPreload"/>
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js:    cssalert:function(c){
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js:        var style = $A.test.getStyle(c.getElement(),"background-image");
ruau/ruau/src/test/components/updateTest/updateable/updateableController.js:        alert('@@@TOKEN@@@\n' + style.substring(style.lastIndexOf('?')+1,style.lastIndexOf(')')) + '\n' + $A.test.dummyFunction());
ruau/ruau/src/test/components/updateTest/updateable/updateable.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateable/updateable.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateable/updateable.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateable/updateable.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateable/updateable.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateable/updateable.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateable/updateable.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateable/updateable.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateable/updateable.css: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateable/updateable.css:    background-image: url(/ruauFW/resources/qa/images/s.gif?@@@TOKEN@@@);
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    limitations under the License.
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:<ruau:component render="client">
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    <ruau:registerEvent name="click" type="updateTest:updateableEvent"/>
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:    <div class="clickableme" onclick="{!c.cssalert}">@@@TOKEN@@@</div>
ruau/ruau/src/test/components/updateTest/updateable/updateable.cmp:</ruau:component>
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingController.js:    handleUpdate:function(c,e,h){
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:    limitations under the License.
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:<ruau:component extends="updateTest:updateWithoutHandling">
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:    <ruau:handler event="ruau:clientOutOfSync" action="{!c.handleUpdate}"/>
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandling.cmp:</ruau:component>
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js:    testOutdatedServerAction:{
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js:        labels : ["ruauSanity"],
ruau/ruau/src/test/components/updateTest/updateHandling/updateHandlingTest.js:            $A.test.addWaitFor("i was updated properly", function(){return cmp.getSuper().get("v.text")});
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:    limitations under the License.
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:<ruau:component render="client">
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:    <div class="clickableme" onclick="{!c.cssalert}">@@@TOKEN@@@</div>
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.cmp:</ruau:component>
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js:    cssalert:function(c){
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js:        var style = $A.test.getStyle(c.getElement(),"background-image");
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlsoController.js:        alert('@@@TOKEN@@@\n' + style.substring(style.lastIndexOf('?')+1,style.lastIndexOf(')')) + '\n' + $A.test.dummyFunction());
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateableAlso/updateableAlso.css:    background-image: url(/ruauFW/resources/qa/images/s.gif?@@@TOKEN@@@);
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:    You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:    limitations under the License.
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:<ruau:event type="COMPONENT">
ruau/ruau/src/test/components/updateTest/updateableEvent/updateableEvent.evt:</ruau:event>
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js:    cssalert:function(c){
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js:        var style = $A.test.getStyle(c.getElement(),"background-image");
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreloadController.js:        alert('@@@TOKEN@@@\n' + style.substring(style.lastIndexOf('?')+1,style.lastIndexOf(')')) + '\n' + $A.test.dummyFunction());
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    limitations under the License.
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:<ruau:application extends="updateTest:updateBase" extensible="true">
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    <div class="clickableme" onclick="{!c.cssalert}">@@@TOKEN@@@</div>
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    <updateTest:updateable/>
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:    <updateTest:updateableAlso/>
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.app:</ruau:application>
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css: * limitations under the License.
ruau/ruau/src/test/components/updateTest/updateWithoutPreload/updateWithoutPreload.css:    background-image: url(/ruauFW/resources/qa/images/s.gif?@@@TOKEN@@@);
ruau/ruau/src/test/java/configuration/RuueTestConfig.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/configuration/RuueTestConfig.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/configuration/RuueTestConfig.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/configuration/RuueTestConfig.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/configuration/RuueTestConfig.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/configuration/RuueTestConfig.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/configuration/RuueTestConfig.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/configuration/RuueTestConfig.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/configuration/RuueTestConfig.java: * limitations under the License.
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:package configuration;
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:import org.ruauframework.adapter.ComponentLocationAdapter;
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:import org.ruauframework.impl.source.StringSourceLoader;
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:import org.ruauframework.test.TestInventory;
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:import org.ruauframework.util.RuueFiles;
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:import org.ruauframework.util.ServiceLoaderImpl.RuueConfiguration;
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:import org.ruauframework.util.ServiceLoaderImpl.Impl;
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:@RuueConfiguration
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:public class RuueTestConfig {
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:    @Impl(name = "ruauTestInventory")
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:    public static TestInventory ruauTestInventory() throws Exception {
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:        return new TestInventory(RuueTestConfig.class);
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:    public static ComponentLocationAdapter ruauTestComponentLocationAdapterImpl() {
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:        return new ComponentLocationAdapter.Impl(RuueFiles.TestComponents.asFile(), null, "components_ruau");
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:    public static ComponentLocationAdapter ruauTestStringSourceAdapterImpl() {
ruau/ruau/src/test/java/configuration/RuueTestConfig.java:        return new ComponentLocationAdapter.Impl(StringSourceLoader.getInstance());
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java:import org.ruauframework.test.MockBean;
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java: * Provide a configurable ConfigAdapter for tests.
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java:public interface MockConfigAdapter extends ConfigAdapter, MockBean {
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java:    void setIsClientAppcacheEnabled(boolean isClientAppcacheEnabled);
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java:    void setIsProduction(boolean isProduction);
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java:    void setIsRuueJSStatic(boolean isRuueJSStatic);
ruau/ruau/src/test/java/org/ruauframework/adapter/MockConfigAdapter.java:    void setValidateCss(boolean validateCss);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:import org.ruauframework.test.annotation.RuueTestLabels;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * Tests for ResourceRewriteFilter handling. The tests don't validate the
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * response content, but just whether the request is forwarded to the
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java: * RuueResourceServlet.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:public class RuueResourceRewriteFilterHttpTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:    public RuueResourceRewriteFilterHttpTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:     * URLs should be forwarded to RuueResourceServlet only if they appear to
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:     * have the required format. We expect 404 for all other URLs, as they
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:     * shouldn't get handled by the servlet.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:    // TODO: W-1069590 https://gus.soma.salesforce.com/a07B0000000G71N
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:    public void testDoFilterWithMissingParams() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url with only context", "/l/{'mode':'DEV'}", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward url without context", "/l/app.js", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward /l/", "/l/", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceRewriteFilterHttpTest.java:        assertUrlResponse("Shouldn't forward /l", "/l", HttpStatus.SC_NOT_FOUND);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:import org.ruauframework.service.ContextService;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:import org.ruauframework.test.IntegrationTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java: * Tests for RuueServlet.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:public class RuueServletIntegrationTest extends IntegrationTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public RuueServletIntegrationTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    private void assertBustedUrl(String expectedFormat, String initialValue) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        if (contextService.isEstablished()) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        contextService.startContext(Mode.DEV, Format.HTML, Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        String buster = "" + Ruue.getConfigAdapter().getBuildTimestamp();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        String expected = String.format(expectedFormat, buster);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        String actual = RuueBaseServlet.addCacheBuster(initialValue);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertEquals(expected, actual);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testAddCacheBusterToNull() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        if (contextService.isEstablished()) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        contextService.startContext(Mode.DEV, Format.HTML, Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertNull(RuueBaseServlet.addCacheBuster(null));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:     * Empty URL string should still have the buster returned.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testAddCacheBusterToEmptyString() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertBustedUrl("?ruau.cb=%s", "");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:     * Basic URL, without query or hash, has buster simply appended as query.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testAddCacheBusterWithoutQueryOrHash() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertBustedUrl("/something?ruau.cb=%s", "/something");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:     * URL with query will have buster appended to query.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testAddCacheBusterWithQuery() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertBustedUrl("/something?is=fishy&ruau.cb=%s", "/something?is=fishy");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:     * URL with hash will have buster appended as query (before the hash).
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testAddCacheBusterWithHash() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertBustedUrl("/something?ruau.cb=%s#toremember", "/something#toremember");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:     * URL with hash with query will have buster appended as query (before the hash).
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testAddCacheBusterWithHashQuery() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertBustedUrl("/something?ruau.cb=%s#layout?option=value", "/something#layout?option=value");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:     * URL with query and hash will have buster appended to query (before the hash).
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testAddCacheBusterWithQueryAndHash() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertBustedUrl("/something?is=fishy&ruau.cb=%s#inside", "/something?is=fishy#inside");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:     * URL with query and hash with query will have buster appended to query (before the hash).
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testAddCacheBusterWithQueryAndHashQuery() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertBustedUrl("/something?is=fishy&ruau.cb=%s#inside?where=fridge", "/something?is=fishy#inside?where=fridge");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:     * No manifest URL when context has no preloads.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testGetManifestWithoutPreloads() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        DefDescriptor<ApplicationDef> desc = Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:                "appCache:nopreload", ApplicationDef.class);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        Ruue.getContextService().startContext(Mode.PROD, Format.HTML, Authentication.AUTHENTICATED, desc);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertTrue(ManifestUtil.isManifestEnabled());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:     * Get a URL when context has preloads.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    @ThreadHostileTest("preload sensitive")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:    public void testGetManifestWithPreloads() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        DefDescriptor<ApplicationDef> desc = Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:                "appCache:nopreload", ApplicationDef.class);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        Ruue.getContextService().startContext(Mode.PROD, Format.HTML, Authentication.AUTHENTICATED, desc);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        String url = ManifestUtil.getManifestUrl();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:        assertEquals(
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:                "/l/%7B%22mode%22%3A%22PROD%22%2C%22app%22%3A%22appCache%3Anopreload%22" +
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:                        "%2C%22test%22%3A%22org.ruauframework.http.RuueServletIntegrationTest." +
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletIntegrationTest.java:                        "testGetManifestWithPreloads%22%7D/app.manifest",
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:public class ManifestUtilTest extends UnitTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    public ManifestUtilTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    private long checkManifestCookieValue(String cookie, int count, long time) {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        List<String> parts = RuueTextUtil.splitSimple(":", cookie, 2);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        int ccount = Integer.parseInt(parts.get(0));
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        long ctime = Long.parseLong(parts.get(1));
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        assertEquals("Count mismatch for " + cookie, count, ccount);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:            assertEquals("Time mismatch for " + cookie, time, ctime);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:            assertTrue("Too much time for " + cookie, now - ctime < 60 * 1000);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:     * Null cookie value returns "start" cookie.
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    public void testUpdateManifestCookieNull() {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        String value = ManifestUtil.updateManifestCookieValue(null);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        checkManifestCookieValue(value, 1, 0);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:     * Empty cookie value returns "start" cookie.
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    public void testUpdateManifestCookieEmpty() {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        String value = ManifestUtil.updateManifestCookieValue("");
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        checkManifestCookieValue(value, 1, 0);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:     * Unexpected cookie format (colon-delimited) returns "start" cookie.
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    public void testUpdateManifestCookieInvalidFormat() {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        String value = ManifestUtil.updateManifestCookieValue("12345678");
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        checkManifestCookieValue(value, 1, 0);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue("stringy");
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        checkManifestCookieValue(value, 1, 0);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:     * Error cookie value returns null.
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    public void testUpdateManifestCookieError() {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        assertNull(ManifestUtil.updateManifestCookieValue("error"));
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:     * Invalid count cookie value returns null.
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    public void testUpdateManifestCookieBadCount() {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        assertNull(ManifestUtil.updateManifestCookieValue("one:123456789"));
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:     * Invalid time cookie value returns null.
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    public void testUpdateManifestCookieBadTime() {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        assertNull(ManifestUtil.updateManifestCookieValue("1:jan 6 2013"));
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    public void testUpdateManifestCookieExpired() {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        String value = ManifestUtil.updateManifestCookieValue("99:0");
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        checkManifestCookieValue(value, 1, 0);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:    public void testUpdateManifestCookieOverCount() {
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        String value;
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue("");
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        time = checkManifestCookieValue(value, 1, 0);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue(value);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        time = checkManifestCookieValue(value, 2, time);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue(value);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        time = checkManifestCookieValue(value, 3, time);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue(value);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        time = checkManifestCookieValue(value, 4, time);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue(value);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        time = checkManifestCookieValue(value, 5, time);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue(value);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        time = checkManifestCookieValue(value, 6, time);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue(value);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        time = checkManifestCookieValue(value, 7, time);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue(value);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        time = checkManifestCookieValue(value, 8, time);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        value = ManifestUtil.updateManifestCookieValue(value);
ruau/ruau/src/test/java/org/ruauframework/http/ManifestUtilTest.java:        assertNull("Did not expire cookie " + value, value);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import java.text.SimpleDateFormat;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import java.util.Arrays;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import java.util.Calendar;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.apache.http.Header;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.apache.http.HttpHeaders;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.apache.http.HttpResponse;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.apache.http.client.methods.HttpGet;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.apache.http.message.BasicHeader;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.ruauframework.test.annotation.RuueTestLabels;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * Automation to verify the functioning of RuueResourceServlet. RuueResourceServlet is used to preload definitions of
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java: * components in a given namespace. It is also used to load CSS
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:public class RuueResourceServletHttpTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    public RuueResourceServletHttpTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * Verify style def ordering for components included as facets. Create a chain of components as facet and verify the
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    public void testCSSOrdering_AcrossFacets() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String modeAndContext = getRuueTestingUtil().getContext(Mode.DEV, Format.CSS,
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:                "ruautest:test_css_a", ComponentDef.class, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String url = "/l/" + RuueTextUtil.urlencode(modeAndContext) + "/app.css";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int idx_a, idx_b, idx_c, idx_d;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        idx_a = response.indexOf("div.ruautestTest_css_a");
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        idx_b = response.indexOf("div.ruautestTest_css_b");
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        idx_c = response.indexOf("div.ruautestTest_css_c");
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        idx_d = response.indexOf("div.ruautestTest_css_d");
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertTrue("_d must come before _c in: " + response, idx_d < idx_c);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertTrue("_c must come before _b in: " + response, idx_c < idx_b);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertTrue("_b must come before _a in: " + response, idx_b < idx_a);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    public void testCSSOrdering_AcrossInheritance() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String modeAndContext = getRuueTestingUtil().getContext(Mode.DEV, Format.CSS, "ruautest:test_css_child",
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:                ComponentDef.class, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String url = "/l/" + RuueTextUtil.urlencode(modeAndContext) + "/app.css";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int idx_child, idx_parent, idx_grandParent;
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        idx_child = response.indexOf("div.ruautestTest_css_child");
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        idx_parent = response.indexOf("div.ruautestTest_css_parent");
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        idx_grandParent = response.indexOf("div.ruautestTest_css_grandParent");
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertTrue("_grandParent must come before _parent in: " + response, idx_grandParent < idx_parent);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertTrue("_parent must come before _child in: " + response, idx_parent < idx_child);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * Verify that special characters in CSS file are serialized down to the client. To make sure they are not replaced
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * with a '?' Automation for W-1071128
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    public void testSpecialCharactersInCSSAreSerialized() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String modeAndContext = getSimpleContext(Format.CSS, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String url = "/l/" + RuueTextUtil.urlencode(modeAndContext) + "/app.css";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String expected = Arrays.toString("•".getBytes());
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int start = response.indexOf(token) + token.length();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String actual = Arrays.toString(response.substring(start, response.indexOf('\'', start)).getBytes());
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(String.format("Failed to see the special character in the CSS file (%s)", url), expected, actual);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * Verify that special characters in component mark up are serialized as part of component definition. Automation
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    public void testSpecialCharactersInMarkupAreSerialized() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String modeAndContext = getSimpleContext(Format.JS, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String url = "/l/" + RuueTextUtil.urlencode(modeAndContext) + "/app.js";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String expected = Arrays.toString("공유".getBytes("UTF8"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String token = "Test whether the special character shows up: ";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int start = response.indexOf(token) + token.length();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String actual = Arrays.toString(response.substring(start, response.indexOf(" ", start)).getBytes("UTF8"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(String.format("Failed to see the special character in the Component definition (%s)", url),
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:                expected, actual);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * GET with If-Modified-Since header from an hour ago, will return 304 if the UID is correct.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String requestContext = getSimpleContext(Format.JS, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String url = "/l/" + RuueTextUtil.urlencode(requestContext) + "/app.js";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        Calendar stamp = Calendar.getInstance();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        stamp.add(Calendar.HOUR, -1);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        Header[] headers = new Header[] { new BasicHeader(HttpHeaders.IF_MODIFIED_SINCE,
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:                new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz").format(stamp.getTime())) };
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        HttpGet get = obtainGetMethod(url, headers);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_NOT_MODIFIED, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertNull(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * GET with If-Modified-Since header from an hour ago, will return 304 if the UID is correct.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String requestContext = getSimpleContext(Format.JS, true);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String url = "/l/" + RuueTextUtil.urlencode(requestContext) + "/app.js";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        Calendar stamp = Calendar.getInstance();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        stamp.add(Calendar.HOUR, -1);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        Header[] headers = new Header[] { new BasicHeader(HttpHeaders.IF_MODIFIED_SINCE,
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:                new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz").format(stamp.getTime())) };
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        HttpGet get = obtainGetMethod(url, headers);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertNotNull(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * GET with If-Modified-Since header 45 days from now, will return 304 with empty body.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String url = "/l/" + RuueTextUtil.urlencode(getSimpleContext(Format.JS, false)) + "/app.js";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        Calendar stamp = Calendar.getInstance();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        stamp.add(Calendar.DAY_OF_YEAR, 45);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        Header[] headers = new Header[] { new BasicHeader(HttpHeaders.IF_MODIFIED_SINCE,
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:                new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz").format(stamp.getTime())) };
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        HttpGet get = obtainGetMethod(url, headers);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_NOT_MODIFIED, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertNull(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * GET without If-Modified-Since header from an hour ago, will return the expected resource.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:    @RuueTestLabels("ruauSanity")
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String requestContext = getSimpleContext(Format.JS, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String url = "/l/" + RuueTextUtil.urlencode(requestContext) + "/app.js";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertNotNull(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * Verify that an svg resource can be retrieved and will return the expected source for components with svg
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:     * definitions. Also verify that no source is returned in the case that the svg definition does not exist.
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String requestContext = getSimpleContext(Format.SVG, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        String url = "/l/" + RuueTextUtil.urlencode(requestContext) + "/test:fakeComponent/resources.svg";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        HttpGet get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertNotNull(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertTrue("SVG source was not found in the response.", response.contains("SVG"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        url = "/l/" + RuueTextUtil.urlencode(requestContext) + "/test:doesNotExist/resources.svg";
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get = obtainGetMethod(url);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertNotNull(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueResourceServletHttpTest.java:        assertTrue("SVG source should not have been returned.", response.isEmpty());
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import java.text.SimpleDateFormat;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import java.util.Date;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import java.util.TimeZone;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.def.ControllerDef;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.def.Definition;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.def.NamespaceDef;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.def.StyleDef;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.service.ContextService;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.system.Source;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.test.annotation.FreshBrowserInstance;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.test.controller.TestLoggingAdapterController;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.openqa.selenium.Cookie;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.openqa.selenium.StaleElementReferenceException;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import com.google.common.base.Function;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:import com.google.common.collect.ImmutableSet;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * Tests for AppCache functionality by watching the requests received at the server and verifying that the updated
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java: * content is being used by the browser. AppCache only works for WebKit browsers.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:@FreshBrowserInstance
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:@ThreadHostileTest("TestLoggingAdapter not thread-safe")
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:public class AppCacheResourcesUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private final boolean debug = false;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private final static String COOKIE_NAME = "%s_%s_%s_lm";
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private final static String TOKEN = "@@@TOKEN@@@";
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private static final String AURA = "ruau";
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private enum Status {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private String appName;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private String namespace;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private String cmpName;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    public AppCacheResourcesUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        namespace = "appCacheResourcesUITest" + getRuueTestingUtil().getNonce();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        appName = "cacheapplication";
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        cmpName = "cachecomponent";
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        DefDescriptor<ComponentDef> cmpDesc = createDef(ComponentDef.class, String.format("%s:%s", namespace, cmpName),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                "<ruau:component>"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "<ruau:attribute name='output' type='String'/>"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "<div class='clickableme' onclick='{!c.cssalert}'>@@@TOKEN@@@</div>"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "<div class='attroutput'>{!v.output}</div>"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "</ruau:component>");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        createDef(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                ControllerDef.class, String.format("%s://%s.%s", DefDescriptor.JAVASCRIPT_PREFIX, namespace, cmpName),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                "{ cssalert:function(c){"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "var val = '';"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "if(document.defaultView && document.defaultView.getComputedStyle){"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "val = document.defaultView.getComputedStyle(elem, '').getPropertyValue(style);"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "style = style.replace(/\\-(\\w)/g, function (s, ch){"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "return ch.toUpperCase();"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "val = elem.currentStyle[style];"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "return val;"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "var style = getStyle(c.getElement(),'background-image');"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "c.set('v.output','@@@TOKEN@@@' + style.substring(style.lastIndexOf('?')+1,style.lastIndexOf(')'))"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        createDef(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                ApplicationDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                String.format("%s:%s", namespace, appName),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                String.format("<ruau:application useAppcache='true' render='client'>"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        + "<%s:%s/>" + "</ruau:application>", namespace, cmpDesc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Opening cached app will only query server for the manifest and the component load.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * BrowserType.SAFARI is disabled : W-2367702
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.IPAD, BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    public void testNoChanges() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> logs = loadMonitorAndValidateApp(TOKEN, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(getExpectedInitialRequests(), logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        // only expect a fetch for the manifest and the initAsync component load
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        logs = loadMonitorAndValidateApp(TOKEN, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> expected = Lists.newArrayList(new Request(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                "/ruauResource", null, null, "manifest", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(expected, logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Opening cached app that had a prior cache error will reload the app.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * BrowserType.SAFARI is disabled : W-2367702
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME,  BrowserType.IPAD, BrowserType.IPHONE})
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    public void testCacheError() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> logs = loadMonitorAndValidateApp(TOKEN, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(getExpectedInitialRequests(), logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Date expiry = new Date(System.currentTimeMillis() + 60000);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String cookieName = getManifestCookieName();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        updateCookie(cookieName, "error", expiry, "/");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        logs = loadMonitorAndValidateApp(TOKEN, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> expectedChange = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        expectedChange.add(new Request("/ruauResource", null, null, "manifest", 404)); // reset
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        expectedChange.add(new Request(getUrl(), null, null, null, 302)); // hard refresh
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        case GOOGLECHROME:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request(3, "/ruauResource", null, null, "manifest", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request(2, getUrl(), null, null, null, 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            break;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        default:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request("/ruauResource", null, null, "manifest", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request(getUrl(), null, null, null, 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request("/ruauResource", null, null, "css", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request("/ruauResource", null, null, "js", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(expectedChange, logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        // There may be a varying number of requests, depending on when the initial manifest response is received.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Cookie cookie = getDriver().manage().getCookieNamed(cookieName);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertFalse("Manifest cookie was not changed " + cookie.getValue(), "error".equals(cookie.getValue()));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Opening uncached app that had a prior cache error will have limited caching.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * BrowserType.SAFARI is disabled : W-2367702
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.IPAD, BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    public void testCacheErrorWithEmptyCache() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        openNoRuue("/ruau/application.app"); // just need a donAmE page to set cookie from
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Date expiry = new Date(System.currentTimeMillis() + 60000);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String cookieName = getManifestCookieName();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        updateCookie(cookieName, "error", expiry, "/");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> logs = loadMonitorAndValidateApp(TOKEN, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> expectedChange = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        expectedChange.add(new Request("/ruauResource", null, null, "manifest", 404)); // reset
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        expectedChange.add(new Request("/ruauResource", null, null, "css", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        expectedChange.add(new Request("/ruauResource", null, null, "js", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        case GOOGLECHROME:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        	expectedChange.add(new Request(1, getUrl(), null, null, null, 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        	break;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        default:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        	expectedChange.add(new Request(getUrl(), null, null, null, 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(expectedChange, logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.UNCACHED);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        // There may be a varying number of requests, depending on when the initial manifest response is received.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Cookie cookie = getDriver().manage().getCookieNamed(cookieName);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertNull("No manifest cookie should be present", cookie);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Manifest request limit exceeded for the time period should result in reset.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * BrowserType.SAFARI is disabled : W-2367702
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.IPAD, BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    public void testManifestRequestLimitExceeded() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> logs = loadMonitorAndValidateApp(TOKEN, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(getExpectedInitialRequests(), logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Date expiry = new Date(System.currentTimeMillis() + 60000);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String cookieName = getManifestCookieName();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Cookie cookie = getDriver().manage().getCookieNamed(cookieName);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String timeVal = cookie.getValue().split(":")[1];
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        updateCookie(cookieName, "8:" + timeVal, expiry, "/");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        logs = loadMonitorAndValidateApp(TOKEN, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> expectedChange = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        expectedChange.add(new Request("/ruauResource", null, null, "manifest", 404)); // reset
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        expectedChange.add(new Request(getUrl(), null, null, null, 302)); // hard refresh
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        case GOOGLECHROME:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request(3, "/ruauResource", null, null, "manifest", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request(2, getUrl(), null, null, null, 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            break;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        default:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request("/ruauResource", null, null, "manifest", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request(getUrl(), null, null, null, 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request("/ruauResource", null, null, "css", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            expectedChange.add(new Request("/ruauResource", null, null, "js", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(expectedChange, logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Opening cached app after namespace style change will trigger cache update.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    @ThreadHostileTest("NamespaceDef modification affects namespace")
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.SAFARI, BrowserType.IPAD, BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    // W-2359835 - disabled due to extra 302 being detected
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    public void _testComponentCssChange() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        createDef(NamespaceDef.class, String.format("%s://%s", DefDescriptor.MARKUP_PREFIX, namespace),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                "<ruau:namespace></ruau:namespace>");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        createDef(StyleDef.class, String.format("%s://%s.%s", DefDescriptor.CSS_PREFIX, namespace, cmpName),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                ".THIS {background-image: url(/ruauFW/resources/qa/images/s.gif?@@@TOKEN@@@);}");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> logs = loadMonitorAndValidateApp(TOKEN, TOKEN, TOKEN, TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(getExpectedInitialRequests(), logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        // update a component's css file
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String replacement = getName() + System.currentTimeMillis();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        replaceToken(getTargetComponent().getStyleDescriptor(), replacement);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        logs = loadMonitorAndValidateApp(TOKEN, TOKEN, replacement, TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(getExpectedChangeRequests(), logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        logs = loadMonitorAndValidateApp(TOKEN, TOKEN, replacement, TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> expected = Lists.newArrayList(new Request("/ruauResource", null, null, "manifest", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(expected, logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Opening cached app after namespace controller change will trigger cache update.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.SAFARI, BrowserType.IPAD, BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    // W-2359835 - disabled due to extra 302 being detected
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    public void _testComponentJsChange() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> logs = loadMonitorAndValidateApp(TOKEN, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(getExpectedInitialRequests(), logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        // update a component's js controller file
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String replacement = getName() + System.currentTimeMillis();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        for (DefDescriptor<?> cd : getTargetComponent().getControllerDefDescriptors()) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            if ("js".equals(cd.getPrefix())) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                break;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        replaceToken(desc, replacement);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        logs = loadMonitorAndValidateApp(TOKEN, replacement, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(getExpectedChangeRequests(), logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        logs = loadMonitorAndValidateApp(TOKEN, replacement, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> expected = Lists.newArrayList(new Request("/ruauResource", null, null, "manifest", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(expected, logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Opening cached app after component markup change will trigger cache update.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.SAFARI, BrowserType.IPAD, BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    // W-2359835 - disabled due to extra 302 being detected
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    public void _testComponentMarkupChange() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> logs = loadMonitorAndValidateApp(TOKEN, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(getExpectedInitialRequests(), logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        // update markup of namespaced component used by app
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String replacement = getName() + System.currentTimeMillis();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        replaceToken(getTargetComponent().getDescriptor(), replacement);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        logs = loadMonitorAndValidateApp(replacement, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(getExpectedChangeRequests(), logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        logs = loadMonitorAndValidateApp(replacement, TOKEN, "", TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> expected = Lists.newArrayList(new Request("/ruauResource", null, null, "manifest", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertRequests(expected, logs);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertAppCacheStatus(Status.IDLE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private <T extends Definition> DefDescriptor<T> createDef(Class<T> defClass, String qualifiedName, String content) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        DefDescriptor<T> desc = Ruue.getDefinitionService().getDefDescriptor(qualifiedName, defClass);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        addSourceAutoCleanup(desc, content);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private String getManifestCookieName() {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        return String.format(COOKIE_NAME, getRuueModeForCurrentBrowser().toString(), namespace, appName);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private void assertAppCacheStatus(final Status status) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        ruauUITestingUtil.waitUntil(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                new Function<WebDriver, Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    public Boolean apply(WebDriver input) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        return status.name().equals(Status.values()[Integer.parseInt(ruauUITestingUtil.getEval(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                                "return window.applicationCache.status;").toString())].name());
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                "applicationCache.status was not " + status.name()
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    // provide a test component with TOKENs for replacement to trigger lastMod updates
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private ComponentDef getTargetComponent() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        ContextService service = Ruue.getContextService();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        RuueContext context = service.getCurrentContext();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            context = service.startContext(Mode.SELENIUM, Format.HTML, Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        return Ruue.getDefinitionService().getDefinition(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                String.format("%s:%s", namespace, cmpName), ComponentDef.class);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * this function will check each request in actual list against expected list. fudge is the number this request
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * suppose to show up. we remove the request from expected list once it has been visited #fudge times. any missing
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * request will be added to missingRequests list.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * @param expected : list of expected request
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * @param actual : list of actual request captured by log
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private void assertRequests(List<Request> expected, List<Request> actual) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        boolean failed;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> unexpectedRequests = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> expectedRequests = Lists.newArrayList(expected);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        List<Request> missingRequests = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        for (Request r : actual) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                if (expectedRequests.get(idx).mark()) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                unexpectedRequests.add(r);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            if (!r.passed()) {// return fudge > 0 && count > 0;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                missingRequests.add(r);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        failed = unexpectedRequests.size() > 0 || missingRequests.size() > 0;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            System.out.println(">>> assertRequests: ");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            for (Request r : actual) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                r.setShowExtras(failed);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        if (failed) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            String separator = "";
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                sb.append("Unexpected requests:\n");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                sb.append(unexpectedRequests);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                separator = "\n";
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                sb.append(separator);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                sb.append("Missing Requests:\n");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                sb.append(missingRequests);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            fail(sb.toString());
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Load and get all the log lines for the app load. Some sanity checks that our simple test app is functional after
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * cache resolutions.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * <li>updated markup text is rendered (markupToken)</li>
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * <li>updated client actions functional (jsToken)</li>
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * <li>updated styling applied (cssToken)</li>
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * <li>updated framework called (fwToken)</li>
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * @param markupToken The text to be found in the markup.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * @param jsToken The text to be found from js
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * @param cssToken The text to be found from css.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * @param Token The text to be found from the framework.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private List<Request> loadMonitorAndValidateApp(final String markupToken, String jsToken, String cssToken,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        TestLoggingAdapterController.beginCapture();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        // Opening a page through WebDriverTestCase adds a nonce to ensure fresh resources. In this case we want to see
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        // what's cached, so build our URL and call WebDriver.get() directly.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Map<String, String> params = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        params.put("ruau.mode", getRuueModeForCurrentBrowser().toString());
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        url = addUrlParams(url, params);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        ruauUITestingUtil.waitUntilWithCallback(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    public Integer apply(WebDriver input) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    	Integer appCacheStatus = Integer.parseInt(ruauUITestingUtil.getEval(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    	"return window.applicationCache.status;").toString());
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        if(appCacheStatus != 3 && appCacheStatus != 2 ) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        	return appCacheStatus;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    public String apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        Object ret = ruauUITestingUtil.getRawEval("return window.applicationCache.status");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        return "Current AppCache status is " 
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        		+ ruauUITestingUtil.appCacheStatusIntToString(((Long) ret).intValue());
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        		"fail waiting on application cache not to be Downloading or Checking before clicking on 'clickableme'");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        ruauUITestingUtil
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                .waitUntil(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                            public WebElement apply(WebDriver input) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                                        .cssSelector(".clickableme"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                                    if (markupToken.equals(find.getText())) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                                } catch (StaleElementReferenceException e) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                                    // slight chance of happening between the findDomElement and getText
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        "fail to load clickableme"
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Thread.sleep(200);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String output = ruauUITestingUtil.waitUntil(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    public String apply(WebDriver input) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                                .cssSelector(".clickableme"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                                    .cssSelector("div.attroutput"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                        } catch (StaleElementReferenceException e) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                            // could happen before the click or if output is
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                }, "fail to click on clickableme or couldn't locate output value");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertEquals("Unexpected alert text",
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                String.format("%s%s%s", jsToken, cssToken, fwToken), output);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private String getUrl() {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        return String.format("/%s/%s.app", namespace, appName);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    // replaces TOKEN found in the source file with the provided replacement
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private void replaceToken(DefDescriptor<?> descriptor, String replacement) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assertNotNull("Missing descriptor for source replacement!", descriptor);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        ContextService service = Ruue.getContextService();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        RuueContext context = service.getCurrentContext();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            context = service.startContext(Mode.SELENIUM, Format.HTML,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    Authentication.AUTHENTICATED);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String originalContent = source.getContents();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        assert originalContent.contains(TOKEN);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        source.addOrUpdate(originalContent.replace(TOKEN, replacement));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private List<Request> endMonitoring() {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        for (Map<String, Object> log : TestLoggingAdapterController.endCapture()) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            if (!"GET".equals(log.get("requestMethod"))) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    // Log ignored lines so that we can monitor what happens. The line above had nulls as requestMethod,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    // so this catches randomness.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            int status = -1;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            if (log.get("httpStatus") != null) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    status = Integer.parseInt((String) log.get("httpStatus"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                } catch (NumberFormatException nfe) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            Request toAdd = new Request(log.get("ruauRequestURI").toString(),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    null, null, null, status);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            for (String part : RuueTextUtil.urldecode(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    log.get("ruauRequestQuery").toString()).split("&")) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                String[] parts = part.split("=", 2);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                String key = parts[0].substring(AURA.length() + 1);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                String v = parts[1];
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            logs.add(toAdd);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Get the set of expected requests on change. These are the requests that we expect for filling the app cache.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * @return the list of request objects, not necessarily in order.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private List<Request> getExpectedChangeRequests() {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        case GOOGLECHROME:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * For Chrome Get the set of expected requests on change. These are the requests that we expect for filling
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * the app cache. The explanation is as follows. <ul> <li>The manifest is pulled</li> <li>The browser now
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * gets all three components, initial, css, and js</li> <li>Finally, the browser re-fetches the manifest to
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * check contents</li> <ul> The primary difference between this and the initial requests is that we don't
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * get the initial page twice, and we get the manifest three times... odd that. we usually only get js and
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * css only once, but it's not stable, do see some test get them twice sometimes.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            return ImmutableList.of(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request(getUrl(), null, null, null, 302), // hard refresh
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request("/ruauResource", null, null, "manifest", 404), // manifest out of date
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request(3, "/ruauResource", null, null, "manifest", 200),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request(2, getUrl(), null, null, null, 200), // rest are cache updates
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request(2, "/ruauResource", null, null, "css", 200),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request(2, "/ruauResource", null, null, "js", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        default:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * For iOS Get the set of expected requests on change. These are the requests that we expect for filling the
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * app cache. The explanation is as follows. <ul> <li>The manifest is pulled</li> <li>The browser now gets
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * all three components, initial, css, and js</li> <li>Finally, the browser re-fetches the manifest to check
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * contents</li> <ul> The primary difference between this and the initial requests is that we get the
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * initial page twice
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            return ImmutableList.of(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request(getUrl(), null, null, null, 302), // hard refresh
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request("/ruauResource", null, null, "manifest", 404), // manifest out of date
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request("/ruauResource", null, null, "manifest", 200),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request(2, getUrl(), null, null, null, 200), // rest are cache updates
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request(2, "/ruauResource", null, null, "css", 200),
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    new Request(2, "/ruauResource", null, null, "js", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * Get the set of expected requests on change. These are the requests that we expect for filling the app cache.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * @return the list of request objects, not necessarily in order.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private List<Request> getExpectedInitialRequests() {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        case GOOGLECHROME:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * For Chrome Get the set of expected initial requests. These are the requests that we expect for filling
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * the app cache. The explanation is as follows. <ul> <li>The browser requests the initial page from the
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * server</li> <li>The manifest is pulled</li> <li>The browser now gets all three components, initial, css,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * and js</li> <li>Finally, the browser re-fetches the manifest to check contents</li> <ul> Note that there
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * are two requests for the initial page, one as the first request, and one to fill the app cache (odd, but
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * true). There are also two manifest requests.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            return ImmutableList.of(new Request(2, getUrl(), null, null, null, 200), new Request(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    2, "/ruauResource", null, null, "manifest", 200), new Request("/ruauResource", null, null, "css",
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    200), new Request(2, "/ruauResource", null, null, "js", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        default:
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * For iOS Get the set of expected requests on change. These are the requests that we expect for filling the
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * app cache. The explanation is as follows. <ul> <li>The manifest is pulled</li> <li>The browser now gets
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * all three components, initial, css, and js</li> <li>Finally, the browser re-fetches the manifest to check
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:             * contents</li> <ul> Note that there are also two css and js request.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            return ImmutableList.of(new Request(1, getUrl(), null, null, null, 200), new Request(
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    1, "/ruauResource", null, null, "manifest", 200), new Request(2, "/ruauResource", null, null,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    "css", 200), new Request(2, "/ruauResource", null, null, "js", 200));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * A request object, which can either be an 'expected' request, or an 'actual' request. Expected requests can also
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * have a fudge factor allowing multiple requests for the resource. This is very helpful for different browsers
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * doing diferent things with the manifest. We allow multiple fetches of both the manifest and initial page in both
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:     * the initial request and the requests on change of resource.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    static class Request extends HashMap<String, String> {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        private static final long serialVersionUID = 4149738936658714181L;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        private static final ImmutableSet<String> validKeys = ImmutableSet.of("URI", "tag", "namespaces", "format",
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                "httpStatus");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        private final int fudge;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        private int count = 0;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        private Map<String, String> extras = null;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        private boolean showExtras = false;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Request(int fudge, String URI, String tag, String namespaces, String format, int status) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            put("tag", tag);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            put("namespaces", namespaces);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            put("format", format);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            if (status != -1) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                put("httpStatus", String.valueOf(status));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        Request(String URI, String tag, String namespaces, String format, int status) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            put("tag", tag);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            put("namespaces", namespaces);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            put("format", format);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            if (status != -1) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                put("httpStatus", String.valueOf(status));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            if (validKeys.contains(k)) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                if (extras == null) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                    extras = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                extras.put(k, v);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:         * We passed the test for this request.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:         * @return true if we got the request. each request from expected list must show up at least once in the actual
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        public boolean passed() {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:         * Mark the request as found.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:         * @return true if it should be removed.count > fudge: browsers don't behave consistently. better have a loose
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:         *         bound here. we are comparing two requests list: actual list and expected list. count start at 0, we
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:         *         are expecting 1,2,..,fudge, or fudge+1 request. once we have some request X that show up fudge+1 in
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:         *         actual list, X get removed from expected list. then if we receive another X again, it will be added
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:         *         to unexpected requestes list and error out.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        public boolean mark() {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        public void setShowExtras(boolean value) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            this.showExtras = value;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:            if (extras == null || !showExtras) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:                return super.toString() + String.valueOf(extras);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:    private void updateCookie(String name, String value, Date expiry, String path) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        SimpleDateFormat sd = new SimpleDateFormat();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String expiryFormatted = sd.format(expiry);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        String command = "document.cookie = '" + name + "="+value+"; expires=" + expiryFormatted + "; path=" + path + "';";
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheResourcesUITest.java:        ruauUITestingUtil.getEval(command);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import java.io.IOException;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import java.io.StringReader;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import java.util.Arrays;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import java.util.regex.Matcher;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import java.util.regex.Pattern;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.apache.http.Header;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.apache.http.HttpHeaders;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.apache.http.HttpResponse;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.apache.http.client.methods.HttpGet;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.apache.http.protocol.HttpContext;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.ruauframework.controller.java.ServletConfigController;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import org.ruauframework.test.client.UserAgent;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:import com.google.common.io.LineReader;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:public class AppCacheManifestHttpTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private static final String APPCACHE_SUPPORTED_USERAGENT = UserAgent.GOOGLE_CHROME.getUserAgentString();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private static final String APPCACHE_UNSUPPORTED_USERAGENT = UserAgent.EMPTY.getUserAgentString();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private static final Pattern HTML_MANIFEST_PATTERN = Pattern.compile("<html[^>]* manifest=\"(.*?)\"[^>]*>");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public AppCacheManifestHttpTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private String getManifestURL(String appPath, Mode mode) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        HttpGet get = obtainGetMethod(appPath + String.format("?ruau.mode=%s",mode.toString()));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        Matcher m = HTML_MANIFEST_PATTERN.matcher(responseBody);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private String getManifestURL(String appPath) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        return getManifestURL(appPath, Mode.PROD);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private String getManifestErrorUrl(String manifestURI) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        return manifestURI + "?ruau.error=true";
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private List<String> getManifestLinks(String manifestContents) throws IOException {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        List<String> links = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        LineReader reader = new LineReader(new StringReader(manifestContents));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        for (String line = reader.readLine(); line != null; line = reader.readLine()) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            if (line.startsWith("/")) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                links.add(line);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private List<String> getRequiredLinks() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        List<String> required = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        required.add(".*/ruau_prod\\.js");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private void assertManifest(String manifestContent, List<String> requiredLinks) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertManifestFormat(manifestContent);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertTrue("Could not find the LAST MOD: line in manifest", manifestContent.contains("\n# LAST MOD: app="));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        List<String> links = getManifestLinks(manifestContent);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        required.addAll(requiredLinks);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertRequiredLinks(required, links);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertLinksReachable(links);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private void assertManifestFormat(String manifestContent) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        if (!manifestContent.startsWith("CACHE MANIFEST\n")) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            fail("Manifest should starts with: " + "CACHE MANIFEST");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private void assertRequiredLinks(List<String> required, List<String> links) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            boolean foundFlag = false;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                if (link.matches(requiredLink)) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                    foundFlag = true;
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            if (!foundFlag) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                fail("Missing required link: " + requiredLink + " but got instead: " + links);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private void assertLinksReachable(List<String> links) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            HttpGet get = obtainGetMethod(link);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            int statusCode = getStatusCode(response);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            assertEquals("Unexpected response code for link [" + link + "]", HttpStatus.SC_OK, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    private void assertManifestHeaders(HttpResponse response) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    	assertDefaultAntiClickjacking(response, true, false);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String cacheControlHeader = String.format(",%s,", response.getFirstHeader(HttpHeaders.CACHE_CONTROL).getValue()
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                .replaceAll("\\s", ""));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        if (!cacheControlHeader.contains(",no-cache,") || !cacheControlHeader.contains(",no-store,")) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            fail("Missing cache control header values in: " + cacheControlHeader);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String expectedContentType = String.format("%s;charset=%s", RuueBaseServlet.MANIFEST_CONTENT_TYPE,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                RuueBaseServlet.UTF_ENCODING);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        Header[] contentTypeHeaders = response.getHeaders(HttpHeaders.CONTENT_TYPE);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        for (Header header : contentTypeHeaders) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            if (expectedContentType.equals(header.getValue().replaceAll("\\s", ""))) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        fail("Did not find expected content type header: " + Arrays.asList(contentTypeHeaders));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * GET app cache manifest without a supported user agent returns 404.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public void testGetManifestWithUnsupportedUserAgent() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String manifest = getManifestURL("/appCache/withpreload.app");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        HttpGet get = obtainGetMethod(manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            fail("manifest should be empty: *" + manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * No manifest url is given when app cache is disabled via config.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    @ThreadHostileTest("disables AppCache")
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public void testGetManifestWithAppCacheDisabled() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        ServletConfigController.setAppCacheDisabled(true);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String manifest = getManifestURL("/appCache/withpreload.app");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        if (manifest != null) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            fail("no manifest url should be present, but got: " + manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * Manifest url is given even when app has no explicit preloads.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public void testGetManifestForAppWithoutPreloads() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String manifest = getManifestURL("/appCache/nopreload.app");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        if (manifest == null) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            fail("manifest url should be present, but got: " + manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * GET app cache manifest for app with preloads returns a full manifest containing preloading resources.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * note that invalid and absolute css urls are not included
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public void testGetManifestForAppWithPreloads() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String manifest = getManifestURL("/appCache/withpreload.app");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        HttpGet get = obtainGetMethod(manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertManifest(response, Lists.newArrayList(".*/app\\.css", ".*/app\\.js"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * GET app cache manifest with ruau.error query param returns empty response and error-valued manifest cookie.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public void testGetManifestWithRuueErrorParam() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String manifest = getManifestURL("/appCache/withpreload.app");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        HttpGet get = obtainGetMethod(getManifestErrorUrl(manifest));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertEquals(HttpStatus.SC_NO_CONTENT, getStatusCode(httpResponse));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertManifestHeaders(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            fail("Expected empty response, but got:\n" + response);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * GET app cache manifest with manifest cookie with error value, returns 404 and deletes the manifest cookie.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public void testGetManifestWithErrorManifestCookie() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String manifest = getManifestURL("/appCache/withpreload.app");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        // HttpClient Cookie Example
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        // 2. Create HttpContext which has default CookieStore
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        addCookie(getHost(), "appCache_withpreload_lm", "error", "/");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        HttpGet get = obtainGetMethod(manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertEquals(HttpStatus.SC_NOT_FOUND, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertManifestHeaders(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertEquals("", response);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertNoCookie(getHost(), "appCache_withpreload_lm", "/");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        get = obtainGetMethod(manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        HttpResponse clean = perform(get);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String cleanResponse = getResponseBody(clean);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        // Now, after one failed call a new manifest call should go thru.(Error
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        // cookie cleared);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertManifest(cleanResponse, Lists.newArrayList(".*/app\\.css", ".*/app\\.js"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * GET app cache manifest for app with additional URLs specified using a controller action returns a full manifest
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * containing the additional URLs returned by controller.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public void testGetManifestForAppWithAdditionalAppCacheURLs() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String manifest = getManifestURL("/appCache/additionalUrls.app");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        HttpGet get = obtainGetMethod(manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertManifest(response, Lists.newArrayList(".*/app\\.css", ".*/app\\.js",
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                "/ruauFW/resources/ruau/ruauIdeLogo.png", "/ruauFW/resources/ruau/resetCSS.css"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * Verify behavior when action which provides additional app cache urls returns bad results or throws exception.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * TODO: W-1590903 - What should the expected behavior be? Currently, the behavior is not consistent across these
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * scenarios, it just continues and ignores the exception thrown by the action, in other cases it returns 404.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * Should we do something to signal that something went wrong, you might not have resources that you asked for?
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public void _testGetManifestWhenAdditionalAppCacheUrlsActionBarfs() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String values[] = { "{!c.throwException}", // Action throws exception
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                "{!c.getString}", // Action returns literal instead of List<String>
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                "{!v.attr}", // A expression that refers to attribute instead of action
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                "/ruauFW/resources/ruau/resetCSS.css" };
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String appMarkup = String.format(baseApplicationTag,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                "useAppcache=\"true\" render=\"client\" " +
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                        " controller=\"java://org.ruauframework.impl.java.controller.TestController\" " +
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                        "additionalAppCacheURLs=\"%s\"", "");
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        for (String value : values) {
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            DefDescriptor<ApplicationDef> desc = addSourceAutoCleanup(ApplicationDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                    String.format(appMarkup, value));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            String manifest = getManifestURL(getUrl(desc));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            HttpGet get = obtainGetMethod(manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            assertEquals("Expected to fail manifest fetching. additionalAppCacheUrls:" + value,
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:                    HttpStatus.SC_NOT_FOUND, statusCode);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:            assertManifest(response, Lists.newArrayList(".*/app\\.css", ".*/app\\.js"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:     * UIPerf, UIPerfUi, UIPerfCSS, walltimelocale are uncombinable in PTEST mode.
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:    public void testUncombinableResourceUrlsAreAddedToAppCacheManifest()throws Exception{
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        String manifest = getManifestURL("/clientLibraryTest/clientLibraryTest.app", Mode.PTEST);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        HttpGet get  = obtainGetMethod(manifest);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertEquals("Failed to fetch manifest", HttpStatus.SC_OK,getStatusCode(response));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertNotNull(responseString);
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertTrue("Manifest doesn't contain combinable CSS resource url", responseString.contains("/resources.css"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertTrue("Manifest doesn't contain combinable JS resource url", responseString.contains("/resources.js"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        //Verify the urls of uncombinable resources
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertTrue("Missing UIPerf", responseString.contains("/UIPerf/UIPerf") || responseString.contains("perf/ormance.js"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertTrue("Missing Moment", responseString.contains("/moment/moment.js"));
ruau/ruau/src/test/java/org/ruauframework/http/AppCacheManifestHttpTest.java:        assertTrue("Missing Walltime", responseString.contains("walltime-js/walltime.js"));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.adapter.LoggingAdapter;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.def.ControllerDef;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.def.HelperDef;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.def.StyleDef;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.test.WebDriverTestCase.TargetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.test.adapter.TestLoggingAdapter;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.ruauframework.test.controller.TestLoggingAdapterController;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:@ThreadHostileTest("TestLoggingAdapter not thread-safe")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:@TargetBrowsers(BrowserType.GOOGLECHROME)
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:public class CSPReportLoggingTest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    private static final String STATUS_OK = "200";
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    private static final String SOURCE_SUFFIX = "ruau_auto.js";
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    private static final String APP_SOURCE_SUFFIX = "app.js";
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    public CSPReportLoggingTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        TestLoggingAdapterController.beginCapture();
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    public void tearDown() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:            TestLoggingAdapterController.endCapture();
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        } finally {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:            super.tearDown();
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                String.format(baseComponentTag, "render='client'",
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "<link href='http://www2.sfdcstatic.com/common/assets/css/min/standard-rwd-min.css' rel='stylesheet' type='text/css'/>"));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String uri = String.format("/%s/%s.cmp", cmpDesc.getNamespace(), cmpDesc.getName());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String externalUri = "http://www2.sfdcstatic.com";
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        List<Map<String, Object>> logs = getCspReportLogs(1);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        Map<String, Object> cspReport = (Map<String, Object>) logs.get(0).get(CSPReporterServlet.JSON_NAME);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertNotNull("No CSP report found", cspReport);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected blocked resource", externalUri, cspReport.get(CSPReporterServlet.BLOCKED_URI));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected status code", STATUS_OK, cspReport.get(CSPReporterServlet.STATUS_CODE).toString());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertDocumentUri(cspReport, uri);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertSourceFile(cspReport, SOURCE_SUFFIX);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertViolatedDirective(cspReport, "style-src 'self'");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                String.format(baseComponentTag, "",
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "<link href='http://www2.sfdcstatic.com/common/assets/css/min/standard-rwd-min.css' rel='stylesheet' type='text/css'/>"));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String uri = String.format("/%s/%s.cmp", cmpDesc.getNamespace(), cmpDesc.getName());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String externalUri = "http://www2.sfdcstatic.com";
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        openNoRuue(uri);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        List<Map<String, Object>> logs = getCspReportLogs(1);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        Map<String, Object> cspReport = (Map<String, Object>) logs.get(0).get(CSPReporterServlet.JSON_NAME);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertNotNull("No CSP report found", cspReport);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected blocked resource", externalUri, cspReport.get(CSPReporterServlet.BLOCKED_URI));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected status code", STATUS_OK, cspReport.get(CSPReporterServlet.STATUS_CODE).toString());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertDocumentUri(cspReport, uri);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertSourceFile(cspReport, null);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertViolatedDirective(cspReport, "style-src 'self'");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    @UnAdaptableTest("The CSP filter on SFDC handles iframes differently than standalone Ruue")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    public void testReportClientRenderedIframe() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                String.format(baseComponentTag, "render='client'",
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "<iframe src='http://www.salesforce.com'/>"));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String uri = String.format("/%s/%s.cmp", cmpDesc.getNamespace(), cmpDesc.getName());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String frameUri = "http://www.salesforce.com";
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        List<Map<String, Object>> logs = getCspReportLogs(1);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        Map<String, Object> cspReport = (Map<String, Object>) logs.get(0).get(CSPReporterServlet.JSON_NAME);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertNotNull("No CSP report found", cspReport);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected blocked resource", frameUri, cspReport.get(CSPReporterServlet.BLOCKED_URI));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected status code", STATUS_OK, cspReport.get(CSPReporterServlet.STATUS_CODE).toString());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertDocumentUri(cspReport, uri);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertSourceFile(cspReport, SOURCE_SUFFIX);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertViolatedDirective(cspReport, "frame-src 'self'");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    @UnAdaptableTest("The CSP filter on SFDC handles iframes differently than standalone Ruue")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    public void testReportServerRenderedIframe() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                String.format(baseComponentTag, "",
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "<iframe src='http://www.salesforce.com'/>"));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String uri = String.format("/%s/%s.cmp", cmpDesc.getNamespace(), cmpDesc.getName());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String frameUri = "http://www.salesforce.com";
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        openNoRuue(uri);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        List<Map<String, Object>> logs = getCspReportLogs(1);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        Map<String, Object> cspReport = (Map<String, Object>) logs.get(0).get(CSPReporterServlet.JSON_NAME);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertNotNull("No CSP report found", cspReport);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected blocked resource", frameUri, cspReport.get(CSPReporterServlet.BLOCKED_URI));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected status code", STATUS_OK, cspReport.get(CSPReporterServlet.STATUS_CODE).toString());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertDocumentUri(cspReport, uri);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertSourceFile(cspReport, null);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertViolatedDirective(cspReport, "frame-src 'self'");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:     * Fonts are allowed to be loaded from anywhere, so this should NOT generate a report. The test will generate
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:     * trigger an intentional report after load and we will check that. Any report during load should have been received
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                String.format(baseComponentTag, "", ""));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                Ruue.getDefinitionService().getDefDescriptor(cmpDesc, DefDescriptor.CSS_PREFIX,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        StyleDef.class),
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                "@font-face {font-family: Gentium;src: url(http://example.com/fonts/Gentium.ttf);}");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String uri = String.format("/%s/%s.cmp", cmpDesc.getNamespace(), cmpDesc.getName());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        openNoRuue(uri);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        // generate an intentional csp report
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        ruauUITestingUtil
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                .getRawEval("var s=document.createElement('script');s.type='text/javascript';s.async=true;s.src='http://expectedreport.salesforce.com/';document.getElementsByTagName('head')[0].appendChild(s);");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        List<Map<String, Object>> logs = getCspReportLogs(1);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        Map<String, Object> cspReport = (Map<String, Object>) logs.get(0).get(CSPReporterServlet.JSON_NAME);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertNotNull("Intentional CSP report not found", cspReport);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Not getting the intentional report URI, probably font wasn't allowed (but should have been)",
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                "http://expectedreport.salesforce.com", cspReport.get(CSPReporterServlet.BLOCKED_URI));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertDocumentUri(cspReport, uri);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertViolatedDirective(cspReport, "script-src 'self'");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    public void testReportJavaScript() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        // This test loads script via its template, since <script> is not allowed in cmp markup.
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<ComponentDef> templateDesc = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                String.format(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        baseComponentTag,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "isTemplate='true' extensible='true' extends='ruau:template'",
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "<ruau:set attribute='extraScriptTags'>"
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                                "<script src='http://www2.sfdcstatic.com/common/assets/js/min/footer-min.js'></script>"
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                                "</ruau:set>"));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                String.format(baseComponentTag,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        String.format("render='client' template='%s'", templateDesc.getDescriptorName()), ""));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String uri = String.format("/%s/%s.cmp", cmpDesc.getNamespace(), cmpDesc.getName());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        String externalUri = "http://www2.sfdcstatic.com";
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        List<Map<String, Object>> logs = getCspReportLogs(1);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        Map<String, Object> cspReport = (Map<String, Object>) logs.get(0).get(CSPReporterServlet.JSON_NAME);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertNotNull("No CSP report found", cspReport);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected blocked resource", externalUri, cspReport.get(CSPReporterServlet.BLOCKED_URI));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertEquals("Unexpected status code", STATUS_OK, cspReport.get(CSPReporterServlet.STATUS_CODE).toString());
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertDocumentUri(cspReport, uri);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertSourceFile(cspReport, null);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        assertViolatedDirective(cspReport, "script-src 'self'");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:     * Automation for the connect-src CSP policy. With connect-src set to 'self' and http://invalid.salesforce.com, 
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:     * a report should be generated when an XHR is sent to invalid origin. 
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    	String externalUri = "http://www.example.com";
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    	runTestReportXHRConnect("\"http://www.example.com\"",externalUri, 1);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:     * Automation for the connect-src CSP policy. 
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:     * http://invalid.salesforce.com is white-listed, getting it via XHR shouldn't give us CSP error
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    	runTestReportXHRConnect("\"http://invalid.salesforce.com\"","", 0);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    public void runTestReportXHRConnect(String urlString, String externalUri, int expectedLogs) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                String.format(baseComponentTag, "",
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "<ui:button press='{!c.post}' label='Send XHR' class='button'/>"));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<?> helperDesc = Ruue.getDefinitionService()
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        HelperDef.class);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                "{createHttpRequest: function() {\n" +
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "        } catch (e) {\n" +
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "            } catch (ignore) {\n" +
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "     var request = this.createHttpRequest();\n" +
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "     request[\"onreadystatechange\"] = function() {\n" +
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "     if (request[\"readyState\"] == 4 && processed === false) {\n" +
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        "         console.log(\"from action callback\");\n" +
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        DefDescriptor<?> controllerDesc = Ruue.getDefinitionService()
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                        ControllerDef.class);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        addSourceAutoCleanup(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        //'http://www.example.com' \"http://www.example.com\"
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        ruauUITestingUtil.findDomElement(By.cssSelector(".button")).click();
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        List<Map<String, Object>> logs = getCspReportLogs(expectedLogs);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        //only check log contect if there is csp violation
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        //when expectedLogs is 0, getCspReportLogs(int) above verify we didn't get any logs.
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:	        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:	        Map<String, Object> cspReport = (Map<String, Object>) logs.get(0).get(
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:	        assertNotNull("No CSP report found", cspReport);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:	        assertEquals("Unexpected blocked resource", externalUri,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:	        assertSourceFile(cspReport, APP_SOURCE_SUFFIX);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:	        assertViolatedDirective(cspReport, "connect-src 'self'");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    private void assertDocumentUri(Map<String, Object> cspReport, String expectedContains) {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        if (!reportedDocumentUri.toString().contains(expectedContains)) {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:            fail(String.format("Unexpected document URI, expected: %s, actual: %s", expectedContains,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    private void assertSourceFile(Map<String, Object> cspReport, String expectedSuffix) {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:            assertNull(reportedSourceFile);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                fail(String.format("Unexpected source file, expected: %s, actual: %s", expectedSuffix,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    private void assertViolatedDirective(Map<String, Object> cspReport, String expectedContains) {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        Object reportedViolatedDirective = cspReport.get(CSPReporterServlet.VIOLATED_DIRECTIVE);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        if (!reportedViolatedDirective.toString().contains(expectedContains)) {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:            fail(String.format("Unexpected violated directive, expected: %s, actual: %s", expectedContains,
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                    reportedViolatedDirective));
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:    private List<Map<String, Object>> getCspReportLogs(int expectedLogs) throws InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        int waitTime = 30000;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        int waitedFor = 0;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        int interval = 500;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        LoggingAdapter adapter = Ruue.get(LoggingAdapter.class);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        if (!(adapter instanceof TestLoggingAdapter)) {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:            throw new Error("TestLoggingAdapter not configured!");
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        List<Map<String, Object>> cspRecords = Lists.newArrayList();
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        // Log lines are published asynchronously, so we have to wait for the logs to be published.
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        while (waitedFor < waitTime) {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:            List<Map<String, Object>> logs = ((TestLoggingAdapter) adapter).getLogs();
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                Map<String, Object> log = logs.remove(0);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                if (log.containsKey("csp-report")) {
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:                    cspRecords.add(log);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:            Thread.sleep(interval);
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:            waitedFor += interval;
ruau/ruau/src/test/java/org/ruauframework/http/CSPReportLoggingTest.java:        	fail("Did not find expected number of log lines (expected " + expectedLogs +
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:package org.ruauframework.http;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.math.BigDecimal;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.net.URLEncoder;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.text.SimpleDateFormat;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.util.ArrayList;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.util.Collection;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.util.Date;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.util.HashMap;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.util.Locale;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import java.util.Map;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.apache.http.Header;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.apache.http.HttpHeaders;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.apache.http.HttpResponse;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.apache.http.HttpStatus;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.apache.http.client.methods.HttpGet;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.apache.http.client.methods.HttpPost;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.apache.http.util.EntityUtils;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.adapter.ContentSecurityPolicy;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.adapter.DefaultContentSecurityPolicy;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.adapter.MockConfigAdapter;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.test.RuueHttpTestCase;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.test.ServiceLocatorMocker;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.test.client.UserAgent;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java: * Automation to verify the handling of RuueServlet requests.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:public class RuueServletHttpTest extends RuueHttpTestCase {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    private static class MockCsp implements ContentSecurityPolicy {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        private String[] ancestors;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        public MockCsp(String... ancestors) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            this.ancestors = ancestors;
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        public String getCspHeaderValue() {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            return DefaultContentSecurityPolicy.buildHeaderNormally(this);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        public Collection<String> getFrameAncestors() {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            if (ancestors == null) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            List<String> list = new ArrayList<String>(ancestors.length);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            for (String item : ancestors) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                list.add(item);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        public Collection<String> getFrameSources() {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            return new ArrayList<String>(0);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            List<String> list = new ArrayList<String>(1);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            list.add(null);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            List<String> list = new ArrayList<String>(1);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            list.add(null);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            List<String> list = new ArrayList<String>(2);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            list.add("www.itrustu.com/");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            list.add("www.also.com/other");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        public Collection<String> getDefaultSources() {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            List<String> list = new ArrayList<String>(1);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            list.add(null);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        public Collection<String> getImageSources() {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            return new ArrayList<String>(0);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        public Collection<String> getMediaSources() {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            return "http://doesnt.matter.com/";
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public RuueServletHttpTest(String name) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * Test for W-2063110 this test is to verify the order of actions and context in the response we used to have
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * context before actions, now it's the opposite
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testPostRawResponseSimpleAction() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> actionParams = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionParams.put("param", "some string");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        ServerAction a = new ServerAction(
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$getString",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                actionParams);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        a.run();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        String rawRes = a.getrawResponse();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Integer posActions = rawRes.indexOf("actions");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Integer posContex = rawRes.indexOf("context");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertTrue(posActions < posContex);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    	ArrayList<String> qNameList = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    	ArrayList<Map<String,Object>> actionParamsArrayList = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:		Map<String, Object> actionParams = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionParams.put("param", "some string");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        qNameList.add("java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$getString");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionParamsArrayList.add(actionParams);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> actionParams1 = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionParams1.put("param", 6);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        qNameList.add("java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$getInt");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionParamsArrayList.add(actionParams1);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    	ServerAction a = new ServerAction(qNameList,actionParamsArrayList);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    	a.run();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    	assertTrue("The response does not have the expected number of actions", a.getReturnValueList().size() == 2);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    	assertTrue(a.getReturnValueList().get(0).equals("some string") && a.getReturnValueList().get(1).equals(new BigDecimal(6)));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * Check a post context.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> message = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> actionInstance = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionInstance.put("descriptor",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$getString");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> actionParams = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionParams.put("param", "some string");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionInstance.put("params", actionParams);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        @SuppressWarnings("rawtypes")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map[] actions = { actionInstance };
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        message.put("actions", actions);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        String jsonMessage = Json.serialize(message);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, String> params = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        params.put("message", jsonMessage);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        params.put("ruau.token", getCsrfToken());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        params.put("ruau.context", getSimpleContext(Format.JSON, false));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        HttpPost post = obtainPostMethod("/ruau", params);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        post.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        if (HttpStatus.SC_OK != statusCode) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            fail(String.format("Unexpected status code <%s>, expected <%s>, response:%n%s", statusCode,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                    HttpStatus.SC_OK, response));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        new JsonReader().read(response
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                .substring(RuueBaseServlet.CSRF_PROTECT.length()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * This is actually an invalid test.
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testPostWithOldLastMod() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> message = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> actionInstance = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionInstance.put("descriptor",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "java://org.ruauframework.impl.java.controller.JavaTestController/ACTION$getString");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> actionParams = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionParams.put("param", "some string");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        actionInstance.put("params", actionParams);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        @SuppressWarnings("rawtypes")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map[] actions = { actionInstance };
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        message.put("actions", actions);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        String jsonMessage = Json.serialize(message);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, String> params = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        params.put("message", jsonMessage);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        params.put("ruau.token", getCsrfToken());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        params.put("ruau.context", getSimpleContext(Format.JSON, true));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        HttpPost post = obtainPostMethod("/ruau", params);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        int statusCode = getStatusCode(httpResponse);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        post.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        if (HttpStatus.SC_OK != statusCode) {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:            fail(String.format("Unexpected status code <%s>, expected <%s>, response:%n%s", statusCode,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                    HttpStatus.SC_OK, response));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertTrue("response not wrapped with ERROR marker",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                response.startsWith(RuueBaseServlet.CSRF_PROTECT + "*/") && response.endsWith("/*ERROR*/"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        response = response.substring(RuueBaseServlet.CSRF_PROTECT.length() + 2,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> json = (Map<String, Object>) new JsonReader().read(response);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals(true, json.get("exceptionEvent"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        @SuppressWarnings("unchecked")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Map<String, Object> eventJson = (Map<String, Object>) json.get("event");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("markup://ruau:clientOutOfSync", eventJson.get("descriptor"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Object f = json.get("defaultHandler");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals(JsFunction.class, f.getClass());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("try{$A.clientService.setOutdated()}catch(e){$L.clientService.setOutdated()}",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    private void assertNoCacheRequest(String inputUrl, String expectedRedirect) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        HttpGet get = obtainGetMethod(inputUrl, false);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, getStatusCode(response));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals(expectedRedirect, response.getFirstHeader(HttpHeaders.LOCATION).getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("no-cache, no-store", response.getFirstHeader(HttpHeaders.CACHE_CONTROL).getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("no-cache", response.getFirstHeader(HttpHeaders.PRAGMA).getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertDefaultAntiClickjacking(response, false, false);  // Redirects don't have XFO/CSP guarding
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:     * nocache in the request will redirect to the input url (minus the protocol and host)
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testNoCache() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertNoCacheRequest(String.format("/ruau?ruau.tag&nocache=%s", URLEncoder.encode(
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "http://any.host/m?ruau.mode=PROD&ruau.format=HTML#someidinhere?has=someparam", "UTF-8")),
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "/m?ruau.mode=PROD&ruau.format=HTML#someidinhere?has=someparam");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testNoCacheNoFragment() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertNoCacheRequest(
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                String.format("/ruau?ruau.tag&nocache=%s", URLEncoder.encode("http://any.host/m?chatter", "UTF-8")),
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "/m?chatter");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testNoCacheNoQuery() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertNoCacheRequest(
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                String.format("/ruau?ruau.tag&nocache=%s",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                        URLEncoder.encode("http://any.host/m#someid?param=extra", "UTF-8")), "/m#someid?param=extra");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testNoCacheNoTag() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        HttpGet get = obtainGetMethod("/ruau?ruau.tag&nocache");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals(HttpStatus.SC_OK, getStatusCode(response));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertTrue("Expected tag error in: " + responseText,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                responseText.contains("Invalid request, tag must not be empty"));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        get.releaseConnection();
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testHTMLTemplateCaching() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // An application with isOnePageApp set to true
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        DefDescriptor<ApplicationDef> desc = addSourceAutoCleanup(ApplicationDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "<ruau:application isOnePageApp='true'></ruau:application>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // Expect the get request to be set for long cache
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertResponseSetToLongCache(String.format("/%s/%s.app", desc.getNamespace(), desc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // An application with isOnePageApp set to false
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        desc = addSourceAutoCleanup(ApplicationDef.class, "<ruau:application isOnePageApp='false'></ruau:application>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // Expect the get request to be set for no caching
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertResponseSetToNoCache(String.format("/%s/%s.app", desc.getNamespace(), desc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // An application with no specification
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        desc = addSourceAutoCleanup(ApplicationDef.class, "<ruau:application></ruau:application>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // Expect the get request to be set for no caching
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertResponseSetToNoCache(String.format("/%s/%s.app", desc.getNamespace(), desc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // A component and RuueBaseServlet.isManifestEnabled() is false because
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // UserAgent is not "AppleWebKit" based
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(ComponentDef.class,
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                "<ruau:component ></ruau:component>");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        // Expect the get request to be set for long cache
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertResponseSetToLongCache(String.format("/%s/%s.cmp", cmpDesc.getNamespace(), cmpDesc.getName()));
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //following 5 tests are nAmEly for mapping between custom CSP to X-FRAME-OPTIONS
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //the logic is in RuueBaseServlet.setBasicHeaders()
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //note these tests are for ruau stand alone only, when running in core, it has different CSP (with more script-src etc)
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //1.if we set ancestor resources with more than one url('self' counts as url), we won't change X-FRAME-OPTIONS
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @ThreadHostileTest("swaps config adapter")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @UnAdaptableTest("CSP is different between ruau-stand-alone and core")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testSpecialCspMultipleAncestors() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Header[] headers = doSpecialCspTest("'self' www.itrustu.com/frame www.also.com/other",
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:                null, "www.itrustu.com/frame", "www.also.com/other");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("wrong number of X-FRAME-OPTIONS header lines", 1, headers.length);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("ALLOWALL", headers[0].getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //2.if we set ancestor resources with one url (without wildcard), that url will get written into X-FRAME-OPTIONS
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @ThreadHostileTest("swaps config adapter")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @UnAdaptableTest("CSP is different between ruau-stand-alone and core")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testSpecialCspSingleAncestor() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Header[] headers = doSpecialCspTest("www.itrustu.com/frame", "www.itrustu.com/frame");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("wrong number of X-FRAME-OPTIONS header lines", 1, headers.length);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("ALLOW-FROM www.itrustu.com/frame", headers[0].getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //3.if we set ancestor resources with protocal like url, we won't change X-FRAME-OPTIONS
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @ThreadHostileTest("swaps config adapter")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @UnAdaptableTest("CSP is different between ruau-stand-alone and core")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testSpecialCspProtocolAncestor() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Header[] headers = doSpecialCspTest("https:", "https:");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("wrong number of X-FRAME-OPTIONS header lines", 1, headers.length);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("ALLOWALL", headers[0].getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //4.if we set ancestor with one wildcard url, we won't change X-FRAME-OPTIONS
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @ThreadHostileTest("swaps config adapter")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @UnAdaptableTest("CSP is different between ruau-stand-alone and core")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testSpecialCspWildcardAncestor() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Header[] headers = doSpecialCspTest("https://*.foo.com", "https://*.foo.com");
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("wrong number of X-FRAME-OPTIONS header lines", 1, headers.length);
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        assertEquals("ALLOWALL", headers[0].getValue());
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    //5.if we set ancestor resources with null, DENY get written into X-FRAME-OPTIONS
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @ThreadHostileTest("swaps config adapter")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    @UnAdaptableTest("CSP is different between ruau-stand-alone and core")
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:    public void testSpecialCspDeniedAncestor() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/http/RuueServletHttpTest.java:        Header[] headers = doSpecialCspTest("'none'");
