ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    samp,
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    small,
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    span,
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    summary,
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    table,
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    textarea,
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    thead,
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    track,
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    var,
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    private final boolean allowed;
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    public static final String HTML_TAG = "ruau:html";
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    private HtmlTag(boolean allowed) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:        this.allowed = allowed;
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    private HtmlTag() {
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    public static final boolean allowed(String tag) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:            if (tag.equals(HTML_TAG)) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:            HtmlTag ret = valueOf(tag.toLowerCase());
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:        } catch (Throwable e) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:            return false;
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:    public boolean isAllowed() {
ruau/ruau/src/nAmE/java/org/ruauframework/def/HtmlTag.java:        return allowed;
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java:import java.util.Collection;
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java:public interface LayoutsDef extends RootDefinition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java:    public DefDescriptor<LayoutsDef> getDescriptor();
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java:    public Collection<LayoutDef> getLayoutDefs();
ruau/ruau/src/nAmE/java/org/ruauframework/def/LayoutsDef.java:    public LayoutDef getLayoutDef(String name);
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java: * <ruau:var name="xxx" value="xxx"/>
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java:public interface VarDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java:    DefDescriptor<VarDef> getDescriptor();
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java:     * Gets the value of the var. This may be a String, Integer, etc... but it might also be an expression.
ruau/ruau/src/nAmE/java/org/ruauframework/def/VarDef.java:    Object getValue();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * The interface for a theme descriptor provider. This is the interface you want to use for classes specified in the
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * "provider" attribute of a {@link ThemeDef} tag.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * Note that classes implementing this interface are instantiated as singletons. Classes implementing this interface
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * should not have any state data. They must also have a no-arg constructor. They should also be marked with the
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java: * {@code @Provider} annotation.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java:public interface ThemeDescriptorProvider extends Provider {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProvider.java:     * Returns a theme descriptor.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:public interface DocumentationDef extends RootDefinition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:    DefDescriptor<DocumentationDef> getDescriptor();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:     * @return map from DescriptionDef name to DescriptionDef
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:    Map<String, DescriptionDef> getDescriptionDefsAsMap();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:     * @return list of description strings from this DocumentationDef's DescriptionDefs
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:    List<ExampleDef> getExampleDefs();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:     * @return map from ExampleDef name to ExampleDef
ruau/ruau/src/nAmE/java/org/ruauframework/def/DocumentationDef.java:    Map<String, ExampleDef> getExampleDefsAsMap();
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java:public interface NamespaceDef extends RootDefinition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java:    public DefDescriptor<NamespaceDef> getDescriptor();
ruau/ruau/src/nAmE/java/org/ruauframework/def/NamespaceDef.java:    Map<String, String> getStyleTokens();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:import java.util.Set;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java: * client library (CSS JS) include for component or application
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:public interface ClientLibraryDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:    public static enum Type {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:    DefDescriptor<ClientLibraryDef> getDescriptor();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:    DefDescriptor<? extends RootDefinition> getParentDescriptor();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * Name specified for this client library. Also, considered the group name
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * @return library name
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:    String getLibraryName();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * Url specified in tag
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * @return library type
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * Modes specified. None specified means all modes.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:    Set<RuueContext.Mode> getModes();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * Determines whether library should be included for mode. Compares modes specified
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * @param mode ruau mode
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:    boolean shouldInclude(RuueContext.Mode mode);
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * Determines whether library should be included for mode and type.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * @param mode ruau mode
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * @param type CSS or JS
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * @return true if should be included with mode and type
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:    boolean shouldInclude(RuueContext.Mode mode, Type type);
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * Whether should be included in concatenation with other client libraries
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:    boolean shouldCombine();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * Whether its the same client library def with differing modes
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * @param clientLibraryDef
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:     * @return true if same client library def with differing modes
ruau/ruau/src/nAmE/java/org/ruauframework/def/ClientLibraryDef.java:    boolean equalsIgnoreModes(ClientLibraryDef clientLibraryDef);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java: * A dependency for a component/application.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java:public interface DependencyDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DependencyDef.java:    DefDescriptor<? extends RootDefinition> getParentDescriptor();
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventDef.java:public interface EventDef extends RootDefinition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java: * <ruau:importTheme name="x"/>
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDefRef.java:public interface ThemeDefRef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java:public interface TestSuiteDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/TestSuiteDef.java:    List<TestCaseDef> getTestCaseDefs();
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java:public interface IncludeDefRef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java:     * Gets the included library's dependencies.
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java:     * Gets the variable wrapped and exported by the library.
ruau/ruau/src/nAmE/java/org/ruauframework/def/IncludeDefRef.java:     * @return the exported variable name.
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:public interface AttributeDefRef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:     * FIXME: W-1328558 this method violates the contract with DefDescriptor.
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:     * These two calls should be used instead, but they cause other bugs.
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:     * @return Returns the value.
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:    Object getValue();
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:     * Parses the value stored in this defref using the passed in type
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:     * definition. This MUST be called during the validateReferences compilation
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:     * phase or this defref may represent a literal value that is not of the
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:     * expected type (i.e. string instead of number)
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:     * needed anymore
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:     * @param typeDef type of the attribute to try to parse to
ruau/ruau/src/nAmE/java/org/ruauframework/def/AttributeDefRef.java:    void parseValue(TypeDef typeDef) throws QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java:public interface LibraryDef extends RootDefinition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/LibraryDef.java:    DefDescriptor<LibraryDef> getDescriptor();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java: * Interface for actions, with params, types, and return type
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:public interface ActionDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * Actions can be server side or client side. If they are client side the
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * server just sends the code down and remains oblivious as to how they are
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * @return type of this action
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * The name of this action is the unique identifier the component can use to
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * call this action
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * @return the name of this action
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:    String getName();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * Basic type system stuff
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * @return the type this action returns
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * Get all the parameters for this action. They are returned in the order
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * they are defined but because the names are provided some contexts can
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * provide args in any order and match up the params
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * @return ordered list of parameters
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:    List<ValueDef> getParameters();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:     * get the parameters that can be logged.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ActionDef.java:    List<String> getLoggableParams();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDef.java:public interface ComponentDef extends BaseComponentDef {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * Similar to {@link ProviderDef}, except that this is only used to invoke {@link ThemeDef} providers. The reason a
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * separate class hierarchy is created for theme providers is because, as of this writing, the other Provider classes
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java: * are too closely tied to the nuances of providing components.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java:public interface ThemeDescriptorProviderDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java:     * Invokes the provide method on the associated provider class.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ThemeDescriptorProviderDef.java:     * @return The result from the associated class's provide method.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java:import org.ruauframework.builder.ComponentDefRefBuilder;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java:public interface ProviderDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java:    boolean isLocal();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ProviderDef.java:    boolean supportsRefProvide();
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java:public interface JavaModelDef extends ModelDef {
ruau/ruau/src/nAmE/java/org/ruauframework/def/JavaModelDef.java:    Class<?> getJavaType();
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java: * All the different types of ruau events
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:     * Application level events can be handled anywhere in the app, they have no
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:     * Component level events can be handled in the scope in which the component
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:     * is used, this is the main method of communication between two components.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:     * The source is part of the event and can be filtered on
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:     * Events fired from Values
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:     * only global and local events can be manually fired by the user
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:    public boolean canBeFired() {
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:     * does this event have a source attribute
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:    public boolean hasSource() {
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:    public static EventType getEventType(String blah) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventType.java:        return valueOf(blah.toUpperCase());
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:import java.io.Serializable;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:import java.util.HashMap;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * A descriptor "handle" for a definition. For applications which care about sorting, such as generating a unique hash
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * from an application and all its dependencies, descriptors are comparable by their qualified name
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * (case-insensitively).
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java: * @param <T> the more specific subtype of definition being described, e.g. {@link ComponentDef}, {@link EventDef}, etc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:public interface DefDescriptor<T extends Definition> extends JsonSerializable,
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        Serializable, Comparable<DefDescriptor<?>> {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    public static final String MARKUP_PREFIX = "markup";
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    public static final String CSS_PREFIX = "css";
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    public static final String TEMPLATE_CSS_PREFIX = "templateCss";
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    public static final String JAVASCRIPT_PREFIX = "js";
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    public static final String COMPOUND_PREFIX = "compound";
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    public static final String JAVA_PREFIX = "java";
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    public static final class DescriptorKey {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        private final String name;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        private final Class<? extends Definition> clazz;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        private final DefDescriptor<? extends Definition> bundle;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public DescriptorKey(String name, Class<? extends Definition> clazz) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            this(name, clazz, null);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public DescriptorKey(String name, Class<? extends Definition> clazz, DefDescriptor<? extends Definition> bundle) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            // FIXME: this case flattening would remove the extra copies of
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            // If we go case sensitive, we won't want it though.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            // this.qualifiedName = qualifiedName.toLowerCase();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            this.name = name;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            this.clazz = clazz;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public int hashCode() {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            return name.hashCode() + clazz.hashCode() + (bundle != null ? bundle.hashCode() : 0);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public boolean equals(Object obj) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            if (!(obj instanceof DescriptorKey)) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:                return false;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            return dk.clazz.equals(clazz) && dk.name.equals(name)
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:                    && (dk.bundle == bundle || dk.bundle != null && dk.bundle.equals(bundle));
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public String getName() {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            return name;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public Class<? extends Definition> getClazz() {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            return clazz;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    public static enum DefType {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        ATTRIBUTE(AttributeDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        APPLICATION(ApplicationDef.class, true), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        COMPONENT(ComponentDef.class, true), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        EVENT(EventDef.class, true), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        HELPER(HelperDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        INTERFACE(InterfaceDef.class, true), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        CONTROLLER(ControllerDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        MODEL(ModelDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        LIBRARY(LibraryDef.class, true), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        INCLUDE(IncludeDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        INCLUDE_REF(IncludeDefRef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        RENDERER(RendererDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        ACTION(ActionDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        TYPE(TypeDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        STYLE(StyleDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        THEME(ThemeDef.class, true), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        THEME_DEF_REF(ThemeDefRef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        THEME_PROVIDER(ThemeDescriptorProviderDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        THEME_MAP_PROVIDER(ThemeMapProviderDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        VAR(VarDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        DOCUMENTATION(DocumentationDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        DESCRIPTION(DescriptionDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        EXAMPLE(ExampleDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        TESTSUITE(TestSuiteDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        TESTCASE(TestCaseDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        PROVIDER(ProviderDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        LAYOUTS(LayoutsDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        LAYOUT(LayoutDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        LAYOUT_ITEM(LayoutItemDef.class), //
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        NAMESPACE(NamespaceDef.class),
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        RESOURCE(ResourceDef.class),
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        DESIGN(DesignDef.class),
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        ATTRIBUTE_DESIGN(AttributeDesignDef.class),
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        DESIGN_TEMPLATE(DesignTemplateDef.class),
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        DESIGN_TEMPLATE_REGION(DesignTemplateRegionDef.class),
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        SVG(SVGDef.class);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        private static Map<Class<? extends Definition>, DefType> defTypeMap;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        private final Class<? extends Definition> clz;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        private final boolean definesBundle;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        private DefType(Class<? extends Definition> clz) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            this(clz, false);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        private DefType(Class<? extends Definition> clz, boolean definesBundle) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            mapDefType(clz, this);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        private static void mapDefType(Class<? extends Definition> clz, DefType defType) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            if (defTypeMap == null) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:                defTypeMap = new HashMap<>();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            defTypeMap.put(clz, defType);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public Class<? extends Definition> getPrimaryInterface() {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:         * Indicated this def type can stand alone in a bundle.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public boolean definesBundle() {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public static boolean hasDefType(Class<?> primaryInterface) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            return defTypeMap.containsKey(primaryInterface);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:        public static DefType getDefType(
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:                Class<? extends Definition> primaryInterface) {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:            DefType ret = defTypeMap.get(primaryInterface);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:                String message = String
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:                        .format("Unsupported Java Interface %s specified for DefDescriptor. Valid types are : %s",
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:                                primaryInterface.getName(), defTypeMap.keySet()
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:                throw new RuueRuntimeException(message);
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return The name of this descriptor
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    String getName();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return The pseudo-protocol, namespace, and name of this descriptor
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    String getQualifiedName();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return the namespace and name portion of this descriptor for cases where the prefix/protocol is already known.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    String getDescriptorName();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return the namespace, if this descriptor has one
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    String getNamespace();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return The portion of a name occurring within any generic delimiters, such as < >, including said delimiters
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    String getNameParameters();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return isParameterized - identifies if additional processing is warranted to consider generic collections should
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    boolean isParameterized();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return The type of this definition, which can be used to branch and parse serialized representations
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * If we have a bundle for the descriptor, then the descriptor is for a file within the bundle, and it is fully
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * specified by the bundle descriptor plus the name from this descriptor.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return the bundle associated with this descriptor.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * Gets the actual definition described by this descriptor, compiling it if necessary, from Ruue's definition
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return the definition (compiles it if necessary)
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:     * @return true if the definition represented by this descriptor exists at all. does not compile the definition
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefDescriptor.java:    boolean exists();
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:import java.io.Serializable;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:import java.util.Set;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * Exceptions should not be thrown except where explicitly declared during the validation
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * process. This means that no exceptions should be thrown in a constructor or in
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * {@link #appendDependencies()}. You can use {@link #validateDefinition()} and
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * {@link #validateReferences()} to throw exceptions as a {@link QuickFixException}.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * Also note that as part of the contract, you may not call any routine intended to get
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * a definition until {@link #validateReferences()}. This includes the constructor,
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java: * {@link #appendDependencies()} and {@link #validateDefinition()}.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:public interface Definition extends JsonSerializable, Serializable {
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * First pass validation, validates this definition locally.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * You may not validate any references, or make any calls that would get
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * a definition from ruau. If there are any captured errors from the build
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * phase, they will be thrown here.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Also note, you MUST call Definition.validateDefinition() from any overrides.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * @throws QuickFixException if there is a problem with the local definition.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    void validateDefinition() throws QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Adds all the descriptors for all definitions this depends on to the set.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * This function MUST append descriptors for any dependencies that will be
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * fetched in validateReferences(). If they are not appended here, an exception
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * This is always called before validateReferences.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * @param dependencies the set to which we should append.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    void appendDependencies(Set<DefDescriptor<?>> dependencies);
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Second pass validation, which validates any references to other
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * definitions which might not be in the cache yet.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Any definitions needed can be fetched here, and arbitrary validation
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * may be performed. Anything referenced here must have been included
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * in the dependencies above. Note that anything in the dependencies
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * does not need a recursive call to validateReferences, since the compile
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * will take care of that.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * @throws QuickFixException if there is a problem with a reference
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    void validateReferences() throws QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Final validation marker.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * When this is called, all definitions in the manifest of definitions have
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * been validated. At this point the definition is about to be put in cache
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * if it can be cached.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    void markValid();
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Has this definition been marked as valid?.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    boolean isValid();
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * @return the name of this definition, not necessarily unique
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    String getName();
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * @return the location where this definition was defined
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    Location getLocation();
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    // Visibility is deprecated: replaced by ACCESS=global/public/private
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    @Deprecated
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Get the descriptor. Note that this _should_ be non-null, but it is not,
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * because there are definitions that cannot be described (references and
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * event handlers are example cases). This could be handled by having yet
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * another layer, and defining an interface for a localized definition that
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * has no descriptor (a superclass of this), defining all other functions.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * The descriptor here, if non-null should be equal to the descriptor used
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * to retrieve this definition and getDef() should return either the same
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * definition or a newer version of it. Within a request, desc.getDef() ==
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Get a sub definition for this definition. Typing here is a little off,
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * the second type parameter should be the actual type of this definition,
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * but to avoid circular definitions we drop that here.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * @param descriptor the descriptor for the sub-definition.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * @return the definition that matches the descriptor.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * retrieve all labels needed by this definition. FIXME: this should be more
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * like append dependencies so that we can build a set before retrieving
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * any. that way we'd be much more efficient.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    void retrieveLabels() throws QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Get a readable description of this definition.
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * Fetches a non-recursive hash for this definition's contents. This does
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * not incorporate hash of dependent definitions, which are generally
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * context-dependent (in that providers may give different users different
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:     * dependencies for the same parent definition).
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    String getOwnHash();
ruau/ruau/src/nAmE/java/org/ruauframework/def/Definition.java:    void appendSupers(Set<DefDescriptor<?>> supers) throws QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * An interface for a component descriptor provider.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * This is the simple default case of providing a descriptor for a component. In
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * this case no attributes can be specified.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * Note that this interface is instantiated as a singleton. It should not have
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java: * any state data. It also needs to have a no-arg constructor.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java:public interface ComponentDescriptorProvider extends Provider {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentDescriptorProvider.java:     * Return a component descriptor.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:import java.io.Serializable;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:import org.ruauframework.throwable.quickfix.InvalidAccessValueException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:// Holds compiled value of ACCESS attribute. 
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:public interface DefinitionAccess extends Serializable {
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:    // Authentication
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:    boolean requiresAuthentication();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:    boolean isGlobal();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:    boolean isPublic();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:    boolean isPrivate();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:    boolean isInternal();
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:    // Validation
ruau/ruau/src/nAmE/java/org/ruauframework/def/DefinitionAccess.java:    void validate(String namespace, boolean allowAuth, boolean allowPrivate) throws InvalidAccessValueException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/DescriptionDef.java:public interface DescriptionDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:import com.salesforce.omakase.plugin.Plugin;
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java: * Represents a CSS file.
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:public interface StyleDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:     * The initially preprocessed code may be processed again during this method call for dynamic or contextual
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:     * substitutions, changes, and validation (e.g., applying theme tokens or browser conditionals).
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:     * Gets the CSS markup for this {@link StyleDef}, using the specified CSS plugins.
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:     * The initially preprocessed code may be processed again during this method call for dynamic or contextual
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:     * substitutions, changes, and validation (e.g., applying theme tokens or browser conditionals), in addition to the
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:     * @param plugins The list of {@link Plugin}s to run against the CSS code.
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:     * Gets the CSS class name associated with this {@link StyleDef} (i.e., the class name used for .THIS replacement).
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:     * @return The CSS class name.
ruau/ruau/src/nAmE/java/org/ruauframework/def/StyleDef.java:    String getClassName();
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * An interface for a component config provider.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * This provider provides a component config, which means that it can set both
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * the descriptor and attributes.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * Note that this interface is instantiated as a singleton, no state should be
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java: * held on the class. It also needs to have a no-arg constructor.
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java:public interface ComponentConfigProvider extends Provider {
ruau/ruau/src/nAmE/java/org/ruauframework/def/ComponentConfigProvider.java:     * Populate and return a ComponentConfig.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java:package org.ruauframework.def;
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java:public interface EventHandlerDef extends Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java:     * FIXME: W-1328552 this method violates the contract with DefDescriptor.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java:     * These two calls should be used instead, but they cause other bugs.
ruau/ruau/src/nAmE/java/org/ruauframework/def/EventHandlerDef.java:     * DefDescriptor<EventHandlerDef> getDescriptor(); DefDescriptor<EventDef>
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java:package org.ruauframework.expression;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/ExpressionType.java:    PROPERTY, FUNCTION, // operators are just functions
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:package org.ruauframework.expression;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:import java.io.Serializable;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:import java.util.Set;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:import org.ruauframework.def.TypeDef;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:import org.ruauframework.instance.ValueProvider;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java: * An expression that can be evaluated on the server or the client.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:public interface Expression extends Serializable {
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:     * Evaluate this expression and return the result, resolving references
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:     * against the passed in value provider.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:    Object evaluate(ValueProvider vp) throws QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:     * @return descriptor for the type that this expression will return (for
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:     *         validation)
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:    // void validate(ValueProvider vp) throws Something;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:     * @return location where it was defined
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:    Location getLocation();
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:     * Gathers up all the property references in this expression
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:     * @param propRefs set to add them to
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Expression.java:    void gatherPropertyReferences(Set<PropertyReference> propRefs);
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:package org.ruauframework.expression;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java: * A reference to some property, i.e. a parsed list of strings separated by dots.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:public interface PropertyReference extends Expression {
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:     * @return a new PropertyReference representing the everything after the root
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:     * @return a part of this PropertyReference
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:     * @param start the starting position (inclusive)
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:     * @param end the ending position (exclusive)
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:    PropertyReference getSub(int start, int end);
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:     * @return list of the parts of this PropertyReference
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:     * @return the last item in this PropertyReference
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:    String getLeaf();
ruau/ruau/src/nAmE/java/org/ruauframework/expression/PropertyReference.java:     * @return size of this PropertyReference path
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java:package org.ruauframework.expression;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java: * Expression wrapper around a literal string, boolean, or number
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java:public interface Literal extends Expression {
ruau/ruau/src/nAmE/java/org/ruauframework/expression/Literal.java:    Object getValue();
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java:package org.ruauframework.expression;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java:import org.ruauframework.def.TypeDef;
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java: * expression for a function call
ruau/ruau/src/nAmE/java/org/ruauframework/expression/FunctionCall.java:public interface FunctionCall extends Expression {
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java:package org.ruauframework.data;
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java:public interface HasClassName {
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasClassName.java:    String getClassName();
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java:package org.ruauframework.data;
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java:public interface HasSelected {
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasSelected.java:    boolean isSelected();
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java:package org.ruauframework.data;
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java:public interface HasLabel {
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasLabel.java:    String getLabel();
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java:package org.ruauframework.data;
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java:public interface HasName {
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasName.java:    String getName();
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java:package org.ruauframework.data;
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java:public interface HasDisabled {
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasDisabled.java:    boolean isDisabled();
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java:package org.ruauframework.data;
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasTitle.java:public interface HasTitle {
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java:package org.ruauframework.data;
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasType.java:public interface HasType {
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java:package org.ruauframework.data;
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java:public interface HasValue {
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasValue.java:    String getValue();
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java:package org.ruauframework.data;
ruau/ruau/src/nAmE/java/org/ruauframework/data/HasHref.java:public interface HasHref {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * Ruue-related runtime exception from which client code could not be expected
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * to recover. These usually indicate programming bugs, such as logic errors or
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * improper use of an API. One example might be a Ruue developer error that
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * causes a NullPointerException.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * @see RuueException
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java: * @see RuueError
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:public class RuueRuntimeException extends RuntimeException implements RuueExceptionInfo {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    private static final long serialVersionUID = -1196068206703611084L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    private final Location location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    private final List<String> componentStack;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    private final String extraMessage;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public RuueRuntimeException(String message) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this(message, null, null, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public RuueRuntimeException(String message, Location location) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this(message, location, null, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public RuueRuntimeException(String message, Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this(message, null, cause, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public RuueRuntimeException(String message, Location location, Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this(message, location, cause, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public RuueRuntimeException(Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this(cause.toString(), null, cause, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public RuueRuntimeException(Throwable cause, Location location) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this(cause.toString(), location, cause, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public RuueRuntimeException(String message, Location location, Throwable cause, String extraMessage) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        super(message, cause);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        List<String> componentStack;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        if (cause != null && cause instanceof RuueExceptionInfo) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:            RuueExceptionInfo info = (RuueExceptionInfo) cause;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:            if (location == null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:                location = info.getLocation();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:            if (extraMessage == null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:                extraMessage = info.getExtraMessage();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:            componentStack = info.getComponentStack();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:            componentStack = RuueExceptionUtil.getComponentStack();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        if (location != null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:            RuueExceptionUtil.addLocation(location, this);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this.componentStack = RuueExceptionUtil.addComponentStack(this, componentStack);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this.location = location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this.extraMessage = extraMessage;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public RuueRuntimeException(String message, Location location, String extraMessage) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        this(message, location, null, extraMessage);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public Location getLocation() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        return location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public String getExtraMessage() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        return this.extraMessage;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:     * Put the location on the message if there is one.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public String getMessage() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        if (this.location != null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:            return this.location + ": " + super.getMessage();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        return super.getMessage();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:    public List<String> getComponentStack() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueRuntimeException.java:        return componentStack;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * Ruue-related exception which should be handled by client code, and from which
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * normal execution should always be recoverable.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * RuueExceptions are the only exceptions that may occur during normal and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * expected execution, and as such, subclasses of RuueException are the only
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * checked exceptions that should appear in the Ruue API.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * This is an abstract class since catching a RuueException directly would not
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * be descriptive enough for client code to understand what it needs to recover
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * @see RuueError
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java: * @see RuueRuntimeException
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:public abstract class RuueException extends Exception implements RuueExceptionInfo {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:    private static final long serialVersionUID = 8678776658910679296L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:    private final Location location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:    private final String extraMessage;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:    private final List<String> componentStack;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:    protected RuueException(String msg, Location l, Throwable t, String extraMessage) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:        List<String> componentStack;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:        if (t != null && t instanceof RuueExceptionInfo) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:            RuueExceptionInfo info = (RuueExceptionInfo) t;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:                l = info.getLocation();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:            if (extraMessage == null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:                extraMessage = info.getExtraMessage();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:            componentStack = info.getComponentStack();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:            componentStack = RuueExceptionUtil.getComponentStack();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:            RuueExceptionUtil.addLocation(l, this);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:        this.componentStack = RuueExceptionUtil.addComponentStack(this, componentStack);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:            RuueExceptionUtil.addLocation(l, this);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:        this.location = l;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:        this.extraMessage = extraMessage;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:    public Location getLocation() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:        return this.location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:    public String getExtraMessage() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:        return this.extraMessage;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:    public List<String> getComponentStack() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueException.java:        return this.componentStack;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * Ruue-related runtime exception that has not been handled and should gack.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * Any unhandled exception that bubbles to the top of the servlet endpoints will
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java: * be wrapped in this before serialization.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:public class RuueUnhandledException extends RuueRuntimeException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:    private static final long serialVersionUID = 567465869440612069L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:     * An unhandled exception that is a root exception
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:    public RuueUnhandledException(String message) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:        super(message);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:     * An unhandled exception that does not have a location.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:    public RuueUnhandledException(String message, Throwable e) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:        super(message, e);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:     * An unhandled exception with a location.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:    public RuueUnhandledException(String message, Location l, Throwable e) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueUnhandledException.java:        super(message, l, e);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:import org.apache.http.HttpStatus;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:import org.ruauframework.def.EventDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:import org.ruauframework.instance.Event;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:public class NoAccessException extends ClientSideEventException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:    private static final long serialVersionUID = 8805697813928173542L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:    private String redirectURL;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:     * This is a special case for no access where the security provider failed.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:     * @param message the message.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:     * @param cause the cause of the failure in the security provider (should be
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:    public NoAccessException(String message, Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:        super(message, cause);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:    public NoAccessException(String message) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:        super(message);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:    public NoAccessException(String message, String redirectURL) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:        this(message);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:            Map<String, Object> attrs = Maps.newHashMapWithExpectedSize(1);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:            attrs.put("redirectURL", redirectURL);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:            return Ruue.getInstanceService().getInstance("ruau:noAccess", EventDef.class, attrs);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:        } catch (QuickFixException x) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:            throw new RuueRuntimeException(x);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:    public JsFunction getDefaultHandler() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:            return new JsFunction(ImmutableList.<String> of(), String.format("window.location = '%s';", redirectURL));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:            return new JsFunction(ImmutableList.<String> of(), "$A.clientService.hardRefresh()");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:    public int getStatusCode() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoAccessException.java:        return HttpStatus.SC_NOT_FOUND;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:public interface RuueExceptionInfo {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * Get the location for this exception.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * @return the location associated with the exception or null.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:    Location getLocation();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * Get any additional info associated with the exception.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * Note that this is used so that information about the exact parameters
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * that cause the exception can be logged without making the exception
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * appear to be different than others with different information, but the
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * same stack signature. This can be used to log information such as
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * database IDs and other highly variable information.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:    String getExtraMessage();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * Get the location for this exception.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:     * @return the location stack.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionInfo.java:    List<String> getComponentStack();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * Ruue-related error arising from abnormal conditions which no one should
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * reasonably try to catch. One example might be if Ruue was missing some key
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * "Even if you could recover, things will continue to not go your way."
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * @see RuueException
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java: * @see RuueRuntimeException
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java:public class RuueError extends Error {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java:    private static final long serialVersionUID = 4086385148934637611L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java:    public RuueError(Throwable t) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java:    public RuueError(String message) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java:        super(message);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java:    public RuueError(String message, Throwable t) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueError.java:        super(message, t);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:import org.apache.http.HttpStatus;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:import org.ruauframework.def.EventDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:import org.ruauframework.instance.Event;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * An exception to fire an arbitrary event on the client side.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * A generic event class to fire events on the client side to indicate an error state 
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * while executing a server action. This object will encapsulate all the information 
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * required to create and fire the event client side.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java: * Note: This event should not be used by the Ruue framework itself, it should only be used inside of a server action.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:public class GenericEventException extends ClientSideEventException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:    private static final long serialVersionUID = 8972903096686059699L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:    private String eventName;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:    private Map<String,Object> params;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:     * Create an exception with a (visible) cause.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:     * @see RuueHandledException#RuueHandledException(Throwable)
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:     * @param cause the cause (usually logged).
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:    public GenericEventException(String eventName, Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        super(eventName, cause);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        this.eventName = eventName;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        this.params = Maps.newHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:     * Create an exception with a (visible) cause.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:     * @see RuueHandledException#RuueHandledException(Throwable)
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:     * @param cause the cause (usually logged).
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:    public GenericEventException(String eventName) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        super(eventName);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        this.eventName = eventName;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        this.params = Maps.newHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:    public GenericEventException addParam(String name, Object value) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        params.put(name, value);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:    public GenericEventException addParamMap(Map<String,Object> newParams) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        params.putAll(newParams);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:            return Ruue.getInstanceService().getInstance(eventName, EventDef.class, params);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        } catch (QuickFixException x) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:            throw new RuueRuntimeException(x);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:    public JsFunction getDefaultHandler() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        return new JsFunction(ImmutableList.<String> of(), "$A.error('Unable to process event');");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:    public int getStatusCode() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/GenericEventException.java:        return HttpStatus.SC_OK;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:import org.apache.http.HttpStatus;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:import org.ruauframework.def.EventDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:import org.ruauframework.instance.Event;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:public class InvalidSessionException extends ClientSideEventException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:    private static final long serialVersionUID = -2007734227131769994L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:    private final String newToken;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:    public InvalidSessionException(Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:        this(cause, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:    public InvalidSessionException(Throwable cause, String newToken) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:        super(cause.getMessage());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:            Map<String, Object> args = Maps.newHashMapWithExpectedSize(1);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:            args.put("newToken", this.newToken);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:            return Ruue.getInstanceService().getInstance("ruau:invalidSession", EventDef.class, args);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:        } catch (QuickFixException x) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:            throw new RuueRuntimeException(x);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:    public JsFunction getDefaultHandler() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:        return new JsFunction(ImmutableList.<String> of(),
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:                "try{$A.clientService.hardRefresh();}catch(e){$L.clientService.hardRefresh();}");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:    public int getStatusCode() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/InvalidSessionException.java:        return HttpStatus.SC_NOT_FOUND;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:import org.apache.http.HttpStatus;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:import org.ruauframework.def.EventDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:import org.ruauframework.instance.Event;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:public class SystemErrorException extends ClientSideEventException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:    private static final long serialVersionUID = -2007734227131769994L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:    public SystemErrorException(Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:        this(cause.getMessage());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:    public SystemErrorException(String message) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:        super(message);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:            Map<String, Object> args = Maps.newHashMapWithExpectedSize(1);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:            args.put("message", this.getMessage());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:            return Ruue.getInstanceService().getInstance("ruau:systemError", EventDef.class, args);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:        } catch (QuickFixException x) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:            throw new RuueRuntimeException(x);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:    public JsFunction getDefaultHandler() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:        return new JsFunction(ImmutableList.<String> of(), "$A.error('unknown error');");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:    public int getStatusCode() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/SystemErrorException.java:        return HttpStatus.SC_NOT_FOUND;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * An exception that occurs while running code in a plug-in language within
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * Ruue.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * Must include a Location corresponding to the plug-in language file (e.g.,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * Controller, Provider, etc.) that caused the exception. In general, this
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java: * should also wrap another exception (the cause). It will be surfaced as an
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:public class RuueExecutionException extends RuueRuntimeException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:    private static final long serialVersionUID = 4773646750032723421L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:    public RuueExecutionException(String message, Location location) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:        super(message, location);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:    public RuueExecutionException(String message, Location location, Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:        super(message, location, cause);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:    public RuueExecutionException(Throwable cause, Location location) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExecutionException.java:        super(cause, location);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:import org.apache.http.HttpStatus;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:import org.ruauframework.def.EventDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:import org.ruauframework.instance.Event;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:public class ClientOutOfSyncException extends ClientSideEventException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:    private static final long serialVersionUID = 7178941169236716678L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:     * This is a special case for no client out of sync.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:     * @param message the message.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:    public ClientOutOfSyncException(String message) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:        super(message);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:            return Ruue.getInstanceService().getInstance("ruau:clientOutOfSync", EventDef.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:        } catch (QuickFixException x) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:            throw new RuueRuntimeException(x);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:    public JsFunction getDefaultHandler() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:        return new JsFunction(ImmutableList.<String> of(),
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:                "try{$A.clientService.setOutdated()}catch(e){$L.clientService.setOutdated()}");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:    public int getStatusCode() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientOutOfSyncException.java:        return HttpStatus.SC_NOT_FOUND;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * This package provides all of the Ruue exception classes.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * Exceptions based off of {@link org.ruauframework.throwable.quickfix.QuickFixException quick fix}
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * are exceptions that are checked, and can provide a set of quick fixes to a developer. These
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * will only be handled as a quick fix when Ruue is not in
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * {@link org.ruauframework.system.RuueContext.Mode#PROD production mode}
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * This exception must be extended to use it (it is abstract). It is possible
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * to extend it in external code, but the appropriate providers and handlers
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * must also be extended.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * Exceptions based off of a {@link org.ruauframework.throwable.RuueHandledException}
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * provide a way to send a message to the client to handle the exception. These will be
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * automatically surfaced from within plug-in code, and should always send the appropriate
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * message to the client, short-circuiting all other handling.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * In order for this to be extended externally, appropriate handlers must be provided
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * and they must provide messaging that will be correctly interpreted by the client.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * A {@link org.ruauframework.throwable.RuueExecutionException}
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * is used to wrap an exception that occurs in plug-in code and to tag it with
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * the location of the definition to aid in tracking * down the problem. This exception
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * will never wrap {@link org.ruauframework.throwable.quickfix.QuickFixException} or
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * {@link org.ruauframework.throwable.RuueHandledException} exception.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * {@link org.ruauframework.throwable.RuueUnhandledException} is used to wrap exceptions in Ruue code that
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * cannot be handled. These will be reported as an error to the client, and may
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java: * be further wrapped in other relevant exceptions.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/package-info.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java: * Indicates that a RuueContext should have been established, but wasn't.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java:public class NoContextException extends RuueRuntimeException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java:    private static final long serialVersionUID = -8055941822692798951L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/NoContextException.java:        super("RuueContext was not established");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:import org.ruauframework.def.Definition;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:import org.ruauframework.system.Source;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java: * removes a body from an xml node
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:public class RemoveBodyQuickFix extends RuueXMLQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:        this(createMap(descriptor, query));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:    public RemoveBodyQuickFix(Map<String, Object> attributes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:        super("Remove Body", attributes, Ruue.getDefinitionService().getDefDescriptor("ruaudev:removeBodyDefQuickFix",
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:                ComponentDef.class));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:    private static Map<String, Object> createMap(DefDescriptor<?> descriptor, String query) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:        Map<String, Object> ret = Maps.newHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:        ret.put("descriptor", String.format(descriptor.getQualifiedName()));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:    protected String getFix(String tagToFix) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:        return tagToFix.substring(0, tagToFix.length() - 1) + "/>";
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:        DefDescriptor<?> desc = Ruue.getDefinitionService().getDefDescriptor(descriptor, LayoutsDef.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:            int nodeTagStart = this.getNodeStartCharecterOffset(node);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:            int nodeBodyStart = this.getNodeBodyStartCharecterOffset(node);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:            int nodeTagEnd = this.getNodeEndCharecterOffset(node);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:            if (nodeTagStart < nodeBodyStart && nodeBodyStart < nodeTagEnd) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:                String tagToFix = source.getContents().substring(nodeTagStart - 1, nodeBodyStart);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:                String fix = getFix(tagToFix);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveBodyQuickFix.java:                doFix(source, fix, nodeTagStart, nodeTagEnd);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java: * Thrown when validating a definition.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java:public class InvalidDefinitionException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java:    private static final long serialVersionUID = -2797862358172183334L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java:    public InvalidDefinitionException(String message, Location location, Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java:        super(message, location, cause);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java:    public InvalidDefinitionException(String message, Location location) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidDefinitionException.java:        super(message, location);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java: * thrown when unable to locate a def for a descriptor
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:public class DefinitionNotFoundException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:    private static final long serialVersionUID = 1918131174943191514L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:    private final DefDescriptor<?> descriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:    private static final String messageFormat = "No %s named %s found";
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:    public DefinitionNotFoundException(DefDescriptor<?> descriptor, Location l) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:        super(getMessage(descriptor.getDefType(), descriptor.getQualifiedName()), l, getFixes(descriptor));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:    public DefinitionNotFoundException(DefDescriptor<?> descriptor, Location l, String usedAt) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:        super(getMessage(descriptor.getDefType(), descriptor.getQualifiedName()) + " : " + usedAt, l,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:    private static RuueQuickFix[] getFixes(DefDescriptor<?> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:        case COMPONENT:
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:            return new RuueQuickFix[] { new CreateComponentDefQuickFix(descriptor) };
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:        case APPLICATION:
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:            return new RuueQuickFix[] { new CreateApplicationDefQuickFix(descriptor) };
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:        case THEME:
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:            return new RuueQuickFix[] { new CreateThemeDefQuickFix(descriptor) };
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:        default:
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:    public static String getMessage(DefType defType, String defName) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/DefinitionNotFoundException.java:        return String.format(messageFormat, defType, defName);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java: * Exception type for any validation errors during SVG parsing
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:public class SVGParserException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:    private static final long serialVersionUID = 6972143087324977978L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:    public SVGParserException(String message, Location l, RuueQuickFix... quickFixes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:        super(message, l, quickFixes);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:    public SVGParserException(String message, Location l) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:        this(message, l, (RuueQuickFix[]) null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:    public SVGParserException(String message) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/SVGParserException.java:        this(message, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java: * Thrown when trying to use an attribute that doesn't exist
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:public class AttributeNotFoundException extends QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:    private static final long serialVersionUID = 1068164156618526671L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:    public AttributeNotFoundException(DefDescriptor<?> descriptor, String attName, Location l) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:        super(getMessage(descriptor, attName), l, new CreateAttributeQuickFix(descriptor, attName));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:    private static String getMessage(DefDescriptor<?> descriptor, String attName) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:        return String.format("The attribute \"%s\" was not found on the %s %s", attName, descriptor.getDefType(),
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/AttributeNotFoundException.java:                descriptor.getQualifiedName());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:import java.util.regex.Pattern;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:import org.ruauframework.def.Definition;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:import org.ruauframework.system.Source;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java: * removes an attribute from an xml node
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:public class RemoveAttributeQuickFix extends RuueXMLQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:    public RemoveAttributeQuickFix(DefDescriptor<?> descriptor, String attName, String query, Definition def) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:        this(createMap(descriptor, attName, query));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:    public RemoveAttributeQuickFix(Map<String, Object> attributes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:        super("Remove Attribute", attributes, Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:                "ruaudev:removeAttributeDefQuickFix", ComponentDef.class));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:    private static Map<String, Object> createMap(DefDescriptor<?> descriptor, String attName, String query) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:        Map<String, Object> ret = Maps.newHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:        ret.put("descriptor", String.format(descriptor.getQualifiedName()));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:        ret.put("attName", attName);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:    protected String getFix(String tagToFix, String attrName, String attrValue) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:        return tagToFix.replaceAll(
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:                "[ \t]*" + Pattern.quote(attrName) + "[ \t]*=[ \t]*[\'\"]?" + Pattern.quote(attrValue) + "[\'\"]?", "");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:        DefDescriptor<LayoutsDef> desc = Ruue.getDefinitionService().getDefDescriptor(descriptor, LayoutsDef.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:            String attrName = (String) getAttributes().get("attName");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:            Node attrNode = node.getAttributes().getNamedItem(attrName);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:            if (attrNode != null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:                String attrValue = attrNode.getNodeValue();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:                int nodeTagStart = this.getNodeStartCharecterOffset(node);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:                int nodeBodyStart = this.getNodeBodyStartCharecterOffset(node);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:                String tagToFix = source.getContents().substring(nodeTagStart - 1, nodeBodyStart);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:                String fix = getFix(tagToFix, attrName, attrValue);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RemoveAttributeQuickFix.java:                doFix(source, fix, nodeTagStart, nodeBodyStart);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java: * Exception for client libraries
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java:public class ClientLibraryException extends QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java:    private static final long serialVersionUID = 288798091014190582L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java:    public ClientLibraryException(String message, Location location) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ClientLibraryException.java:        super(message, location, (RuueQuickFix[]) null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java: * Ruue Compile-time exception for when RHS of Access= attribute is invalid
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java:public class InvalidAccessValueException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java:	private static final long serialVersionUID = 5096592723442968967L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java:	public InvalidAccessValueException(String message, Location l,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java:			RuueQuickFix... quickFixes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java:		super(message, l, quickFixes);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidAccessValueException.java:	public InvalidAccessValueException(String msg) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java: * thrown when an invalid expression is detected
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java:public class InvalidExpressionException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java:    private static final long serialVersionUID = -2728500342139623859L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java:    public InvalidExpressionException(String message, Location l) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java:        super(message, l);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java:    public InvalidExpressionException(String message, Location l, Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidExpressionException.java:        super(message, l, cause);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java: * Thrown when validating a reference in a definition.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java:public class InvalidReferenceException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java:    private static final long serialVersionUID = 2143501809473337901L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java:    public InvalidReferenceException(String message, Location location) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidReferenceException.java:        super(message, location);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:public abstract class CreateBaseComponentDefQuickFix extends RuueQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:    public CreateBaseComponentDefQuickFix(String description, Map<String, Object> attributes,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:        super(description, attributes, ui);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:    protected static Map<String, Object> createMap(DefDescriptor<?> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:        Map<String, Object> ret = Maps.newLinkedHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateBaseComponentDefQuickFix.java:        ret.put("descriptor", String.format("%s:%s", descriptor.getNamespace(), descriptor.getName()));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java:public abstract class RuueValidationException extends QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java:    private static final long serialVersionUID = -7041778809350433164L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java:    public RuueValidationException(String message, Location l, RuueQuickFix... quickFixes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java:        super(message, l, quickFixes);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java:    public RuueValidationException(String message, Location l, Throwable cause, RuueQuickFix... quickFixes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java:        super(message, l, cause, quickFixes);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueValidationException.java:    public RuueValidationException(String msg) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:public class MissingRequiredAttributeException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:    private static final long serialVersionUID = -819293607407443413L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:    private static final String MESSAGE = "%s %s is missing required attribute '%s'";
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:    public MissingRequiredAttributeException(DefDescriptor<?> desc, String attributeName) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:        this(desc, attributeName, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:    public MissingRequiredAttributeException(DefDescriptor<?> desc, String attributeName, Location l) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:        super(getMessage(desc, attributeName), l);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:    public static String getMessage(DefDescriptor<?> desc, String attributeName) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/MissingRequiredAttributeException.java:        return String.format(MESSAGE, desc.getDefType(), desc.getQualifiedName(), attributeName);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import org.ruauframework.throwable.RuueException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import org.ruauframework.throwable.RuueExceptionUtil;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * An exception that contains a list of potential automated fixes for the
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * problem, which the client code or user can choose from and invoke before
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java: * retrying the original action that threw this Exception.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:public abstract class QuickFixException extends RuueException implements JsonSerializable {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:    private static final long serialVersionUID = 2050170532486579614L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:    private final List<RuueQuickFix> quickFixes;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:    public QuickFixException(String message, Location l, RuueQuickFix... quickFixes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:        super(message, l, null, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:        this.quickFixes = (quickFixes == null) ? null : ImmutableList.copyOf(quickFixes);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:    public QuickFixException(String message, Location l, Throwable cause, RuueQuickFix... quickFixes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:        super(message, l, cause, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:        this.quickFixes = (quickFixes == null) ? null : ImmutableList.copyOf(quickFixes);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:    public List<RuueQuickFix> getQuickFixes() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:    public void serialize(Json json) throws IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:        json.writeMapBegin();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:        json.writeMapEntry("message", getMessage());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:        if (Ruue.getContextService().isEstablished()) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:            Mode mode = Ruue.getContextService().getCurrentContext().getMode();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:                json.writeMapEntry("stack", RuueExceptionUtil.getStackTrace(this));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:                json.writeMapEntry("location", getLocation());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:        json.writeMapEntry("quickFixes", getQuickFixes());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/QuickFixException.java:        json.writeMapEnd();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import java.io.Writer;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import java.util.regex.Matcher;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import java.util.regex.Pattern;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.def.TypeDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.system.Source;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.throwable.RuueError;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java: * adds an attribute to a component or interface def
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:public class CreateAttributeQuickFix extends RuueQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:    private static final Pattern CMP_TAG = Pattern.compile("<ruau:component([^>]*?)>", Pattern.CASE_INSENSITIVE
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            | Pattern.MULTILINE);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:    private static final Pattern INTF_TAG = Pattern.compile("<ruau:interface([^>]*?)>", Pattern.CASE_INSENSITIVE
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            | Pattern.MULTILINE);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:     * Create an attribute quick-fix.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:     * @param descriptor the descriptor on which we wish to create the attribute.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:     * @param attName the name of the attribute
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:    public CreateAttributeQuickFix(DefDescriptor<?> descriptor, String attName) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        this(createMap(descriptor, attName));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:     * Create an attribute quick-fix from a map.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:     * @param attributes A map with 'descriptor', 'attName', and 'intf' set appropriately.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:    public CreateAttributeQuickFix(Map<String, Object> attributes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        super("Create Attribute", attributes, Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:                "ruaudev:createAttributeDefQuickFix", ComponentDef.class));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:     * Create a map of attributes for our descriptor based constructor.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:    private static Map<String, Object> createMap(DefDescriptor<?> descriptor, String attName) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        Map<String, Object> ret = Maps.newHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        ret.put("descriptor", String.format("%s:%s", descriptor.getNamespace(), descriptor.getName()));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        ret.put("attName", attName);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        String attName = (String) getAttributes().get("attName");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        boolean intf = Boolean.valueOf((String) getAttributes().get("intf"));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        DefDescriptor<?> desc = Ruue.getDefinitionService().getDefDescriptor(descriptor,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:                intf ? InterfaceDef.class : ComponentDef.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        Source<?> source = Ruue.getContextService().getCurrentContext().getDefRegistry().getSource(desc);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        // checks for an empty attribute name or type
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        if ("".equals(attName) || "".equals(type)) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            throw new RuueRuntimeException("Cannot leave the field blank");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        // Validates the attribute name
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        if ((RuueTextUtil.validateAttributeName(attName)) != true) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            throw new RuueRuntimeException("Invalid attribute name:'" + attName
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:                    + "',Refer to Ruuedocs for valid attribute names");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        // validates the type
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            DefDescriptor<TypeDef> typeDesc = Ruue.getDefinitionService().getDefDescriptor(type, TypeDef.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        } catch (RuueRuntimeException e) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            throw new RuueRuntimeException("Invalid attribute type:" + type);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            throw new RuueError("Cannot find source for " + desc.getQualifiedName());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        Pattern p = intf ? INTF_TAG : CMP_TAG;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:        Matcher m = p.matcher(s);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            sb.append(s.subSequence(0, m.end()));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            sb.append("\n    <ruau:attribute name=\"");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            sb.append(attName);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            sb.append("\" type=\"");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            sb.append(type);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            sb.append("\"/>\n");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            sb.append(s.substring(m.end() + 1));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            } finally {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFix.java:            throw new RuueError("Could not locate opening tag for " + desc.getQualifiedName());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import org.ruauframework.system.SourceListener.SourceMonitorEvent;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:public abstract class RuueQuickFix implements JsonSerializable {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    private final String description;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    private final Map<String, Object> attributes;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    private final DefDescriptor<ComponentDef> ui;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    protected RuueQuickFix(String description, Map<String, Object> attributes, DefDescriptor<ComponentDef> ui) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        this.attributes = attributes;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:     * @return Returns the attributes.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    public Map<String, Object> getAttributes() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        return attributes;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        return getAttribute(attributes, key);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    private Object getAttribute(Map<String, Object> root, String key) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:            List<String> split = RuueTextUtil.splitSimple(".", key);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:                    sb.append(split.get(i));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:                        sb.append('.');
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:                return getAttribute((Map<String, Object>) newRoot, sb.toString());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    protected boolean getBooleanAttribute(String key) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:            return false;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        if (obj.equals("on") || obj.equals("true") || obj.equals(true)) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        return false;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:     * This should return a descriptor for a component that implements
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:     * ruau:quickFix
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    protected abstract void fix() throws Exception;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    private String getName() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        String n = getClass().getSimpleName();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    public void serialize(Json json) throws IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        json.writeMapBegin();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        json.writeMapEntry("name", getName());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        json.writeMapEntry("description", getDescription());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        json.writeMapEntry("attributes", getAttributes());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        json.writeMapEntry("ui", getUI());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        json.writeMapEnd();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:    protected void resetCache(DefDescriptor<?> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        Ruue.getContextService().getCurrentContext().getDefRegistry().invalidate(descriptor);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFix.java:        Ruue.getDefinitionService().onSourceChanged(descriptor, SourceMonitorEvent.CREATED, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import java.io.ByteArrayInputStream;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import java.io.ByteArrayOutputStream;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import java.io.Writer;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.parsers.DocumentBuilder;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.parsers.DocumentBuilderFactory;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.stream.XMLEventFactory;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.stream.XMLEventReader;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.stream.XMLEventWriter;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.stream.XMLInputFactory;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.stream.XMLOutputFactory;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.stream.XMLStreamException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.stream.events.XMLEvent;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.xpath.XPath;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.xpath.XPathConstants;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.xpath.XPathExpression;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import javax.xml.xpath.XPathFactory;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import org.ruauframework.def.Definition;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import org.ruauframework.system.Source;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import org.ruauframework.throwable.RuueError;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:public abstract class RuueXMLQuickFix extends RuueQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    private String query = "";
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    private Definition def;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    protected RuueXMLQuickFix(String description, Map<String, Object> attributes, DefDescriptor<ComponentDef> ui) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        super(description, attributes, ui);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        Source<?> source = Ruue.getContextService().getCurrentContext().getDefRegistry().getSource(desc);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            throw new RuueError("Cannot find source for " + desc.getQualifiedName());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    private Document getXMLDoc(Source<?> source) throws Exception {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        domFactory.setNamespaceAware(false);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        DocumentBuilder builder = domFactory.newDocumentBuilder();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        XMLInputFactory xmlInF = XMLInputFactory.newInstance();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        xmlInF.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, false);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        XMLOutputFactory xmlOutF = XMLOutputFactory.newInstance();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        XMLEventReader reader = xmlInF.createXMLEventReader(source.getHashingReader());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        ByteArrayOutputStream baos = new ByteArrayOutputStream();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        XMLEventWriter writer = xmlOutF.createXMLEventWriter(baos);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        XMLEventFactory eventFactory = XMLEventFactory.newInstance();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        while (reader.hasNext()) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            XMLEvent event = (XMLEvent) reader.next();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            writer.add(event);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            // create a new xml comment with character offset position info
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            // (this will be handy when editing the xml document)
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            XMLEvent offsetComment = eventFactory.createComment(Integer.toString(event.getLocation()
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:                    .getCharacterOffset()));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            writer.add(offsetComment);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        Document doc = builder.parse(new ByteArrayInputStream(baos.toByteArray()));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    private Node findNode(Document doc, String xPathExpr) throws Exception {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        XPathFactory factory = XPathFactory.newInstance();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        XPath xpath = factory.newXPath();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        XPathExpression expr = xpath.compile(xPathExpr);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        NodeList nodes = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            throw new RuueRuntimeException(String.format("Unable to find node: %s", xPathExpr));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    protected Node findNode(Source<?> source, String xPathExpr) throws Exception {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        return findNode(getXMLDoc(source), xPathExpr);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    protected int getNodeStartCharecterOffset(Node node) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        Node tagOpenStartComment = node.getPreviousSibling();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        if (tagOpenStartComment.getNodeType() == Node.COMMENT_NODE) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            return Integer.parseInt(tagOpenStartComment.getTextContent());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    protected int getNodeBodyStartCharecterOffset(Node node) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        if (node.hasChildNodes()) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            Node tagOpenEndComment = node.getFirstChild();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            if (tagOpenEndComment.getNodeType() == Node.COMMENT_NODE) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:                return Integer.parseInt(tagOpenEndComment.getTextContent());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    protected int getNodeEndCharecterOffset(Node node) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        Node tagOpenStartComment = node.getNextSibling();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        if (tagOpenStartComment.getNodeType() == Node.COMMENT_NODE) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            return Integer.parseInt(tagOpenStartComment.getTextContent());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:    protected void doFix(Source<?> source, String fix, int fixStart, int fixEnd) throws XMLStreamException, IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        sb.append(s.substring(0, fixStart - 1));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        sb.append(fix);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        sb.append(s.substring(fixEnd));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:            } finally {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueXMLQuickFix.java:        resetCache(source.getDescriptor());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:import org.ruauframework.def.ThemeDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:import org.ruauframework.service.BuilderService;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java: * Quick fix for creating a missing {@link ThemeDef}.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:public class CreateThemeDefQuickFix extends RuueQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:    public CreateThemeDefQuickFix(Map<String, Object> attributes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:        super("Create Theme Definition", attributes, Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:                "ruaudev:createThemeDefQuickFix", ComponentDef.class));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:    public CreateThemeDefQuickFix(DefDescriptor<?> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:        this(createMap(descriptor));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:    private static Map<String, Object> createMap(DefDescriptor<?> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:        Map<String, Object> ret = Maps.newHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:        BuilderService builderService = Ruue.getBuilderService();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:        String[] split = CreateComponentDefQuickFix.descriptorPattern.split(descriptors);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:            definitionService.save(def);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeDefQuickFix.java:            resetCache(def.getDescriptor());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:import java.util.regex.Pattern;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:import org.ruauframework.def.StyleDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:import org.ruauframework.service.BuilderService;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:public class CreateComponentDefQuickFix extends CreateBaseComponentDefQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:    static final Pattern descriptorPattern = Pattern.compile("[\\s,;]+");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:    public CreateComponentDefQuickFix(Map<String, Object> attributes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:        super("Create Component Definition", attributes, Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:                "ruaudev:createComponentDefQuickFix", ComponentDef.class));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:    public CreateComponentDefQuickFix(DefDescriptor<?> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:        this(createMap(descriptor));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:        BuilderService builderService = Ruue.getBuilderService();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:        String[] split = descriptorPattern.split(descriptors);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:            definitionService.save(def);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:            if (getBooleanAttribute("client.css")) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:                        "css", StyleDef.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:                new CreateStyleDefQuickFix(styleDescriptor).fix();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateComponentDefQuickFix.java:            resetCache(def.getDescriptor());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:import org.ruauframework.def.StyleDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:import org.ruauframework.service.BuilderService;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:public class CreateApplicationDefQuickFix extends CreateBaseComponentDefQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:    public CreateApplicationDefQuickFix(Map<String, Object> attributes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:        super("Create Application Definition", attributes, Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:                "ruaudev:createApplicationDefQuickFix", ComponentDef.class));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:    public CreateApplicationDefQuickFix(DefDescriptor<?> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:        this(createMap(descriptor));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:        BuilderService builderService = Ruue.getBuilderService();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:        String[] split = CreateComponentDefQuickFix.descriptorPattern.split(descriptors);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:            ApplicationDef def = builderService.getApplicationDefBuilder().setDescriptor(descriptor).build();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:            definitionService.save(def);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:            if (getBooleanAttribute("client.css")) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:                        "css", StyleDef.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:                new CreateStyleDefQuickFix(styleDescriptor).fix();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateApplicationDefQuickFix.java:            resetCache(def.getDescriptor());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import org.ruauframework.builder.StyleDefBuilder;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import org.ruauframework.def.StyleDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import org.ruauframework.service.BuilderService;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import org.ruauframework.system.Annotations.Key;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:public class CreateStyleDefQuickFix extends RuueQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:    public CreateStyleDefQuickFix(Map<String, Object> attributes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:        super("Create Style Definition", attributes, Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:                "ruaudev:createStyleDefQuickFix", ComponentDef.class));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:    public CreateStyleDefQuickFix(DefDescriptor<?> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:        this(createMap(descriptor));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:    private static Map<String, Object> createMap(DefDescriptor<?> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:        Map<String, Object> ret = Maps.newHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:        BuilderService builderService = Ruue.getBuilderService();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:        builder.setClassName(styleDescriptor.getNamespace() + RuueTextUtil.initCap(styleDescriptor.getName()));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:        definitionService.save(styleDef);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:    public static final void doFix(@Key("attributes") Map<String, Object> attributes) throws QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateStyleDefQuickFix.java:        new CreateComponentDefQuickFix(attributes).fix();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:import java.lang.reflect.Constructor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:import org.ruauframework.system.Annotations.Controller;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:import org.ruauframework.system.Annotations.Key;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:public class RuueQuickFixController {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:    private static final String className = "org.ruauframework.throwable.quickfix.%sQuickFix";
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:    @SuppressWarnings("unchecked")
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:    @RuueEnabled
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:    public static void doFix(@Key("name") String name, @Key("attributes") Map<String, Object> attributes)
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:        Class<RuueQuickFix> clz = (Class<RuueQuickFix>) Class.forName(String.format(className, name));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:        Constructor<RuueQuickFix> constructor = clz.getConstructor(Map.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:        RuueQuickFix quickFix = constructor.newInstance(attributes);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:        Ruue.getContextService().pushSystemContext();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:        } finally {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/RuueQuickFixController.java:            Ruue.getContextService().popSystemContext();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * Exception thrown when an event of incompatible type is used. Also see
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java: * {@link org.ruauframework.def.EventType}
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java:public class InvalidEventTypeException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java:    private static final long serialVersionUID = 2571238301623320240L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java:    public InvalidEventTypeException(String message, Location location) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/InvalidEventTypeException.java:        super(message, location);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:import static com.google.common.base.Preconditions.checkNotNull;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:import org.ruauframework.def.ThemeDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java: * Exceptions used when a variable (attribute) isn't found in a {@link ThemeDef}.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:public class ThemeValueNotFoundException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:    private static final String MSG = "The var \"%s\" was not found on the %s %s";
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:    private static final long serialVersionUID = -2571041901012359701L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:    public ThemeValueNotFoundException(String name, DefDescriptor<ThemeDef> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:        this(name, descriptor, null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:    public ThemeValueNotFoundException(String name, DefDescriptor<ThemeDef> descriptor, Location location) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:        super(getMessage(checkNotNull(name), descriptor), location, new CreateThemeVarQuickFix(descriptor, name));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:    private static String getMessage(String variable, DefDescriptor<ThemeDef> descriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/ThemeValueNotFoundException.java:        return String.format(MSG, variable, descriptor.getDefType(), descriptor.getQualifiedName());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import java.io.Writer;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import java.util.regex.Matcher;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import java.util.regex.Pattern;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import org.ruauframework.def.ThemeDef;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import org.ruauframework.system.Source;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import org.ruauframework.throwable.RuueError;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java: * Quick fix for missing vars on theme defs.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:public class CreateThemeVarQuickFix extends RuueQuickFix {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:    private static final Pattern TAG = Pattern.compile("<ruau:theme([^>]*?)>", Pattern.CASE_INSENSITIVE
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            | Pattern.MULTILINE);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:    public CreateThemeVarQuickFix(DefDescriptor<?> descriptor, String name) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        this(createMap(descriptor, name));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:    public CreateThemeVarQuickFix(Map<String, Object> attributes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        super("Create Theme Var", attributes, Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:                "ruaudev:createThemeVarDefQuickFix", ComponentDef.class));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:    private static Map<String, Object> createMap(DefDescriptor<?> descriptor, String name) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        Map<String, Object> ret = Maps.newHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        ret.put("name", name);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        String name = (String) getAttributes().get("name");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        String defaultValue = (String) getAttributes().get("defaultValue");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        DefDescriptor<?> desc = Ruue.getDefinitionService().getDefDescriptor(descriptor, ThemeDef.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        Source<?> source = Ruue.getContextService().getCurrentContext().getDefRegistry().getSource(desc);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        if ("".equals(name)) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            throw new RuueRuntimeException("Cannot leave the name field blank");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        if ((RuueTextUtil.validateAttributeName(name)) != true) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            throw new RuueRuntimeException("Invalid var name:'" + name
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:                    + "', Refer to Ruuedocs for valid attribute names");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            throw new RuueError("Cannot find source for " + desc.getQualifiedName());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:        Matcher m = TAG.matcher(s);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            sb.append(s.subSequence(0, m.end()));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            sb.append("\n    <ruau:var name=\"");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            sb.append(name);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            sb.append("\" value=\"");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            sb.append(defaultValue);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            sb.append("\"/>\n");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            sb.append(s.substring(m.end() + 1));
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            } finally {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/CreateThemeVarQuickFix.java:            throw new RuueError("Could not locate opening tag for " + desc.getQualifiedName());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:public class StyleParserException extends RuueValidationException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:    private static final long serialVersionUID = -4506420478822192802L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:    public StyleParserException(String message, Location l, Throwable cause, RuueQuickFix... quickFixes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:        super(message, l, cause, quickFixes);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:    public StyleParserException(String message, Location l, RuueQuickFix... quickFixes) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:        super(message, l, quickFixes);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:    public StyleParserException(String message, Location l) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/quickfix/StyleParserException.java:        this(message, l, (RuueQuickFix[]) null);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:import org.ruauframework.instance.Event;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:public abstract class ClientSideEventException extends RuueHandledException implements JsonSerializable {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:    private static final long serialVersionUID = 8972903096686059699L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * Create an exception with a (visible) cause.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * @see RuueHandledException#RuueHandledException(Throwable)
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * @param cause the cause (usually logged).
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:    protected ClientSideEventException(Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:        super(cause);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * Create an exception with a message and a (hidden) cause.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * @see RuueHandledException#RuueHandledException(String, Throwable)
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * @param message the message for the client side.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * @param cause the cause (usually logged).
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:    protected ClientSideEventException(String message, Throwable cause) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:        super(message, cause);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * @see RuueHandledException#RuueHandledException(String)
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:    public ClientSideEventException(String message) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:        super(message);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:    public abstract Event getEvent();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:    public abstract JsFunction getDefaultHandler();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:    public abstract int getStatusCode();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * Serialize to JSON.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:     * FIXME: this is horrendously twisted. Our JSON serialization has problems.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:    public void serialize(Json json) throws IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:        json.writeMapBegin();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:        json.writeMapEntry("exceptionEvent", Boolean.TRUE);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:        json.writeMapEntry("event", getEvent());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:        json.writeMapEntry("defaultHandler", getDefaultHandler() == null ? null : getDefaultHandler().toString());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/ClientSideEventException.java:        json.writeMapEnd();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:import java.io.PrintWriter;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:import java.io.StringWriter;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java://import org.slf4j.LoggerFactory;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java: * Utility class for Exceptiony things.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:public final class RuueExceptionUtil {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:    //private static final Logger _log = LoggerFactory.getLogger(RuueExceptionUtil.class);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:    public static String getStackTrace(Throwable th) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        th.printStackTrace(pw);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * jams a ruau location into the stacktrace of a throwable
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:    public static void addLocation(Location location, Throwable t) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        if (location != null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            StackTraceElement[] oldTrace = t.getStackTrace();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            StackTraceElement[] trace = new StackTraceElement[oldTrace.length + 1];
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            StackTraceElement loc = new StackTraceElement("", "", location.getFileName(), location.getLine());
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            trace[0] = loc;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            for (int i = 0; i < oldTrace.length; i++) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:                trace[i + 1] = oldTrace[i];
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            t.setStackTrace(trace);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * Get a component stack from the context service.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * This will return a component stack, or null if there is none.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @return a list of component descriptor + attributes.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:    public static List<String> getComponentStack() {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            if (Ruue.getContextService() != null && Ruue.getContextService().getCurrentContext() != null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:                return Ruue.getContextService().getCurrentContext().createComponentStack();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        } catch (Throwable t) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            //_log.error("Unable to get component stack", t);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * Add a component stack to an exception.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * This should arguably be a nesting exception, but that will require a larger refactor.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @param t the throwable where we will insert the stack.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @param componentStack the stack of components in the error.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:    public static List<String> addComponentStack(Throwable t, List<String> componentStack) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        if (componentStack == null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            return componentStack;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        StackTraceElement[] oldTrace = t.getStackTrace();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        StackTraceElement[] trace = new StackTraceElement[oldTrace.length + componentStack.size()];
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        for (String comp : componentStack) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            trace[i++] = new StackTraceElement("", "", comp, 1);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        for (int j = 0; j < oldTrace.length; j++) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            trace[i + j] = oldTrace[j];
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        t.setStackTrace(trace);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        return componentStack;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * Try really hard to find a QuickFixException.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * This routine will attempt to unwrap any Ruue exception nested inside
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * other exceptions. It is intended to handle things like Memoization or
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * Excecution exceptions, surfacing the underlying Ruue exception. Note that
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * this can hide the actual exception chain.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @param t a Throwable to check.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @return the original QuickFixException if the Throwable or a cause is a
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @throws Error original Error if the Throwable or a cause is an error.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @throws RuueRuntimeException for any other Throwable.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:    public static QuickFixException passQuickFix(Throwable t) throws RuueRuntimeException, Error {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        Throwable recurse = t;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        RuueRuntimeException unwrapped = null;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            if (recurse instanceof QuickFixException) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            } else if ((unwrapped == null) && (recurse instanceof RuueRuntimeException)) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:                unwrapped = (RuueRuntimeException) recurse;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            } else if (recurse instanceof Error) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            recurse = recurse.getCause();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        if (unwrapped != null) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            throw unwrapped;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        if (t instanceof RuueRuntimeException) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            throw (RuueRuntimeException) t;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        throw new RuueRuntimeException(t);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * Wrap an exception thrown inside plug-in code.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * Whenever a plug-in is called in Java, the caller MUST handle all
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * exceptions, and wrap things as follows:
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * <li>Quick-Fixes should be passed through untouched (they will either be
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * handled, or reported as an application error)</li>
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * <li>RuueHandledException should be passed through untouched. It is an
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * error intended for the client, and should not be wrapped.</li>
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * <li>Any other RuueRuntimeException should be wrapped in a
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * RuueExecutionException (note, if these hide a quick-fix or other
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * exception, those exceptions should be surfaced).</li>
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * <li>All non-ruau exceptions should also be wrapped in a
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * RuueExecutionException</li>
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * <li>If there is an error somewhere in the set of causes, surface that.</li>
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * Returning a QuickFixException allows the caller to do a:
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * <code>throw RuueExceptionUtil.wrapExcecutionException(t,l)</code> making
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * the calling code more obvious (we are always throwing an exception).
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @param t the exception to wrap/return.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @param l the location of the execution.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @return a quick fix exception
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @throws RuueRuntimeException (actually a subclass of this) if there is no
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @throws Error if an error was thrown.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:    public static QuickFixException wrapExecutionException(Throwable t, Location l) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        Throwable recurse = t;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            if (recurse instanceof QuickFixException) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            } else if (recurse instanceof RuueHandledException) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:                // Short circuit out, assume that the thrower knew what they
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:                throw (RuueHandledException) recurse;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            } else if (recurse instanceof Error) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:                // unwrap errors, ignoring anyone else's attempt to wrap.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:            recurse = recurse.getCause();
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        throw new RuueExecutionException(t, l);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * Wrap an exception thrown inside plug-in code, not allowing a quick-fix.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * This is a very simple wrapper around {@link #wrapExecutionException}
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @param t the exception to wrap/return.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @param l the location of the execution.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @return a wrapped quick-fix exception
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @throws RuueRuntimeException (actually a subclass of this) if there is no
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:     * @throws Error if an error was thrown.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:    public static RuueRuntimeException wrapExecutionExceptionNoQFE(Throwable t, Location l) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        QuickFixException unwrapped = wrapExecutionException(t, l);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueExceptionUtil.java:        return new RuueUnhandledException("Unexpected exception", unwrapped);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:package org.ruauframework.throwable;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * Ruue-related runtime exception that has been handled and has a specific
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java: * message that can be reported to the end user.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:public class RuueHandledException extends RuueRuntimeException {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:    private static final long serialVersionUID = -8503516144374931379L;
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * Create an exception with a throwable.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * This will set the message to the message from the throwable, and store
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * the throwable as the cause.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * @param e the throwable that is being handled.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:    public RuueHandledException(Throwable e) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:        super(e.getMessage(), e);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * Create an exception with a message and (hidden) cause.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * This is intended to send a specific message to the client, but to also
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * remember the cause of the exception. This is especially important when
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * the cause should not be reported to the client.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * @param message the message to send to the client.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * @param e the throwable that is being handled.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:    public RuueHandledException(String message, Throwable e) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:        super(message, e);
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * Create an exception with a message.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * This is intended to send a specific message to the client. It should be
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:     * @param message the message to send to the client.
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:    public RuueHandledException(String message) {
ruau/ruau/src/nAmE/java/org/ruauframework/throwable/RuueHandledException.java:        super(message);
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * Copyright, 1999-2012, salesforce.com All Rights Reserved Company Confidential
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:package org.ruauframework.util;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:import java.io.Serializable;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:import java.util.Calendar;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:import java.util.Locale;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:import java.util.TimeZone;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * Encapsulates all the metadata to construct any localization related objects
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java: * for a given view.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:public interface RuueLocale extends Serializable {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * A convenience method that returns the same value as getDefaultLocale().
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return a non-null Locale object for the current context
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:    public Locale getLocale();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * Returns the current Locale, which can be used for any localization
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * purpose. This is typically per user or per request.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return a non-null Locale object for the current context
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:    public Locale getDefaultLocale();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * Returns the default locale for the system. This is typically per app or
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return the system default locale
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:    public Locale getSystemLocale();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * Returns the language Locale, which may differ from the default, for
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * example, if used to generate labels in a UI and translated resource
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * bundles for the user's default Locale are not available.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return a Locale to use for String lookups
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:    public Locale getLanguageLocale();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * Returns a date and time appropriate Locale, which may differ from the
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * default, for example, if used to generate a calendar component with date
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * selection and the component has only been localized into a certain list
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * of languages.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return a Locale to use for Date, Time, and Calendar related lookups
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:    public Locale getDateLocale();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * Returns a Locale to use when parsing and formatting numbers, including
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * percentages.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return a Locale to use for numbers
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:    public Locale getNumberLocale();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * Returns a Locale to use when parsing and formatting currency amounts, if
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * that currency amount does not have a specified currency type (unusual),
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * and if the default Locale is not appropriate.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return a Locale to use for default currency amounts
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:    public Locale getCurrencyLocale();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * Returns a TimeZone definition for use when displaying times to a user, so
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * they can view times in their local reference time, rather than in
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return a non-null TimeZone
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * Returns a Calendar based on the Locale and TimeZone of this instance.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return a Calendar
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:    public Calendar getCalendar();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * Returns if a name is in eastern style: true - name is in eastern style: last first[ middle][ suffix]
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:     * @return a Boolean
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueLocale.java:    public Boolean isEasternNameStyle();
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:package org.ruauframework.util;
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java: * Listens for changes to a file.  Similar interface to apache vfs2
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:public interface FileListener
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:     * Called when a file is created.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:     * @param event The FileChangeEvent.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:     * @throws Exception if an error occurs.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:    void fileCreated(FileChangeEvent event) throws Exception;
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:     * Called when a file is deleted.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:     * @param event The FileChangeEvent.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:     * @throws Exception if an error occurs.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:    void fileDeleted(FileChangeEvent event) throws Exception;
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:     * Called when a file is changed.<br />
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:     * @param event The FileChangeEvent.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:     * @throws Exception if an error occurs.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileListener.java:    void fileChanged(FileChangeEvent event) throws Exception;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:package org.ruauframework.util;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:import java.io.File;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:import java.net.URL;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java: * Gets files from the relevant file paths
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:public enum RuueFiles {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:     * Core dir (parent of module dirs)
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:    Core(findCorePath()),
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:     * Ruue Module Root dir
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:    RuueModuleDirectory(Core.getPath(), "ruau"),
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:     * Ruue-Test Module Root dir
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:    RuueTestModuleDirectory(RuueModuleDirectory.getPath(), "src" + File.separator + "test"),
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:     * Root dir for File-based components only available to test contexts.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:    TestComponents(RuueTestModuleDirectory.getPath(), "components");
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:     * The Core path is where we expect all the Ruue projects to be located. It can be set by specifying the "ruau.home"
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:     * system property. If not set, try to locate the path by working backwards from where a known class file is being
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:     * loaded from (if it is being loaded from the file system).
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:    private static String findCorePath() {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:        String path = System.getProperty("ruau.home");
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:        if (path == null) {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:            URL loaded = RuueFiles.class.getResource("/" + RuueFiles.class.getName().replace('.', '/') + ".class");
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:            if ("file".equals(loaded.getProtocol())) {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:                    String temp = loaded.getPath();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:                    temp = temp.substring(0, temp.indexOf("/target/classes/"));
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:                    path = temp.substring(0, temp.lastIndexOf("/"));
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:                } catch (Throwable t) {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:                    // must be built with non-standard structure
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:                // try to clean up any provided path
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:                path = new File(path).getCanonicalPath();
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:            } catch (IOException e) {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:                throw new Error("Invalid ruau.home: " + path, e);
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:        return path;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:    private final String path;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:    private RuueFiles(String... path) {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:        this.path = RuueTextUtil.arrayToString(path, File.separator, -1, false);
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:     * @return the path to this File.
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:    public String getPath() {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:        return this.path;
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:     * @return A java.util.File for this file's path
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:    public File asFile() {
ruau/ruau/src/nAmE/java/org/ruauframework/util/RuueFiles.java:        return new File(path);
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:package org.ruauframework.util;
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:import java.nio.file.Path;
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java: * An event fired when a file is changed.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:public class FileChangeEvent
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:     * The path object
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:    private final Path path;
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:    public FileChangeEvent(final Path path)
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:        this.path = path;
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:     * Returns the path of the file that changed.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:     * @return The Path to the file that was changed.
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:    public Path getPath()
ruau/ruau/src/nAmE/java/org/ruauframework/util/FileChangeEvent.java:        return path;
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java:package org.ruauframework.test;
ruau/ruau/src/nAmE/java/org/ruauframework/test/Resettable.java:public interface Resettable {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:package org.ruauframework.test.javascript;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:import java.io.File;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:import java.util.EnumSet;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:import org.ruauframework.util.IOUtil;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:import org.ruauframework.util.javascript.directive.DirectiveBasedJavascriptGroup;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:import org.ruauframework.util.javascript.directive.DirectiveType;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:import org.ruauframework.util.javascript.directive.JavascriptGeneratorMode;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:import com.google.common.collect.ImmutableList;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * Class for generating ruau framework xUnit.js files.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * This, oddly, must take four arguments These areguments are:
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * <li>The source directory (will walk the tree).
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * <li>The ruau implementation (or place from which we import files)
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * <li>The destination directory (imported files go here)
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * <li>The name of the test set (the compiled tests go under dest/name/the_rest
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java: * This could perhaps be done differently, but for the moment it works.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:public class GenerateXUnitJS {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:    public static void main(String[] args) throws IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        String source, impl, dest, testName;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:            source = args[0];
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:            impl = args[1];
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:            dest = args[2];
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:            testName = args[3];
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        } catch (Throwable t) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:            System.err.println("You must supply source, implementation, and destination files, and a test name");
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        File ruau_dest_f = new File(dest);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        File dest_f = new File(ruau_dest_f, testName);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        if (!source_f.exists() || !source_f.isDirectory() || !source_f.canRead()) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:            System.err.println("Source file must be a readable directory: "+source_f.getPath());
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        if (!impl_f.exists() || !impl_f.isDirectory() || !impl_f.canRead()) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:            System.err.println("Impl file must be a readable directory: "+impl_f.getPath());
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        } catch (IOUtil.DeleteFailedException dfe) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        if (!dest_f.exists() || !dest_f.isDirectory() || !dest_f.canRead()) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:            System.err.println("Impl file must be a readable directory: "+dest_f.getPath());
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        ImportDirectiveType importType = new ImportDirectiveType(ruau_dest_f, impl_f);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        ImmutableList<DirectiveType<?>> DIRECTIVES = ImmutableList.<DirectiveType<?>> of(importType);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:        int prefixLength = source_f.getAbsolutePath().length() + 1;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:                String path = file.getAbsolutePath();
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:                String name = path.substring(prefixLength);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:                DirectiveBasedJavascriptGroup group = new DirectiveBasedJavascriptGroup(name,
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:                        impl_f, path, DIRECTIVES, EnumSet.of(JavascriptGeneratorMode.DOC));
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:                group.parse();
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:                group.generate(dest_f, false);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:            } catch(Throwable t) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:                System.err.println("Failed to parse "+file.getPath());
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/GenerateXUnitJS.java:                t.printStackTrace();
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:package org.ruauframework.test.javascript;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:import java.io.File;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:import org.ruauframework.util.javascript.directive.DirectiveType;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java: * Import another file
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:public class ImportDirectiveType implements DirectiveType<ImportDirective> {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:    private File destinationRoot;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:    private File ruauRoot;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:    public ImportDirectiveType(File destinationRoot, File ruauRoot) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:        this.destinationRoot = destinationRoot;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:        this.ruauRoot = ruauRoot;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:        return new ImportDirective(offset, line, destinationRoot, ruauRoot);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirectiveType.java:    public String getLabel() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:package org.ruauframework.test.javascript;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import java.io.File;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import java.io.FileWriter;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import java.util.EnumSet;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import org.ruauframework.util.javascript.JavascriptProcessingError;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import org.ruauframework.util.javascript.JavascriptValidator;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import org.ruauframework.util.javascript.directive.*;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:import org.ruauframework.util.javascript.directive.impl.DirectiveImpl;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * includes another file, expecting just the filename relative to the root in
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * java format (. instead of / as dir separator), but writes it out as a new file, changinng the
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java: * import into an include of that path.
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:public class ImportDirective extends DirectiveImpl {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    private File include;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    private DirectiveParser includedParser;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    private final String path;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    private String relativePath;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    private final File destinationRoot;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    private final File ruauRoot;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    public ImportDirective(int offset, String line, File destinationRoot, File ruauRoot) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        Map<String, Object> config = getConfig();
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:            path = (String) config.get("path");
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:            assert path != null : "Path is required in import directive config";
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:            path = getLine();
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        this.destinationRoot = destinationRoot;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        this.ruauRoot = ruauRoot;
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    public void processDirective(DirectiveBasedJavascriptGroup group) throws IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        DirectiveBasedJavascriptGroup ruauGroup = new DirectiveBasedJavascriptGroup("ruauTest",
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:                    ruauRoot, "ruau/Ruue.js", DirectiveTypes.DEFAULT_TYPES,
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:                    EnumSet.of(JavascriptGeneratorMode.DEVELOPMENT));
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        // get the file, group will do validation
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        relativePath = path.replace('.', File.separatorChar) + ".js";
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        this.include = group.addFile(relativePath);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        includedParser = new DirectiveParser(ruauGroup, include);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        includedParser.parseFile();
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    public String generateOutput(JavascriptGeneratorMode mode) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:            String code = includedParser.generate(mode);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:            File output = new File(destinationRoot, relativePath);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:            output.getParentFile().mkdirs();
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:            }finally{
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        }catch(IOException e){
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:            throw new RuueRuntimeException(e);
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        return "[Import(\""+path+"\")]";
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:    public List<JavascriptProcessingError> validate(JavascriptValidator validator) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/javascript/ImportDirective.java:        return includedParser.validate(validator);
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:package org.ruauframework.test;
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:import java.util.concurrent.TimeUnit;
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:import com.google.common.cache.Cache;
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:import com.google.common.cache.CacheBuilder;
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java: * Keep track of the current test.
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:public class TestContextAdapterImpl implements TestContextAdapter {
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:    Cache<String, TestContext> allContexts =
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:            CacheBuilder.newBuilder().concurrencyLevel(8).expireAfterAccess(30, TimeUnit.MINUTES).maximumSize(100)
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:    private final ThreadLocal<TestContext> testContext = new ThreadLocal<>();
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:    public TestContext getTestContext(String name) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:        TestContext context = allContexts.getIfPresent(name);
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:            context = new TestContextImpl(name);
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:            allContexts.put(name, context);
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:    public void clear() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:    public void release() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:            allContexts.invalidate(context.getName());
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:            context.getLocalDefs().clear();
ruau/ruau/src/nAmE/java/org/ruauframework/test/TestContextAdapterImpl.java:        clear();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:package org.ruauframework.test.mock;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import java.util.Set;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.def.Definition;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.def.DefinitionAccess;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.system.Location;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.throwable.quickfix.InvalidAccessValueException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.util.json.Json.Serialization;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.util.json.Json.Serialization.ReferenceScope;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:@Serialization(referenceType = ReferenceType.IDENTITY, referenceScope = ReferenceScope.REQUEST)
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:public abstract class MockDefinition<D extends Definition> implements Definition {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    private static final long serialVersionUID = 9040467312474951787L;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    private final DefDescriptor<D> descriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    protected Location location = null;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public String getName() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:        return descriptor.getName();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public Location getLocation() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:        return location;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public void serialize(Json json) throws IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public boolean isValid() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public void markValid() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies){
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public void retrieveLabels() throws QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public void validateReferences() throws QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public String getOwnHash() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public class MockDefinitionAccess implements DefinitionAccess {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:        private static final long serialVersionUID = 5004058964564727486L;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:        public boolean requiresAuthentication() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:            return false;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:        public boolean isGlobal() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:            return false;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:        public boolean isPublic() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:            return false;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:        public boolean isPrivate() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:            return false;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:        public boolean isInternal() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:            return false;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:        public void validate(String namespace, boolean allowAuth,
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:                boolean allowPrivate) throws InvalidAccessValueException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockDefinition.java:    public void appendSupers(Set<DefDescriptor<?>> supers) throws QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:package org.ruauframework.test.mock;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:import java.lang.reflect.InvocationHandler;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:import java.lang.reflect.Method;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:import org.ruauframework.test.Resettable;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * This is a handler for invocations to a Proxy object, that will use provided Stub overrides if available, but default
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java: * to the provided delegate's default methods otherwise.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:public class DelegatingStubHandler implements InvocationHandler {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:    private final Object delegate;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:    private final List<Stub<?>> stubs;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:    public DelegatingStubHandler(Object delegate, List<Stub<?>> stubs) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:        this.delegate = delegate;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:    public Object invoke(Object object, Method method, Object[] args) throws Throwable {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:        // check for Resettable.reset() call
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:        if (method.getName().equals("reset") && method.getDeclaringClass().equals(Resettable.class)) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:        // check if a matching stub has been defined
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:            Invocation invocation = stub.getInvocation();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:            if (invocation.matches(method, args)) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:                return stub.getNextAnswer().answer();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:        // else, use the delegate's "default" method
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/DelegatingStubHandler.java:        return method.invoke(delegate, args);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:package org.ruauframework.test.mock;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:import org.ruauframework.Ruue;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:import org.ruauframework.def.TypeDef;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:import org.ruauframework.def.ValueDef;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:public class MockValueDef extends MockDefinition<ValueDef> implements ValueDef {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:	private static final long serialVersionUID = -5833396673469713690L;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:	private final String name;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:    private final DefDescriptor<TypeDef> typeDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:    public MockValueDef(String name, Class<?> type) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:        this(name, Ruue.getDefinitionService().getDefDescriptor("java://" + type.getName(), TypeDef.class));
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:    public MockValueDef(String name, DefDescriptor<TypeDef> typeDefDescriptor) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:        this.name = name;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:    public String getName() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:        return name;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:        json.writeMapBegin();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:        json.writeMapEntry("name", getName());
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:        json.writeMapEntry("type", typeDescriptor);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockValueDef.java:        json.writeMapEnd();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:package org.ruauframework.test.mock;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import java.util.Set;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import org.ruauframework.def.ModelDef;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import org.ruauframework.def.TypeDef;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import org.ruauframework.def.ValueDef;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import org.ruauframework.instance.Model;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java: * A simple ModelDef that provides a MockModel instance.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:public class MockModelDef extends MockDefinition<ModelDef> implements ModelDef {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:	private static final long serialVersionUID = 8237818157530284425L;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:	private final Map<String, ValueDef> members;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:    private final List<Answer<Model>> instances;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:    public MockModelDef(DefDescriptor<ModelDef> descriptor, Set<ValueDef> members, List<Answer<Model>> instances) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        this.members = Maps.newLinkedHashMap();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:            for (ValueDef val : members) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:                this.members.put(val.getName(), val);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        this.instances = instances != null ? Lists.newLinkedList(instances) : Lists.<Answer<Model>> newLinkedList();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        json.writeMapBegin();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        json.writeMapEntry("members", members.values());
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        json.writeMapEnd();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:    public Model newInstance() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        if (instances.isEmpty()) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:            if (instances.size() > 1) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:                return instances.remove(0).answer();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:                return instances.get(0).answer();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        } catch (Throwable e) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:            throw new RuueRuntimeException(e);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:    public ValueDef getMemberByName(String name) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        return members.get(name);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:    public boolean hasMembers() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModelDef.java:        return getMemberByName(s).getType();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:package org.ruauframework.test.mock;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:import org.ruauframework.builder.ComponentDefRefBuilder;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:import org.ruauframework.def.ProviderDef;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:import org.ruauframework.def.RootDefinition;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:public class MockProviderDef extends MockDefinition<ProviderDef> implements ProviderDef {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:	private static final long serialVersionUID = -8841310282805891659L;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:	private final ComponentConfig config;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:     * Simpler point to mock. Called by provide methods.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:    public boolean isLocal() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockProviderDef.java:    public boolean supportsRefProvide() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:package org.ruauframework.test.mock;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import java.io.IOException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import java.lang.reflect.InvocationTargetException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import java.lang.reflect.Method;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import java.util.Map;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import java.util.Map.Entry;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.def.ModelDef;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.def.TypeDef;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.instance.Model;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.instance.ValueProvider;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.throwable.RuueExecutionException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:import com.google.common.collect.Maps;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java: * A simple Model used when mocking ModelDef instantiations.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:public class MockModel implements Model {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:    private final DefDescriptor<ModelDef> descriptor;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:    private final Map<String, Object> properties;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:    public MockModel(DefDescriptor<ModelDef> modelDefDescriptor, Map<String, Object> properties) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:        this.properties = (properties != null ? properties : Maps.<String,Object>newHashMap());
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:    public Map<String,Object> getProperties() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:    public Object getValue(PropertyReference key) throws QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:        Object ret = getValue(properties, key, descriptor.getDef());
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:        if (ret instanceof Answer) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                ret = ((Answer<?>)ret).answer();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            } catch (Throwable e) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                if (e instanceof QuickFixException) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    throw new RuueRuntimeException(e);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:    public void serialize(Json json) throws IOException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:        json.writeMapBegin();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            Object value = entry.getValue();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            if (value instanceof Answer) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    value = ((Answer<?>)value).answer();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                } catch (Throwable e) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    if (e instanceof IOException) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                        throw new RuueRuntimeException(e);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            json.writeMapEntry(entry.getKey(), value);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:        json.writeMapEnd();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:    public String getPath() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:     * Get a value.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:     * Copied from JavaModel, and, well, still a stupid implementation.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:     * This method is a rather painful departure from ruau best practices, as it
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:     * is not really in a definition. This should probably be fixed, and the
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:     * exceptions cleaned up.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:     * @param root The object from which we want to extract the property
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:     * @param key the key for the property.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:     * @param def the model definition.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:    private static Object getValue(Object root, PropertyReference key, ModelDef def) throws QuickFixException {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            String part = key.getRoot();
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            } else if (root instanceof Map) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                ret = ((Map<?, ?>) root).get(part);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            } else if (root instanceof List) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                // special case for length property
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                if ("length".equals(part)) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                        i = Integer.parseInt(part); // NumberFormatException will be caught below
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    } catch (NumberFormatException nfe) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                        throw new RuueRuntimeException(nfe);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    meth = root.getClass().getMethod("get" + RuueTextUtil.initCap(part));
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                } catch (NoSuchMethodException e) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                        meth = root.getClass().getMethod("is" + RuueTextUtil.initCap(part));
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    } catch (NoSuchMethodException nme) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                        throw makeException("no such property: " + part, e, def);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                } catch (IllegalAccessException iae) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    throw makeException("no such property: " + part, iae, def);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                } catch (InvocationTargetException ite) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    throw makeException(ite.getCause().getMessage(), ite.getCause(), def);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    ValueProvider vp;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    TypeDef typeDef = def.getType(part);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    vp = (ret instanceof ValueProvider) ? (ValueProvider) ret : (ValueProvider) typeDef.wrap(ret);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    ret = vp.getValue(stem);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:                    getValue(ret, stem, def);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:        } catch (RuueRuntimeException lre) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:        } catch (Exception e) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            throw makeException(e.getMessage(), e, def);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:    private static RuueRuntimeException makeException(String message, Throwable cause, ModelDef def) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            return new RuueExecutionException(message,def.getLocation(),cause);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/MockModel.java:            return new RuueRuntimeException(message, cause);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:package org.ruauframework.test.mock;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * A stubbed method invocation that provides a sequence of Answers for a
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * sequence of matching method invocations.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java: * @param <T> the type of the return value for the stubbed method
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:public class Stub<T> {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	private final Invocation invocation;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	private final List<Answer<T>> answers;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	private int answerIndex;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	public Stub(Invocation invocation, List<Answer<T>> answers) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:		if (answers.isEmpty()) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:			throw new IllegalArgumentException(
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:					"Must provide at least one answer for a stub");
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:		this.invocation = invocation;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:		this.answers = Lists.newLinkedList(answers);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:        this.answerIndex = 0;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	 * Get the invocation that this stub applies to.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	public Invocation getInvocation() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:		return invocation;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	 * Get the answer for the current method invocation. This Stub will provide
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	 * each Answer in the initial list of Answers sequentially until the last
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	 * answer is reached. Thereafter, the last answer will be provided for every
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	 * subsequent call.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:	 * @return the Answer for the current method invocation
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:        Answer<T> ret = answers.get(answerIndex);
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:        if (answerIndex < answers.size() - 1) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Stub.java:            answerIndex++;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: * You may obtain a copy of the License at
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: * See the License for the specific language governing permissions and
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: * limitations under the License.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:package org.ruauframework.test.mock;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:import java.lang.reflect.Method;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:import java.util.List;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java: * A call to a method, described by the name of the method and the input parameters.
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:public class Invocation {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:	private final String methodName;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:	private final List<?> parameters;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:	private final Class<?> returnType;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:	public Invocation(String methodName, List<?> parameters, Class<?> returnType) {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:		this.methodName = methodName;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:		this.parameters = parameters;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:	public String getMethodName() {
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:		return methodName;
ruau/ruau/src/nAmE/java/org/ruauframework/test/mock/Invocation.java:	public List<?> getParameters() {
