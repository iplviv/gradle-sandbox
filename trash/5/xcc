ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:	private static <T> MultiConverter<T> getMultiConverter(Class<?> from, Class<T> to) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:        Map<String, MultiConverter<?>> map = typeUtil.multiConverters.get(from.getName());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:        if (map != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:            return (MultiConverter<T>)map.get(to.getName());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:    public static boolean hasConverter(Class<?> from, Class<?> to, String of) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:    public static class ConversionException extends RuntimeException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:        private static final long serialVersionUID = 297189337708675095L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:    private static class ConverterInitError<F, T> implements Converter<F, T> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:        private final String error;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:        private ConverterInitError(String error) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:        public T convert(F value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:        public Class<F> getFrom() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:        public Class<T> getTo() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:        public Class<?>[] getToParameters() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:    private static class MultiConverterInitError implements MultiConverter<Object> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:    	 private final String error;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:         private MultiConverterInitError(String error) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:		public Object convert(Class<? extends Object> toClass, Object fromValue) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:		public Class<?> getFrom() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/type/TypeUtil.java:		public Set<Class<?>> getTo() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java:public class JsonHandlerProviderImpl implements JsonHandlerProvider {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java:    public JsonHandlerProvider getObjectEntryHandlerProvider(String key) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java:    public JsonHandlerProvider getArrayEntryHandlerProvider() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java:    public JsonObjectHandler getObjectHandler() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java:        return new JsonObjectHandler();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java:    public JsonArrayHandler getArrayHandler() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProviderImpl.java:        return new JsonArrayHandler();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.ARRAY;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.ARRAY_END;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.ARRAY_START;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.BINARY_STREAM;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.BOOLEAN;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.COMMENT_DELIM;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.ENTRY_SEPARATOR;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.FUNCTION;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.FUNCTION_ARGS_END;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.FUNCTION_ARGS_START;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.FUNCTION_BODY;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.LITERAL;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.LITERAL_START;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.MULTICOMMENT_DELIM;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.NULL;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.NUMBER;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.OBJECT;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.OBJECT_END;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.OBJECT_SEPARATOR;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.OBJECT_START;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.STRING;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import static org.ruauframework.util.json.JsonConstant.WHITESPACE;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.io.DataInputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.io.InputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.io.PushbackReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.io.Reader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.io.StringReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.math.BigDecimal;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.util.ArrayDeque;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import java.util.Map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import org.ruauframework.util.LimitedLengthInputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import org.ruauframework.util.LimitedLengthInputStream.StreamFinishedListener;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import org.ruauframework.util.Utf8InputStreamReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import org.ruauframework.util.json.JsonHandler.JsonValidationException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import com.google.common.collect.Maps;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:import edu.umd.cs.findbugs.annotations.NonNull;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * Reads a stream of json-formatted objects. Call next() to parse the next thing
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * in the stream, Then call getValue() to get it.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * This parser handles everything that is specified in the json spec on
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * It handles a few extra things that are not supported in the spec. These are:<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * -Strings can be quoted with ' or "  (spec says only ")<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * -Keys in maps/objects can be unquoted (spec says they must be quoted)<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * e.g. foo : 'bar' or 'foo' : 'bar' or "foo" : "bar" are all acceptable.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * -Supports a few escape sequences that the spec doesn't mention : \', \0, \v<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * -Javascript functions can be values in maps or arrays. These are only
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * supported when they are in the format of function(arg1,arg2){}. Named
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * functions are not supported, as in json the names are supplied as the key in
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * a map instead. functions will be returned as lib.json.JsonFunction objects.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * -Binary streams in Salesforce.com's JSON+binary format are supported, which
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * uses the backtick character as a delimiter and the format:<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * `[length of data in bytes as a 64-bit big-endian binary number][raw binary
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * data]`<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * This is enabled only when a JsonStreamReader is constructed using an
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * InputStream.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * default json->java mappings:<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * json object(map) ==> java.util.HashMap<String, Object><br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * json String ==> java.lang.String<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * json Number ==> java.math.BigDecimal<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * json boolean ==> boolean<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * json array ==> java.util.ArrayList&lt;Object&gt;<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * json binary ==> java.io.InputStream<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * If you want to provide your own mappings (rather than those above), you can
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * pass in your own implementation of JsonHandlerProvider, and then your
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * JsonHandlers will be used. This allows you to skip the intermediate step of
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * parsing into Maps and Lists, and lets you put the primitives directly into
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java: * your objects as they are parsed.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:public class JsonStreamReader {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private static final int MAX_LENGTH = 1000000;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private static JsonHandlerProvider defaultProvider = new JsonHandlerProviderImpl();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private static Map<Character, Character> escapes = Maps.newHashMapWithExpectedSize(13);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    static {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('"', '"');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('\\', '\\');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('/', '/');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('b', '\b');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('f', '\f');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('n', '\n');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('r', '\r');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('t', '\t');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('\'', '\'');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('0', '\0');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        escapes.put('v', '\u000B');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private final PushbackReader reader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private JsonConstant currentToken;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private Object current;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private int charNum = 0;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private int colNum = 1; // current parse column number
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private int prevColNum = 0; // max colNum of previously parsed line
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private int lineNum = 1; // current parse line number (start at 1)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private int lastLineNum = 0;        // the line number before the last token.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private int lastColNum = 0;         // the column number before the last token.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private JsonHandlerProvider provider;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private final DataInputStream binaryInput;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private boolean recursiveRead = true;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private boolean lengthLimitsEnabled = true;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public JsonStreamReader(Reader reader, JsonHandlerProvider provider) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        this(reader, null, provider);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private JsonStreamReader(Reader reader, InputStream binaryInput, JsonHandlerProvider provider) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        if (reader == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonParseException("Reader cannot be null");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        this.reader = new PushbackReader(reader, 2);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        this.binaryInput = binaryInput == null ? null
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                : (binaryInput instanceof DataInputStream ? (DataInputStream) binaryInput : new DataInputStream(
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        binaryInput));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public JsonStreamReader(String string, JsonHandlerProvider provider) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        this(createStringReader(string), null, provider);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Creates a JSON stream reader that also understands our proprietary JSON
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * binary stream format, which is `[length of data in bytes as a 64-bit
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * big-endian binary number][raw binary data]`<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * <b>REALLY BIG WARNING:</b> This class <b>DOES NOT</b> enforce an overall
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * limit on the incoming stream when this constructor is used and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * {@link #disableLengthLimitsBecauseIAmStreamingAndMyMemoryUseIsNotProportionalToTheStreamLength()}
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * is also called. <b>DO NOT</b> hold onto all the objects that you collect
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * from this class if you call that method, or else <b>YOU COULD BRING DOWN
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * combination of this constructor and that method is meant <b>ONLY</b> for
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * streaming use cases where you don't hold onto objects returned from this
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * class for long at all, and the amount of memory that you use <b>IS
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * NOT</b> proportional to the length of the stream. That is, <b>YOUR
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * incoming stream size.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Note that JSON+binary is not supported if the Reader or String based
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * constructors are used to construct this class.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * When JsonStreamReader is constructed with an InputStream, arrays and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * objects are not read in for you by default. Instead, it is up to the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * calling code to loop through the array and object start/separator/end
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * tokens via next(). But if you want to change that, you can call
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * {@link #setRecursiveReadEnabled(boolean)} to enable recursive reads,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * though binary stream data does not get saved. Note that if you call
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * {@link #getObject()} or {@link #getList()}, you will get the Map or List
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * back regardless of the recursiveRead property. When recursiveRead is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * false, calls to {@link #getObject()} or {@link #getList()} cause that
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * object or array to get fully consumed to satisfy the request.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Note that the JSON string is assumed to be UTF-8 when JsonStreamReader is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * constructed with an InputStream.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * @param binaryInput The raw InputStream to read from
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public JsonStreamReader(InputStream binaryInput) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        this(new Utf8InputStreamReader(binaryInput), binaryInput, null);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        this.recursiveRead = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * See the warning in {@link #JsonStreamReader(InputStream)}. <b>NEVER</b>,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * under <b>ANY CIRCUMSTANCE</b>, are you to call this <i>unless</i> if the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * way that you are using this class causes only O(1) memory to be used with
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * respect to the input stream length. Otherwise, <b>DO NOT CALL THIS
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public void disableLengthLimitsBecauseIAmStreamingAndMyMemoryUseIsNotProportionalToTheStreamLength() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        lengthLimitsEnabled = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private static StringReader createStringReader(String string) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonParseException("String cannot be null");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return new StringReader(string);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public JsonStreamReader(Reader reader) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        this(reader, null, null);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public JsonStreamReader(String string) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public Object getValue() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Returns the current JSON object as a Map&lt;String,Object&gt;<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Note that if you have recursive reading disabled (see
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * {@link #isRecursiveReadEnabled()}), then calling this method will cause a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * recursive read to occur on the current object if the current position is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * at the beginning of an object.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * @throws JsonStreamParseException Thrown if the current JSON token is not
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *             OBJECT or, for when recursive reading is disabled,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *             OBJECT_START. When recursive reading is disabled, this
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *             exception can also get thrown if a problem arises while
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *             consuming the object within the input stream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public Map<String, Object> getObject() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // If recursive reading is off and we are at an object start, then go
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // ahead and read in the object recursively
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        if (!recursiveRead && currentToken == OBJECT_START) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            recursiveRead = true;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                current = readObject();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            } catch (IOException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            } catch (JsonEndOfStreamException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            } finally {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                recursiveRead = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertCurrentToken(OBJECT);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return (Map<String, Object>) current;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Returns the current JSON array as a List&lt;Object&gt;<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Note that if you have recursive reading disabled (see
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * {@link #isRecursiveReadEnabled()}), then calling this method will cause a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * recursive read to occur on the current array if the current position is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * at the beginning of an array.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * @throws JsonStreamParseException Thrown if the current JSON token is not
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *             ARRAY or, for when recursive reading is disabled,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *             ARRAY_START. When recursive reading is disabled, this
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *             exception can also get thrown if a problem arises while
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *             consuming the array within the input stream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // If recursive reading is off and we are at an array start, then go
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // ahead and read in the object recursively
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        if (!recursiveRead && currentToken == ARRAY_START) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            recursiveRead = true;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                current = readArray();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            } catch (IOException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            } finally {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                recursiveRead = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertCurrentToken(ARRAY);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public BigDecimal getNumber() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertCurrentToken(NUMBER);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return (BigDecimal) current;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertCurrentToken(STRING);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public boolean getBoolean() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertCurrentToken(BOOLEAN);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return (Boolean) current;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Returns the current binary input stream as an InputStream. Note that this
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * should be called only by code that has constructed this JsonStreamReader
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * using {@link #JsonStreamReader(InputStream)}. It will always throw a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * JsonStreamParseException if this JsonStreamReader was constructed any
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * other way.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public InputStream getBinaryStream() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertCurrentToken(BINARY_STREAM);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return (InputStream) current;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Returns the number of bytes in the binary stream value. Note that this
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * will always throw a JsonStreamParseException if this JsonStreamReader was
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * not constructed using {@link #JsonStreamReader(InputStream)}.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public long getBinaryStreamLength() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertCurrentToken(BINARY_STREAM);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return ((LimitedLengthInputStream) current).getLength();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public int getCharNum() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return charNum;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public boolean hasNext() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        Character c = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            ignoreWhitespace();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            unreadChar(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } catch (Exception e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // We may have hit the end of the stream, which in most cases is a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // bad thing -- except this case.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public JsonConstant next() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } catch (JsonEndOfStreamException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonParseException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Note that hint here has 3 useful values:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *   <li>FUNCTION_BODY: treat an object as a function body.</li>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *   <li>STRING: treat most literals as strings (really only for map keys)</li>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *   <li>LITERAL: look for a proper literal (identifier)</li>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * @param hint a hint as to what we want.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private JsonConstant next(JsonConstant hint) throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // If we have a binary stream, then ensure that it is closed first.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // Closing it consumes it if it hasn't been
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        if (currentToken == BINARY_STREAM && current instanceof InputStream) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            ((InputStream) current).close();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // Skip through all whitespace and comments
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            readWhitespaceAndComments();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } catch (JsonEndOfStreamException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        markPosition(0);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        int startLine = getLineNum();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        int startCol = getColNum();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // Read and dispatch the next character
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        char c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonConstant token = JsonConstant.valueOf(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case OBJECT_START:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                current = readFunctionBody();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // Don't fully read the object if recursion is off
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            else if (recursiveRead) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                current = readObject();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case ARRAY_START:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // Don't fully read the array if recursion is off
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            if (recursiveRead) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                current = readArray();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case ENTRY_SEPARATOR:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case COMMENT_DELIM:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            current = readComment();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case MULTICOMMENT_DELIM:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException("Illegal '*' token");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case LITERAL_START:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            unreadChar(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            if (hint == STRING || Character.isJavaIdentifierStart(c)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                String result = readLiteralString();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                // FIXME: we should probably check for more key words here.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                if (result.equals("true")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    current = Boolean.TRUE;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                } else if (result.equals("false")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    current = Boolean.FALSE;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                } else if (result.equals("function")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    current = readFunction();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                } else if (result.equals("null")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                } else if (result.equals("class")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    throw new JsonStreamParseException("Reserved word used as a literal", result);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                } else if (result.equals("Infinity")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                } else if (result.equals("NaN")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    current = Double.NaN;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        // Guaranteed to fail.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        assertTokenType(STRING, token);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    throw new JsonStreamParseException("Invalid literal value", result);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                current = readNumber();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case FUNCTION_ARGS_START:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case FUNCTION_ARGS_END:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case QUOTE_SINGLE:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case QUOTE_DOUBLE:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            current = readString(token, false);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        case BINARY_STREAM: {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            if (binaryInput != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                current = new LimitedLengthInputStream(binaryInput, binaryInput.readLong(), BINARY_STREAM_FINISHED_LISTENER);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException(
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        "Binary data encountered in a JsonStreamReader that was not constructed to support binary data");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        default:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        setPosition(startLine, startCol);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private static final BinaryStreamFinishedListener BINARY_STREAM_FINISHED_LISTENER = new BinaryStreamFinishedListener();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Stream-finished listener that consumes the backtick character that is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * supposed to appear immediately after the end of the JSON binary stream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private static class BinaryStreamFinishedListener implements StreamFinishedListener {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public void streamFinished(InputStream wrappedStream) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // Read the next byte. It must be a ` char
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            int nextByte = wrappedStream.read();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new IllegalStateException(
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        "backtick character not encountered at the end of the JSON binary stream");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Returns whether or not recursive reads of objects and arrays are enabled.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Note that when this is false, which is the default only when this
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * JsonStreamReader is created with {@link #JsonStreamReader(InputStream)},
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * then reading an object will set the state to OBJECT_START and an array to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * ARRAY_START instead of OBJECT and ARRAY, respectively. It is then the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * responsibility of the caller to iterate through the JSON tokens within
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * that object or array with {@link #next()}.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * When this is true, reading an array or an object will consume that entire
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * array or object and return the current token as ARRAY or OBJECT,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public boolean isRecursiveReadEnabled() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return this.recursiveRead;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Enables or disables recursive reads of objects and arrays when true or
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * disables that when false.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Note that when this is false, which is the default only when this
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * JsonStreamReader is created with {@link #JsonStreamReader(InputStream)},
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * then reading an object will set the state to OBJECT_START and an array to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * ARRAY_START instead of OBJECT and ARRAY, respectively. It is then the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * responsibility of the caller to iterate through the JSON tokens within
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * that object or array with {@link #next()}.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * When this is true, reading an array or an object will consume that entire
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * array or object and return the current token as ARRAY or OBJECT,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public void setRecursiveReadEnabled(boolean recursiveRead) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        this.recursiveRead = recursiveRead;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private void readWhitespaceAndComments() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        char c;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } while (Character.isWhitespace(c));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        if (JsonConstant.valueOf(c) == COMMENT_DELIM) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // Peek one more to see if this is a comment or not.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            unreadChar(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            if (JsonConstant.valueOf(c) == COMMENT_DELIM || JsonConstant.valueOf(c) == MULTICOMMENT_DELIM) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                current = readComment();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                readWhitespaceAndComments();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                // Just a slash token, not a comment: restore the slash
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                unreadChar(COMMENT_DELIM.getToken());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // We always read one char too many, so step back one.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            unreadChar(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private void ignoreWhitespace() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        char c;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } while (Character.isWhitespace(c));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        unreadChar(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private Object readObject() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonHandlerProvider provider = getHandlerProvider();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonObjectHandler handler = provider.getObjectHandler();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonConstant token;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // Hint 'string' so that we parse numbers as strings, this is a little odd, but not unreasonable.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            } catch (JsonStreamParseException jspe) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException("Expected ':'", jspe.orig, jspe.line, jspe.col);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            assertTokenType(OBJECT_SEPARATOR, token);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // value
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            setHandlerProvider(provider.getObjectEntryHandlerProvider(key));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                handler.put(key, current);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            } catch (JsonValidationException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            setHandlerProvider(provider);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // comma
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            token = readComma(OBJECT_END);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertTokenType(OBJECT_END, token);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return handler.getValue();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private void setHandlerProvider(JsonHandlerProvider provider) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private JsonHandlerProvider getHandlerProvider() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            return defaultProvider;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private Object readArray() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonHandlerProvider provider = getHandlerProvider();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonArrayHandler handler = provider.getArrayHandler();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonConstant token;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        setHandlerProvider(provider.getArrayEntryHandlerProvider());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                // whoops. unterminated array.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException(String.format("Unterminated array at %d:%d", getLineNum(), getColNum()),
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // Any value
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                handler.add(current);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            } catch (JsonValidationException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException(e.getMessage(), String.valueOf(current), getLineNum(), getColNum(), e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // comma
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            token = readComma(ARRAY_END);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        setHandlerProvider(provider);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertTokenType(ARRAY_END, token);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return handler.getValue();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private JsonConstant readComma(@NonNull JsonConstant alternate) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonConstant token;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } catch (JsonStreamParseException jspe) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // Ignore this, we were expecting a comma, so let someone know.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException(String.format("Expected ',' or '%s'", alternate.getRepresentation()),
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        if (token != ENTRY_SEPARATOR && token != alternate) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException(String.format("Expected ',' or '%s', got %s", alternate.getRepresentation(),
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    token.toString()), String.valueOf(current), getLineNum(), getColNum());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private String readString(JsonConstant delim, boolean keepEscapers) throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        boolean isEscaped = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        markPosition(1);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                char c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    if (!isEscaped) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        // We consume the delimiter and call it a day.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                if (!isEscaped && c == '\n') {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    throw new JsonStreamParseException("Unterminated string", sb.toString(), getLineNum(), getColNum());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                // A backslash might togle isEscaped; anything else clears it.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    if (keepEscapers) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        isEscaped = !isEscaped;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        c = readEscapedChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    isEscaped = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                sb.append(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } catch (JsonEndOfStreamException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException("Unterminated string", sb.toString(), getLineNum(), getColNum());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * This method consumes what we expect to be a comment. It should be called
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * after consuming the '/' character, but before either the second '/' or
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * the '*'. If the next character read is <i>not</i> one of those two (i.e.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * this is not a comment), it will throw a {@link JsonStreamParseException}.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * @return a {@link JsComment} with the comment text and location
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * @throws JsonEndOfStreamException if there is no next character
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * @throws JsonStreamParseException if the input does not begin with a valid
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     *             comment, or if a multi-line comment is not closed.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private JsComment readComment() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        markPosition(0);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        char delim = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        boolean isMulti = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            isMulti = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException(String.format("Current Token is %s, not %s", delim, MULTICOMMENT_DELIM));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        char c;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    char c2 = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        unreadChar(c2);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                sb.append(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } catch (JsonEndOfStreamException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                // We finished the stream before reaching end-of-comment!
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException("Unclosed comment");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private JsFunction readFunction() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // We hint 'literal' to let the parser know that arbitrary literals are ok.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonConstant next = next(LITERAL);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        String functionName = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            functionName = (String) current;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertTokenType(FUNCTION_ARGS_START, next);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        List<String> args = Lists.newArrayList();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonConstant token;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                if (args.size() != 0) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    throw new JsonStreamParseException("Unexpected comma before ')'");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // Literal Strings only
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            assertTokenType(STRING, token);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            args.add((String) current);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // comma
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            token = readComma(FUNCTION_ARGS_END);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertTokenType(FUNCTION_ARGS_END, token);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        assertTokenType(JsonConstant.FUNCTION_BODY, next(FUNCTION_BODY));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return new JsFunction(functionName, args, (String) current, line, col);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private String readFunctionBody() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // We have to have a bit of a stack in order to find the end of function
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        ArrayDeque<JsonConstant> stack = new ArrayDeque<JsonConstant>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        char c;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        JsonConstant token;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            token = JsonConstant.valueOf(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            case OBJECT_START:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                stack.push(token);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            case OBJECT_END:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                if (stack.isEmpty()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    break LOOP;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    JsonConstant peek = stack.peek();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                        stack.pop();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            case QUOTE_DOUBLE:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            case QUOTE_SINGLE:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                sb.append(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                sb.append(readString(token, true));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            case COMMENT_DELIM:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                char delim = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                unreadChar(delim);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    readComment();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            default:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            sb.append(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private Number readNumber() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        while (hasNext()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            char c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            JsonConstant token = JsonConstant.valueOf(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            if ((!token.equals(LITERAL_START))) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                unreadChar(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                sb.append(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        BigDecimal ret;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            if (s.equals("NaN")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                return Double.NaN;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                boolean negative = s.charAt(0) == '-';
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                if ("Infinity".equals(negative ? s.substring(1) : s)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    return negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            ret = new BigDecimal(sb.toString());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } catch (NumberFormatException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException("Could not parse a number", sb.toString(), getLineNum(), getColNum(), e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Literal Strings can only be used as keys in maps, so the entry separator
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * and whitespace chars are treated as the delimiters.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private String readLiteralString() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                char c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                JsonConstant token = JsonConstant.valueOf(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    unreadChar(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    c = readEscapedChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                sb.append(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } catch (JsonEndOfStreamException eof) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            // ignore, just return what we have.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private char readChar() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        int i = reader.read();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonEndOfStreamException("End of stream unexpectedly reached.");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        charNum++;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // If we have a binary input stream and if length limits were disabled,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // then don't validate the length because
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // we are streaming in, and memory use is supposed to be O(1) with
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // respect to the stream length by callers
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // that are using streaming
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        if (charNum > MAX_LENGTH && lengthLimitsEnabled) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException("Input too long.");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        char c = (char) i;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private void unreadChar(char c) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        reader.unread(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        charNum--;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private char readEscapedChar() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        char c = readChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            c = readUnicodeEscapedChar();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            Character esc = escapes.get(c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                throw new JsonStreamParseException(String.format("Unknown escape sequence : \\%c", c));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private char readUnicodeEscapedChar() throws IOException, JsonEndOfStreamException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        // Read the next 4 hex digits.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            sb.append(readChar());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        char c;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            c = (char) Integer.parseInt(sb.toString(), 16);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        } catch (NumberFormatException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException(e.getMessage(), sb.toString(), line, col, e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        reader.close();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private void assertTokenType(JsonConstant expected, JsonConstant actual) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        if (expected != actual) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException(String.format("Expected '%s', found '%s'", expected.getRepresentation(), actual.getRepresentation()));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private void assertCurrentToken(JsonConstant expected) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            throw new JsonStreamParseException(String.format("Current Token is '%s', not '%s'", currentToken.getRepresentation(), expected.getRepresentation()));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private void setPosition(int line, int col) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        lastLineNum = line;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        lastColNum = col;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private void markPosition(int offset) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        lastLineNum = lineNum;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        lastColNum = colNum-offset;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return lastLineNum;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private int getColNum() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        return lastColNum;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Runtime exception used to indicate improperly formatted json input. All
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * messages will be decorated with the line and column numbers of the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * current position in the reader.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public class JsonStreamParseException extends JsonParseException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        private static final long serialVersionUID = -455507772693955451L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public final int line;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public final int col;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public final String orig;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonStreamParseException(String msg, String orig, int line, int col, Throwable cause) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            super(((orig == null)?String.format("%s [%d, %d]", msg, line, col)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:                    :String.format("%s [%d, %d]: '%s'", msg, line, col, orig)), cause);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonStreamParseException(String msg, String orig, int line, int col) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonStreamParseException(String msg, int line, int col) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonStreamParseException(String msg, String orig) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonStreamParseException(String msg) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonStreamParseException(Throwable cause) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            this(cause.getMessage(), (current == null)?null:String.valueOf(current), getLineNum(), getColNum(), cause);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    private static class JsonEndOfStreamException extends Exception {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        private static final long serialVersionUID = -9041608991522310436L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonEndOfStreamException(String msg) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * Runtime exception used to indicate improperly formatted json input. All
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * messages will be decorated with the line and column numbers of the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:     * current position in the reader.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:    public static class JsonParseException extends RuntimeException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        private static final long serialVersionUID = -8902652335128509063L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonParseException(String message) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            super(message);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonParseException(String message, Throwable cause) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            super(message, cause);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:        public JsonParseException(Throwable cause) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonStreamReader.java:            super(cause.getMessage(), cause);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java:import java.util.Map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java:import com.google.common.collect.Maps;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * Base (default) implementation of JsonObjectHandler. When an object is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * encountered, put will be called for each entry in the map. This
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * implementation adds each item to a Map<String, Object>. If you would like to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java: * do something else with each entry, extend this class and override all of the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java:public class JsonObjectHandler implements JsonHandler {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java:    private final Map<String, Object> map = Maps.newHashMap();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java:    public void put(String key, Object value) throws JsonValidationException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java:        map.put(key, value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java:    public Object getValue() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonObjectHandler.java:        return map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * Interface for anything that can be serialized to json.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * Please read <a href=
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * "https://sites.google.com/a/salesforce.com/user-interface/documentation/json"
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java: * >Json docs</a> on how to use this properly!
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java:public interface JsonSerializable {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java:     * serialize this object in json format
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializable.java:    public void serialize(Json json) throws IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import java.io.OutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import java.util.Calendar;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import java.util.Collection;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import java.util.Date;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import java.util.Map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import org.ruauframework.util.javascript.Literal;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import org.ruauframework.util.json.Json.Serialization;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:import org.ruauframework.util.json.Json.Serialization.ReferenceScope;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:public class DefaultJsonSerializer implements JsonSerializer<Object> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:    public ReferenceType getReferenceType(Object value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        Serialization serialization = value.getClass().getAnnotation(Serialization.class);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        if (serialization != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            return serialization.referenceType();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:    public ReferenceScope getReferenceScope(Object value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        Serialization serialization = value.getClass().getAnnotation(Serialization.class);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        if (serialization != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            return serialization.referenceScope();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:     * all the stuff that used to be in Json.writeValueNoRefSupport.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:     * Identify the type of the value passed in, and appropriately encode it.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:     * writeValue() calls this, and can also be called by anything that wants to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:     * bypass serRefId processing for some reason (you should usually be calling
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:     * writeValue(Object) instead of this.)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:    public void serialize(Json json, Object value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        // JsonSerializationContext context = json.getSerializationContext();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        if (value == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            Literal.NULL.serialize(json);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        } else if (value instanceof JsonSerializable) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            // If you've bothered to implement JsonSerializable then you
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            // probably want it called.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            ((JsonSerializable) value).serialize(json);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        } else if (value instanceof Map<?, ?>) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            json.writeMap((Map<?, ?>) value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        } else if (value instanceof Collection<?>) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            json.writeArray((Collection<?>) value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        } else if (value instanceof Object[]) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            json.writeArray((Object[]) value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        } else if (value instanceof Boolean || value instanceof Number) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            // Don't quote boolean or number values
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            json.writeLiteral(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        } else if (value instanceof Date) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            json.writeDate((Date) value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        } else if (value instanceof Calendar) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            json.writeDate(((Calendar) value).getTime());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:        } else if (value instanceof byte[]) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            // Copy the byte array into the output as a binary stream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            final OutputStream out = json.writeBinaryStreamBegin(((byte[]) value).length);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            out.write((byte[]) value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            json.writeBinaryStreamEnd();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            // all else encoded as toString()
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializer.java:            json.writeString(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:import org.ruauframework.util.json.Json.Serialization.ReferenceScope;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java: * serialize some thing
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:public interface JsonSerializer<T> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:     * serialize the thing
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:    void serialize(Json json, T value) throws IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:     * Get the reference type for the value's Class. Defaults to NONE
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:    ReferenceType getReferenceType(T value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:     * Get the reference type for the value's Class. Defaults to NONE
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:    ReferenceScope getReferenceScope(T value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:    public static abstract class IdentitySerializer<T> implements JsonSerializer<T> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:        public final ReferenceType getReferenceType(T value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:        public final ReferenceScope getReferenceScope(T value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:    public static abstract class NoneSerializer<T> implements JsonSerializer<T> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:        public final ReferenceType getReferenceType(T value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializer.java:        public final ReferenceScope getReferenceScope(T value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.math.BigDecimal;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.ArrayList;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.Calendar;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.Collection;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.Collections;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.Date;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.GregorianCalendar;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.HashMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.HashSet;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.LinkedHashMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.LinkedHashSet;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.LinkedList;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.Map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.Map.Entry;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import java.util.TreeSet;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import org.ruauframework.util.date.DateOnly;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import org.ruauframework.util.date.DateService;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import org.ruauframework.util.date.DateServiceImpl;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import org.ruauframework.util.javascript.Literal;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import org.ruauframework.util.json.Json.Serialization;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import org.ruauframework.util.json.Json.Serialization.ReferenceScope;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import org.ruauframework.util.json.JsonSerializer.NoneSerializer;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:import com.google.common.collect.Maps;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java: * Some basic serializers
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:public class JsonSerializers {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final LiteralSerializer LITERAL = new LiteralSerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final StringSerializer STRING = new StringSerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final ArraySerializer ARRAY = new ArraySerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final CollectionSerializer COLLECTION = new CollectionSerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final MapSerializer MAP = new MapSerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final DateSerializer DATE = new DateSerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final DateOnlySerializer DATEONLY = new DateOnlySerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final CalendarSerializer CALENDAR = new CalendarSerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final OldSerializer OLD = new OldSerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final BigDecimalSerializer BIGDECIMAL = new BigDecimalSerializer();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:     * two maps full of standard class to serializer mappings
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final Map<String, JsonSerializer<?>> MAPPY_FASTY;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static final Map<Class<?>, JsonSerializer<?>> MAPPY_SLOWY;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    static {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        Map<Class<?>, JsonSerializer<?>> m = new LinkedHashMap<Class<?>, JsonSerializer<?>>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(ArrayList.class, COLLECTION);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(LinkedList.class, COLLECTION);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(HashSet.class, COLLECTION);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(TreeSet.class, COLLECTION);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(LinkedHashSet.class, COLLECTION);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(HashMap.class, MAP);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(LinkedHashMap.class, MAP);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(String.class, STRING);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Character.class, STRING);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Integer.class, LITERAL);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Float.class, LITERAL);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Double.class, LITERAL);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Short.class, LITERAL);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Long.class, LITERAL);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(BigDecimal.class, LITERAL);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Boolean.class, LITERAL);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Date.class, DATE);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(DateOnly.class, DATEONLY);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(GregorianCalendar.class, CALENDAR);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        Map<String, JsonSerializer<?>> mFast = Maps.newLinkedHashMap();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        for (Entry<Class<?>, JsonSerializer<?>> e : m.entrySet()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            mFast.put(e.getKey().getName(), e.getValue());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        MAPPY_FASTY = Collections.unmodifiableMap(mFast);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m = new LinkedHashMap<Class<?>, JsonSerializer<?>>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Collection.class, COLLECTION); // maybe iterable
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Map.class, MAP);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Number.class, LITERAL);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        m.put(Calendar.class, CALENDAR);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        MAPPY_SLOWY = Collections.unmodifiableMap(m);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:     * temp class until all the json serializable stuff moves out of the defs
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class OldSerializer implements JsonSerializer<JsonSerializable> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public final ReferenceType getReferenceType(JsonSerializable value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            Serialization serialization = value.getClass().getAnnotation(Serialization.class);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            if (serialization != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                return serialization.referenceType();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public final ReferenceScope getReferenceScope(JsonSerializable value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            Serialization serialization = value.getClass().getAnnotation(Serialization.class);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            if (serialization != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                return serialization.referenceScope();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, JsonSerializable value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            value.serialize(json);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class ArraySerializer extends NoneSerializer<Object[]> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, Object[] value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            if (json.getSerializationContext().getCollectionSizeLimit() > -1
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                    && value.length > json.getSerializationContext().getCollectionSizeLimit()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                json.writeString("Array of length " + value.length + " too large to display");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                json.writeArray(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class CollectionSerializer extends NoneSerializer<Collection<?>> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, Collection<?> value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            if (json.getSerializationContext().getCollectionSizeLimit() > -1
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                    && value.size() > json.getSerializationContext().getCollectionSizeLimit()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                json.writeString("Collection of size " + value.size() + " too large to display");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                json.writeArray(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class MapSerializer extends NoneSerializer<Map<?, ?>> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, Map<?, ?> value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            if (json.getSerializationContext().getCollectionSizeLimit() > -1
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                    && value.size() > json.getSerializationContext().getCollectionSizeLimit()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                json.writeString("Map of size " + value.size() + " too large to display");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                json.writeMap(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class DateSerializer extends NoneSerializer<Date> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, Date value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            DateService dateService = DateServiceImpl.get();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            String ret = dateService.getDateTimeISO8601Converter().format(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class DateOnlySerializer extends NoneSerializer<Date> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, Date value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            DateService dateService = DateServiceImpl.get();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            String ret = dateService.getDateISO8601Converter().format(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class CalendarSerializer extends NoneSerializer<Calendar> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, Calendar value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            json.writeValue(value.getTime());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:     * literal means its something that is literal in javascript
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class LiteralSerializer extends NoneSerializer<Object> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, Object value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            if (value == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                Literal.NULL.serialize(json);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                json.writeLiteral(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class StringSerializer extends NoneSerializer<Object> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, Object value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            if (json.getSerializationContext().getVariableDataSizeLimit() > -1
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                    && ((String) value).length() > json.getSerializationContext().getVariableDataSizeLimit()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                value = ((String) value).substring(0, json.getSerializationContext().getVariableDataSizeLimit())
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                        + Integer.toString(((String) value).length()
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                                - json.getSerializationContext().getVariableDataSizeLimit()) + " more) ...";
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:            json.writeString(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:     * Numbers in JS are only double precision, BigDecimals can overflow and so will be serialized as strings when too large
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:    public static class BigDecimalSerializer extends NoneSerializer<BigDecimal> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public static int MAX_PRECISION = 15;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:        public void serialize(Json json, BigDecimal bd) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializers.java:                json.writeLiteral(bd);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * Throw when no serializer is found for value.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java: * Copyright (c) 2010 salesforce.com. All rights reserved.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:public class JsonSerializerNotFoundException extends JsonSerializationException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:    private static final long serialVersionUID = 5331228637185995874L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:    private final static String MESSAGE = "No serializer found for %s";
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:    private final Object value;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:    public JsonSerializerNotFoundException(Object value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:        super(String.format(MESSAGE, value.getClass()));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:        this.value = value;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:    public Object getValue() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializerNotFoundException.java:        return this.value;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java: * standard jsony stuff
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:public abstract class BaseJsonSerializationContext implements JsonSerializationContext {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    private final boolean format;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    private final boolean refSupport;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    private final int dataSizeLimit;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    private final int collectionSizeLimit;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    private boolean nullValues;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    public BaseJsonSerializationContext(boolean format, boolean refSupport, int dataSizeLimit, int collectionSizeLimit,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:            boolean nullValues) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:        this.format = format;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:        this.dataSizeLimit = dataSizeLimit;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:        this.nullValues = nullValues;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    public boolean format() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:        return format;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    public boolean refSupport() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    public int getVariableDataSizeLimit() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:        return dataSizeLimit;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:     * Don't render collections over this length, -1 to not truncate
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    public boolean isNullValueEnabled() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:        return nullValues;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:    public boolean setNullValueEnabled(boolean nullValueEnabled) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:        boolean old = nullValues;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/BaseJsonSerializationContext.java:        nullValues = nullValueEnabled;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:public interface JsonHandlerProvider {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:     * This will be called for every entry in a map. If you want to provide a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:     * special handler for that key, return its handler. If you return null, the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:     * default handler implementation will be used.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:     * @param key The key in the parent object for which the handler is being
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:    JsonHandlerProvider getObjectEntryHandlerProvider(String key);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:     * This will be called once each time an array is read. The returned handler
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:     * provider will be used to get a handler for each object or array within
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:     * the array. If you return null, the default handler implementation will be
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:    JsonHandlerProvider getArrayEntryHandlerProvider();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:     * Return a handler to be used for reading an object.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:    JsonObjectHandler getObjectHandler();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:     * Return a handler to be used for reading an array.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandlerProvider.java:    JsonArrayHandler getArrayHandler();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * Base (default) implementation of JsonArrayHandler. When an array is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * encountered, add will be called for each element in the array. This
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * implementation adds each item to a List<Object>. If you would like to do
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java: * something else with each item, extend this class and override all of the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java:public class JsonArrayHandler implements JsonHandler {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java:    List<Object> list = Lists.newArrayList();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java:    public void add(Object o) throws JsonValidationException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java:        list.add(o);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonArrayHandler.java:    public Object getValue() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java:public interface JsonHandler {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java:    Object getValue();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java:    public static class JsonValidationException extends Exception {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java:        private static final long serialVersionUID = -8765036572625358181L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonHandler.java:        public JsonValidationException(String msg) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:import static org.ruauframework.util.json.JsonSerializers.ARRAY;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:import static org.ruauframework.util.json.JsonSerializers.LITERAL;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:import static org.ruauframework.util.json.JsonSerializers.STRING;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:import java.util.Map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:import java.util.Map.Entry;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:import java.util.concurrent.ConcurrentMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * uses 2 maps to find serializers. first is direct class lookup (fast), second
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java: * is an instanceof lookup (slow)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:public class ClassMapJsonSerializationContext extends BaseJsonSerializationContext {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:    private final Map<String, JsonSerializer<?>> mappyFasty;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:    private final Map<Class<?>, JsonSerializer<?>> mappySlowly;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:    private final ConcurrentMap<String, JsonSerializer<?>> cache;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:    public ClassMapJsonSerializationContext(Map<String, JsonSerializer<?>> mappyFasty,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:            Map<Class<?>, JsonSerializer<?>> mappySlowly, ConcurrentMap<String, JsonSerializer<?>> cache,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:            boolean format, boolean refSupport, int dataSizeLimit, int collectionSizeLimit) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        super(format, refSupport, dataSizeLimit, collectionSizeLimit, false);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        this.mappyFasty = mappyFasty;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        this.mappySlowly = mappySlowly;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        this.cache = cache;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:    public <T> JsonSerializer<T> getSerializer(T o) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:            return (JsonSerializer<T>) LITERAL;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        Class<?> c = o.getClass();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        if (c.isArray()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:            return (JsonSerializer<T>) ARRAY;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:            return (JsonSerializer<T>) STRING;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        JsonSerializer<T> s = (JsonSerializer<T>) cache.get(c.getName());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        String className = c.getName();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        s = (JsonSerializer<T>) mappyFasty.get(className);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:            cache.putIfAbsent(className, s);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:        for (Entry<Class<?>, JsonSerializer<?>> e : mappySlowly.entrySet()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:            if (e.getKey().isAssignableFrom(c)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:                s = (JsonSerializer<T>) e.getValue();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/ClassMapJsonSerializationContext.java:                cache.putIfAbsent(className, s);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * default serialization context that expects the values know how to serialize
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * themselves using {@link JsonSerializable} this uses instanceof to determine
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java: * how to serialize, there is no fast lookup cache deal.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java:public class DefaultJsonSerializationContext extends BaseJsonSerializationContext {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java:    public DefaultJsonSerializationContext(boolean format, boolean refSupport, boolean nullValues) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java:        super(format, refSupport, -1, -1, nullValues);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java:    public JsonSerializer<Object> getSerializer(Object o) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/DefaultJsonSerializationContext.java:        return ServiceLocator.get().get(DefaultJsonSerializer.class);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.io.DataOutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.io.OutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.io.OutputStreamWriter;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.io.Writer;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.lang.annotation.ElementType;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.lang.annotation.Inherited;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.lang.annotation.Retention;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.lang.annotation.RetentionPolicy;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.lang.annotation.Target;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.math.BigDecimal;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.text.SimpleDateFormat;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.ArrayDeque;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.ArrayList;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.Collection;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.Date;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.HashMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.IdentityHashMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.Map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.Map.Entry;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import java.util.TimeZone;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import javax.annotation.Nonnull;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import org.ruauframework.util.UncloseableOutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import org.ruauframework.util.json.Json.Serialization.ReferenceScope;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import com.google.common.base.Charsets;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import com.google.common.collect.Maps;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:import com.google.common.io.CountingOutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * java -> javascript encoder.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * May or may not follow the official JSON (JavaScript Object Notation)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * standard. It handles serializing all the basics, numbers, strings, booleans,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * arrays, and maps as well as some common SFDC data structures like
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * PicklistItem and anything that implements {@link JsonSerializable}. Some
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * significant consumers of the output are inline editing
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * <li>Java null reference: JS null value
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * <li>Java Map: JS Object
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * <li>Java List: JS Array
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * <li>Java Object: object.toArray()
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * NOTE: the code for handling the stacks is rather more complicated to maintain
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * performance. The problem is that {@link #writeMapBegin()} and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * {@link #writeArrayBegin()} are called hundreds of thousands of times a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * second, meaning that creating and discarding objects for each one is too
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * expensive. This means that we use a separate stack in the case that we are
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * not formatting to avoid the allocation of the object.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: * @see <a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: *      href="https://sites.google.com/a/salesforce.com/user-interface/documentation/json">SFDC
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java: *      json documentation</a>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:public class Json {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    @SuppressWarnings("serial")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static class JsonException extends RuntimeException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        public JsonException(String message) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            super(message);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static final String MIME_TYPE = "application/json";
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private final static String REF_INDICATOR = "serRefId";
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private final static String ID_INDICATOR = "serId";
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private final static String VALUE = "value";
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        BRACE(true, "  "), SQUARE(true, "  "), PARAM(true, ""), COMMENT(false, " * ");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        private boolean separated;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        private String indent;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        private IndentType(boolean separated, String indent) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            this.separated = separated;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:         * Determines if this instance is separated.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:         * @return The separated.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        public boolean isSeparated() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            return this.separated;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:         * Gets the indent for this instance.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * A class to track indents when formatting json.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private static class IndentEntry {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        private final IndentType type;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        private boolean first;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        private final String indent;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        public boolean needSeparator() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            if (!this.type.isSeparated()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                throw new JsonException("Cannot use separator on " + this.type);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                this.first = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                return false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private final JsonSerializationContext serializationContext;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private final Map<Object, Integer> actionMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private final Map<Object, Integer> requestMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private int lastRefId = 0;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private final Appendable out;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private final ArrayDeque<IndentEntry> indentStack = new ArrayDeque<IndentEntry>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private final DataOutputStream binaryOutput;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private CountingOutputStream currentBinaryStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private long currentBinaryStreamLength;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Create a Json Serialization context object that maintains information
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * about one run. This Object is NOT thread-safe. It should only be used by
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * one thread at a time, and should not be reused.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param out The Appendable to write the serialized objects to.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param format defaults to false. If true, the output will be multi-line
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *            and indented.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param refSupport If true, any objects annotated with &#64;Serialization
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *            will be serialized using serRefIds
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    protected Json(Appendable out, boolean format, boolean refSupport) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        this(out, null, new DefaultJsonSerializationContext(format, refSupport, false));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    protected Json(Appendable out, OutputStream binaryOutput, JsonSerializationContext context) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        this.serializationContext = context;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // No need to create the maps if we're not doing the ref stuff
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (this.serializationContext.refSupport()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            actionMap = new IdentityHashMap<Object, Integer>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            requestMap = new IdentityHashMap<Object, Integer>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            actionMap = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            requestMap = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // Set binaryOutput to a DataOutputStream if applicable; otherwise, null
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        this.binaryOutput = binaryOutput == null ? null
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                : (binaryOutput instanceof DataOutputStream ? (DataOutputStream) binaryOutput : new DataOutputStream(
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                        binaryOutput));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    // This annotations is only looked for on classes that implement
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    // JsonSerializable
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    @Target(ElementType.TYPE)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public @interface Serialization {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:             * This is the default. Just do normal json serialization
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:             * If a == b, just output serRefId=<the refId of the object> after
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        ReferenceType referenceType() default ReferenceType.NONE;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:             * the reference is available for the entire request.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:             * The reference is only internal tothe current action.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        ReferenceScope referenceScope() default ReferenceScope.ACTION;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Following are a bunch of static serialize methods. They mainly exist in
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * order to size a StringBuilder for you to some reasonable size.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static String serialize(Object obj) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        serialize(obj, sb);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param obj The thing to serialize
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param out The destination for the serialized form
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param format true if output should be indented and multiline for human readability (default = false)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param refSupport true if @Serialization annotations should be honored (default = false)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @throws JsonSerializationException if there's an issue during serialization
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static void serialize(Object obj, Appendable out, boolean format, boolean refSupport) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            new Json(out, format, refSupport).writeValue(obj);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        } catch (IOException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonSerializationException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static String serialize(Object obj, boolean format, boolean refSupport) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        serialize(obj, sb, format, refSupport);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static void serialize(Object obj, Appendable out) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            new Json(out, false, false).writeValue(obj);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        } catch (IOException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonSerializationException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static void serialize(Object obj, Appendable out, JsonSerializationContext context) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            new Json(out, null, context).writeValue(obj);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        } catch (IOException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonSerializationException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static String serialize(Object obj, JsonSerializationContext context) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            new Json(sb, null, context).writeValue(obj);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        } catch (IOException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonSerializationException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static String serialize(Object[] result) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        serialize(result, sb);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static String serialize(Collection<?> result) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        serialize(result, sb);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static String serialize(Map<String, ?> result) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        serialize(result, sb);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Creates a Json instance that is suitable for output streaming, one
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * element at a time. This can help avoid building up an entire JavaScript
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * AST all in memory before it gets serialized, which can help cut down
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Note that you will need to call {@link #close()} when you are done to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * ensure that all characters have been written out to the given
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * OutputStream. Otherwise, some characters might be missing at the end.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param out The OutputStream to write the serialized objects to using
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param format Defaults to false. If true, the output will be multi-line
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *            and indented.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param refSupport If true, any objects annotated with &#64;Serialization
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *            will be serialized using serRefIds
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param nullValues When true, null values are written out when they exist
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *            in arrays and map values. When false, array items and map
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *            entries with null values are not serialized
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @return A new Json instance that you can use for streaming to the given
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *         OutputStream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static Json createJsonStream(@Nonnull OutputStream out, boolean format, boolean refSupport,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            boolean nullValues) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        return createJsonStream(out, new DefaultJsonSerializationContext(format, refSupport, nullValues));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Creates a Json instance that is suitable for output streaming, one
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * element at a time. This can help avoid building up an entire JavaScript
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * AST all in memory before it gets serialized, which can help cut down
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Note that you will need to call {@link #close()} when you are done to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * ensure that all characters have been written out to the given
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * OutputStream. Otherwise, some characters might be missing at the end.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param out The OutputStream to write the serialized objects to using
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param context The JSON serialization context to use for output
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @return A new Json instance that you can use for streaming to the given
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *         OutputStream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static Json createJsonStream(@Nonnull OutputStream out, JsonSerializationContext context) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new IllegalArgumentException("out must not be null");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        final Writer writer = new OutputStreamWriter(out, Charsets.UTF_8);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Creates a Json instance that is suitable for output streaming, one
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * element at a time. This can help avoid building up an entire JavaScript
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * AST all in memory before it gets serialized, which can help cut down
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param out The Appendable to which to write the serialized objects. This must not be null.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param context The JSON serialization context to use for output
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @return A new Json instance that you can use for streaming to the given appendable
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static Json createJsonStream(@Nonnull Appendable out, JsonSerializationContext context) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * This method is essentially here to provide type-checking for the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * outermost map.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param jsonMap
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param out
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @throws JsonSerializationException if there's an issue during
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *             serialization
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static void serialize(Map<String, ?> jsonMap, Appendable out) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        serialize((Object) jsonMap, out);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * If refSupport is on, track the object for later equality/identity checks
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param rs the reference scope for the object.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param value the value for which we are storing a reference.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private Integer addReference(ReferenceScope rs, Object value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        int ret = ++lastRefId;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        Map<Object, Integer> m = (rs == ReferenceScope.ACTION) ? actionMap : requestMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        m.put(value, ret);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * If refSupport is on, clear a set of objects from the references.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param values the values to remove.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void clearReferences() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (!serializationContext.refSupport()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        actionMap.clear();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param rs the scope for the reference
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param value the value for which we want a reference.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @return The refId previously assigned to the value, or null if none has been assigned yet.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    protected Integer getRefId(ReferenceScope rs, Object value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        case ACTION:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            return actionMap.get(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        case REQUEST:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            return requestMap.get(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Push an indent, with a type.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * See the notes on performance on the class above.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * This either creates a new IndentEntry and pushes a value on the boolean
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * stack, or it just uses the boolean stack (in the case of not pretty
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param type the type of indent to push.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (this.indentStack.isEmpty()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            this.indentStack.push(new IndentEntry(type, ""));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            this.indentStack.push(new IndentEntry(type, this.indentStack.peek().getIndent()));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * See the notes on performance on the class above.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param type the type of indent that should be on the stack.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param message the message for the throwable if it is wrong.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void checkIndent(IndentType type, String message) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (this.indentStack.isEmpty() || !type.equals(this.indentStack.peek().getType())) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonException(message);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Pop an indent off the stack.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * This both checks the type on the stack, and pulls it off. See the notes
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * on performance on the class above.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void popIndent(IndentType type, String message) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (this.indentStack.isEmpty()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonException("Empty indent stack: " + message);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (!type.equals(this.indentStack.pop().getType())) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonException("Mismatched indent stack: " + message);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * See the notes on performance on the class above.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (this.indentStack.isEmpty()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            return this.indentStack.peek().getIndent();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * If formatting is enabled, indent, otherwise, no-op.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (isFormatting()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            out.append(getIndent());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write the beginning of a map. Make sure to call writeMapEnd later on.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeMapBegin() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append('{');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeBreak();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write the end of a map.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeMapEnd() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeBreak();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        popIndent(IndentType.BRACE, "Json.writeMapBegin must be called before calling Json.writeMapEnd");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append('}');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Start a comment.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * This is probably not needed, but if we do want to write a multiline
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * comment in parts, you would call this function followed by multiple calls
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * to {@link #writeCommentBody(String)} followed by a call to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (isFormatting()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeBreak();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            out.append("/*");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write out a comment end.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (isFormatting()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeBreak();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            out.append(" */");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write out a part of a comment body.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * This call must be preceded by {@link #writeCommentBegin()}.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param body the comment to write.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (isFormatting()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeBreak();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            out.append(body.replace("*/", ""));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write out a comment.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Note that these are not legal structures in JSON, perhaps we should have
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * a flag to turn off the writing of these for 'valid' JSON. Unfortunately,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * we'd also have to rework our error handling.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * This could take the body and re-work newlines with the indent, but that
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * seems a good bit of work for little gain (i.e. the result would be
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * prettier, but who cares).
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param body the body of the comment.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write the beginning of an array. Make sure to call writeArrayEnd later
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeArrayBegin() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append('[');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeBreak();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write the end of an array.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeArrayEnd() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeBreak();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        popIndent(IndentType.SQUARE, "Json.writeArrayBegin must be called before calling Json.writeArrayEnd");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append(']');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * If any entries have already been written to the current map/array (as
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * marked by the write*Begin methods), write a comma. If no elements have
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeComma() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (!this.indentStack.isEmpty()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            if (this.indentStack.peek().needSeparator()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                out.append(",");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                writeBreak();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            // ooh, why did this happen?
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonException("writeComma with no writeArrayBegin or writeMapBegin");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeMapSeparator() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append(':');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Encode the given value and if m != null then perform Ruue-specific
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * seialization that outputs extra information in the stream so that
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * references can be established by the JSON reader
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeValue(Object value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        JsonSerializer<Object> serializer = serializationContext.getSerializer(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (serializer == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonSerializerNotFoundException(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        ReferenceType rt = serializationContext.refSupport() ? serializer.getReferenceType(value) : ReferenceType.NONE;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            if ((refId = getRefId(serializer.getReferenceScope(value), value)) != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                // Output a simple reference
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                writeMapBegin();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                writeMapEntry(REF_INDICATOR, refId);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                writeMapEnd();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                refId = addReference(serializer.getReferenceScope(value), value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                // Now manually output this 2-element map to avoid loop
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                writeMapBegin();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                writeMapEntry(ID_INDICATOR, refId);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                writeMapKey(VALUE);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                serializer.serialize(this, value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                writeMapEnd();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            serializer.serialize(this, value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Just write the value.toString() out. Does not quote the value.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param value
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeLiteral(Object value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append(value.toString());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Quotes value.toString() and writes it.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param value
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeString(Object value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append('"');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append(RuueTextUtil.escapeForJSONString(value.toString()));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append('"');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write the date in the ISO-8601 format that's semi-standard in json2 (in
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * that it's in the comments)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param value
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeDate(Date value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append('"');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // Use the ISO DateTime format to write the date.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            out.append(ISO8601FORMAT.format(value));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append('"');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private static final SimpleDateFormat ISO8601FORMAT;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    static {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        ISO8601FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write a map in a predictable order
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param map
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeMap(Map<?, ?> map) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeMapBegin();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        for (Object o : map.entrySet()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            Object value = entry.getValue();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeMapEntry(entry.getKey(), value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeMapEnd();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write an array
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param array
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeArray(Object[] array) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeArrayBegin();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        for (Object o : array) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeArrayEntry(o);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeArrayEnd();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write an array
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param array
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeArray(Collection<?> array) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeArrayBegin();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        for (Object o : array) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeArrayEntry(o);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeArrayEnd();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write a value into the current array, and add leading commas and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * formatting as appropriate.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param value
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeArrayEntry(Object value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (value != null || serializationContext.isNullValueEnabled()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeComma();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeValue(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write a value into the current Map, and add leading commas and formatting
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * as appropriate.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param key
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param value
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeMapEntry(Object key, Object value) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeMapEntry(key, value, null);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write a value into the current Map, and add leading commas and formatting
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * as appropriate.  This version will consult its {@code type} parameter to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * decide how to serialize null maps and arrays.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param key
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param value
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param type
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeMapEntry(Object key, Object value, String type) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (value == null && type != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                Class<?> valueClass = Json.class.getClassLoader().loadClass(type.substring("java://".length()));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                if (Iterable.class.isAssignableFrom(valueClass)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                    value = new ArrayList<Boolean>(0);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                } else if (Map.class.isAssignableFrom(valueClass)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                    value = new HashMap<String,String>(0);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            } catch (ClassNotFoundException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                // Nevermind; treat "we don't know" as a non-list, non-map
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (value != null || serializationContext.isNullValueEnabled()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeMapKey(key);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            writeValue(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Write a partial Map Entry -- everything except the value. This is useful
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * when the value requires special serialization.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param key
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @throws JsonSerializerNotFoundException if a serializer is not found for the key
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeMapKey(Object key) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeComma();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        JsonSerializer<Object> serializer = serializationContext.getSerializer(key);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (serializer == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new JsonSerializerNotFoundException(key);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        serializer.serialize(this, key);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        writeMapSeparator();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * If formatting is on, write out a line break.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeBreak() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (isFormatting()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            out.append('\n');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Start a binary stream using the given length and return an OutputStream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * that the caller can write its binary data to.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * After calling this, write exactly the number of bytes specified to the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * OutputStream returned by this method. After you do that, call
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * {@link #writeBinaryStreamEnd()}.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param streamLength The number of bytes that will exist in the output before the ending backtick
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @return The OutputStream that the caller can write its output to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public OutputStream writeBinaryStreamBegin(long streamLength) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // If we are in the middle of another binary stream, then complain
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (currentBinaryStream != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new IllegalStateException("Previous binary stream was not ended");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // Signal our binary stream's beginning
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        validateBinaryStreamEnabledAndWriteBacktick();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // Flush the output stream writer to push all pending characters onto the OutputStream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (out instanceof Writer) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // A JSON+binary stream begins with the length as a big endian 64-bit long
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        binaryOutput.writeLong(streamLength);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        currentBinaryStreamLength = streamLength;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // Wrap our binaryOutput in a CountingOutputStream so that we can
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // validate the length later
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        return currentBinaryStream = new CountingOutputStream(new UncloseableOutputStream(binaryOutput));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private void validateBinaryStreamEnabledAndWriteBacktick() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (binaryOutput == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new IllegalStateException(
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                    "Binary streams are supported only when Json.createJsonStream is used with an InputStream");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        out.append('`');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Ends the current binary stream and ensures that the correct number of
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * bytes were written. If a discrepancy exists, then an
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * IllegalStateException gets thrown.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public void writeBinaryStreamEnd() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // Ensure that we are in a binary stream, and validate the length
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (currentBinaryStream == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new IllegalStateException("Binary stream was not started");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (currentBinaryStreamLength != currentBinaryStream.getCount()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            throw new IllegalStateException("Length of the binary stream was written out as "
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                    + currentBinaryStreamLength + " bytes, but " + currentBinaryStream.getCount()
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                    + " bytes were actually written to the OutputStream returned by writeBinaryStreamBegin()");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        // Signal our binary stream's ending
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        validateBinaryStreamEnabledAndWriteBacktick();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        currentBinaryStream = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        currentBinaryStreamLength = 0;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Writes out any buffered characters in the OutputStreamWriter to the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * binary OutputStream and then closes the OutputStream.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Note that this method does nothing if Json was not created with an
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * OutputStream, such as via
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * {@link #createJsonStream(OutputStream, boolean, boolean, boolean)}.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (binaryOutput != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            if (out instanceof Writer) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                // This also closes the underlying OutputStream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                binaryOutput.close();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Note: You should always try to use the write* methods instead, if at all
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @return the appendable for this run in case you want to write something
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *         special to it.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public Appendable getAppendable() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private boolean isFormatting() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        return serializationContext.format();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public JsonSerializationContext getSerializationContext() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        return this.serializationContext;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Resolve references and remove refId/serRefIds from the passed in object.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * Useful when parsing json serialized with reference support by this class.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @param config Must be a Map or List that consists only of other
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     *            Maps/Lists and primitives
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:     * @return A Map or List representing the data passed in with its references
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    public static Object resolveRefs(Object config) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        return resolveRefs(config, Maps.<Integer, Object> newHashMap(), null);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private static Object resolveRefs(Object config, Map<Integer, Object> cache) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        return resolveRefs(config, cache, null);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:    private static Object resolveRefs(Object config, Map<Integer, Object> cache, Object newValue) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        if (config instanceof List) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            if (newValue != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                result = (List<Object>) newValue;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                result = Lists.newArrayListWithExpectedSize(l.size());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                result.add(resolveRefs(o, cache));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:        } else if (config instanceof Map) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            Map<String, Object> m = (Map<String, Object>) config;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            BigDecimal serId = (BigDecimal) m.get(ID_INDICATOR);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                Object value = m.get(VALUE);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                Object result = value instanceof List ? Lists.newArrayList() : Maps.newHashMap();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                // We must cache the new item first because we could loop back
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                // to this serId internally
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                cache.put(serId.intValue(), result);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                return resolveRefs(value, cache, result);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            BigDecimal serRefId = (BigDecimal) m.get(REF_INDICATOR);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                Object value = cache.get(serRefId.intValue());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                // if there is no value we could throw here
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                return value;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            Map<String, Object> result;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:            if (newValue != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                result = (Map<String, Object>) newValue;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                result = Maps.newHashMapWithExpectedSize(m.size());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/Json.java:                result.put(e.getKey(), resolveRefs(e.getValue(), cache));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:import java.io.Reader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:import java.io.StringReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * Parses a single top-level object and returns it as an Object. See the class
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * documentation for JsonStreamReader for the default mappings of what type that
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * Object will be so that you can cast it appropriately. If you need to parse
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * multiple top level objects or provide custom handlers for parsing directly
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java: * into your own types, use JsonStreamReader instead.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:public class JsonReader {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:     * Public entry point for reading a Json Reader. The Reader is wrapped in a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:     * buffered reader internally. This will return an Object that could be any
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:     * of the acceptable JSON structures: List, Map, null, String, BigDouble,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:     * boolean
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:    public Object read(Reader reader) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:        JsonStreamReader jsonStreamReader = new JsonStreamReader(reader);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:            jsonStreamReader.next();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:        } catch (IOException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:            throw new JsonStreamReader.JsonParseException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:        return jsonStreamReader.getValue();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:     * Public entry point for reading a Json String. This will return an Object
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:     * that could be any of the acceptable JSON structures: List, Map, null,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:     * String, BigDouble, boolean
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:    public Object read(String string) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonReader.java:        return this.read(new StringReader(string));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:import java.io.Serializable;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:import java.util.regex.Pattern;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * Ok, functions are not part of JSON, but it handy for us to be able to parse a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * json-like structure where some of the values are javascript functions so that
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * we can extract the signature of the function in Java. When JsonStreamReader
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * encounters a structure like: GOOD: { foo : function(arg1, arg2){} } The
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * parsed value of foo will be one of these JsFunction objects. Since this is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * only parsed from json-like structures, the name of the function is not part
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * of this object. This means that do not support other ways of creating
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java: * functions, like: BAD: function foo(arg1, arg2){}
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:public class JsFunction implements JsonSerializable, Serializable {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    public JsFunction(List<String> arguments, String body) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        this(null, arguments, body, -1, -1);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    private String sanitize() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        boolean first = true;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        for (String arg : arguments) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:                func.append(", ");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:                first = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:            func.append(arg);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        func.append(") {");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        func.append(trailingCommaPattern.matcher(body).replaceAll("$1"));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        func.append('}');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        // Now make sure we escape the right sequences.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        return RuueTextUtil.escapeForJSONFunction(func.toString());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    public JsFunction(String name, List<String> arguments, String body, int line, int col) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        this.name = name;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        this.arguments = arguments;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        this.sanitized = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:     * @return Returns the arguments.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        return arguments;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:     * @return the line the function was on
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:     * @return Returns the name.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    public String getName() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        return this.name;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:     * @param name The name to set.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    public void setName(String name) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        // Clear out the cache of the serialized form since the name is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        // changing.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        this.sanitized = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        this.name = name;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:     * Not escaped! Executable code! Escape the output of this if you need it to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:     * use it as a String value! I don't know what we're yelling about!
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    public void serialize(Json json) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        json.writeBreak();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        json.writeLiteral(toString());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        if (sanitized == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:            sanitized = sanitize();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        return sanitized;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    public boolean equals(Object o) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:            return false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        if (o instanceof JsFunction) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:            return (body.equals(j.body) && (arguments == null ? j.arguments == null : arguments.equals(j.arguments))
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:                    && (line == j.line) && (col == j.col) && (name != null ? name.equals(j.name)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:                        : j.name != null ? j.name.equals(name) : true));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        return false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    public int hashCode() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:        return this.body.hashCode() * 31 + (this.name == null ? 0 : this.name.hashCode() * 31)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:                + (arguments == null ? 0 : arguments.hashCode()) + col + line;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    private String name;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    private final List<String> arguments;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    private final String body;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    private final int line;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    private final int col;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    private String sanitized;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    private static final Pattern trailingCommaPattern = Pattern.compile(",(\\s*})");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsFunction.java:    private static final long serialVersionUID = 1186050562190474668L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java: * don't use this, use jackson Context for serializing json using {@link Json}
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:public interface JsonSerializationContext {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * Truncate variable type (e.g. string, big decimal) data sizes to this
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * length, -1 to not truncate
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:    int getVariableDataSizeLimit();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * Don't render collections over this length, -1 to not truncate
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * @return format the output for humanity
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:    boolean format();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * @return true if objects can be serialized by reference to prevent cycles
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:    boolean refSupport();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * Get the serializer to use for the given object
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * @return the serializer
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:    <T> JsonSerializer<T> getSerializer(T o);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * Returns whether or not null values in arrays and objects get written out.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * By default, this is false.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * @return When false, array and object values that are null cause the entry
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     *         to not get written out. When true, these are written out.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:    public boolean isNullValueEnabled();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * sets whether or not null values in arrays and objects get written out.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * By default, this is false. It should be treated as a stack.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * @param nullValueEnabled the new value to set.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:     * @return the previous value.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationContext.java:    public boolean setNullValueEnabled(boolean nullValueEnabled);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:public enum JsonConstant {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    // Proprietary JSON+binary, which has the following format: `[length of data
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    // in bytes as a 64-bit big-endian binary number][raw binary data]`
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    private static final int MaxTokenValue = 255; // largest allowable token
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    // tokens represents all possible token characters. It is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    // OK to have characters beyond MaxTokenValue (for Unicode), but
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    // those extended characters can only be literals or whitespace.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    private static final JsonConstant[] tokens = new JsonConstant[MaxTokenValue + 1];
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    private final Character token;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    static {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        // sparsely add the defined tokens to this fixed-size array
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        for (JsonConstant j : JsonConstant.values()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        // now populate the non-occupied spaces with the result of the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        // isWhitespace method
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        // allowing all extended ASCII characters convert to a token is a single
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        for (char c = 0; c <= MaxTokenValue; c++) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:                if (Character.isWhitespace(c)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    private JsonConstant() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    private JsonConstant(Character token) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    public char getToken() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:     * @return Returns a reasonable representation.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    public String getRepresentation() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:            return String.valueOf(token);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:    public static JsonConstant valueOf(Character c) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        JsonConstant ret = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        int charVal = c;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        // direct lookup in token array
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        if (charVal <= MaxTokenValue) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:            ret = tokens[charVal];
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        // this section should only be entered for c >= MaxTokenValue (rare)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonConstant.java:        if (Character.isWhitespace(c)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * Comments are not part of JSON, but it handy for us to be able to parse a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java: * json-like structure that contains comments.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:public class JsComment implements JsonSerializable {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:    private final String body;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:    private final int line;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:    private final int col;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:     * @return the line the comment was on
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:    public void serialize(Json json) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:    public boolean equals(Object o) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:            return false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:        if (o instanceof JsComment) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:            return body.equals(j.body) && line == j.line && col == j.col;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:        return false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:    public int hashCode() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsComment.java:        return (this.body.hashCode() * 31) + col + line;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * JsonSerializationException
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java: * Copyright (c) 2010 salesforce.com. All rights reserved.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:public class JsonSerializationException extends RuntimeException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:    private static final long serialVersionUID = -3797844901135660984L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:    public JsonSerializationException() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:    public JsonSerializationException(String message) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:        this(message, null);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:    public JsonSerializationException(String message, Throwable cause) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:        super(message, cause);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:    public JsonSerializationException(Throwable cause) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonSerializationException.java:        this(null, cause);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:package org.ruauframework.util.json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:import java.util.ArrayList;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:import java.util.LinkedHashMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:import java.util.Map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * A LinkedHashMap of String to Object, which is the variety most often useful
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * for JSON Serialization purposes For added usefulness, in addition to the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * standard Map methods, also has an add method that will create a List with the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * given key (or use one that already exists), and then add the value to that
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java: * List. Any entries with null values will be omitted upon json serialization.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:public class JsonFriendlyMap extends LinkedHashMap<Object, Object> {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:    public JsonFriendlyMap() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:    public JsonFriendlyMap(Map<? extends Object, ? extends Object> m) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:    private static final long serialVersionUID = 1L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:    public <T> void add(String key, T value) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:        Object oldValue = get(key);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:        List<T> valueList = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:        if (oldValue == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:            valueList = new ArrayList<T>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:        } else if (oldValue.getClass().equals(value.getClass())) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:            valueList = new ArrayList<T>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:            valueList.add((T) oldValue);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:            valueList = (List<T>) oldValue;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:        valueList.add(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/json/JsonFriendlyMap.java:        put(key, valueList);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:package org.ruauframework.util.number;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:import java.text.ParseException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:import java.text.ParsePosition;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:import com.ibm.icu.text.NumberFormat;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:public class RuueNumberFormat {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:     * Ensures strict parsing of a number. Throws ParseException if the input
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:    public static Number parseStrict(String input, NumberFormat numberFormat) throws ParseException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:        return parse(input, numberFormat, true);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:     * Parses input into number format. Currency doesn't use strict parsing because we still want values BigDecimal
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:     * values. ICU 4.6.1 won't parse if strict is set. However, ICU 51.2 will.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:     * @param input string to parse
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:     * @param numberFormat icu NumberFormat
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:     * @param strict sets strict parsing
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:     * @throws ParseException
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:    public static Number parse(String input, NumberFormat numberFormat, boolean strict) throws ParseException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:            throw new ParseException("Input number is null", 0);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:        ParsePosition parsePosition = new ParsePosition(0);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:        numberFormat.setParseStrict(strict);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:        Number number = numberFormat.parse(input, parsePosition);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:        if (number == null || parsePosition.getIndex() == 0) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:            throw new ParseException("Unparseable number: \"" + input + "\"", parsePosition.getErrorIndex());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:        if (parsePosition.getIndex() < input.length()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/number/RuueNumberFormat.java:            throw new ParseException("Unparseable number: \"" + input + "\"", parsePosition.getIndex());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:package org.ruauframework.util.validation;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import java.io.BufferedReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import java.io.Reader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import java.io.StringReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import java.math.BigDecimal;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import java.util.Map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import org.apache.commons.logging.Log;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import org.apache.commons.logging.LogFactory;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import org.ruauframework.util.javascript.JavascriptProcessingError.Level;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import org.ruauframework.util.json.Json;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java: * Base class for all ValidationError implementations
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:public class ValidationError implements JsonSerializable {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    protected static final Log LOG = LogFactory.getLog(ValidationError.class);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private String validatingTool;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private String message;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private int line;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private int startColumn;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private String filename;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private String evidence;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private Level level;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private String rule;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:     * @param validationTool tool used to generate the errors (i.e. jslint)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public ValidationError(String tool) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        setValidatingTool(tool);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public ValidationError(String tool, Level level) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public ValidationError(String tool, String filename, int line, int startColumn, String message, String evidence,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        this.filename = filename;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        this.startColumn = startColumn;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        this.message = message;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public ValidationError(String tool, String filename, Map<String, ?> error) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        validatingTool = tool;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        this.filename = filename;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        message = (String) error.get("message");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        if (message.endsWith(".")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            message = message.substring(0, message.length() - 1);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        startColumn = toInt(error.get("startColumn"));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final String getValidatingTool() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        return validatingTool;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private void setValidatingTool(String tool) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            throw new IllegalArgumentException("invalid tool name: " + tool);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        validatingTool = tool;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final String getMessage() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        return this.message;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final void setMessage(String message) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        this.message = message;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final int getLine() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final void setLine(int line) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final int getStartColumn() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        return this.startColumn;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final void setStartColumn(int startColumn) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        this.startColumn = startColumn;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final String getFilename() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        return filename;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final void setFilename(String filename) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        this.filename = filename;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final String getRule() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final void setRule(String rule) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            throw new IllegalArgumentException("invalid rule name: " + rule);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final String getEvidence() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final void setEvidence(String evidence) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final Level getLevel() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final void setLevel(Level l) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        return toCommonFormat();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:     * @return error formatted for the jenkins and eclipse plugins
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final String toCommonFormat() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        // format: file.js [line 12, char 2] jslint @ rule: message
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        sb.append(toFilePath(filename));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        sb.append(" [line ");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        sb.append(line);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        sb.append(", column ");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        sb.append(startColumn);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        sb.append("] ");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        sb.append(validatingTool);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            sb.append(" @ ");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            sb.append(rule);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        sb.append(": ");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        sb.append(message);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:     * Parses error text from toCommonFormat and returns a ValidationError object.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public static final ValidationError fromCommonFormat(String text) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        // format: file [line 12, column 2] jslint @ rule: message
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        int comma = text.indexOf(',', lb);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        int rb = text.indexOf(']', comma);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        int at = text.indexOf('&', rb);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        if (at > cl) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            at = -1;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        String filename = text.substring(0, lb).trim();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        int line = Integer.parseInt(text.substring(lb + 6, comma));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        int startColumn = Integer.parseInt(text.substring(comma + 9, rb));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        String rule = (at != -1) ? text.substring(at + 1, cl).trim() : null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        String message = text.substring(cl + 1).trim();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        ValidationError error = new ValidationError(tool);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        error.filename = filename;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        error.startColumn = startColumn;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        error.message = message;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public final void serialize(Json json) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapBegin();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapEntry("tool", validatingTool);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapEntry("filename", toFilePath(filename));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapEntry("line", line);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapEntry("startColumn", startColumn);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapEntry("level", level);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapEntry("rule", rule);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapEntry("message", message);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapEntry("evidence", evidence);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        json.writeMapEnd();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public static final ValidationError deserialize(Map<String, ?> json) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        ValidationError error = new ValidationError((String) json.get("tool"));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        error.filename = (String) json.get("filename");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        error.line = ((BigDecimal) json.get("line")).intValue();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        error.startColumn = ((BigDecimal) json.get("startColumn")).intValue();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        error.level = Level.valueOf((String) json.get("level"));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        error.message = (String) json.get("message");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private static int toInt(Object line) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        if (line instanceof Number) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            return ((Number) line).intValue();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        if (line instanceof String) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            if ("undefined".equals(sLine)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            LOG.warn("unexpected line [" + sLine + ']');
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        throw new IllegalArgumentException(String.valueOf(line));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private static Level toLevel(String sLevel) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        if (sLevel.equals("error")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        if (sLevel.equals("warning")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            return Level.Warning;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        throw new IllegalArgumentException(sLevel);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    private static String toFilePath(String uri) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        if (uri.startsWith("file:")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        if (uri.startsWith("jar:")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            return uri.substring(uri.lastIndexOf('!') + 2);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:     * @return List of ValidationErrors parsed from the json String.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public static List<String> parseErrors(String json) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        return parseErrors(new StringReader(json));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:     * @return List of ValidationErrors parsed from the text input
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public static List<String> parseErrors(Reader input) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        BufferedReader reader = new BufferedReader(input);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        List<String> errors = Lists.newArrayList();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        while ((line = reader.readLine()) != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            errors.add(line);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:     * @return List of ValidationErrors parsed from the json input
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:    public static List<ValidationError> parseJsonErrors(Reader input) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        List<Map<String, ?>> jsonErrors = (List<Map<String, ?>>) new JsonReader().read(input);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        List<ValidationError> errors = Lists.newArrayListWithCapacity(jsonErrors.size());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:        for (Map<String, ?> jsonError : jsonErrors) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationError.java:            errors.add(deserialize(jsonError));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:package org.ruauframework.util.validation;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.io.BufferedReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.io.File;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.io.InputStreamReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.io.Reader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.net.InetAddress;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.net.MalformedURLException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.net.URL;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.net.URLConnection;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.net.URLEncoder;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.net.UnknownHostException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.util.ArrayList;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java: * Performs validation through http requests to the RuueValidationServlet.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:public final class ValidationClient {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    public static void main(String[] args) throws Exception {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        String path = args[0];
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        String report = (args.length > 1) ? args[1] : null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            validate(path, report);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            List<String> errors = validate(path);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:     * Performs validation of all definitions found under path.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    public static List<String> validate(String path) throws Exception {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        return new ValidationClient(path, null, false).performValidation();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:     * Performs validation of all definitions found under path and writes the errors to report.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    public static void validate(String path, String report) throws Exception {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        validate(path, report, false);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:     * Performs validation of all definitions found under path and writes the errors to report.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:     * @param exit if true will exit the JVM running ruau after writing the report
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    public static void validate(String path, String report, boolean exit) throws Exception {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        new ValidationClient(path, report, exit).performValidation();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    private final String path;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    private final String report;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    private final boolean exit;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    private ValidationClient(String path, String report, boolean exit) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        this.path = path;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    List<String> performValidation() throws Exception {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        String absolutePath = new File(path).getAbsolutePath();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        request.append("/qa/ruauValidation?path=");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        request.append(URLEncoder.encode(absolutePath, "UTF-8"));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            request.append("&report=");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            request.append(URLEncoder.encode(new File(report).getAbsolutePath(), "UTF-8"));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            request.append("&exit=true");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        String url = getBaseUrl().toURI().resolve(request.toString()).toString();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        log("connecting to Ruue server at: " + url);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        for (int numTrials = 4; numTrials >= 0; numTrials--) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            Reader reader = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                reader = new InputStreamReader(connection.getInputStream());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                    // errors only sent back if report is null
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                    log(new BufferedReader(reader).readLine());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                    return parseErrors(reader);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            } catch (IOException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                if (numTrials > 0) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                    // wait for ruau to start
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                    log("sleeping " + sleepSeconds + " seconds waiting for Ruue to start");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                    Thread.sleep(sleepSeconds * 1000);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            } finally {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                if (reader != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                    reader.close();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        throw new RuntimeException("unreachable");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    private static List<String> parseErrors(Reader inputReader) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        BufferedReader reader = new BufferedReader(inputReader);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        List<String> errors = new ArrayList<String>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        while ((line = reader.readLine()) != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            errors.add(line);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    private static URL getBaseUrl() throws MalformedURLException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        int port = Integer.parseInt(System.getProperty("jetty.port", "9090"));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                host = InetAddress.getLocalHost().getHostName();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:            } catch (UnknownHostException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:                host = "localhost";
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:    private static void log(String message) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/ValidationClient.java:        System.out.println("ValidationClient: " + message);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:package org.ruauframework.util.validation;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:import java.io.BufferedReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:import java.io.InputStreamReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:import java.io.Reader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:import javax.script.ScriptEngine;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:import javax.script.ScriptEngineManager;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:import javax.script.ScriptException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java: * Base class for validators using Rhino
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:public abstract class RhinoBasedValidator {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:    static {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:        // reduces script execution time to less than half with respect to the -1 default
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:    protected final String tool;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:    protected final ScriptEngine engine = new ScriptEngineManager().getEngineByName("js");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:     * @param tool tool used for validation (i.e. "jslint")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:    protected RhinoBasedValidator(String tool) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:        Reader toolReader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(tool + ".js")));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:        Reader helperReader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:            engine.eval(toolReader);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:            engine.eval(helperReader);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:        } catch (ScriptException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:        } finally {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:            toolReader.close();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/validation/RhinoBasedValidator.java:            helperReader.close();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java:package org.ruauframework.util;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java:import java.io.FilterOutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java:import java.io.OutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java:public class UncloseableOutputStream extends FilterOutputStream {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/UncloseableOutputStream.java:    public UncloseableOutputStream(OutputStream out) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:package org.ruauframework.util;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:import java.io.FilterInputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:import java.io.InputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:import java.security.MessageDigest;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:import java.security.NoSuchAlgorithmException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:import org.apache.commons.codec.binary.Base64;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:public class MD5InputStream extends FilterInputStream {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:    private final MessageDigest md5;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:    public MD5InputStream(InputStream in) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:            this.md5 = MessageDigest.getInstance("MD5");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:        } catch (NoSuchAlgorithmException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:    public int read() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:        int b = super.read();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:            md5.update((byte) b);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:    public int read(byte[] b, int off, int len) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:        int ret = in.read(b, off, len);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:            md5.update(b, off, len);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:    public byte[] getHash() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:    public String getBase64Hash() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:        return new String(Base64.encodeBase64(getHash()));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/MD5InputStream.java:        while (read(b) != -1) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:package org.ruauframework.util;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:import javax.annotation.concurrent.Immutable;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * Struct returned by {@link TrieMatcher#match(String, int)} to represent a
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * match.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java: * @see TrieMatcher
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:@Immutable
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:public class TrieMatch {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:    private final int position;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:    private final String word;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:    private final String replacement;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:    TrieMatch(int position, String word, String replacement) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:            throw new IllegalArgumentException(Integer.toString(position));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:        if (replacement == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:        this.replacement = replacement;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:     * The position of where the match was in the source. Eg,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:     *    TrieMatch match = trie.match("abcxdef");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:     *    Assert.assertEquals(3, match.getPosition());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:     * The word in the trie that matched. Eg,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:     *    TrieMatch match = trie.match("abcxdef");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:     *    Assert.assertEquals("x", match.getWord());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:     * The replacement for word in the trie that matched. Eg,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:     *    TrieMatch match = trie.match("abcxdef");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:     *    Assert.assertEquals("Y", match.getReplacement());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:    public String getReplacement() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatch.java:        return this.replacement;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:package org.ruauframework.util;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:import java.util.Arrays;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:import java.util.Collections;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:import java.util.HashMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:import java.util.LinkedList;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:import javax.annotation.CheckForNull;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:import javax.annotation.concurrent.Immutable;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * An immutable trie used for fast multiple string search and replace. It's set
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * of words and replacements are populated at initialization, and the data
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * structure creation is not the cheapest of operations, so it is best used when
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java: * @see TrieMatcher#replaceMultiple(String, TrieMatcher)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:@Immutable
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:public class TrieMatcher {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    private static final int DEFAULT_CAPACITY = 1; // trading initialization
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                                                   // time for a small memory
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * This is not the cheapest of operations.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param strings this is the list of words that make up the Trie. It is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     *            assumed that the lists are not modified once passed into the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param replacements the list of words that can be used to replace those
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     *            words. It is assumed that the lists are not modified once
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     *            passed into the Trie
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    public static TrieMatcher compile(String[] strings, String[] replacements) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        return TrieMatcher.compile(Arrays.asList(strings), Arrays.asList(replacements));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * This is not the cheapest of operations.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param strings this is the list of words that make up the Trie. It is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     *            assumed that the lists are not modified once passed into the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param replacements the list of words that can be used to replace those
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     *            words. It is assumed that the lists are not modified once
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     *            passed into the Trie
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    public static TrieMatcher compile(List<String> strings, List<String> replacements) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        return new TrieMatcher(strings, replacements);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * Search and replace multiple strings in <code>s</code> given the the words
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * and replacements given in <code>TrieMatcher</code>.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * Note, using a Trie for matching multiple strings can be much faster than
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * the using {@link RuueTextUtil#replaceSimple(String, String[], String[])},
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * however, due to the cost of creating the Trie, this is best used when 1)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * you will reuse the Trie many times 2) you have a large set of strings
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * your are searching on
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * Note, regexes aren't supported by this, see
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * {@link RuueTextUtil#replaceSimple(String, String[], String[])}.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param s the text you are searching in
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param trieMatcher the trie representing the words to search and replace
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @return the text with the search words swapped by the replacements
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    public static final String replaceMultiple(String s, TrieMatcher trieMatcher) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        if (s == null || trieMatcher == null || s.length() == 0) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        // we don't use a DeferredStringBuilder because we don't expect to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        // reuse much of the original string. it's likely all or nothing.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        // Don't allocate the buffer until it's needed.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        boolean foundMatch = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            TrieMatch match = trieMatcher.match(s, pos);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            if (match == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                if (!foundMatch) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    // No more matches, so copy the rest and get gone
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    dsb.append(s, pos, s.length());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            foundMatch = true;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            // Copy up to the match position
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            if (match.getPosition() > pos) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                dsb.append(s, pos, match.getPosition());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            // Append the replacement
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            dsb.append(match.getReplacement());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            // Advance our current position
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            pos = match.getPosition() + match.getWord().length();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param s the term to search for the terms of the trie in
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @return true if the any of the terms are contained in <code>s</code>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    public boolean containedIn(String s) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        TrieMatch match = match(s);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        return match != null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param s the term to see if it starts with any terms of the trie
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    public boolean begins(String s) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        TrieData match = begins(s, 0);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        return match != null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * Find the next match in <code>s</code>.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param s the term to search for the terms of the trie in
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param start the 0-based position to start the search from.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @return null if no match found
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    public String findIn(String s, int start) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        TrieMatch match = match(s, start);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        if (match == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        return match.getWord();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    private static class TrieData {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        String replacement;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        final HashMap<Integer, TrieData> nextChars;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        TrieData(HashMap<Integer, TrieData> next) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            this.nextChars = next;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    private final HashMap<Integer, TrieData> root;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    private final List<String> words;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    private final int minWordLength;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * Use the factory {@link #compile()} instead.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    private TrieMatcher(List<String> strings, List<String> replacements) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        if (replacements == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        if (strings.size() != replacements.size()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            throw new IllegalArgumentException("Replacements must have same size, " + replacements.size()
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    + ", as search strings " + strings.size());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        this.words = Collections.unmodifiableList(strings);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        this.root = new HashMap<Integer, TrieData>(DEFAULT_CAPACITY);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            HashMap<Integer, TrieData> current = this.root;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            minWordLen = Math.min(minWordLen, len);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                int ch = s.charAt(i);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                TrieData next = current.get(ch);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    next = new TrieData(new HashMap<Integer, TrieData>(DEFAULT_CAPACITY));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                current = next.nextChars;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                // if we're at the last char, store it and its replacement...
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    next.replacement = replacements.get(wordIndex);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * See if the given string matches any of the given words in the Trie
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @return null if none are found.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    TrieMatch match(String s) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        return match(s, 0);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * See if the given string matches any of the given words in the Trie
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @param offset where to start looking inside of the given String.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:     * @return null if none are found.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    public TrieMatch match(String s, int offset) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            // optimize the case when we don't have enough room left to contain
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            // any matches
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            TrieData data = contains(s, i);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            if (data != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                return new TrieMatch(i, data.word, data.replacement);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    private TrieData begins(String s, int offset) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        return contains(s, offset);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:    private TrieData contains(String s, int offset) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        HashMap<Integer, TrieData> current = this.root;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        LinkedList<TrieData> matches = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        TrieData firstMatch = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            int ch = s.charAt(i);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            TrieData nextData = current.get(ch);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            if (nextData == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                break;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            if (nextData.word != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                if (firstMatch == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    firstMatch = nextData;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    if (matches == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                        matches = new LinkedList<TrieData>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                        matches.add(firstMatch);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    matches.add(nextData);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            current = nextData.nextChars;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:        if (firstMatch != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            // only 1 match, so we know that's the one
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            if (matches == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                return firstMatch;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:            // as specified by the input to the trie
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                for (TrieData td : matches) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/TrieMatcher.java:                    if (word.equals(td.word)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:package org.ruauframework.util.css;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:import java.io.File;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:import java.util.Map;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:import javax.script.Invocable;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:import org.ruauframework.util.IOUtil;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:import org.ruauframework.util.validation.RhinoBasedValidator;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:import org.ruauframework.util.validation.ValidationError;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java: * Validates .css using csslint
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:public final class CSSLintValidator extends RhinoBasedValidator {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:    public CSSLintValidator() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        String javaVersion = System.getProperty("java.version");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        int sep = javaVersion.indexOf('.', javaVersion.indexOf('.') + 1);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        float majorMinor = Float.parseFloat(javaVersion.substring(0, sep));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        if (majorMinor < 1.7) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:            throw new UnsupportedOperationException(
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:                    "CSSLintValidator requires JDK 1.7 or greater, current is: " + javaVersion);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:     * @param filename filename to use in the Validation errors generated
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:     * @param source .css source to validate
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:     * @param disableRulesForRuue disables csslint rules that generate bogus for ruau .css files (see
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:     *            app/main/core/build/.csslintrc)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:    public List<ValidationError> validate(String filename, String source, boolean disableRulesForRuue) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        List<ValidationError> errors = Lists.newArrayList();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:            @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:            List<Map<String, ?>> lintErrors = (List<Map<String, ?>>) ((Invocable) engine).invokeFunction(tool
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:                    source, disableRulesForRuue);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:                Map<String, ?> error = lintErrors.get(i);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:                errors.add(new ValidationError(tool, filename, error));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        } catch (Exception e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:            // TODO: should be reported as a validation error
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:    public static void main(String[] args) throws Exception {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        String filename = args[0];
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        String source = IOUtil.readTextFile(new File(filename));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        List<ValidationError> ret = new CSSLintValidator().validate(filename, source, true);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/css/CSSLintValidator.java:        for (ValidationError error : ret) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:package org.ruauframework.util;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:import java.util.Set;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:public interface ServiceLoader {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:     * return an implementation of the given class
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:    <T> T get(Class<T> type);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:     * return an instance of the given class that has been assigned the given
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:     * name
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:    <T> T get(Class<T> type, String name);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:     * Return all implementations of the given class
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLoader.java:    <T> Set<T> getAll(Class<T> type);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:package org.ruauframework.util;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:import java.util.Collection;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:import java.util.Set;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:import java.util.concurrent.ConcurrentHashMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:import java.util.concurrent.ConcurrentMap;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:import com.google.common.base.Optional;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java: * Delegates and combines calls to all ServiceLoaders currently in the classpath
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:public class ServiceLocator implements ServiceLoader {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private static ServiceLocator instance = createInstance();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private List<ServiceLoader> loaders = Lists.newArrayList();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * Cache backing get(Class)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private final ConcurrentMap<Class<?>, Optional<Object>> instanceCache = new ConcurrentHashMap<Class<?>, Optional<Object>>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * Cache backing get(Class, String)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private final ConcurrentMap<Class<?>, ConcurrentMap<String, Optional<Object>>> namedInstanceCache = new ConcurrentHashMap<Class<?>, ConcurrentMap<String, Optional<Object>>>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * Cache backing getAll(Class)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private final ConcurrentMap<Class<?>, Set<?>> setCache = new ConcurrentHashMap<Class<?>, Set<?>>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private static ThreadLocal<ServiceLoader> alternateServiceLocator = new ThreadLocal<ServiceLoader>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * If this is not called, then ServiceLoaderImpl is used as the only
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * ServiceLoader. If this is called, all caches will be invalidated and the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * current loader list will be replaced. This allows you to register your
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * own service loaders for adapting to Spring, JNDI, or others. The loaders
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * will be used in the order provided. For methods that return a single
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * object, the first one to return something non-null will win, and no
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * others will be consulted. So, even if a latter loader would have a bean
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * that overrides an earlier one because it is marked with @Primary, the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * earlier one will be used.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:     * @param loaders
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    public static void init(ServiceLoader... loaders) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        synchronized (instance) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            instance.loaders = Lists.newArrayList(loaders);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            instance.instanceCache.clear();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            instance.namedInstanceCache.clear();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            instance.setCache.clear();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private static ServiceLocator createInstance() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        ServiceLocator ret = new ServiceLocator();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        ServiceLocatorConfigurator config = ret.get(ServiceLocatorConfigurator.class);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            ret.loaders = config.getServiceLoaders();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    public static final ServiceLoader get() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    	ServiceLoader altInstance = alternateServiceLocator.get();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    	if(alternateServiceLocator.get() != null){
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    		return altInstance;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        return instance;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private ServiceLocator() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        loaders.add(ServiceLoaderImpl.get());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    public <T> T get(Class<T> type) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            Optional<Object> o = instanceCache.get(type);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                o = loadInstance(type);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                instanceCache.putIfAbsent(type, o);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        } catch (Exception e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            throw new ServiceLocatorException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    public <T> Set<T> getAll(Class<T> type) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            Set<?> s = setCache.get(type);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                s = loadSet(type);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                setCache.putIfAbsent(type, s);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        } catch (Exception e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            throw new ServiceLocatorException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    public <T> T get(Class<T> type, String name) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            ConcurrentMap<String, Optional<Object>> c = namedInstanceCache.get(type);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                c = new ConcurrentHashMap<String, Optional<Object>>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                namedInstanceCache.putIfAbsent(type, c);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            Optional<Object> o = c.get(name);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                o = loadNamedInstance(type, name);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                c.putIfAbsent(name, o);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        } catch (Exception e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            throw new ServiceLocatorException(e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private Optional<Object> loadInstance(Class<?> key) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        for (ServiceLoader loader : loaders) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            Object val = loader.get(key);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            if (val != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                return Optional.of(val);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        return Optional.absent();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private Optional<Object> loadNamedInstance(Class<?> clazz, String key) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        for (ServiceLoader loader : loaders) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            Object val = loader.get(clazz, key);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            if (val != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                return Optional.of(val);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        return Optional.absent();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    private Set<?> loadSet(Class<?> key) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        Set<Object> ret = Sets.newHashSet();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        for (ServiceLoader loader : loaders) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            Collection<?> val = loader.getAll(key);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            if (val != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:                ret.addAll(val);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:    public static class ServiceLocatorException extends RuntimeException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        private static final long serialVersionUID = 3754864787887097292L;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        public ServiceLocatorException(Throwable cause) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            super(cause);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:        public ServiceLocatorException(String reason) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/ServiceLocator.java:            super(reason);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:package org.ruauframework.util.text;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import java.io.InputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import java.io.Reader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import java.nio.ByteBuffer;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import java.nio.CharBuffer;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import java.nio.charset.Charset;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import java.security.MessageDigest;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import java.security.NoSuchAlgorithmException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import java.util.Arrays;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:import org.apache.commons.codec.binary.Base64;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * A wrapper around an MD5 hash. This functions as a future, being created
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java: * before the hash value is actually computed.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:public class Hash {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * Radix for hash bytes to string, using 0-9a-f. We might someday want to be
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * base64 to have a shorter string, but that makes the encoding marginally
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * more complex since we have to handle byte-wrap boundaries ourselves.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    private byte[] value;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * Creates a new, empty {@code Hash} to be filled in later with either
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * {@link #setHash(byte[])} or {@link #setHash(Reader)}.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * This is a static factory method to keep {@code Hash} not
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * default-constructible, to avoid Java accidentally making empty promises
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * that won't be filled.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public static Hash createPromise() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        return new Hash();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    /** Creates a Hash object with given contents. */
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public Hash(byte[] input) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        setHash(input);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * Computes the hash of a Java file, given its fully-qualified class name.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * @param classname the name of the class file to read. It should be dotted,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     *            not slash-separated, and should NOT be an inner class or
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     *            similar (if only because the entire class file participates in
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     *            the hashing).
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * @throws IOException if the class file cannot be read.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public Hash(String classname) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        assert classname.indexOf('$') < 0;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        InputStream bytecode = Hash.class.getResourceAsStream("/" + classname.replace('.', '/') + ".class");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            value = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            MessageDigest digest = MessageDigest.getInstance("MD5");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            int read = bytecode.read(buffer);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            while (read >= 0) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:                digest.update(buffer, 0, read);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:                read = bytecode.read(buffer);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            value = digest.digest();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        } catch (NoSuchAlgorithmException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            throw new RuntimeException("MD-5 is a required hash algorithm, but isn't defined", e);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * Consumes a Reader to compute the hash. This is a convenience for
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * {@link #Hash()} and {@link #setHash(Reader)}.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public Hash(Reader reader) throws IOException, RuntimeException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            setHash(reader);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        } catch (IllegalStateException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            throw new RuntimeException("A brand-new Hash unknown to anything else claims it was set twice?!");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    protected Hash() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        value = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        if (value == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            return "no-hash-value";
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        return Base64.encodeBase64URLSafeString(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public boolean equals(Object o) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        if (o instanceof Hash) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            return Arrays.equals(value, ((Hash) o).value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        return false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public int hashCode() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        if (value == null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            return 3; // arbitrary value, but I dislike 0 as a hash precisely
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:                      // because it's so normal
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        return Arrays.hashCode(value);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public boolean isSet() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        return value != null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * Assigns the hash value.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * @param hash the new hash
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * @throws IllegalStateException if already set.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public void setHash(byte[] hash) throws IllegalStateException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        if (value != null && !value.equals(hash)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            throw new IllegalStateException("Cannot set hash twice");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        value = Arrays.copyOf(hash, hash.length);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * Consumes and closes a reader to generate its contents' hash.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:     * @param reader the reader for pulling content. Must be at the beginning of file.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public void setHash(Reader reader) throws IOException, IllegalStateException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            MessageDigest digest = MessageDigest.getInstance("MD5");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            Charset utf8 = Charset.forName("UTF-8");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            CharBuffer cbuffer = CharBuffer.allocate(2048);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            while (reader.read(cbuffer) >= 0) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:                digest.update(bytes);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:                cbuffer.clear();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            setHash(digest.digest());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        } catch (NoSuchAlgorithmException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            throw new RuntimeException("MD5 is a required MessageDigest algorithm, but is not registered here.");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        } finally {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            reader.close();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:    public static class StringBuilder {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        private final MessageDigest digest;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        private final Charset utf8;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            utf8 = Charset.forName("UTF-8");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:                digest = MessageDigest.getInstance("MD5");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            } catch (NoSuchAlgorithmException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:                throw new RuntimeException("MD5 is a required MessageDigest algorithm, but is not registered here.");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:         * Add data to a hash calculation.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        public void addString(String string) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:                digest.update(bytes);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:        public Hash build() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            Hash hash = new Hash();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            hash.setHash(digest.digest());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/Hash.java:            return hash;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:package org.ruauframework.util.text;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:import java.io.Serializable;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:import java.util.regex.Matcher;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:import java.util.regex.Pattern;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * A very simple pattern matcher based on shell globbing.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * This matcher actually only matches the simplified patterns with '*' meaning
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * any string. All other globbing characters are illegal.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java: * Note that for the moment, this is case insensitive...
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:@SuppressWarnings("serial")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:public class GlobMatcher implements Serializable {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    private static final Pattern stringPattern = Pattern.compile("[a-zA-Z0-9_*]*");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    private static final String ALL_STRING = "*";
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    private static final Pattern STAR = Pattern.compile("\\*");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    private final String original;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    private final Pattern pattern;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    private final boolean all;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    private final boolean constant;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    public GlobMatcher(String glob) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:        if (!stringPattern.matcher(glob).matches()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            throw new IllegalArgumentException("Illegal glob pattern: " + glob);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:        this.original = glob;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:        if (glob.equals(ALL_STRING)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            this.all = true;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            this.pattern = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            this.constant = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:        } else if (glob.contains(ALL_STRING)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            // Might need to add '.' and an escape mechanism or '/'
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            Matcher matcher = STAR.matcher(glob);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            this.pattern = Pattern.compile(matcher.replaceAll(".*"), Pattern.CASE_INSENSITIVE);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            this.constant = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            this.all = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            this.pattern = null;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            this.constant = true;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            this.all = false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    public boolean isConstant() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:        return this.constant;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    public boolean isAll() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:        return this.all;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:    public boolean match(String toMatch) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:        if (this.all) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:        if (this.constant) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            return this.original.equalsIgnoreCase(toMatch);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:            return this.pattern.matcher(toMatch).matches();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/text/GlobMatcher.java:        return this.original;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:package org.ruauframework.util;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:import java.io.InputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:import javax.annotation.Nonnull;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:import javax.annotation.Nullable;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:import javax.annotation.concurrent.NotThreadSafe;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * InputStream that limits the length of the stream to a construction-specified
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * value. Note that calls to close() on this InputStream do not close the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * wrapped InputStream.<br>
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * The main use case for this class is creating a child InputStream on a main
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java: * InputStream that can then be passed to an InputStream reader that fully
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:@NotThreadSafe
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:public class LimitedLengthInputStream extends InputStream {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    private final InputStream in;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    private long pos;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    private final long length;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    @Nullable
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    private StreamFinishedListener listener;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:     * Listener that gets called once the stream has been consumed. This gets
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:     * called only once
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    public static interface StreamFinishedListener {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:         * Notifies listeners that the LimitedLengthInputStream has been fully
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:         * @param wrappedStream The underlying stream that the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:         *            LimitedLengthInputStream was constructed with
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        public void streamFinished(InputStream wrappedStream) throws IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:     * Wraps the given InputStream with a LimitedLengthInputStream instance that
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:     * restricts the number of read bytes to the given length. An optional
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:     * StreamFinishedListener can be passed in to get notified when the stream
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:     * has been consumed
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    public LimitedLengthInputStream(@Nonnull InputStream in, long length, @Nullable StreamFinishedListener listener)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            throw new IllegalArgumentException("in must not be null, and length must be >= 0");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        // If we have a zero length, then we're already at the end
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            endOfStreamReached();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    private void endOfStreamReached() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            listener.streamFinished(in);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    public int read() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            endOfStreamReached();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            final int byteRead = this.in.read();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            if (byteRead >= 0) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:                    endOfStreamReached();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            } else if (byteRead == -1) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:                endOfStreamReached();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            return byteRead;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    public int read(byte[] b) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        return read(b, 0, b.length);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    public int read(byte[] b, int off, int len) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        // Copied from InputStream.read(byte[],int,int)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        // Read within our bounds
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            endOfStreamReached();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        final long remaining = length - pos;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        if (remaining <= Integer.MAX_VALUE) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            len = Math.min(len, (int) remaining);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        final int bytesRead = this.in.read(b, off, len);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        if (bytesRead == -1) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            endOfStreamReached();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            pos += bytesRead;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:                endOfStreamReached();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        return bytesRead;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        n = Math.min(n, length - pos);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        final long bytesSkipped = this.in.skip(n);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            endOfStreamReached();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    public int available() throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            final long remaining = length - pos;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            if (remaining <= Integer.MAX_VALUE) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:                return Math.min((int) remaining, in.available());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:                return in.available();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        // Don't close the underlying stream, but we'll instead skip ahead to
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            final long remaining = length - pos;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            in.skip(remaining); // if we reach EOF before getting to remaining,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:                                // then that's okay, since we're still at the
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            pos += remaining;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:            endOfStreamReached();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    public synchronized void mark(int readlimit) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        // Do nothing, as the contract requires when markSupported is false
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        throw new IOException("mark not supported");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:    public boolean markSupported() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:        return false;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/LimitedLengthInputStream.java:     * Returns the total number of bytes that this LimitedLengthInputStream is
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java:package org.ruauframework.util;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java:import org.ruauframework.util.adapter.SourceControlAdapter;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java: * Entry point for accessing Ruue services
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java:public class RuueUtil {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java:     * Get the Source Control Adapter : Allows interaction with the source
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java:    public static SourceControlAdapter getSourceControlAdapter() {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java:        return RuueUtil.get(SourceControlAdapter.class);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java:    public static <T> T get(Class<T> type) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/RuueUtil.java:        return ServiceLocator.get().get(type);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:package org.ruauframework.util;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.BufferedReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.File;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.FileInputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.FileOutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.IOException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.InputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.InputStreamReader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.OutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.Reader;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.io.Writer;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.net.URI;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.net.URISyntaxException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.util.ArrayList;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.util.List;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.util.jar.JarOutputStream;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.util.logging.Level;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.util.logging.Logger;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import java.util.zip.ZipEntry;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:import com.google.common.base.Preconditions;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:public class IOUtil {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static long copyStream(InputStream in, OutputStream out) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        return copyStream(in, out, new byte[8192]);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static long copyStream(InputStream in, OutputStream out, byte[] buf) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        return copyStream(in, out, buf, null, null);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static long copyStream(InputStream in, OutputStream out, byte[] buf, Logger logger, Level level)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        return copyStream(in, out, buf, logger, level, true);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static long copyStream(InputStream in, OutputStream out, byte[] buf, Logger logger, Level level,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            boolean closeStream) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        return copyStream(in, out, buf, closeStream, logger, level);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static long copyStream(InputStream in, OutputStream out, byte[] buf, boolean close, Logger log, Level level)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        return copyStream(in, out, buf, close, log, level, Long.MAX_VALUE);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static long copyStream(InputStream in, OutputStream out, byte[] buf, boolean closeInputStream)
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        return copyStream(in, out, buf, closeInputStream, null, null, Long.MAX_VALUE);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static long copyStream(InputStream in, OutputStream out, byte[] buf, boolean closeStream, Logger logger,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            Level level, final long numBytesToCopy) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                    && (len = in.read(buf, 0, (int) Math.min(buf.length, (numBytesToCopy - copied)))) != -1) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                if (logger != null && logger.isLoggable(level)) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                throw new IOException("expected to copy " + numBytesToCopy + ", actually copied " + copied);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        } finally {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            } finally {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                if (closeStream) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static void copyStream(Reader in, Writer out) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        char[] buf = new char[8192];
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            while ((len = in.read(buf)) != -1) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        } finally {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static String readTextFile(File f) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        Reader br = new BufferedReader(new InputStreamReader(new FileInputStream(f), "UTF-8"));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        return readText(br);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static String readText(Reader br) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        char[] buff = new char[READ_BUFFER];
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        int read;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        while ((read = br.read(buff, 0, READ_BUFFER)) != -1) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            sb.append(buff, 0, read);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * Count the number of characters read by the stream while throwing away the data. The stream will be closed after
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * reading, so it should not be used again.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param br
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static long countNumberOfCharacters(Reader br) throws IOException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        char[] buff = new char[READ_BUFFER];
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        int read;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        while ((read = br.read(buff, 0, READ_BUFFER)) != -1) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            len += read;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * A hopefully more robust to concurrent creation mkdirs method:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4742723
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static void mkdirs(File f) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        File canonFile;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            canonFile = f.getCanonicalFile();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        } catch (IOException e) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        File parent = canonFile.getParentFile();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        if (parent != null) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            mkdirs(parent); // ignore the return as it may have been created
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                            // already
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        // lastly, let's make this directory
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        canonFile.mkdir();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * List all files inside the given directory
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param rootDir
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param excludeDirs true if only files need to be listed and not directories. false if both.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param recursive true to list files from sub folders recursively
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static File[] listFiles(File rootDir, boolean excludeDirs, boolean recursive) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        List<File> files = new ArrayList<File>();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            List<File> rf = new ArrayList<File>(files.size());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                    rf.add(f);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        return files.toArray(new File[files.size()]);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param files
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param depth
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    private static void listFiles(File at, List<File> files, int depth) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        if (at.isDirectory()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            File[] ff = at.listFiles();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                    files.add(f);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * This exception is thrown by {@link #delete(File)} if some level of delete failed.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    @SuppressWarnings("serial")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static class DeleteFailedException extends Exception {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        private final File file;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        public DeleteFailedException(String message, File file) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            super(message);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * This exception is thrown by {@link #delete(File)} if one of the directories is not readable.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    @SuppressWarnings("serial")
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static class DirectoryNotReadableException extends DeleteFailedException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        public DirectoryNotReadableException(String message, File file) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            super(message, file);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * This makes a best attempt to delete the file/directory in question. It will recurse down any directory structure
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * and delete all subdirectories/files. If for some reason a directory is not readable, we throw
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * {@link DirectoryNotReadableException}, with the name of the directory. If a delete fails, we throw
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * {@link DeleteFailedException} with the file we could not delete.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param file The file to recursively delete.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @throws DeleteFailedException if the delete fails for any reason.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static void delete(File file) throws DeleteFailedException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                throw new DirectoryNotReadableException("Please fix permissions for " + file.getAbsolutePath(), file);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            throw new DeleteFailedException("Failed to delete " + file.getAbsolutePath(), file);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * Create a JAR file containing the directory structure given by the folder.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param folder the folder to recursively scan to fill the jar
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:     * @param jarFile the file that should contain the newly created jar.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static void createJarFromFolder(File folder, File jarFile) throws IOException, URISyntaxException {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        if (!jarFile.createNewFile()) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            throw new IOException("Unable to create jarfile at " + jarFile.getPath());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        JarOutputStream out = new JarOutputStream(new FileOutputStream(jarFile));
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        File[] files = IOUtil.listFiles(folder, false, true);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:        URI folderURI = new URI(folder.getPath());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            URI path = new URI(f.getPath());
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            String pathString = folderURI.relativize(path).getPath();
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                // Directory entries in a JAR must end with a /
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                if (!pathString.endsWith("/")) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                    pathString = pathString + '/';
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            ZipEntry ze = new ZipEntry(pathString);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                FileInputStream in = new FileInputStream(f);
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                    while ((count = in.read(buffer)) > 0) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:                } finally {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:    public static void close(Writer writer) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/IOUtil.java:            } catch (IOException ignore) {
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * You may obtain a copy of the License at
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * limitations under the License.
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java:package org.ruauframework.util.maven;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java:import org.apache.maven.plugin.AbstractMojo;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java:import org.apache.maven.plugin.MojoExecutionException;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java:import java.io.File;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java:import java.nio.file.Path;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java:import java.nio.file.Paths;
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * example command-line execution for non-test bundles:
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: * mvn org.ruauframework:ruau-util:enum
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: *   DbaseScanDirectory=/home/eric.anderson/ruau/ruau
ruau/ruau-util/src/nAmE/java/org/ruauframework/util/maven/EnumMojo.java: *    -DscanDirectoryList=ruau/src/main,ruau-components/src/main,
