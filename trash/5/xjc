ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:                        WebDriverTestCase test = (WebDriverTestCase) ts.testAt(j);
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:                        Set<BrowserType> browserList = WebDriverUtil.getBrowserListForTestRun(test.getTargetBrowsers(),
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:                    } catch (ClassCastException e) {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:                        // If we have a test class without any test methods we don't get an error until we try cast the
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:                        // empty TestSuite to a WebDriverTestCase. Ignore and keep going.
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:                // Javascript component test suites are handled differently.
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:     * Dig a little deeper to get to the individual Javascript tests.
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:    private void processJsTestSuite(TestSuite ts) {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:                    ComponentJSTestSuiteTest.ComponentTestCase test = (ComponentJSTestSuiteTest.ComponentTestCase) ts2
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:                    Set<BrowserType> browserList = WebDriverUtil.getBrowserListForTestRun(test.getTargetBrowsers(),
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:    private void incrementCounters(WebDriverTestCase test, Set<BrowserType> browsers) {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        totalTestCount++;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            browserMap.get(bt).getIgnoredTests().add(test.getQualifiedName());
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:    @RuueEnabled
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:    public int getTotalTestCount() {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        return totalTestCount;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:    @RuueEnabled
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        List<Browser> list = new ArrayList<>(browserMap.values());
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        Collections.sort(list); // Put in alphabetical order
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:    public class Browser implements JsonSerializable, Comparable<Browser> {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        public final String name;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        public final List<String> ignoredTests;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        public Browser(String name) {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            this.name = name;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            this.ignoredTests = Lists.newArrayList();
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        @RuueEnabled
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        public String getName() {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            return this.name;
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        @RuueEnabled
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        @RuueEnabled
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        public void serialize(Json json) throws IOException {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            json.writeMapBegin();
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            json.writeMapEntry("name", this.name);
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            json.writeMapKey("ignoredTests");
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            json.writeValue(this.ignoredTests);
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            json.writeMapEntry("ignoredTestCount", "" + ignoredTests.size());
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            json.writeMapEnd();
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:        public int compareTo(Browser o) {
ruau/ruau/src/test/java/test/model/ExcludedTestsListModel.java:            int result = this.name.compareTo(o.getName());
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java: * limitations under the License.
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:package test.model;
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:import org.ruauframework.system.Annotations.*;
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:import java.util.ArrayList;
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:import java.util.HashMap;
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:import java.util.List;
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:import java.util.Map;
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:public class test_InfiniteListCsccModel {
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:    private List<Map<String, Object>> items;
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:    private static Map<String, Object> fields = new HashMap<String, Object>() {
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:    	private static final long serialVersionUID = 4937664306513003195L;
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:        put("isClosed", false);
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:    private static Map<String, Object> newRow(Integer index) {
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:    	@SuppressWarnings("unchecked")
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:		HashMap<String, Object> items =  (HashMap<String,Object>)((HashMap<String,Object>)fields).clone();
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:    // create a set of X items that adds a sequentially numbered id in the form: Server N
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:        items = new ArrayList<>();
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:            items.add(newRow(i));
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:    @RuueEnabled
ruau/ruau/src/test/java/test/model/test_InfiniteListCsccModel.java:    public List<Map<String, Object>> getItems() {
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java: * limitations under the License.
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java:package test.model;
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java:public class TestModelThrowsInGetter {
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java:    @RuueEnabled
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java:    public String getBadThing() {
ruau/ruau/src/test/java/test/model/TestModelThrowsInGetter.java:        throw new RuntimeException("intentional exception for bad thing");
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java: * limitations under the License.
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:package test.model;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:import java.util.ArrayList;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:import org.ruauframework.Ruue;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:public class TestReinitializeModel {
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:	@SuppressWarnings("unchecked")
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:	public TestReinitializeModel() throws QuickFixException {
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:		this.value = (String) Ruue.getContextService().getCurrentContext().getCurrentComponent().getAttributes().getValue("attr");
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:		this.valueParent = (String) Ruue.getContextService().getCurrentContext().getCurrentComponent().getAttributes().getValue("attrInParent");
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:		this.itemList = (ArrayList<String>) Ruue.getContextService().getCurrentContext().
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:                getCurrentComponent().getAttributes().getValue("listToShow");
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:	@RuueEnabled
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:    public String getValue() {
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:    	return value;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:	@RuueEnabled
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:    public String getValueParent() {
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:    	return valueParent;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:	@RuueEnabled
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:    public ArrayList<String> getItemList() {
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:    private String value;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:    private String valueParent;
ruau/ruau/src/test/java/test/model/TestReinitializeModel.java:    private ArrayList<String> itemList;
ruau/ruau/src/test/java/test/controller/JavaController.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/test/controller/JavaController.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/test/controller/JavaController.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/test/controller/JavaController.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/test/controller/JavaController.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/test/controller/JavaController.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/test/controller/JavaController.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/test/controller/JavaController.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/test/controller/JavaController.java: * limitations under the License.
ruau/ruau/src/test/java/test/controller/JavaController.java:package test.controller;
ruau/ruau/src/test/java/test/controller/JavaController.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/src/test/java/test/controller/JavaController.java:import org.ruauframework.system.Annotations.Controller;
ruau/ruau/src/test/java/test/controller/JavaController.java:public class JavaController {
ruau/ruau/src/test/java/test/controller/JavaController.java:    @RuueEnabled
ruau/ruau/src/test/java/test/controller/JavaController.java:    public static void noArgs() {
Binary file ruau/ruau_oss.pdf matches
ruau/ruau-impl/.settings/org.eclipse.jdt.core.prefs:org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
ruau/ruau-impl/.settings/org.eclipse.jdt.core.prefs:encoding/src/nAmE/java=UTF-8
ruau/ruau-impl/.settings/org.eclipse.jdt.core.prefs:encoding/src/nAmE/resources=UTF-8
ruau/ruau-impl/.settings/org.eclipse.jdt.core.prefs:encoding/src/test/java=UTF-8
ruau/ruau-impl/.settings/org.eclipse.jdt.core.prefs:org.eclipse.jdt.core.compiler.compliance=1.7
ruau/ruau-impl/.classpath:<classpath>
ruau/ruau-impl/.classpath:  <classpathentry kind="src" path="src/test/java" output="target/test-classes" including="**/*.java"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="src" path="src/test" output="target/test-classes" including="results/**/*|testdata/**/*" excluding="**/*.java"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="src" path="src/nAmE/java" including="**/*.java"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="src" path="src/nAmE/resources" including="**/*.js" excluding="**/*.java"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="output" path="target/classes"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/javax/servlet/javax.servlet-api/3.0.1/javax.servlet-api-3.0.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="src" path="/ruau"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="src" path="/ruau-util"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/httpcomponents/httpclient/4.3.1/httpclient-4.3.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/httpcomponents/httpcore/4.3.1/httpcore-4.3.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/commons-codec/commons-codec/1.5/commons-codec-1.5.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/guava/guava/14.0.1/guava-14.0.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/javascript/closure-compiler/v20130411/closure-compiler-v20130411.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/args4j/args4j/2.0.28/args4j-2.0.28.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/protobuf/protobuf-java/2.4.1/protobuf-java-2.4.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/json/json/20080701/json-20080701.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/maven/maven-plugin-api/2.0/maven-plugin-api-2.0.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/joda-time/joda-time/2.1/joda-time-2.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/com/ibm/icu/icu4j/4.6.1/icu4j-4.6.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/net/sourceforge/findbugs/annotations/1.2.0/annotations-1.2.0.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/reflections/reflections/0.9.8/reflections-0.9.8.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/javassist/javassist/3.12.1.GA/javassist-3.12.1.GA.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/com/salesforce/omakase/0.2.2/omakase-0.2.2.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-api/1.6.4/slf4j-api-1.6.4.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="src" path="/ruau-impl-expression"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/antlr/antlr/3.3/antlr-3.3.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/antlr/antlr-runtime/3.3/antlr-runtime-3.3.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="src" path="/ruau-components"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/seleniumhq/selenium/selenium-support/2.42.2/selenium-support-2.42.2.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/seleniumhq/selenium/selenium-api/2.42.2/selenium-api-2.42.2.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/seleniumhq/selenium/selenium-remote-driver/2.42.2/selenium-remote-driver-2.42.2.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/cglib/cglib-nodep/2.1_3/cglib-nodep-2.1_3.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-exec/1.1/commons-exec-1.1.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/net/java/dev/jna/jna/3.4.0/jna-3.4.0.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/net/java/dev/jna/platform/3.4.0/platform-3.4.0.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/seleniumhq/selenium/selenium-firefox-driver/2.42.2/selenium-firefox-driver-2.42.2.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/commons-io/commons-io/2.2/commons-io-2.2.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/log4j/log4j/1.2.16/log4j-1.2.16.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-vfs2/2.0/commons-vfs2-2.0.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/maven/scm/maven-scm-api/1.4/maven-scm-api-1.4.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/codehaus/plexus/plexus-utils/1.5.6/plexus-utils-1.5.6.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/maven/scm/maven-scm-provider-svnexe/1.4/maven-scm-provider-svnexe-1.4.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/maven/scm/maven-scm-provider-svn-commons/1.4/maven-scm-provider-svn-commons-1.4.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/regexp/regexp/1.3/regexp-1.3.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/mozilla/rhino/1.7R4/rhino-1.7R4.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-nop/1.6.4/slf4j-nop-1.6.4.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/uiautomation/ios-client/0.6.5/ios-client-0.6.5.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/uiautomation/ios-common/0.6.5/ios-common-0.6.5.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/webbitserver/webbit/0.4.14/webbit-0.4.14.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/io/netty/netty/3.5.2.Final/netty-3.5.2.Final.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-servlet/7.2.0.v20101020/jetty-servlet-7.2.0.v20101020.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-security/7.2.0.v20101020/jetty-security-7.2.0.v20101020.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-server/7.2.0.v20101020/jetty-server-7.2.0.v20101020.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-continuation/7.2.0.v20101020/jetty-continuation-7.2.0.v20101020.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-http/7.2.0.v20101020/jetty-http-7.2.0.v20101020.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-io/7.2.0.v20101020/jetty-io-7.2.0.v20101020.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-util/7.2.0.v20101020/jetty-util-7.2.0.v20101020.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/junit/junit/4.11/junit-4.11.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
ruau/ruau-impl/.classpath:  <classpathentry kind="var" path="M2_REPO/org/mockito/mockito-all/1.9.5/mockito-all-1.9.5.jar"/>
ruau/ruau-impl/.classpath:</classpath>
ruau/ruau-impl/pom.xml:<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
ruau/ruau-impl/pom.xml:    <artifactId>ruau-impl</artifactId>
ruau/ruau-impl/pom.xml:    <parent>
ruau/ruau-impl/pom.xml:        <groupId>org.ruauframework</groupId>
ruau/ruau-impl/pom.xml:        <artifactId>ruau-framework</artifactId>
ruau/ruau-impl/pom.xml:        <relativePath>../pom.xml</relativePath>
ruau/ruau-impl/pom.xml:    </parent>
ruau/ruau-impl/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>ruau</artifactId>
ruau/ruau-impl/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>ruau-util</artifactId>
ruau/ruau-impl/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>ruau-impl-expression</artifactId>
ruau/ruau-impl/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>ruau-components</artifactId>
ruau/ruau-impl/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>ruau</artifactId>
ruau/ruau-impl/pom.xml:            <type>test-jar</type>
ruau/ruau-impl/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>ruau-util</artifactId>
ruau/ruau-impl/pom.xml:            <type>test-jar</type>
ruau/ruau-impl/pom.xml:            <artifactId>selenium-support</artifactId>
ruau/ruau-impl/pom.xml:            <artifactId>selenium-api</artifactId>
ruau/ruau-impl/pom.xml:            <artifactId>selenium-remote-driver</artifactId>
ruau/ruau-impl/pom.xml:            <artifactId>selenium-firefox-driver</artifactId>
ruau/ruau-impl/pom.xml:            <artifactId>log4j</artifactId>
ruau/ruau-impl/pom.xml:            <artifactId>commons-logging</artifactId>
ruau/ruau-impl/pom.xml:            <groupId>org.apache.commons</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>commons-vfs2</artifactId>
ruau/ruau-impl/pom.xml:            <groupId>org.mozilla</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>rhino</artifactId>
ruau/ruau-impl/pom.xml:            <artifactId>commons-io</artifactId>
ruau/ruau-impl/pom.xml:            <artifactId>slf4j-nop</artifactId>
ruau/ruau-impl/pom.xml:            <artifactId>icu4j</artifactId>
ruau/ruau-impl/pom.xml:            <groupId>com.salesforce</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>omakase</artifactId>
ruau/ruau-impl/pom.xml:            <groupId>org.uiautomation</groupId>
ruau/ruau-impl/pom.xml:            <artifactId>ios-client</artifactId>
ruau/ruau-impl/pom.xml:        <ruau.home>${basedir}/..</ruau.home>
ruau/ruau-impl/pom.xml:        <xunit.js.ruauImpl>${basedir}/src/nAmE/resources/</xunit.js.ruauImpl>
ruau/ruau-impl/pom.xml:                <directory>src/nAmE/resources</directory>
ruau/ruau-impl/pom.xml:                <groupId>org.apache.maven.plugins</groupId>
ruau/ruau-impl/pom.xml:                <artifactId>maven-compiler-plugin</artifactId>
ruau/ruau-impl/pom.xml:                <configuration>
ruau/ruau-impl/pom.xml:                    <target>1.7</target>
ruau/ruau-impl/pom.xml:                </configuration>
ruau/ruau-impl/pom.xml:                <groupId>org.apache.maven.plugins</groupId>
ruau/ruau-impl/pom.xml:                <artifactId>maven-dependency-plugin</artifactId>
ruau/ruau-impl/pom.xml:                        <phase>generate-test-resources</phase>
ruau/ruau-impl/pom.xml:                        <id>unpack-xunit</id>
ruau/ruau-impl/pom.xml:                <artifactId>maven-resources-plugin</artifactId>
ruau/ruau-impl/pom.xml:                        <phase>process-test-resources</phase>
ruau/ruau-impl/pom.xml:                        <configuration>
ruau/ruau-impl/pom.xml:                            <outputDirectory>target/test-classes/components_ruau_impl</outputDirectory>
ruau/ruau-impl/pom.xml:                        </configuration>
ruau/ruau-impl/pom.xml:                <artifactId>maven-antrun-plugin</artifactId>
ruau/ruau-impl/pom.xml:                        <phase>generate-test-resources</phase>
ruau/ruau-impl/pom.xml:                <groupId>org.codehaus.mojo</groupId>
ruau/ruau-impl/pom.xml:                <artifactId>appassembler-maven-plugin</artifactId>
ruau/ruau-impl/pom.xml:                        <phase>package</phase>
ruau/ruau-impl/pom.xml:                        <goals>
ruau/ruau-impl/pom.xml:                            <goal>assemble</goal>
ruau/ruau-impl/pom.xml:                        </goals>
ruau/ruau-impl/pom.xml:                        <configuration>
ruau/ruau-impl/pom.xml:                            <assembleDirectory>target</assembleDirectory>
ruau/ruau-impl/pom.xml:                            <generateRepository>false</generateRepository>
ruau/ruau-impl/pom.xml:                            <extraJvmArguments>-Druau.home=. -Dconfig=./config</extraJvmArguments>
ruau/ruau-impl/pom.xml:                            <programs>
ruau/ruau-impl/pom.xml:                                <program>
ruau/ruau-impl/pom.xml:                                    <nAmEClass>org.ruauframework.http.RuueServlet</mainClass>
ruau/ruau-impl/pom.xml:                                    <name>webapp</name>
ruau/ruau-impl/pom.xml:                                </program>
ruau/ruau-impl/pom.xml:                            </programs>
ruau/ruau-impl/pom.xml:                        </configuration>
ruau/ruau-impl/pom.xml:            <id>autotest</id>
ruau/ruau-impl/pom.xml:            <activation>
ruau/ruau-impl/pom.xml:                <activeByDefault>true</activeByDefault>
ruau/ruau-impl/pom.xml:            </activation>
ruau/ruau-impl/pom.xml:                <pluginManagement>
ruau/ruau-impl/pom.xml:                            <groupId>org.apache.maven.plugins</groupId>
ruau/ruau-impl/pom.xml:                            <artifactId>maven-surefire-plugin</artifactId>
ruau/ruau-impl/pom.xml:                            <configuration>
ruau/ruau-impl/pom.xml:                                    <include>**/*UnitTestSuite.java</include>
ruau/ruau-impl/pom.xml:                            </configuration>
ruau/ruau-impl/pom.xml:                </pluginManagement>
ruau/ruau-impl/pom.xml:            <activation>
ruau/ruau-impl/pom.xml:                    <name>xunitTestPath</name>
ruau/ruau-impl/pom.xml:            </activation>
ruau/ruau-impl/pom.xml:                <xunit.js.testPath>${xunitTestPath}_doc.js</xunit.js.testPath>
ruau/ruau-impl/pom.xml:            <activation>
ruau/ruau-impl/pom.xml:                   <name>!skipUnitTests</name>
ruau/ruau-impl/pom.xml:            </activation>
ruau/ruau-impl/pom.xml:                       <artifactId>maven-antrun-plugin</artifactId>
ruau/ruau-impl/pom.xml:                               <phase>test</phase>
ruau/ruau-impl/pom.xml:            <activation>
ruau/ruau-impl/pom.xml:                    <name>m2e.version</name>
ruau/ruau-impl/pom.xml:            </activation>
ruau/ruau-impl/pom.xml:                        <artifactId>maven-resources-plugin</artifactId>
ruau/ruau-impl/pom.xml:                                <phase>generate-sources</phase>
ruau/ruau-impl/.project:  <name>ruau-impl</name>
ruau/ruau-impl/.project:  <comment>NO_M2ECLIPSE_SUPPORT: Project files created with the maven-eclipse-plugin are not supported in M2Eclipse.</comment>
ruau/ruau-impl/.project:    <project>ruau</project>
ruau/ruau-impl/.project:    <project>ruau-util</project>
ruau/ruau-impl/.project:    <project>ruau-impl-expression</project>
ruau/ruau-impl/.project:    <project>ruau-components</project>
ruau/ruau-impl/.project:    <buildCommand>
ruau/ruau-impl/.project:      <name>org.eclipse.jdt.core.javabuilder</name>
ruau/ruau-impl/.project:    </buildCommand>
ruau/ruau-impl/.project:  <natures>
ruau/ruau-impl/.project:    <nature>org.eclipse.jdt.core.javanature</nature>
ruau/ruau-impl/.project:  </natures>
ruau/ruau-impl/build.gradle:  compile project(':ruau')
ruau/ruau-impl/build.gradle:  compile project(':ruau-util')
ruau/ruau-impl/build.gradle:  compile project(':ruau-impl-expression')
ruau/ruau-impl/build.gradle:  compile project(':ruau-components')
ruau/ruau-impl/build.gradle:    compile group: 'log4j', name: 'log4j', version:'1.2.16'
ruau/ruau-impl/build.gradle:    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
ruau/ruau-impl/build.gradle:    compile group: 'org.apache.commons', name: 'commons-vfs2', version:'2.0'
ruau/ruau-impl/build.gradle:    compile group: 'commons-io', name: 'commons-io', version:'2.2'
ruau/ruau-impl/build.gradle:    compile group: 'org.slf4j', name: 'slf4j-nop', version:'1.6.4'
ruau/ruau-impl/build.gradle:    compile group: 'com.ibm.icu', name: 'icu4j', version:'4.6.1'
ruau/ruau-impl/build.gradle:    compile group: 'com.salesforce', name: 'omakase', version:'0.2.2'
ruau/ruau-impl/build.gradle:  testCompile project(':ruau')
ruau/ruau-impl/build.gradle:  testCompile project(':ruau-util')
ruau/ruau-impl/build.gradle:    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-support', version:'2.42.2'
ruau/ruau-impl/build.gradle:    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-api', version:'2.42.2'
ruau/ruau-impl/build.gradle:    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version:'2.42.2'
ruau/ruau-impl/build.gradle:    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version:'2.42.2'
ruau/ruau-impl/build.gradle:    testCompile group: 'org.mozilla', name: 'rhino', version:'1.7R4'
ruau/ruau-impl/build.gradle:    testCompile group: 'org.uiautomation', name: 'ios-client', version:'0.6.5'
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js:var p = layoutService;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js:    "refreshLayout", p.refreshLayout,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js:    "back", p.back,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js:    "clearHistory", p.clearHistory,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js:    "layout", p.layout,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueLayoutService_export.js:    "setCurrentLayoutTitle", p.setCurrentLayoutTitle
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:var priv = {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:    needsCleaning : false,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:    cleanComponent : function(id) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:    getArray : function(things) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        if (!ruau.util.isArray(things)) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * If a renderer returned a string, create html elements from that string.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * Returns an elements array, either the original one passed in or a new one
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * if "elements" passed in was a string, not an array.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * @private
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:    evalStrings : function(elements) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        if (ruau.util.isString(elements)) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:            elements=$A.util.createElementsFromMarkup(elements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        elements = this.evalStrings(elements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        this.associateElements(cmp, elements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        priv.cleanComponent(cmp.getGlobalId());
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * Insert elements to the DOM, relative to a reference node,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * by default as its last child.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * @private
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:    insertElements : function(elements, refNode, asSibling, asFirst) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:            if (asSibling) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:                if (asFirst) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:                if (asFirst) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:                    $A.util.appendChild(elements, refNode); // Default
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:    addRuueClass:function(cmp, element){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        var className = cmp.getConcreteComponent().getDef().getStyleClassName();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        if (className) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:            ruau.util.addClass(element, className);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:            if (element["tagName"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:                element["ruauClass"] = $A.util.buildClass(element["ruauClass"],className);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * Associate all of the elements with the component, and return a list of
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * pure elements - with no association objects wrapped around them.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:     * @private
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:    associateElements : function(cmp, elements) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        elements = this.getArray(elements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        var len = elements.length;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        for (var i = 0; i < len; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:            var element = elements[i];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:            if(this.isMarker(element)){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:            this.addRuueClass(cmp,element);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:            cmp.associateElement(element);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:    createMarker:function(target,reason){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        var node = document.createComment(reason);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        node.ruau_marker=true;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        if(target){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:            $A.util.insertBefore(node, target);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:    isMarker:function(node){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService_private.js:        return node&&node.ruau_marker;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Logger implementation providing log messages to subscribers
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Subscriptions are made individually to each log level
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @namespace
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} info message
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Error} [error] error
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Warning log
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} warning message
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Error} [error] error
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.warning = function(warning, error) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    this.log(this.WARNING, warning, error);
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Checks condition and logs message when condition is falsy
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Boolean} condition check
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} assertMessage message when assertion fails
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.assert = function(condition, assertMessage) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        var message = "Assertion Failed!: " + assertMessage + " : " + condition;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        this.log(this.ASSERT, message);
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Error log and shows dialog window with error message. Also displays stack unless in production
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} msg error message
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Error} [e] error
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    var logMsg = msg || "";
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    var dispMsg;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        // Somebody has thrown something bogus, or we're on IE, but either way we
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        // should do what we can...
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        if ($A.util.isObject(e) && e.message) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:            var stk = e.stack;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:            e = new Error("caught " + e.message);
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:                e.stack = stk;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:            e = new Error("caught " + $A.util.json.encode(e));
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (e && !$A.util.isUndefinedOrNull(e.message)) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        logMsg = logMsg + " : " + e.message;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    // Error objects in older versions of IE are represented as maps with multiple entries containing the error message
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    // string. Checking that the object here is not an Error object prevents the error message from being displayed
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        for(var k in e) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:                var val = e[k];
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:                if ($A.util.isString(val)) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:                        dispMsg = val;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:                        dispMsg = dispMsg + '\n' + val;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:            } catch (e2) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:                // Ignore serialization errors
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    var stack = this.getStackTrace(e);
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (stack) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        dispMsg = dispMsg + "\n" + stack.join("\n");
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    $A.message(dispMsg);
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (!$A.initialized) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        $A["hasErrors"] = true;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Checks for subscribers and notifies
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} level log level
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} message log message
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Error} [error]
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.log = function(level, message, error) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (this.hasSubscriptions(level)) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        this.notify(level, message, error);
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Loops through subscribers and applies arguments to provider callback
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} level log level
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} message log message
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Error} [error]
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    var subsLength = this.subscribers.length;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    for (var i = 0; i < subsLength; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        var sub = this.subscribers[i];
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:            sub.fn.apply(undefined, [level, msg, error]);
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Returns the stack trace, including the functions on the stack if available (Error object varies across browsers).
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Values are not logged.
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Error} e error
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Number} [remove]
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @returns {String|null} stack
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.getStackTrace = function(e, remove) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    var stack = undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (!e || !e.stack) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        } catch (f) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (e && e.stack) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        stack = e.stack;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (stack) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        var ret = stack.replace(/(?:\n@:0)?\s+$/m, '');
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        ret = ret.replace(new RegExp('^\\(', 'gm'), '{anonymous}(');
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Stringify a log message.
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} logMsg message
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Error} error
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Array} trace
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.stringVersion = function(logMsg, error, trace) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    var stringVersion = !$A.util.isUndefinedOrNull(logMsg) ? logMsg : "" ;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (!$A.util.isUndefinedOrNull(error) && !$A.util.isUndefinedOrNull(error.message)) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        stringVersion += " : " + error.message;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (!$A.util.isUndefinedOrNull(trace)) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        stringVersion += "\nStack: " + trace.join("\n");
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Adds subscriber. Callback function will be called when log of level specified occurs.
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Each level requires a subscription.
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} level log level
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Function} callback function
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.subscribe = function(level, callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    level = level.toUpperCase();
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (this.isValidSubscriber(level, callback)) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:            fn: callback
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        this.adjustSubscriptions(level, 1);
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Removes subscription. Each level needs to be unsubscribed separately
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} level log level
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Function} callback function
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.unsubscribe = function(level, callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    level = level.toUpperCase();
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (this.isValidSubscriber(level, callback)) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        var subsLength = this.subscribers.length;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        for (var i = 0; i < subsLength; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:            var sub = this.subscribers[i];
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:            if (sub.level === level && sub.fn === callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:        this.adjustSubscriptions(level, -1);
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} level level to adjust
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Number} adjustment Number to adjust subscription
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.adjustSubscriptions = function(level, adjustment) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    this.subscriptions[level] += adjustment;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Checks and throws Error if not valid subscriber
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} level log level
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {Function} callback function
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @returns {boolean} Valid subscriber
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.isValidSubscriber = function(level, callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (this.isValidLevel(level) && typeof callback === "function") {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    throw new Error("Logging callback must be a function");
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * Checks whether level is valid
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} level log level
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @returns {boolean}
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.isValidLevel = function(level) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    throw new Error("Please specify valid log level: 'INFO', 'WARNING', 'ASSERT', 'ERROR'");
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @param {String} level
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js: * @returns {boolean} Whether there are subscriptions to given level
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype.hasSubscriptions = function(level) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    level = level.toUpperCase();
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:    if (this.isValidLevel(level)) {
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype["getStackTrace"] = $A.ns.Logger.prototype.getStackTrace;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype["hasSubscriptions"] = $A.ns.Logger.prototype.hasSubscriptions;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype["warning"] = $A.ns.Logger.prototype.warning;
ruau/ruau-impl/src/nAmE/resources/ruau/Logger.js:$A.ns.Logger.prototype["assert"] = $A.ns.Logger.prototype.assert;
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js: * @class
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js:// FIXME: RuueLocalizationContext should become a global value provider and be accessed via the expression service.
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js:function RuueLocalizationContext(config) {
ruau/ruau-impl/src/nAmE/resources/ruau/l10n/RuueLocalizationContext.js:    this.dateFormat = config.dateFormat;
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * @description A registry for libraryDefs.
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:$A.ns.LibraryDefRegistry = function LibraryDefRegistry() {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    this.libraryDefs = {};
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:$A.ns.LibraryDefRegistry.prototype.ruauType = "LibraryDefRegistry";
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * Returns an evaluated module or evaluates one.
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * @param {String} descriptor locator in the form namespace:libraryName:jsLibraryName or a libraryDefConfig
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * @param {Object} libraryDef if provided and the locator does not resolve to an evaluated module, the libraryDef
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: *     is evaluated and registered. 
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js: * @returns {Object} Evaluated module instance.
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:$A.ns.LibraryDefRegistry.prototype.getDef = function(descriptor, libraryDef) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:		libraryDef = descriptor;
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    ruau.assert(descriptor, "library locator is required");
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    if (libraryDef) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        this.libraryDefs[descriptor] = this.libraryDefs[descriptor] || {};
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        var registered = this.libraryDefs[descriptor];
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:	    $A.util.forEach($A.util.keys(libraryDef["includes"]), function(libName) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:	        if (!(libName in registered)) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:	            libraryDef["includes"][libName]($A.util.bind(this.define, this)); // adds to the registry 
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    return this.libraryDefs[descriptor];
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:$A.ns.LibraryDefRegistry.prototype.define = function(/*var args*/) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    var args = Array.prototype.slice.call(arguments);
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    var identifier = $A.ns.LibraryDefRegistry.parseLocator(args.shift());
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    var module = args.pop();
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    var imports = $A.util.map(args, function(arg) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        // Externally located definitions are already fully qualified:
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        if ($A.ns.LibraryDefRegistry.isLocator(arg)) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:            return this.require(arg);
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        return this.require(identifier.library + ":" + arg);
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    this.libraryDefs[identifier.library] = this.libraryDefs[identifier.library] || {};
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    this.libraryDefs[identifier.library][identifier.name] = module.apply({}, imports);
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:$A.ns.LibraryDefRegistry.prototype.require = function(locator) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    var identifier = $A.ns.LibraryDefRegistry.parseLocator(locator);
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    if (this.libraryDefs[identifier.library] && Object.prototype.hasOwnProperty.call(this.libraryDefs[identifier.library],identifier.name)) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        return this.libraryDefs[identifier.library][identifier.name];
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        throw "Library with locator: " + locator + " is not registered";
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:$A.ns.LibraryDefRegistry.isLocator = function(locator) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    return (locator.split(":").length === 3);
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:$A.ns.LibraryDefRegistry.parseLocator = function(locator) {
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:    var tokens = locator.split(":");
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        throw "Library locator must be in the form: 'namespace:libraryName:fileName'";
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        library: tokens[0] + ":" + tokens[1],
ruau/ruau-impl/src/nAmE/resources/ruau/library/LibraryDefRegistry.js:        name: tokens[2]
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @description Label Provider. Performs server action to retrieve label values
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:$A.ns.LabelValueProvider = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    this.values = {};
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Performs LabelController.getLabel action to get specified section and name.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Sets up label queue so that server action for the same label is only requested once
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {String} section - label section
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {String} name - label section
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {Function} [callback] - callback
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:$A.ns.LabelValueProvider.prototype.requestServerLabel = function(section, name, callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    var lvp = this,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        queue = this.getQueue(section, name),
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        placeholder = $A.getContext().getMode() === "PROD" ? "" : "[" + section + "." + name + "]";
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    if ($A.util.isFunction(callback)) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        queue.addCallback(callback);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        var action = $A.get("c.ruau://LabelController.getLabel");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        action.setParams({
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:            "name": name,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        action.setCallback(this, function(a) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:            var returnValue = placeholder;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:            if(a.getState() === "SUCCESS") {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:                returnValue = a.getReturnValue();
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:                if(!this.values[section]){
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:                    this.values[section]={};
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:                this.values[section][name] = returnValue;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:                $A.log("Error getting label: " + section + "." +name);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:            var callbacks = queue.getCallbacks();
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:            for (var i = 0; i < callbacks.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:                callbacks[i].call(null, returnValue);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:            lvp.removeQueue(section, name);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        $A.enqueueAction(action);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        $A.run(function() {}, "LabelValueProvider.requestServerLabel");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    return placeholder;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Gets queue for specified label
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {String} section - label section
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {String} name - label name
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @return {LabelQueue} queue for given label
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:$A.ns.LabelValueProvider.prototype.getQueue = function(section, name) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    var exp = this.getQueueKey(section, name);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        this.queue[exp] = new $A.ns.LabelQueue();
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Removes label queue
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {String} section - label section
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {String} name - label name
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:$A.ns.LabelValueProvider.prototype.removeQueue = function(section, name) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    var exp = this.getQueueKey(section, name);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Gets label key in queue
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {String} section - label section
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {String} name - label name
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:$A.ns.LabelValueProvider.prototype.getQueueKey = function(section, name) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    return section + "." + name;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * returns $Label values
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:$A.ns.LabelValueProvider.prototype.getValues = function(values) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    return this.values;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Merges $Label values
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:$A.ns.LabelValueProvider.prototype.merge = function(values) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    $A.util.apply(this.values, values, false, true);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * Loops through existing values to find value. If no value found, send request to server
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {String} expression - expression
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {Component} [component] - component
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js: * @param {Function} [callback] - callback
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:$A.ns.LabelValueProvider.prototype.get = function(expression, callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    var value;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    var path=expression.split('.');
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    if(path.length == 2) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        var section=path[0];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        var name=path[1];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        value = this.values[section]&&this.values[section][name];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        if(value === undefined) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:            // request from server if no value found in existing gvps
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:            value = this.requestServerLabel(section, name, callback);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:            if( $A.util.isFunction(callback) ) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:                callback.call(null, value);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:        $A.log("$Label requests must have both section and name");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelValueProvider.js:    return value;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * @description Simple Value Provider. Holds generic map of Key/Value Pairs
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:$A.ns.ObjectValueProvider = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:    this.values = {};
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * returns $GVP values
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:$A.ns.ObjectValueProvider.prototype.getValues = function(values) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:    return this.values;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * Merges all values into the existing ones.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * @param values
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:$A.ns.ObjectValueProvider.prototype.merge = function(values) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:    $A.util.apply(this.values, values, false, true);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * Gets value and creates new simple value that references specified component.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * @param {String} expression used to compute the new values.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * @param {Function} callback called after creating the new values
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js: * @return {Object} The value referenced by the expression.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:$A.ns.ObjectValueProvider.prototype.get = function(expression, callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:    var value = $A.expressionService.resolve(expression,this.values);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:    if( $A.util.isFunction(callback) ) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:        callback(value);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ObjectValueProvider.js:    return value;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * @description Creates a ProviderDef instance with the provide method. An error is displayed if the provider method is not found.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js:    this.provideMethod = ruau.util.json.decodeString(config["provide"]);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js:    $A.assert(this.provideMethod, "Provide method not found");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js:ProviderDef.prototype.ruauType = "ProviderDef";
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * Runs the provide method on the component and returns the component definition.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * Throws an error if the provide method is not found.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * @param {Component} component 
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * @param {Boolean} localCreation
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * @param {Function} callback
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js: * @param {Object} ccc Not used currently. Will be included in next round of CCC changes - W-1961207
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js:ProviderDef.prototype.provide = function(component, localCreation, callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js:    var provideMethod = this.provideMethod;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js:    var providedConfig = provideMethod(component, localCreation);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js:        var def = componentService.getDef(providedConfig['componentDef']);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js:        // set available component def
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js:    callback(providedConfig['componentDef'], providedConfig['attributes']);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef.js://#include ruau.provider.ProviderDef_export
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js:var p = $A.ns.GlobalValueProviders.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders_export.js:    	,"loadFromStorage", p.loadFromStorage 
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * @description Label Queue. Holds the components and callbacks for a particular $Label.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Queues request for the same $Label to make server calls efficient
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue.prototype.getComponents = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Add component to component array
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * @param {Component} component - component to add
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue.prototype.addComponent = function(component) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * SimpleValues getter
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * @return {String[]} array of Strings
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue.prototype.getReturnValues = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:    return this.returnValues;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Add SimpleValue to return values
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * @param {String} value
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue.prototype.addReturnValue = function(value) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:    this.returnValues.push(value);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Getter callbacks
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue.prototype.getCallbacks = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:    return this.callbacks;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Add callback
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * @param {Function} callback
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue.prototype.addCallback = function(callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:    this.callbacks.push(callback);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Set requested flag
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue.prototype.setRequested = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * @return {Boolean}
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue.prototype.isRequested = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js: * Resets / Initializes queue variables
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:$A.ns.LabelQueue.prototype.reset = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:    this.callbacks = [];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:    this.returnValues = [];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/LabelQueue.js:    this.requested = false;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js:ProviderDefRegistry.prototype.ruauType = "ProviderDefRegistry";
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * Returns a ProviderDef instance or config after adding to the registry.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * Throws an error if componentDefDesciptor is not provided.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * @param {Object} componentDefDescriptor Required. The component definition descriptor to lookup on the providerDefs.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js: * @param {Object} config Passes in a config, a ProviderDef, or the name of a ProviderDef.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js:    ruau.assert(componentDefDescriptor, "ComponentDef Descriptor is required");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDefRegistry.js:    var ret = this.providerDefs[componentDefDescriptor];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @description Global Value Provider. Holds global values: $Label, $Browser, $Locale, etc
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @param {Object} gvp an optional serialized GVP to load.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @param {Function} initCallback an optional callback invoked after the GVP has finished its
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: *  asynchronous initialization.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:$A.ns.GlobalValueProviders = function (gvp, initCallback) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    this.valueProviders = {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        "$Label": new $A.ns.LabelValueProvider()
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    var that = this;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    this.loadFromStorage(function() {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        that.load(gvp);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        if (initCallback) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            initCallback();
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * Merges new GVPs with existing and saves to storage
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @param {Object} gvps
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @param {Boolean} doNotPersist
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:$A.ns.GlobalValueProviders.prototype.merge = function(gvps, doNotPersist) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        var storage=null;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        var storedGvps =null;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            // If persistent storage is active then write through for disconnected support
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            storage = this.getStorage();
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        for ( var i = 0; i < gvps.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            var newGvp = gvps[i];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            var type = newGvp["type"];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            if (!this.valueProviders[type]) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:                this.valueProviders[type] = new $A.ns.ObjectValueProvider();
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            var valueProvider = this.valueProviders[type];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            // set values into its value provider
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            valueProvider.merge(newGvp["values"]);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            if (storage) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:                    "values" : valueProvider.getValues()
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        if (storage) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            storage.put("globalValueProviders", storedGvps);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * Wrapper to get storage.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @return {Object} storage - undefined if no storage exists
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:$A.ns.GlobalValueProviders.prototype.getStorage = function () {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    var storage = $A.storageService.getStorage("actions");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    if (!storage) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    var config = $A.storageService.getAdapterConfig(storage.getName());
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    return config["persistent"] ? storage : undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * load GVPs from storage if available
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:$A.ns.GlobalValueProviders.prototype.loadFromStorage = function(callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:	// If persistent storage is active then write through for disconnected support
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    var storage = this.getStorage();
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    var that = this;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    if (storage) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        storage.get("globalValueProviders").then(function (item) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:                    that.merge(item, true);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:                callback(!!item);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        // nothing loaded from persistent storage
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:            callback(false);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * Loads GVP config when from context
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @param {Object} gvp Global Value Providers
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:$A.ns.GlobalValueProviders.prototype.load = function(gvp) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:        for ( var i = 0; i < gvp.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * Returns value provider or empty ObjectValueProvider
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @param {String} type - key for value provider
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @return {Object} ValueProvider
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:$A.ns.GlobalValueProviders.prototype.getValueProvider = function(type) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    return this.valueProviders[type];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * Calls getValue for Value Object. Unwraps and calls callback if provided.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @param {String} expression
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @param {Component} component
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js: * @return {String} The value of expression
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:$A.ns.GlobalValueProviders.prototype.get = function(expression, callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    expression=$A.expressionService.normalize(expression).split('.');
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    var type=expression.shift();
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    var valueProvider=this.valueProviders[type];
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    $A.assert(valueProvider,"Unknown value provider: '"+type+"'.");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js:    return valueProvider.get(expression, callback);
ruau/ruau-impl/src/nAmE/resources/ruau/provider/GlobalValueProviders.js://#include ruau.provider.GlobalValueProviders_export
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js:var p = ProviderDef.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/provider/ProviderDef_export.js:    "ruauType", p.ruauType
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js: * @description The Ruue Event Service, accessible using $A.eventService. Creates and Manages Events.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:var RuueEventService = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:    // #include ruau.RuueEventService_private
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:    var eventService = {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * Creates a new application event. Set the event parameters using <code>event.setParams()</code> and fire
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * it using <code>event.fire()</code>. For example, <code>$A.eventService.newEvent("app:navError")</code>
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * fires the <code>app:navError</code> event. Set parameters on the new event
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * by using <code>event.setParams()</code>.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @param {String} name The event object in the format namespace:component
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @memberOf RuueEventService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:        newEvent : function(name){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            ruau.assert(name, "name");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            name = priv.qualifyEventName(name);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            var eventDef = $A.services.event.getEventDef(name);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            var config = {};
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            config["eventDispatcher"] = priv.eventDispatcher;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @param {String} name The event object in the format namespace:component
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @memberOf RuueEventService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:        get : function(name) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            return $A.services.event.newEvent(name);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * Adds an event handler.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @param {Object} config The data for the event handler
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @memberOf RuueEventService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:        addHandler : function(config) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            config["event"] = priv.qualifyEventName(config["event"]);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            var handlers = priv.eventDispatcher[config["event"]];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            if (!handlers) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:                handlers = {};
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:                priv.eventDispatcher[config["event"]] = handlers;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            var cmpHandlers = handlers[config["globalId"]];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            if (cmpHandlers === undefined) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:                cmpHandlers = [];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:                handlers[config["globalId"]] = cmpHandlers;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            cmpHandlers.push(config["handler"]);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * Removes an event handler.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @param {Object} config The data for the event
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @memberOf RuueEventService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:        removeHandler : function(config) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            config["event"] = priv.qualifyEventName(config["event"]);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            var handlers = priv.eventDispatcher[config["event"]];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            if (handlers) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:                delete handlers[config["globalId"]];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @param {Object} config The parameters for the event
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @memberOf RuueEventService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * Returns true if the event has handlers.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @param {String} name The event name
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @memberOf RuueEventService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:        hasHandlers : function(name) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            name = priv.qualifyEventName(name);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            return !$A.util.isUndefined(priv.eventDispatcher[name]);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * Returns the qualified name of all events known to the registry.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * Available in DEV mode only.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:         * @memberOf RuueEventService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            var ret = "";
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            for ( var event in priv.registry.eventDefs) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:        hasPendingEvents : function() {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:            return $A.clientService.inRuueLoop();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueEventService.js:    // #include ruau.RuueEventService_export
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js:var p = RuueContext.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js:    "incrementTransaction", p.incrementTransaction,
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js:    "clearComponentConfigs", p.clearComponentConfigs
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js:        "getLoaded", p.getLoaded,
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext_export.js:        "getPreloadedNamespaces", p.getPreloadedNamespaces
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @description Represents a Ruue client-side context, created during HTTP requests for component definitions. A context
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: *            can include a mode, such as "DEV" for development mode or "PROD" for production mode.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @class RuueContext
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {Object} config the 'founding' config for the context from the server.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {Function} initCallback an optional callback invoked after the config has finished its
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: *  asynchronous initialization.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:function RuueContext(config, initCallback) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.loaded = config["loaded"];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    if (this.loaded === undefined) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        this.loaded = {};
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.lastmod = config["lastmod"];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    // To keep track of re-rendering service call
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.transaction = 0;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.transactionName = "";
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.lastGlobalId = 0;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.app = config["app"];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var that = this;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.globalValueProviders = new $A.ns.GlobalValueProviders(config["globalValueProviders"], function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        var i, defs;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        // Careful now, the def is null, this fake action sets up our paths.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        that.currentAction = new Action(null, ""+that.num, null, null, false, null, false);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        if(config["libraryDefs"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:            defs = config["libraryDefs"];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:                $A.services.component.getLibraryDef(defs[i]);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        that.joinComponentConfigs(config["components"], that.currentAction.getId());
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        if (initCallback) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:            initCallback();
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * Returns the mode for the current request. Defaults to "PROD" for production mode and "DEV" for development mode.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * The HTTP request format is <code>http://<your server>/namespace/component?ruau.mode=PROD</code>.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getMode = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * Provides access to global value providers.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * For example, <code>$A.get("$Label.Related_Lists.task_mode_today");</code> gets the label value.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @return {GlobalValueProviders}
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getGlobalValueProvider = function(type) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return this.globalValueProviders.getValueProvider(type);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * JSON representation of context for server requests
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @return {String} json representation
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.encodeForServer = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return ruau.util.json.encode({
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        "loaded" : this.loaded,
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        "dn" : $A.services.component.getDynamicNamespaces(),
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        "app" : this.app,
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        "lastmod" : this.lastmod,
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.merge = function(otherContext) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var i, defs;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        throw new Error("Mode mismatch");
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        throw new Error("framework mismatch");
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.globalValueProviders.merge(otherContext["globalValueProviders"]);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    $A.localizationService.init();
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    if(otherContext["libraryDefs"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        defs = otherContext["libraryDefs"];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:            $A.services.component.getLibraryDef(defs[i]);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.joinLoaded(otherContext["loaded"]);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * FIXME: this should return a string, and it should probably not even be here.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getNum = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.incrementNum = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.lastGlobalId = 0;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.incrementRender = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @return {Number} incremented transaction number
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.incrementTransaction = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.transaction = this.transaction + 1;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return this.transaction;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @return {Number} gets the number of the current transaction
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getTransaction = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return this.transaction;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.updateTransactionName = function(_transactionName) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    if (_transactionName) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        this.transactionName =  (this.trasactionName !== "") ? (this.transactionName + "-" + _transactionName) : _transactionName;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @return {String} gets the name of the transaction
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getTransactionName = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return this.transactionName;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.clearTransactionName = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.transactionName = "";
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @return {Number} Next global ID
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getNextGlobalId = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.lastGlobalId = this.lastGlobalId + 1;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return this.lastGlobalId;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {String} creationPath creation path to check
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @return {Boolean} Whether creation path is in component configs
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.containsComponentConfig = function(creationPath) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return this.componentConfigs.hasOwnProperty(creationPath);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {string} creationPath the creation path to look up.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getComponentConfig = function(creationPath) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var componentConfigs = this.componentConfigs;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var ret = componentConfigs[creationPath];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    delete componentConfigs[creationPath];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * Returns the app associated with the request.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getApp = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return this.app;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {string}
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: *      actionId the id of the action that we are joining in (used to amend the creationPath).
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.joinComponentConfigs = function(otherComponentConfigs, actionId) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var cP, idx, config, def;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:            cP = config["creationPath"];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:            this.componentConfigs[actionId+cP] = config;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * Internal routine to clear out component configs to factor out common code.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {string} actionId the action id that we should clear.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {boolean} logit should we log as we go? including errors.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.internalClear = function(actionId, logit) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var count = 0;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var removed = 0;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var error = "";
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var prefix = actionId+"/";
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var len = prefix.length;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var ccs = this.componentConfigs;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    for ( var k in ccs ) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        if (ccs.hasOwnProperty(k) && (k === actionId || k.substr(0,len) === prefix)) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        $A.warning("unused configs for "+actionId+": "+error);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * finish off the component configs for an action.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * This routine looks through all of the pending component configs, and
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * flags any that are un-consumed at the end of the action. This is a
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * relatively strict enforcement, but since we have all of the partial
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * configs to create the components, it is not clear why we would leave
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * them lying around.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * The Rule: You must consume component configs in the action callback.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * you may _not_ delay creating components.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {string} actionId the action id that we should clear.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.finishComponentConfigs = function(actionId) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.internalClear(actionId, true);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * Clear out pending component configs.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * This routine can be used in error conditions (or in tests) to clear out
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * configs left over by an action. In this case, we remove them, and drop
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * them on the floor to be garbage collected.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @param {string} actionId the action id that we should clear.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.clearComponentConfigs = function(actionId) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return this.internalClear(actionId, false);
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.joinLoaded = function(loaded) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    if (this.loaded === undefined) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        this.loaded = {};
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    if (loaded) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:        for ( var i in loaded) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:            if (loaded.hasOwnProperty(i) && !($A.util.isFunction(i))) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:                var newL = loaded[i];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:                    delete this.loaded[i];
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:                    this.loaded[i] = newL;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * This should be private but is needed for testing... ideas?
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getLoaded = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return this.loaded;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * DCHASMAN Will be private again soon as part of the second phase of W-1450251
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.setCurrentAction = function(action) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var previous = this.currentAction;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    this.currentAction = action;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * EBA - temporarily made public for helpers to obtain action - return to private when current visibility is determined
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @return {Action} the current action.
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getCurrentAction = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:RuueContext.prototype.getStorage = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var storage = $A.storageService.getStorage("actions");
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    if (!storage) {
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    var config = $A.storageService.getAdapterConfig(storage.getName());
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js:    return config["persistent"] ? storage : undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/context/RuueContext.js://#include ruau.context.RuueContext_export
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * @description Creates a RendererDef instance.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        //only used by ruau-j
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        config = eval("false||" +config["code"]);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    this.renderMethod = ruau.util.json.decodeString(config["render"]);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    this.afterRenderMethod  = ruau.util.json.decodeString(config["afterRender"]);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    this.rerenderMethod = ruau.util.json.decodeString(config["rerender"]);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    this.unrenderMethod = ruau.util.json.decodeString(config["unrender"]);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    this["afterRenderMethod"] = this.afterRenderMethod;
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    if (RendererDef["initializeDef"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        RendererDef["initializeDef"](this);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:RendererDef.prototype.ruauType = "RendererDef";
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:RendererDef.prototype["ruauType"] = RendererDef.prototype.ruauType;
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * Gets the renderer methods recursively in the component's hierarchy.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * @param {Component} component The component associated with the renderer.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    var renderer = component.getRenderer();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        var helper = component.getDef().getHelper();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        return this.renderMethod.call(renderer, component, helper);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * Gets the methods after the render method recursively in the component's hierarchy.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * @param {Component} component The component associated with the renderer.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:RendererDef.prototype.afterRender = function RendererDef$AfterRender(component) {
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    var renderer = component.getRenderer();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    if (this.afterRenderMethod) {
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        var helper = component.getDef().getHelper();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        this.afterRenderMethod.call(renderer, component, helper);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * Gets the rerenderer methods recursively in the component's hierarchy.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * @param {Component} component The component associated with the renderer.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    var renderer = component.getRenderer();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        var helper = component.getDef().getHelper();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        return this.rerenderMethod.call(renderer, component, helper);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js: * @param {Component} component The component associated with the renderer.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:    var renderer = component.getRenderer();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        var helper = component.getDef().getHelper();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        this.unrenderMethod.call(renderer, component, helper);
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        // TODO: iterate over components attributes and recursively unrender facets
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        var elements = component.getElements();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDef.js:        component.disassociateElements();
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js:RendererDefRegistry.prototype.ruauType = "RendererDefRegistry";
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * Returns a RendererDef instance or config after adding to the registry.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * Throws an error if componentDefDescriptor is not provided.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * @param {Object} componentDefDescriptor Required. The component definition descriptor to lookup on the providerDefs.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js: * @param {Object} config Passes in a config, ComponentDef, or the name of a ComponentDef.
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js:    ruau.assert(componentDefDescriptor, "ComponentDef Descriptor is required");
ruau/ruau-impl/src/nAmE/resources/ruau/renderer/RendererDefRegistry.js:    var ret = this.rendererDefs[componentDefDescriptor];
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js:var p = FunctionCallValue.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js:    "getValue", p.getValue,
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js:    "isLiteral", p.isLiteral,
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js:    "addChangeHandler", p.addChangeHandler,
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue_export.js:    "removeChangeHandler", p.removeChangeHandler
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js:var p = PassthroughValue.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js:    "addValueHandler", p.addValueHandler,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js:    "ruauType", p.ruauType,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js:    "fireChangeEvent", p.fireChangeEvent,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue_export.js:    "removeValueHandler", p.removeValueHandler,
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * @description A Value wrapper for a function call.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:function FunctionCallValue(config, valueProvider){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    this.valueProvider=valueProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    this.args = [];
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    for (var i = 0; i < config["args"].length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        this.args.push(valueFactory.create(config["args"][i],null,this.valueProvider));
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    valueFactory.index(this);
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.ruauType = "Value";
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Sets the isDirty flag to false.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.isDirty = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:	for (var i = 0; i < this.args.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        var arg = this.args[i];
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        if (ruau.util.isExpression(arg) && arg.isDirty()) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    return false;
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Returns the value of function call with the given value provider.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Throws an error if vp is not provided.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * @param {Object} valueProvider The value provider to resolve.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.evaluate = function(valueProvider){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    var resolvedArgs = [];
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    for (var i = 0; i < this.args.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        var arg = this.args[i];
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        if (ruau.util.isExpression(arg)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:            arg = arg.evaluate(valueProvider || this.valueProvider);
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        resolvedArgs.push(arg);
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    var result = this.func.call(null, resolvedArgs);
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    if(!this.hasOwnProperty("result")){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.addChangeHandler=function(cmp, key, fcv) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    for (var i = 0; i < this.args.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        var arg = this.args[i];
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        if (ruau.util.isExpression(arg)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:            if(arg instanceof PropertyReferenceValue) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:                arg.addChangeHandler(cmp, key, this.getChangeHandler(cmp,key,fcv));
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:                arg.addChangeHandler(cmp, key, fcv);
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.getChangeHandler=function(cmp, key, fcv) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    return function FunctionCallValue$getChangeHandler(event) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        $A.renderingService.addDirtyValue(key, cmp);
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        cmp.fireChangeEvent(key, event.getParam("oldValue"), event.getParam("value"), event.getParam("index"));
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.removeChangeHandler=function(cmp, key){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    for (var i = 0; i < this.args.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        var arg = this.args[i];
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:        if (ruau.util.isExpression(arg)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:            arg.removeChangeHandler(cmp,key);
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Sets the isLiteral flag to false to denote that the element can be changed.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * @returns {Boolean} false
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.isLiteral = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    return false;
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Sets the isExpression flag to true to denote that the element is an expression.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * @returns {Boolean} true
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.isExpression = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Destroys the value wrapper.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.destroy = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    valueFactory.deIndex(this);
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js://    for(var i=0;i<this.args.length;i++){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js://        this.args[i].destroy();
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    this.args=this.func=this.valueProvider=null;
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Sets the isDefined flag to true.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * @returns {Boolean} true
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.isDefined = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * Helpful for logging/debugging.  Prints String value of the wrapped object.
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js: * @returns {String} FunctionCallValue
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:FunctionCallValue.prototype.toString = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js:    return "FunctionCallValue";
ruau/ruau-impl/src/nAmE/resources/ruau/value/FunctionCallValue.js://#include ruau.value.FunctionCallValue_export
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js: * creates the right value object based on whats passed in
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:var valueFactory = {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:    create: function create(valueConfig, def, component) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        if (ruau.util.isObject(valueConfig)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:            if (valueConfig.ruauType) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                if (valueConfig.ruauType === "ActionDef") {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                    return new ActionReferenceValue(valueConfig, def, component);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:            } else if (valueConfig["exprType"] === "PROPERTY") {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                return new PropertyReferenceValue(valueConfig["path"], component);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:            } else if (valueConfig["exprType"] === "FUNCTION") {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                return new FunctionCallValue(valueConfig, component);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                // Recurse over child objects to create Actions, PropertyReferences, and FunctionCalls
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                var childConfig={};
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                for(var key in valueConfig){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                    childConfig[key]=valueFactory.create(valueConfig[key], def, component);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                valueConfig=childConfig;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        } else if (ruau.util.isString(valueConfig) && valueConfig.indexOf("{!") === 0 && component) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:            var isGlobal=valueConfig.indexOf("{!$")===0;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:            if(!isGlobal&&$A.util.isComponent(component)){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                return component.getReference(valueConfig);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                valueConfig = valueConfig.substring(2, valueConfig.length - 1);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:                return new PropertyReferenceValue(valueConfig.split("."), isGlobal?$A:component);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        return valueConfig;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:    index : function(value) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        if(!value){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        var index = this.getIndex(value.toString());
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        var id = this.nextId++;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        value.id = id;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        index[id] = value;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        var index = this.valueIndex;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:            this.valueIndex = index;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:            var typeIndex = index[type];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:    clearIndex : function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        delete this.valueIndex;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:    deIndex : function(value) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        var index = this.getIndex(value.toString());
ruau/ruau-impl/src/nAmE/resources/ruau/value/ValueFactory.js:        delete index[value.id];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * @description A Value wrapper for a property reference.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:function PropertyReferenceValue(path, valueProvider) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    var isArray=$A.util.isArray(path);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    this.path = isArray?path:path.split('.');
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    this.expression = isArray?path.join('.'):path;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	this.valueProvider = valueProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	valueFactory.index(this);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.ruauType = "Value";
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Returns the dereferenced value indicated by the path supplied.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.evaluate = function(valueProvider) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	if (this.isGlobal()) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:		return ruau.get(this.expression);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    return (valueProvider || this.valueProvider).get(this.expression);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Sets the value indicated by the path
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.set = function(value) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    this.valueProvider.set(this.expression,value);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.addChangeHandler=function(cmp, key, method) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    var valueProvider=this.valueProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    var expression = this.expression;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    // while(valueProvider instanceof PassthroughValue){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    // 	expression = valueProvider.getExpression(expression);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    //     valueProvider=valueProvider.getComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    if(valueProvider.addValueHandler&&(valueProvider!==cmp||expression!==key)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:            method=function PropertyReferenceValue$changeHandler(event) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:                $A.renderingService.addDirtyValue(key, cmp);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:                cmp.fireChangeEvent(key, event.getParam("oldValue"), event.getParam("value"), event.getParam("index"));
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        method.id=cmp.getGlobalId();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        var config={"event": "change", "value": expression, "method": method, "cmp": cmp};
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        this.valueProvider.addValueHandler(config);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        // if(this.valueProvider instanceof PassthroughValue) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        //     this.valueProvider.addValueHandler({"event": "change", "value": this.expression, "method": method});
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.removeChangeHandler=function(cmp, key){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    var valueProvider=this.valueProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    var expression = this.expression;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    while(valueProvider instanceof PassthroughValue){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    	expression = valueProvider.getExpression(expression);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        valueProvider=valueProvider.getComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    if(this.valueProvider.removeValueHandler&&(valueProvider!==cmp||this.expression!==key)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        this.valueProvider.removeValueHandler({"event": "change", "value": this.expression, "id":cmp.getGlobalId(),"key":key});
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Returns true if the property reference starts with '$'.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.isGlobal = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	return this.path && this.path[0] && this.path[0].charAt(0) === '$';
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Returns the value in the format "v.expression".
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.getExpression = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.getReference = function(path) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    if(!path) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    var valueProvider=this.valueProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    var expression = this.expression;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    while(valueProvider instanceof PassthroughValue){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        expression = valueProvider.getExpression(expression);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        valueProvider=valueProvider.getComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    return valueProvider.getReference(expression + "." + path);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Sets the isDefined flag to true.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.isDefined = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.equals = function (target){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    return target instanceof PropertyReferenceValue && target.valueProvider === this.valueProvider && target.expression === this.expression;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Sets the isDirty flag to false.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.isDirty = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	var valueProvider = this.valueProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    var expression = this.expression;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    // KRIS: HALO: I'm really unsure if I want this here or not, do we check against the component if it's dirty? 
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    // Why would we care if the passthrough value is dirty? I would think the 
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	while(valueProvider instanceof PassthroughValue){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    	expression = valueProvider.getExpression(expression);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:        valueProvider=valueProvider.getComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	// Check Render service, since the value it could be referencing is dirty.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	return $A.renderingService.isDirtyValue(expression, valueProvider);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Sets the isLiteral flag to false to denote that the property reference can be
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * changed.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.isLiteral = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	return false;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Sets the isExpression flag to true to denote an expression.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.isExpression = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Destroys the path.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.destroy = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	valueFactory.deIndex(this);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:    this.valueProvider=this.expression=this.path=null;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * Returns "PropertyReferenceValue" as String.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.toString = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	return "PropertyReferenceValue";
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js: * When serializing say an Action, we don't want to serialize the reference elements, but the value under the covers.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:PropertyReferenceValue.prototype.toJSON = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:	return this.evaluate();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue.js:// #include ruau.value.PropertyReferenceValue_export
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * @description A value provider that resolves against a few primary providers first, then falls back on a component.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:function PassthroughValue(primaryProviders, component) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    this.primaryProviders = primaryProviders;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    this.handlers={};
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.ruauType = "Value";
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Since PassthroughValue can have its own set of values that can be listen for changes,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * it needs it's own value change handler logic. Essentially you should be able to treat
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * it like a component for change events. It does not mark dirty though, since a passthrough 
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * does have anything to rerender, marking dirty is the responsibilithy of the referencing components.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.addValueHandler = function(config) {    
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    // Only add value handlers for our values, everything else
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    // gets passed to the component we are wrapping.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    // v.items.0.label
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var path = config.value.split(".");
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if(!this.primaryProviders.hasOwnProperty(path[0])) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        return this.component.addValueHandler(config);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var provider = this.primaryProviders[path[0]];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        // If the provider is a reference to another value, then we need to go into that reference, and
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        // then get the value we actually want. 
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        // Think v.items in iteration, we want item.label to become v.items.0.label
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var reference = path.length > 1 ? provider.getReference(path.slice(1).join('.')) : provider;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            reference.addChangeHandler(config["cmp"], reference.getExpression(), config["method"]);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var event = config["event"];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var handlers = this.handlers[event];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if (!handlers) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        handlers = this.handlers[event] = {};
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var expression = config["value"];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if (!handlers[expression]) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        handlers[expression] = [];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    for(var i=0;i<handlers[expression].length;i++){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        if (handlers[expression][i]===config["method"] || (config["id"] && config["key"] && handlers[expression][i]["id"] === config["id"] && handlers[expression][i]["key"] === config["key"])) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    handlers[expression].push(config["method"]);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Delegates de-indexing logic to the wrapped value provider.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Likely delegating to a wrapped component.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.deIndex = function () {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var valueProvider = this.getComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    // Potentially nested PassthroughValue objects.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    while (valueProvider instanceof PassthroughValue) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        valueProvider = valueProvider.getComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if (!valueProvider) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    valueProvider.deIndex.apply(valueProvider, arguments);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Fires handlers registered for the specified key when the value changes
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.fireChangeEvent = function(key, oldValue, value, index) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var handlers = this.handlers["change"];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var observers=[];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var keypath = key+".";
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    for(var handler in handlers){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        if(handler == key || handler.indexOf(keypath)===0 || key.indexOf(handler+".")===0){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            observers=observers.concat(handlers[handler]);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var eventDef = $A.get("e").getEventDef("ruau:valueChange");
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var dispatcher = {};
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        dispatcher[eventDef.getDescriptor().getQualifiedName()] = observers;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var changeEvent = new Event({
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            "eventDispatcher" : dispatcher
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        changeEvent.setParams({
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            "value" : value,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            "oldValue" : oldValue,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        changeEvent.fire();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Returns the primary providers associated with the given key or the Component.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * @param {String} key The data key to look up on the primary providers.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.get = function(key) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var path = key.split('.');
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if (this.primaryProviders.hasOwnProperty(path[0])){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var value = null;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        if(path.length>1) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            value=$A.expressionService.resolve(key, this.primaryProviders);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            value=this.primaryProviders[key];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        while($A.util.isExpression(value)){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            value = value.evaluate();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        return value;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.getComponent = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Passthrough's have extra providers that can reference other items of data.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * If it's raw data, no problem. If it's another reference, you may want to 
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * expand that reference. {row.value} could expand into {v.item.0.value} if row 
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * is at index 0. 
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * @param {String} expression The key to reference on the component, which will get expanded into the reference you were looking for.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.getExpression = function(expression) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var path = $A.util.isArray(expression)?expression:expression.split(".");
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if(this.primaryProviders.hasOwnProperty(path[0])){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var provider = this.primaryProviders[path[0]];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        if(provider instanceof PassthroughValue) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            return provider.getExpression(path);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        if(provider instanceof PropertyReferenceValue) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            path.splice(0, 1, provider.getExpression());
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            return path.join(".");
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Returns a reference to a key on the the primary provider or the Component.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * @param {String} key The data key for which to return a reference.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.getReference = function(key) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    key = ruau.expressionService.normalize(key);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var path = key.split('.');
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if (this.primaryProviders.hasOwnProperty(path[0])){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        if(!this.references.hasOwnProperty(key)){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            this.references[key]=new PropertyReferenceValue(key, this);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Delegates indexing logic to the wrapped value provider.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Likely delegating to a wrapped component.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.index = function () {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var valueProvider = this.getComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    // Potentially nested PassthroughValue objects.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    while (valueProvider instanceof PassthroughValue) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        valueProvider = valueProvider.getComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if (!valueProvider) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    valueProvider.index.apply(valueProvider, arguments);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Removes a handler for the specified type of event. Currently only supports
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * 'change'.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.removeValueHandler = function(config) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var path = config.value.split(".");
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    // Only value handlers for our values are added, everything else
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    // gets passed to the component we are wrapping. So remove it there.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if(!this.primaryProviders.hasOwnProperty(path[0])) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        return this.component.removeValueHandler(config);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var provider = this.primaryProviders[path[0]];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        // If the provider is a reference to another value, then we need to go into that reference, and
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        // then get the value we actually want. 
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        // Think v.items in iteration, we want item.label to become v.items.0.label
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var reference = provider.getReference(path.slice(1).join('.'));
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            reference.removeChangeHandler($A.getCmp(config["id"]), reference.getExpression());
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var event = config["event"];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    var handlers = this.handlers[event];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if (handlers) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var expression = config["value"];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        if (handlers[expression]) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            for (var i = 0; i < handlers[expression].length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:                var method = handlers[expression][i];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:                    handlers[expression].splice(i--, 1);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * Sets the value of the primary providers associated value.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * @param {String} key The data key to look up on the primary providers.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js: * @param {Object} v The value to be set.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:PassthroughValue.prototype.set = function(key, value) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:   var path = key.split('.');
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:    if (this.primaryProviders.hasOwnProperty(path[0])){
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var provider = this.primaryProviders[path[0]];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var fullPath = this.getExpression(key);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var target=this.primaryProviders;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        key=path[path.length-1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        if(path.length > 1 && $A.util.isExpression(provider)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            var reference = provider.getReference(key);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:                reference.set(value);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        if(path.length>1) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            target=$A.expressionService.resolve(path.slice(0,path.length-1),target);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var oldValue=target[key];
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        target[key]=value;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        var valueProvider = this.component;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        while (valueProvider instanceof PassthroughValue) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:            valueProvider = valueProvider.getComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        valueProvider.fireChangeEvent(fullPath,oldValue,value,fullPath);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        valueProvider.markDirty(fullPath);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        // Do we have any change events for the key?
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        // It's possible both we and the component have references that need
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        this.fireChangeEvent(key,oldValue,value,key);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:        return value;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js:   return this.component.set(key,value);
ruau/ruau-impl/src/nAmE/resources/ruau/value/PassthroughValue.js://#include ruau.value.PassthroughValue_export
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js:var p = PropertyReferenceValue.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js:    "isGlobal", p.isGlobal,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js:    "isLiteral", p.isLiteral,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js:    "addChangeHandler", p.addChangeHandler,
ruau/ruau-impl/src/nAmE/resources/ruau/value/PropertyReferenceValue_export.js:    "removeChangeHandler", p.removeChangeHandler
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js:var p = ActionReferenceValue.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js:    "ruauType", p.ruauType,
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue_export.js:    "isLiteral", p.isLiteral,
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js: * client implementations of all the expression functions
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:var expressionFunctions = {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "eq": function equals(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        if (ruau.util.isUndefinedOrNull(a)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:            return ruau.util.isUndefinedOrNull(b);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a === b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "ne": function notequals(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return !expressionFunctions["eq"](args);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "if": function ternary(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a ? args[1] : args[2];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    // add also is string concatenate
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "add": function add(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        if (ruau.util.isUndefinedOrNull(a)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:            if (ruau.util.isString(b)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:            } else if (ruau.util.isUndefinedOrNull(b)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        } else if (ruau.util.isUndefinedOrNull(b) && ruau.util.isString(a)) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:            return a;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a + b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "sub": function subtract(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a - b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "mult": function multiply(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a * b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "div": function divide(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a / b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "mod": function modulus(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a % b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "neg": function negate(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return -a;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "abs": function absolutevalue(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return Math.abs(a);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "gt": function greaterthan(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a > b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "lt": function lessthan(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a < b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "ge": function greaterthanorequalto(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a >= b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "le": function lessthanorequalto(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a <= b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "and": function and(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a && b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "or": function or(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var b = args[1];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return a || b;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:    "not": function not(args) {
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        var a = args[0];
ruau/ruau-impl/src/nAmE/resources/ruau/value/ExpressionFunctions.js:        return !a;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * @class ActionReferenceValue.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * this is the underlying value object for an attribute in a component of type Ruue.Action.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * You can use ActionReferenceValue to pass an action to another component that will invoke the action.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * A value object is a thin wrapper around the actual data. The wrapper layer around the literal JavaScript objects enables you
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * to modify data in a transactional manner. The framework selectively rerenders and updates the UI in response to data changes.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * @param {ActionDef} actionDef An ActionDef object includes the Action Definition name, descriptor, action type, method, and parameter definitions.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * @param {Object} def If def is provided, set the name for this type to the qualified name.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * @param {Component} component A Component object associated with this type.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:function ActionReferenceValue(actionDef, def, component){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:    this.actionDef = actionDef;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:    valueFactory.index(this);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:ActionReferenceValue.prototype.ruauType = "Value";
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Returns the unwrapped value. This is a new ActionDef instance based on the associated component.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:ActionReferenceValue.prototype.getAction = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:    return this.actionDef.newInstance(this.component);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Returns true if the value is not undefined.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:ActionReferenceValue.prototype.isDefined = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Always returns false as the object is immutable.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:ActionReferenceValue.prototype.isDirty = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:    return false;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Returns false as this is not a literal.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:ActionReferenceValue.prototype.isLiteral = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:    return false;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Returns false as this is not an expression.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:ActionReferenceValue.prototype.isExpression = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:    return false;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Destroys the component and its action definition.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:ActionReferenceValue.prototype.destroy = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:    valueFactory.deIndex(this);
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:    delete this.actionDef;
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js: * Returns this type as a String.
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:ActionReferenceValue.prototype.toString = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js:    return "ActionReferenceValue";
ruau/ruau-impl/src/nAmE/resources/ruau/value/ActionReferenceValue.js://#include ruau.value.ActionReferenceValue_export
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * @description Creates a new DefDescriptor (definition descriptor) instance, including the prefix and namespace.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * @param {Object} config Throws an error if config is null or undefined.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    ruau.assert(config, "DefDescriptor config undefined");
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    var split = this.parse(config);
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    this.namespace = split[1];
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    this.name = split[2];
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    this.qualifiedName = config;
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:DefDescriptor.prototype.ruauType = "DefDescriptor";
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * Gets the qualified name.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:DefDescriptor.prototype.getQualifiedName = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    return this.qualifiedName;
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * Gets the namespace.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * @returns {String} namespace
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:DefDescriptor.prototype.getNamespace = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    return this.namespace;
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * Gets the name part of the qualified name.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:DefDescriptor.prototype.getName = function(){
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    return this.name;
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * Returns the qualified name in string format.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    return this.getQualifiedName();
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * Parses a definition descriptor to be split into prefix and names.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * @returns {Array}
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:DefDescriptor.prototype.parse = function(config){
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    var prefixSplit = config.split("://");
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:        prefixSplit.unshift("markup");
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    var nameSplit = prefixSplit[1].split(":");
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    if(nameSplit.length == 1){
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:        nameSplit = prefixSplit[1].split(".");
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:    if(nameSplit.length == 1){
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:        return [prefixSplit[0], "", nameSplit[0]];
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js:        return [prefixSplit[0], nameSplit[0], nameSplit[1]];
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor.js://#include ruau.system.DefDescriptor_export
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js:var p = DefDescriptor.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js:    "ruauType", p.ruauType,
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js:    "getQualifiedName", p.getQualifiedName,
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js:    "getNamespace", p.getNamespace,
ruau/ruau-impl/src/nAmE/resources/ruau/system/DefDescriptor_export.js:    "getName", p.getName,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: * @class The Ruue Rendering Service, accessible using $A.renderingService.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js: *        Renders components. The default behaviors can be customized in a
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:var RuueRenderingService = function RuueRenderingService(){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:    //#include ruau.RuueRenderingService_private
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:    var renderingService = {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        /** State to avoid double-visiting components during rerender. */
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        afterRenderStack:[],
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * Renders a component by calling its renderer.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @param {Component}
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         *            components The component or component array to be rendered
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @param {Component}
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         *            parent Optional. The component's parent
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @memberOf RuueRenderingService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        render : function RuueRenderingService$Render(components, parent) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var startTime = (new Date()).getTime();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            components = priv.getArray(components);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var elements = [];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            for (var i=0; i < components.length; i++){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var cmp = components[i];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    // If someone passed a config in, construct it.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    cmp = $A.componentService.newComponentDeprecated(cmp, null, false, true);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    // And put the constructed component back into the array.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    $A.error("RuueRenderingService.render: 'cmp' must be a valid Component, found '" + cmp + "'.");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                if (cmp.isValid()) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    var renderedElements = cmp.render();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    elements=elements.concat(renderedElements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            priv.insertElements(elements, parent);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            $A.renderingService.statsIndex["render"].push({
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                'startTime' : startTime,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                'endTime' : (new Date()).getTime()
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * The default rerenderer for components affected by an event. Call
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * superRerender() from your customized function to chain the
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * rerendering to the components in the body attribute.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @param {Component}
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         *            components The component or component array to be rerendered
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @memberOf RuueRenderingService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var startTime = (new Date()).getTime();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var topVisit = false;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var visited = $A.renderingService.visited;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var elements = [];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            components = priv.getArray(components);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            for (var i = 0; i < components.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var cmp = components[i];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var id = cmp.getGlobalId();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                if (cmp.isValid()){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    var renderedElements=[];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    var addExistingElements=visited[id];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            var renderer = cmp.getRenderer();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            var rerenderedElements=renderer.def.rerender(renderer.renderable);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                renderedElements=renderedElements.concat(rerenderedElements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                addExistingElements=true;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            $A.error("Ruue.RenderingService.rerender: attempt to rerender component that has not been rendered.");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    if(addExistingElements){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        renderedElements=renderedElements.concat(cmp.getElements());
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    elements=elements.concat(renderedElements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                priv.cleanComponent(id);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            $A.renderingService.statsIndex["rerender"].push({
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                'startTime' : startTime,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                'endTime' : (new Date()).getTime()
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.afterRender($A.renderingService.afterRenderStack);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.renderingService.afterRenderStack.length=0;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * The default behavior after a component is rendered.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @param {component}
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         *            components The component or component array that has finished rendering
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @memberOf RuueRenderingService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        afterRender : function(components) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var startTime = (new Date()).getTime();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            components = priv.getArray(components);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            for(var i=0;i<components.length;i++){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var cmp = components[i];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    $A.error("RuueRenderingService.afterRender: 'cmp' must be a valid Component, found '"+cmp+"'.");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                if(cmp.isValid()) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    var renderer = cmp.getRenderer();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    renderer.def.afterRender(renderer.renderable);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            $A.renderingService.statsIndex["afterRender"].push({
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                'startTime' : startTime,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                'endTime' : (new Date()).getTime()
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * The default unrenderer that deletes all the DOM nodes rendered by a
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * component's render() function. Call superUnrender() from your
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * customized function to modify the default behavior.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @param {Component}
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         *            components The component or component array to be unrendered
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @memberOf RuueRenderingService
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var startTime = (new Date()).getTime();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var visited = $A.renderingService.visited;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            components = priv.getArray(components);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            for (var i = 0; i < components.length; i++){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var cmp = components[i];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                if (cmp.isValid() && cmp.isRendered()) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        var renderer = cmp.getRenderer();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            if(cmp.isValid()&&cmp.isRendered()) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                renderer.def.unrender(renderer.renderable);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                cmp.setRendered(false);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                    visited[cmp.getGlobalId()] = true;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        } finally {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            cmp.setUnrendering(false);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            $A.renderingService.statsIndex["unrender"].push({
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                'startTime' : startTime,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                'endTime' : (new Date()).getTime()
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        storeFacetInfo : function(component, facet) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.error("Ruue.RenderingService.storeFacet: 'component' must be a valid Component. Found '" + component + "'.");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if($A.util.isComponent(facet)){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                facet=[facet];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if(!$A.util.isArray(facet)) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.error("Ruue.RenderingService.storeFacet: 'facet' must be a valid Array. Found '" + facet + "'.");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            component._facetInfo=facet.slice(0);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        getUpdatedFacetInfo : function(component, facet) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.error("Ruue.RenderingService.getUpdatedFacet: 'component' must be a valid Component. Found '" + component + "'.");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if($A.util.isComponent(facet)){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                facet=[facet];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if(!$A.util.isArray(facet)){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.error("Ruue.RenderingService.getUpdatedFacet: 'facet' must be a valid Array. Found '"+facet+"'.");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var updatedFacet={
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                facetInfo:[],
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                useFragment:false,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                fullUnrender:false
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var renderCount=0;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if(component._facetInfo) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                for (var i = 0; i < facet.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    var child = facet[i];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    var found = false;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    for (var j = 0; j < component._facetInfo.length; j++) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        if (child && child === component._facetInfo[j]) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            updatedFacet.components.push({action:"rerender",component: child, oldIndex: j, newIndex: i});
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                updatedFacet.useFragment=true;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            component._facetInfo[j] = undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            break;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        updatedFacet.components.push({action:"render",component: child, oldIndex: -1, newIndex: i});
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    updatedFacet.facetInfo.push(child);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                if(!updatedFacet.components.length){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    updatedFacet.fullUnrender=true;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                for (var x = 0; x < component._facetInfo.length; x++) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    if (component._facetInfo[x]) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        updatedFacet.components.unshift({action: "unrender",component: component._facetInfo[x], oldIndex: x, newIndex: -1});
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            return updatedFacet;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        renderFacet:function(component,facet,parent){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            this.storeFacetInfo(component, facet);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var ret=this.render(facet,parent);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                component._marker=ret[0]=priv.createMarker(null,"render facet: " + component.getGlobalId());
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                component._marker=ret[0];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        rerenderFacet:function(component,facet,referenceNode){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var updatedFacet=this.getUpdatedFacetInfo(component,facet);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var ret=[];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var components=updatedFacet.components;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var target=referenceNode||component._marker.parentNode;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var calculatedPosition=0;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var positionMarker=component._marker;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var nextSibling=null;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            while(positionMarker.previousSibling){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                calculatedPosition++;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                positionMarker=positionMarker.previousSibling;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            for(var i=0;i<components.length;i++){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var info=components[i];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var renderedElements=null;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                switch(info.action){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    case "render":
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        if(updatedFacet.useFragment){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            ret=ret.concat(renderedElements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            ret=ret.concat(renderedElements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            if(priv.isMarker(component._marker)){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                $A.util.removeElement(component._marker);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            component._marker=ret[0];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            nextSibling=target.childNodes[calculatedPosition];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            priv.insertElements(renderedElements,nextSibling||target,nextSibling,nextSibling);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        calculatedPosition+=renderedElements.length;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        this.afterRenderStack.push(info.component);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        break;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    case "rerender":
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        if(this.hasDirtyValue(info.component)){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        info.component.disassociateElements();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        priv.associateElements(info.component, renderedElements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        ret = ret.concat(renderedElements);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        calculatedPosition+=renderedElements.length;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        for(var r=0;r<renderedElements.length;r++){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            priv.addRuueClass(component, renderedElements[r]);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        break;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    case "unrender":
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        if (!priv.isMarker(component._marker)) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            if (updatedFacet.fullUnrender || !component._marker.nextSibling) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                component._marker = priv.createMarker(component._marker,"unrender facet: " + component.getGlobalId());
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            } else if (info.component.isValid() && info.component.getElement() === component._marker) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                component._marker = component._marker.nextSibling;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        if ($A.util.isComponent(info.component) && info.component.isValid()) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            info.component.disassociateElements();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            priv.cleanComponent(info.component.getGlobalId());
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            if(info.component.autoDestroy()){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        break;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            this.storeFacetInfo(component, updatedFacet.facetInfo);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if(updatedFacet.useFragment) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                nextSibling = target.childNodes[calculatedPosition];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                priv.insertElements(ret,nextSibling || target, nextSibling, nextSibling);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if (!component.isInstanceOf("ruau:html")){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                component.disassociateElements();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                priv.associateElements(component, ret);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        unrenderFacet:function(cmp,facet){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            this.unrender(cmp._facetInfo);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            this.unrender(facet);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            this.storeFacetInfo(cmp, []);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var elements = cmp.getElements();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            cmp.disassociateElements();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        getMarker:function(cmp){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            return cmp._marker;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        addDirtyValue : function(expression, cmp) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            priv.needsCleaning = true;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if (cmp && cmp.isValid() && cmp.isRendered()) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var id = cmp.getConcreteComponent().getGlobalId();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var list = priv.dirtyComponents[id];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    expression=expression.substring(0,expression.lastIndexOf('.'));
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        hasDirtyValue : function(cmp){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:           return priv.dirtyComponents.hasOwnProperty(cmp.getConcreteComponent().getGlobalId());
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        isDirtyValue : function(expression, cmp) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if (cmp && cmp.isValid()) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var id = cmp.getConcreteComponent().getGlobalId();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var list = priv.dirtyComponents[id];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            return false;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @private
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        rerenderDirty : function(stackName) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if (priv.needsCleaning) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var maxiterations = 1000;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var num = ruau.getContext().incrementRender();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var initialMarkName = "Rerendering-" + num;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.Perf.mark(initialMarkName);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.Perf.mark("Fired ruau:doneRendering event");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var allRerendered = [],
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    startTime,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    "stackName" : stackName,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                // If any components were marked dirty during a component rerender than
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                // priv.needsCleaning will be true.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                // maxiterations to prevent run away rerenderings from crashing the browser.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                while(priv.needsCleaning && maxiterations) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    var dirty = [];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    priv.needsCleaning = false;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    maxiterations--;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    for ( var id in priv.dirtyComponents) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        var cmp = $A.componentService.get(id);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        // uncomment this to see what's dirty and why. (please don't delete me again. it burns.)
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        if (cmp && cmp.isValid() && cmp.isRendered()) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            // We assert that we are not unrendering, as we should never be doing that, but we then check again, as in production we want to
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            // avoid the bug.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            // For the moment, don't fail miserably here. This really is bad policy to allow things to occur on unrender that cause a re-render,
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            // but putting in the assert breaks code, so leave it out for the moment.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            // ruau.assert(!cmp.isUnrendering(), "Rerendering a component during unrender");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                // Since we never go through the renderFacet here, we don't seem
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                // to be calling afterRender
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                // But I could just be wrong, its complicated.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                // Leaving this commented out for now till I can talk it over with JBUCH
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                //this.afterRenderStack.push(cmp);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                                allRerendered.push(cmp);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            priv.cleanComponent(id);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    startTime = startTime || (new Date()).getTime();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                // component caused a rerender that caused a rerender, and on and on for 1000 times.
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                if(!maxiterations) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    $A.error("Max Callstack Exceeded: Rerendering loop resulted in to many rerenderings.");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                if(allRerendered.length) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    cmpsWithWhy["renderingTime"] = (new Date()).getTime() - startTime;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    $A.renderingService.statsIndex["rerenderDirty"].push(cmpsWithWhy);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.Perf.endMark(initialMarkName);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.get("e.ruau:doneRendering").fire();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.Perf.endMark("Fired ruau:doneRendering event");
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                // update the mark info after the fact to avoid unnecessary hits early to get cmp info
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var markDescription = initialMarkName + ": [";
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                for (var m = 0; m < allRerendered.length; m++) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    var rerenderedCmpDef = allRerendered[m].getDef();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        markDescription += "'" + rerenderedCmpDef.descriptor.getQualifiedName() + "'";
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        markDescription += ",";
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                markDescription += "]";
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                $A.Perf.updateMarkName(initialMarkName, markDescription);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:         * @deprecated
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        removeDirtyValue: function(value) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            var cmp = value.owner;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            if(cmp && cmp.isValid()){
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var id = cmp.getConcreteComponent().getGlobalId();
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                var a = priv.dirtyComponents[id];
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                if (a) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    for (var i = 0; i < a.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                        if (a[i] === value) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            a.splice(i, 1);
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                            break;
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:                    if (a.length === 0) {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:        statsIndex : {
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:            "afterRender": [],
ruau/ruau-impl/src/nAmE/resources/ruau/RuueRenderingService.js:    //#include ruau.RuueRenderingService_export
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * Component creation context builds components by determining whether server request is required or
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * client side creation is possible. It saves the component hierarchy into an array then calls init
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * on each component from bottom up. Once all initialized, the callback provided is called with the
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {(Object|Object[])} config - configuration of top level component
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object} scope - callback scope
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Function} callback - callback function
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object} [attributeValueProvider] - attribute value provider
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [localCreation]
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [forceServer]
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [forceClient]
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @class ComponentCreationContext
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:$A.ns.ComponentCreationContext = function(config, scope, callback, attributeValueProvider,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:                                          localCreation, forceServer, forceClient) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    // TODO: remove forceServer and localCreation. When CCC and async component creation is DONE,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    // localCreation and forceServer wouldn't need to be passed in by user
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    this.callback = callback;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    this.components = [];           // all components created
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    this.tops = [];                 // top level components, populated with topIndexes
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    this.descriptors = [];          // all component descriptors being created
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    // keep track of components to know when we're done
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    this.isArray = false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    this.arrayLength = 0;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    if ($A.util.isArray(config)) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        this.loadComponentArray(config, attributeValueProvider, localCreation, forceServer, forceClient);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        this.loadComponent(config, attributeValueProvider, localCreation, null, true, forceServer, forceClient);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * Loads new component to top level component tree.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object} config - configuration for component
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object} [attributeValueProvider] - attribute value provider
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [localCreation]
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Function} [callback] - callback function
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [isTop] - signifies top level component
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [forceServer] - force server request
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [forceClient] - force client only
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:$A.ns.ComponentCreationContext.prototype.loadComponent = function(config, attributeValueProvider, localCreation,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:                                                                  callback, isTop, forceServer, forceClient) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    var configObj = $A.componentService.getComponentConfigs(config, attributeValueProvider),
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        // keep track of top level component(s) to be return to callback
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:     * Wraps provided callback to perform component bookkeeping
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:     * @param {Component} component
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    var wrapper = function(component) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        if ($A.util.isFunction(callback)) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            callback.call(self.scope, component);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    config = configObj["configuration"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    // partial config
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    if (config["creationPath"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    if ((!forceClient && (!def || (def && def.hasRemoteDependencies()))) || forceServer) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        this.requestComponent(config, attributeValueProvider, wrapper);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        var newComp = this.buildComponent(config, attributeValueProvider, localCreation);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        wrapper(newComp);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * Creates and will return an array of components in the order specified in array config
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object[]} configs - array of component configs
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object} [attributeValueProvider] - attribute value provider
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [localCreation]
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [forceServer]
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [forceClient]
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:$A.ns.ComponentCreationContext.prototype.loadComponentArray = function(configs, attributeValueProvider, localCreation,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    $A.assert($A.util.isArray(configs) && configs.length, "configs should be array of component configurations");
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    creating an array of components. Used in {@link $A.ns.ComponentCreationContext.finished}
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    this.isArray = true;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    this.arrayLength = configs.length;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    for (var i = 0; i < configs.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        this.loadComponent(configs[i], attributeValueProvider, localCreation, null, true, forceServer, forceClient);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * Request server dependent component. Callback is called with component when action completes.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object} config - component config
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object} [avp] - attribute value provider
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Function} callback - callback
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:$A.ns.ComponentCreationContext.prototype.requestComponent = function(config, avp, callback) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    var action = $A.get("c.ruau://ComponentController.getComponent"),
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        attributes = config["attributes"] ?
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            (config["attributes"]["values"] ? config["attributes"]["values"] : config["attributes"])
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        atts = {},
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        doubleCall = false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    // Note to self, these attributes are _not_ Ruue Values. They are instead either
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    // a literal string or a (generic object) map.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    for (var key in attributes) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        var value = attributes[key];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        if (value && value.hasOwnProperty("value")) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            value = value["value"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        // no def or component here, because we don't have one.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        var ruauValue = valueFactory.create(value);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        atts[key] = $A.componentService.computeValue(ruauValue, avp);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    action.setCallback(this, function(a){
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        var newComp;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        // DWR! DWR! DWR! storable actions can cause a 'double' callback, first with the cached
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        // version, then with a refreshed version. This should _never_ happen, as the values should
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        // always match, but we'd like to die 'gracefully' when it does occur.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        if (doubleCall) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            $A.assert(!doubleCall,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:                "Two callbacks from " + a + " means our component is not storable: " + a.getReturnValue());
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        doubleCall = true;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        if (a.getState() === "SUCCESS") {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            var returnedConfig = a.getReturnValue();
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            if (!returnedConfig["attributes"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:                returnedConfig["attributes"] = {};
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            var merging = returnedConfig["attributes"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            if (merging.hasOwnProperty("values")) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:                merging = merging["values"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            for (var mkey in attributes) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:                merging[mkey] = attributes[mkey];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            returnedConfig["localId"] = config["localId"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            newComp = this.buildComponent(returnedConfig, avp, false);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            // return text component with error message if something went wrong
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            var errors = a.getError();
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            newComp = this.buildComponent("markup://ruau:text");
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:                newComp.set("v.value", errors[0].message);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:                newComp.set("v.value", "unknown error");
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        if ($A.util.isFunction(callback)) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            callback.call(this.scope, newComp);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    action.setParams({
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        "name" : config["componentDef"]["descriptor"],
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        "attributes" : atts
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    $A.enqueueAction(action);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * Component def should already be available at this point. Hence, no lazy or exclusive needed
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * and component can just be created
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object} config - component configuration
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Object} [attributeValueProvider] - attribute value provider
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @param {Boolean} [localCreation] - local creation
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * @returns {Component} created component
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:$A.ns.ComponentCreationContext.prototype.buildComponent = function(config, attributeValueProvider, localCreation) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    var configObj = $A.componentService.getComponentConfigs(config, attributeValueProvider),
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    $A.assert(def, "Component definition required to create component");
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    config = configObj["configuration"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    if(!config["creationPath"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        localCreation = true;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        // shouldn't need lazy or exclusive components
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        delete config["load"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    return new Component(config, localCreation, this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * Finished is called whenever a component is created. Checks if all components are accounted for
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js: * and calls initializes them in reverse order.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:$A.ns.ComponentCreationContext.prototype.finished = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    // if creating array of components, we need to check whether we have all the top levels
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    var ready = this.isArray ? this.topIndexes.length === this.arrayLength : true;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:    if (this.count === 0 && ready) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        // put top level components into an array
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        for (var t = 0; t < this.topIndexes.length; t++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            var position = this.topIndexes[t];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        // initialize components in reverse order
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        for (var i = this.components.length - 1; i >= 0; i--) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            var component = this.components[i];
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            $A.assert(component, "Should have component");
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            // remove reference to ccc in component to prevent memory leaks
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        var ret;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        if (!this.isArray) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:            $A.assert(this.tops.length === 1, "Should only have one top level component");
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentCreationContext.js:        this.callback.call(this.scope, ret);
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:var p = $A.ns.ComponentDef.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "ruauType", p.ruauType,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "isAbstract", p.isAbstract,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "isTemplate", p.isTemplate,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "getFacets", p.getFacets,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "getLayouts", p.getLayouts,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "getLocationChangeEvent", p.getLocationChangeEvent,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "getAppHandlerDefs", p.getAppHandlerDefs,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "getCmpHandlerDefs", p.getCmpHandlerDefs,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "isInstanceOf", p.isInstanceOf,
ruau/ruau-impl/src/nAmE/resources/ruau/component/ComponentDef_export.js:    "getStyleClassName", p.getStyleClassName
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js://#include ruau.component.Component_private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Construct a new Component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @class
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            config - component configuration
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Boolean}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            [localCreation] - local creation
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:function Component(config, localCreation) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this.priv = new ComponentPriv(config, this, localCreation);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this._destroying = false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this["creationPath"] = this.priv.creationPath;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Examples:
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>//Checks if the component value is of this type<br />obj.ruauType === "Component"</code>
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * var body = cmp.get("v.body");<br />
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * var child = body[i];<br />
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * if (child.ruauType === "Component") { //do something }
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.ruauType = "Component";
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Gets the ComponentDef Shorthand: <code>get("def")</code>
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Indexes the given <code>globalId</code> based on the given
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>localId</code>. Allows <code>cmp.find(localId)</code> to look up
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * the given <code>globalId</code>, look up the component, and return it.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            localId The id set using the ruau:id attribute.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            globalId The globally unique id which is generated on pageload.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.index = function(localId, globalId) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var priv = this.priv;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var index = priv.index;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var existing = index[localId];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		if (!$A.util.isArray(existing)) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			index[localId] = [ existing, globalId ];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			existing.push(globalId);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		index[localId] = globalId;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Removes data from the index. If both <code>globalId</code> and
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>localId</code> are provided, only the given pair is removed from the
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * index. If only <code>localId</code> is provided, every mapping for that
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>localId</code> is removed from the index.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * This might be called after component destroy in some corner cases, be careful
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * to check for priv before accessing.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            localId The id set using the ruau:id attribute.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            globalId The globally unique id which is generated on pageload.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.deIndex = function(localId, globalId) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var priv = this.priv;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// Unfortunately, there are some bizarre loops with deIndex and destroy.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// For the moment, we don't enforce that this is a valid component until
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// we can track down _why_ it is being called on already destroyed
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		if (globalId) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			var index = priv.index[localId];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				if ($A.util.isArray(index)) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					for (var i = 0; i < index.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:						if (index[i] === globalId) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:							// If we have removed an index, we need to back up
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:							// our counter to process the same index.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:						delete priv.index[localId];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					if (index === globalId) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:						delete priv.index[localId];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			delete priv.index[localId];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Locates a component using the localId. Shorthand: <code>get("asdf")</code>,
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * where "asdf" is the <code>ruau:id</code> of the component to look for. See
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <a href="#help?topic=findById">Finding Components by ID</a> for more
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * information. Returns instances of a component using the format
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>cmp.find({ instancesOf : "ruaudocs:sampleComponent" })</code>.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String|Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            name If name is an object, return instances of it. Otherwise,
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            finds a component using its index.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.find = function(name) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    //JBUCH: HALO: TODO: I WANT TO SEPARATE THESE CONCEPTS, AND EXPOSE cmp.findInstances("foo:bar","foo:baz");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if ($A.util.isObject(name)) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var type = name["instancesOf"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var instances = [];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		this.findInstancesOf(type, instances, this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		return instances;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var index = this.priv.index;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			var globalId = index[name];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			if (globalId) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				if ($A.util.isArray(globalId)) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					var ret = [];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					for (var i = 0; i < globalId.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:						ret.push(componentService.get(globalId[i]));
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				return componentService.get(globalId);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// For non-existent objects, we return undefined so that
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// we can distinguish between not existing and null.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Find instances of a Component type, in this component's hierarchy, and in
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Array}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            ret The array of instances to add the located Components to.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            cmp The component to search for.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.findInstancesOf = function(type, ret, cmp) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    // JBUCH: HALO: TODO: CAN WE MAKE THIS PUBLIC, INSTEAD OF THE cmp.find({instancesOf:"ui:something"}) DANCE?
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var body = cmp.get("v.body");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		for (var i = 0; i < body.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			if (cmp.findInstanceOf) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				var inst = cmp.findInstanceOf(type);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					cmp.findInstancesOf(type, ret);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var superComponent = this.getSuper();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.findInstanceOf = function(type) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var descriptor = this.getDef().getDescriptor();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if ((descriptor.getNamespace() + ":" + descriptor.getName()) === type) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var superComponent = this.getSuper();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			return superComponent.findInstanceOf(type);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Checks whether the component is an instance of the given component name (or
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * interface name).
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            name The name of the component (or interface), with a format of
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            <code>namespace:componentName</code>.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @returns {Boolean} true if the component is an instance, or false otherwise.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.isInstanceOf = function(name) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return this.getDef().isInstanceOf(name);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Adds an event handler. Resolving the handler Action happens at Event-handling
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * time, so the Action reference may be altered at runtime, and that change is
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * reflected in the handler. See <a
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * href="#help?topic=dynamicHandler">Dynamically Adding Event Handlers</a> for
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * more information.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            eventName The event name
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            valueProvider The value provider to use for resolving the
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            actionExpression.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            actionExpression The expression to use for resolving the handler
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            Action against the given valueProvider.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {boolean}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            insert The flag to indicate if we should put the handler at the
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            beginning instead of the end of handlers array.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.addHandler = function(eventName, valueProvider, actionExpression, insert) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var dispatcher = this.priv.getEventDispatcher(this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var handlers = dispatcher[eventName];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if (!handlers) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		handlers = [];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		dispatcher[eventName] = handlers;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		handlers.unshift(this.priv.getActionCaller(valueProvider, actionExpression));
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		handlers.push(this.priv.getActionCaller(valueProvider, actionExpression));
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Adds handlers to Values owned by the Component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            config Passes in the value, event (e.g. "change"), and action
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.addValueHandler = function(config) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var value = config["value"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if ($A.util.isExpression(value)&&value.getExpression()==="this") {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        var eventQName = this.priv.componentDef.getEventDef(config["event"], true).getDescriptor().getQualifiedName();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        this.addHandler(eventQName, this, config["action"]);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    if(config["action"]&&!config["method"]){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        config["method"]=this.priv.getActionCaller(this, config["action"].getExpression());
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this.priv.addValueHandler(this,config);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.removeValueHandler = function(config) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    this.priv.removeValueHandler(this,config);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Add a document level event handler that auto-cleans.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * When called, this will create and return a handler that can be enabled and
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * disabled at will, and will be cleaned up on destroy.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            eventName the event name to attach.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Function}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            callback the callback (only called when enabled, and component is
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            valid & rendered)
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Boolean}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            autoEnable (truthy) enable the handler when created.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @return {Object} an object with a single visible call of setEnabled(Boolean)
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.addDocumentLevelHandler = function(eventName, callback, autoEnable) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var dlh = new $A.ns.DocLevelHandler(eventName, callback, this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if (!this.priv.docLevelHandlers) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		this.priv.docLevelHandlers = {};
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	$A.assert(this.priv.docLevelHandlers[eventName] === undefined, "Same doc level event set twice");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this.priv.docLevelHandlers[eventName] = dlh;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	dlh.setEnabled(autoEnable);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Remove a document level handler.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * You need only call this if the document level handler should be destroyed, it
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * is not generally needed.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            the object returned by addDocumentHandler.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.removeDocumentLevelHandler = function(dlh) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if (dlh && dlh.setEnabled) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		dlh.setEnabled(false);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		this.priv.docLevelHandlers[dlh.eventName] = undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Forces the final destroy of a component (after async).
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this.destroy(false);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Destroys the component and cleans up memory.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>destroy()</code> destroys the component immediately while
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>destroy(true)</code> destroys it asynchronously. See <a
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * href="#help?topic=dynamicCmp"/>Dynamically Creating Components</a> for more
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * information.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Note that when this is called with async = true, it makes a specific race
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * condition (i.e. calling functions after destroy) harder to trigger. this
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * means that we really would like to be able to for synchronous behaviour here,
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * or do something to make the destroy function appear much more like it is
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * doing a synchronous destroy (e.g. removing this.priv). Unfortunately, the act
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * of doing an asynchronous destroy creates false 'races' because it leaves all
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Boolean}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            async Set to true if component should be destroyed asynchronously.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            The default value is true.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.destroy = function(async) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	async = false; // Force synchronous destroy when in testing modes
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		// DCHASMAN TODO W-1879487 Reverted in 188 because of hard to diagnose
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		// rerendering weirdness in a couple of tests and one:'s mru/lists view
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		// Default to async destroy
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		 * if (async === undefined) { async = true; }
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var key;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		if (this.priv.docLevelHandlers !== undefined) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			for (key in this.priv.docLevelHandlers) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				var dlh = this.priv.docLevelHandlers[key];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				if (dlh && dlh.setEnabled) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					dlh.setEnabled(false);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		if (async) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			for (var i=0;i<this.priv.elements.length;i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				var element = this.priv.elements[i];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					element.style.display = "none";
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var priv = this.priv;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var componentDef = this.getDef();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var superComponent = this.getSuper();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var globalId = priv.globalId;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		// Track some useful debugging information for InvalidComponent's use
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		this._globalId = globalId;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        if (priv.attributes) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:            var expressions=priv.attributes.destroy(async);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:            for(var x in expressions){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:                expressions[x].removeChangeHandler(this,"v."+x);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		$A.componentService.deIndex(globalId);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var vp = priv.valueProviders;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			for ( var k in vp) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				var v = vp[k];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:						v.destroy(async);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:       // Swap in InvalidComponent prototype to keep us from having to add
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        // validity checks all over the place
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        $A.util.apply(this, InvalidComponent.prototype, true);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			priv.model.destroy(async);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var ar = priv.actionRefs;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		if (ar) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			for (k in ar) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				ar[k].destroy(async);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			var handlerDefs = componentDef.getAppHandlerDefs();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			if (handlerDefs) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				for (i = 0; i < handlerDefs.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					var handlerDef = handlerDefs[i];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					var handlerConfig = {};
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					handlerConfig["globalId"] = globalId;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					handlerConfig["event"] = handlerDef["eventDef"].getDescriptor().getQualifiedName();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					$A.eventService.removeHandler(handlerConfig);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:            superComponent.destroy(async);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js://        var references=priv.references;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js://            for(var reference in references){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var eventDispatcher = priv.getEventDispatcher();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		if (eventDispatcher) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			for (key in eventDispatcher) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				var vals = eventDispatcher[key];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				if (vals) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					for (var j = 0; j < vals.length; j++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:						delete vals[j];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:					delete eventDispatcher[key];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        this._marker=null;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        priv.attributes = null;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        priv.valueProviders = null;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        priv.actionRefs = null;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        priv.handlers=null;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        priv.eventDispatcher = null;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        this._destroying = false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		return globalId;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns true if this component has been rendered and valid.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.isRenderedAndValid = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var renderer = this.priv.renderer;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return renderer.def.render(renderer.renderable) || [];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns true if this component has been rendered but not unrendered (does not
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * necessarily mean component is in the dom tree).
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns true if this component has been rendered but not unrendered (does not
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * necessarily mean component is in the dom tree).
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns true if this component has been rendered but not unrendered (does not
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * necessarily mean component is in the dom tree).
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Sets the rendered flag.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Boolean}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            rendered Set to true if component is rendered, or false otherwise.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns the renderer instance for this component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Gets the globalId. This is the generated globally unique id of the component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * It can be used to locate the instance later, but will change across
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * pageloads.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.getGlobalId = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return this.priv.globalId;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Get the id set using the <code>ruau:id</code> attribute. Can be passed into
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>find()</code> on the parent to locate this child.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.getLocalId = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return this.priv.localId;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * If the server provided a rendering of this component, return it.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var concrete = this.getConcreteComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Associates a rendered element with the component that rendered it for later
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * lookup. Also adds the rendering component's global Id as an attribute to the
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * rendered element. Primarily called by RenderingService.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.associateElement = function(element) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var concrete = this.getConcreteComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		concrete.associateElement(element);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var priv = this.priv;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		priv.associateRenderedBy(this, element);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Disassociates a rendered element with the component that rendered it for later
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.disassociateElements = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        var concrete = this.getConcreteComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        concrete.disassociateElements();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns a map of the elements previously rendered by this component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var concrete = this.getConcreteComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * If the component only rendered a single element, return it. Otherwise, you
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var elements = this.getElements();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        for (var i = 0; i<elements.length; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns a live reference to the value indicated using property syntax.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            key The data key for which to return a reference.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @return {PropertyReferenceValue}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    key = $A.expressionService.normalize(key);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    if(!this.priv.references.hasOwnProperty(key)){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        this.priv.references[key]=new PropertyReferenceValue(key, this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Clears a live reference to the value indicated using property syntax.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            key The data key for which to clear the reference.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.clearReference = function(key) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    key = $A.expressionService.normalize(key);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    $A.assert(key.indexOf('.') > -1, "Unable to clear reference for key '" + key + "'. No value provider was specified. Did you mean 'v." + key + "'?");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var path = key.split('.');
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var valueProvider = this.priv.getValueProvider(path.shift(), this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    $A.assert(valueProvider, "Unknown value provider for key '" + key + "'.");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    $A.assert(valueProvider.clearReference, "Value provider does not implement clearReference() method.");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var subPath=path.join('.');
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var value=valueProvider.clearReference(subPath);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    if($A.util.isExpression(value)){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        value.removeChangeHandler(this,key);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns the value referenced using property syntax.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            key The data key to look up on the Component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    key = $A.expressionService.normalize(key).replace(/^v\.body\b/g,"v.body."+this.priv.globalId);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var path = key.split('.');
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var root = path.shift();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var valueProvider = this.priv.getValueProvider(root, this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if (path.length) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        $A.assert(valueProvider, "Unable to get value for key '" + key + "'. No value provider was found for '" + root + "'.");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        return valueProvider.get(path.join('.'));
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		return valueProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns a shadow value. Used for programmatically adding values after FCVs.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            key The data key to look up on the Component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.getShadowAttribute = function(key) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    return this.priv.attributes.getShadowValue(key.substr(2));
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Sets the value referenced using property syntax.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            key The data key to set on the Component. E.g.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            <code>cmp.set("v.key","value")</code>
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Object}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            value The value to set
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.set = function(key, value, ignoreChanges) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    key = $A.expressionService.normalize(key).replace(/^v\.body\b/g,"v.body."+this.priv.globalId);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    $A.assert(key.indexOf('.') > -1, "Unable to set value for key '" + key + "'. No value provider was specified. Did you mean 'v." + key + "'?");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var path = key.split('.');
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var valueProvider = this.priv.getValueProvider(path.shift(), this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    $A.assert(valueProvider, "Unknown value provider for key '" + key + "'.");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    $A.assert(valueProvider.set, "Value provider does not implement set() method.");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var subPath=path.join('.');
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var oldValue=valueProvider.get(subPath);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var returnValue=valueProvider.set(subPath, value, ignoreChanges);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    if($A.util.isExpression(value)){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        value.addChangeHandler(this,key);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        if(!ignoreChanges){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:            value=value.evaluate();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var changed=$A.util.isArray(value)||$A.util.isObject(value)||oldValue!==value;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    if(changed&&!ignoreChanges) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        $A.renderingService.addDirtyValue(key, this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        var index=path.length>1?path[path.length-1]:undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        this.priv.fireChangeEvent(this,key,oldValue,value,index);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    return returnValue;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Sets a shadow attribute. Used for programmatically adding values after FCVs.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            key The data key to set on the Component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.setShadowAttribute = function(key,value) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        var oldValue = this.get(key);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        var attribute = key.substr(2);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        this.priv.attributes.setShadowValue(attribute, value);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        var newValue=this.get(key);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        if(oldValue!==newValue) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:            $A.renderingService.addDirtyValue(key, this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:            this.priv.fireChangeEvent(this, key, oldValue, newValue);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.markDirty=function(reason){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    $A.renderingService.addDirtyValue(reason||"Component.markDirty()",this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.fireChangeEvent=function(key,oldValue,newValue,index){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        this.priv.fireChangeEvent(this,key,oldValue,newValue,index);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Sets a flag to tell the rendering service whether or not to destroy this component when it is removed
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * from it's rendering facet. Set to false if you plan to keep a reference to a component after it has
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * been unrendered or removed from a parent facet. Default is true: destroy once orphaned.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Boolean} destroy The flag to specify whether or not to destroy this component automatically.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.autoDestroy = function(destroy) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        this.priv.autoDestroy = !!destroy;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        return this.priv.autoDestroy;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Gets the concrete implementation of a component. If the component is
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * concrete, the method returns the component itself. For example, call this
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * method to get the concrete component of a super component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var priv = this.priv;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns true if the component is concrete, or false otherwise.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns the value provider.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @return {Object} value provider
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.getAttributeValueProvider = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return this.priv.attributeValueProvider||this;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns the value provider of the component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @return {Object} component or value provider
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.getComponentValueProvider = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var valueProvider = this.priv.attributeValueProvider||this.priv.facetValueProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    if (!valueProvider) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    return valueProvider.ruauType !== Component.prototype.ruauType && $A.util.isFunction(valueProvider.getComponent) ?
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        valueProvider.getComponent() : valueProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Gets the event dispatcher.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.getEventDispatcher = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return this.priv.getEventDispatcher();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns the model for this instance, if one exists. Shorthand :
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Return a new Event instance of the named component event. Shorthand:
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>get("e.foo")</code>, where e is the name of the event.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            name The name of the Event.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.getEvent = function(name) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var eventDef = this.getDef().getEventDef(name);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		"name" : name,
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Get an event by descriptor qualified name.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * This is only used by action for firing of component events. It is a bit of a
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * hack (reversing the map).
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            descriptor a descriptor qualified name.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var name = this.getDef().getEventNameByDescriptor(descriptor);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if (name === null) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return this.getEvent(name);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.fire = function(name) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var dispatcher=this.priv.getEventDispatcher();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    if(!dispatcher){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var eventDef = this.priv.componentDef.getEventDef(name,true);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var eventQName = eventDef.getDescriptor().getQualifiedName();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var handlers = dispatcher[eventQName];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    if(handlers){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        var event = new Event({
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:            "eventDispatcher" : dispatcher
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        event.setParams({
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:            value : this
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Looks up the specified value and checks if it is currently dirty.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @returns true if the value is dirty, and false if it is clean or does not
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @deprecated TEMPORARY WORKAROUND
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        return $A.renderingService.hasDirtyValue(this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    return $A.renderingService.isDirtyValue(expression, this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns true if the component has not been destroyed.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.isValid = function(expression) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// JBUCH TODO: TEMPORARY PASSTHROUGH TO REMOVE SIMPLEVALUES; isValid()
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		return this.priv.attributes.isValid(expression);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Looks up the specified value and sets it to valid or invalid.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @deprecated TEMPORARY WORKAROUND
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.setValid = function(expression, valid) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// JBUCH TODO: TEMPORARY PASSTHROUGH TO REMOVE SIMPLEVALUES; setValid()
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if(valid != this.priv.attributes.isValid(expression)) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		$A.renderingService.addDirtyValue(expression, this);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this.priv.attributes.setValid(expression, valid);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Looks up the specified value and adds errors to it.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @deprecated TEMPORARY WORKAROUND
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.addErrors = function(expression, errors) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// JBUCH TODO: TEMPORARY PASSTHROUGH TO REMOVE SIMPLEVALUES; addErrors()
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    this.setValid(expression,false);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this.priv.attributes.addErrors(expression, errors);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Looks up the specified value and clears errors on it.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @deprecated TEMPORARY WORKAROUND
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.clearErrors = function(expression) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// JBUCH TODO: TEMPORARY PASSTHROUGH TO REMOVE SIMPLEVALUES; clearErrors()
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    this.setValid(expression,true);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Looks up the specified value and gets errors on it.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @deprecated TEMPORARY WORKAROUND
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return this.priv.attributes.getErrors(expression);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns a string representation of the component for logging.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        this._description=this.getDef() + ' {' + this.getGlobalId() + '}' + (this.getLocalId() ? ' {' + this.getLocalId() + '}' : '');
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var attributesOutput = [];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    var attributes = this.get("v");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if(attributes){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        for(var key in attributes.values) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:            attributesOutput.push(" "+ key + " = \"" + attributes.values[key] +"\"");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:    return this._description + attributesOutput.join(",");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns component serialized as Json string
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns an object whose keys are the lower-case names of Ruue events for
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * which this component currently has handlers.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.getHandledEvents = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var ret = {};
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var concrete = this.getConcreteComponent();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var eventDispatcher = concrete.getEventDispatcher();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if (eventDispatcher) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		for ( var name in eventDispatcher) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			if (eventDispatcher.hasOwnProperty(name) && eventDispatcher[name].length) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				ret[name.toLowerCase()] = true;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Check if we have an event handler attached.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            eventName The event name associated with this component.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.hasEventHandler = function(eventName) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if (eventName) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var handledEvents = this.getHandledEvents();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		return handledEvents[eventName.toLowerCase()];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Returns an array of this component's facets, i.e., attributes of type
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * <code>ruau://Ruue.Component[]</code>
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:Component.prototype.getFacets = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if (!this.getFacets.cachedFacetNames) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		// grab the names of each of the facets from the ComponentDef
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var facetNames = [];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		var attributeDefs = this.getDef().getAttributeDefs();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:        //JBUCH: HALO: TODO: UNNECESSARY PERF HIT WITH .each() USING NEW STACKFRAME ON *EVERY* COMPONENT THAT HAS ATTRIBUTES (MOST COMPONENTS)
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		attributeDefs.each(function(attrDef) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			if (attrDef.getTypeDefDescriptor() === "ruau://Ruue.Component[]") {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:				facetNames.push(attrDef.getDescriptor().getName());
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		// cache the names--they're not going to change
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		this.getFacets.cachedFacetNames = facetNames;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	// then grab each of the facets themselves
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var names = this.getFacets.cachedFacetNames;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var facets = [];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	for (var i = 0, len = names.length; i < len; i++) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		facets.push(this.get("v." + names[i]));
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	return facets;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Constructor for a doc level handler.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {String}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            eventName the name of the event (must be valid dom event)
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Function}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            callback the callback function for the event (will be wrapped)
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Component}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            component the component attached to the handler.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @private
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:$A.ns.DocLevelHandler = function DocLevelHandler(eventName, callback, component) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this.eventName = eventName;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this.enabled = false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	var that = this;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	this.callback = function(eventObj) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		if (that.component.isRenderedAndValid()) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			callback(eventObj);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * Set whether the handler is enabled.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * This function will enable or disable the handler as necessary. Note that the
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * callback will be called only if the component is rendered.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: * @param {Boolean}
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js: *            enable if truthy, the handler is enabled, otherwise disabled.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:$A.ns.DocLevelHandler.prototype.setEnabled = function(enable) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:	if (enable) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		if (!this.enabled) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			this.enabled = true;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			$A.util.on(document.body, this.eventName, this.callback);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:		if (this.enabled) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			this.enabled = false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:			$A.util.removeOn(document.body, this.eventName, this.callback);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:var dlp = $A.ns.DocLevelHandler.prototype;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:exp(dlp, "setEnabled", dlp.setEnabled);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component.js:// #include ruau.component.Component_export
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js: * limitations under the License.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:var ComponentPriv = (function() { // Scoping priv
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:    var nextClientCreatedComponentId = 0;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:    var ComponentPriv = function ComponentPriv(config, cmp, localCreation) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // setup some basic things
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.autoDestroy=true;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.rendered = false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.inUnrender = false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.localId = config["localId"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.valueProviders = {};
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.actionRefs = undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.eventDispatcher = undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.docLevelHandlers = undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.handlers = {};
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        var context = $A.getContext();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // allows components to skip creation path checks if it's doing something weird
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // such as wrapping server created components in client created one
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        var act = config["skipCreationPath"] ? null : context.getCurrentAction();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        var forcedPath = false;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if (act) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            var currentPath = act.topPath();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            if (config["creationPath"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                // This is a server side config, so we need to sync ourselves with it.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                // The use case here is that the caller has gotten a returned array of
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                // components, and is instantiating them independently. We can warn the
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                // user when they do the wrong thing, but we'd actually like it to work
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                // for most cases.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                this.creationPath = act.forceCreationPath(config["creationPath"]);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                forcedPath = true;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            } else if (!context.containsComponentConfig(currentPath) && !!localCreation) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                // skip creation path if the current top path is not in server returned
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                // componentConfigs and localCreation
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                this.creationPath = "client created";
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                this.creationPath = act.getCurrentPath();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            //$A.log("l: [" + this.creationPath + "]");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // create the globally unique id for this component
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.setupGlobalId(config["globalId"], localCreation);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        var partialConfig = undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if (this.creationPath && this.creationPath !== "client created") {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            partialConfig = context.getComponentConfig(this.creationPath);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if (partialConfig) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            this.validatePartialConfig(config,partialConfig);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            this.partialConfig = partialConfig;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // get server rendering if there was one
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        } else if (partialConfig && partialConfig["rendering"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            this.rendering = this.partialConfig["rendering"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // add this component to the global index
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // sets this components definition, preferring partialconfig if it exists
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.setupComponentDef(this.partialConfig || config);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // join attributes from partial config and config, preferring
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // partial when overlapping
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        var configAttributes = {"values":{}};
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if (config["attributes"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            $A.util.apply(configAttributes["values"], config["attributes"]["values"],true);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            configAttributes["valueProvider"] = config["attributes"]["valueProvider"] || config["valueProvider"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if (partialConfig && partialConfig["attributes"]) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            $A.util.apply(configAttributes["values"],partialConfig["attributes"]["values"],true);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if(!configAttributes["values"]){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            configAttributes["values"] = {};
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if(!configAttributes["facetValueProvider"]){
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            configAttributes["facetValueProvider"] = cmp;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.attributeValueProvider = configAttributes["valueProvider"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.facetValueProvider = configAttributes["facetValueProvider"];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // initialize attributes
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.setupAttributes(cmp, configAttributes, localCreation);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // runs component provider and replaces this component with the
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.injectComponent(config, cmp, localCreation, cmp.ccc);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // instantiates this components model
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // create all value providers for this component m/v/c etc.
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.setupValueProviders(config["valueProviders"], cmp);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // instantiate super component(s)
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.setupSuper(cmp, configAttributes, localCreation, cmp.ccc);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // for application type events
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.setupApplicationEventHandlers(cmp);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // index this component with its value provider (if it has a localid)
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // instantiate the renderer for this component
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // starting watching all values for events
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.setupValueEventHandlers(cmp);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // clean up refs to partial config
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.partialConfig = undefined;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if (forcedPath && act) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            act.releaseCreationPath(this.creationPath);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:    ComponentPriv.prototype.nextGlobalId = function(localCreation) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if (!localCreation) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            var context = $A.getContext();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            var currentAction = context.getCurrentAction();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            var id;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            var suffix;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                id = currentAction.getNextGlobalId();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                id = context.getNextGlobalId();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                var num = context.getNum();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            return (nextClientCreatedComponentId++) + ":c";
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:     * The globally unique id of this component
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:    ComponentPriv.prototype.setupGlobalId = function(globalId, localCreation) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if (!globalId || !localCreation) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            globalId = this.nextGlobalId(localCreation);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        var old = componentService.get(globalId);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            $A.log("ComponentPriv.setupGlobalId: globalId already in use: '"+globalId+"'.");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        this.globalId = globalId;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:    ComponentPriv.prototype.getValueProvider = function(key, cmp) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            $A.error("ComponentPriv.getValueProvider: 'key' must be a valid String.");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        key=key.toLowerCase();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        // Try the most commonly accessed non-map based provider keys first
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            return this.attributes;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            // Try map based providers followed by the rarely accessed keys
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            // (globalId, def, ...)
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            var provider = this.valueProviders[key];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                    case "globalid":
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                        return this.globalId;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                    case "def":
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                        return valueFactory.create(this.componentDef);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                    case "this":
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                    case "null":
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                    default:
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                        // JBUCH: HALO: TODO: TRACK DOWN WHY/IF THIS IS NECESSARY. SEE uitest/carousel_Test.cmp
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:     * Create the value providers
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:    ComponentPriv.prototype.setupValueProviders = function(config, cmp) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        var actionProvider = this.createActionValueProvider(cmp);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        if (actionProvider) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            this.valueProviders["c"] = actionProvider;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        var extraValueProviders = config;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        for ( var key in extraValueProviders) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            var value = extraValueProviders[key];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                this.getValueProviders()[key.toLowerCase()] = valueFactory.create(value);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:    ComponentPriv.prototype.getValueProviders = function() {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        return this.valueProviders;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:    ComponentPriv.prototype.createActionValueProvider = function(cmp) {
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:        var controllerDef = this.componentDef.getControllerDef();
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            this.actionRefs = {};
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:            var ar = this.actionRefs;
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                    var ret = ar[key];
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                        var actionDef = controllerDef.getActionDef(key);
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                        $A.assert(actionDef,"Unknown controller action '"+key+"'");
ruau/ruau-impl/src/nAmE/resources/ruau/component/Component_private.js:                        if (actionDef) {
