ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:                elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputDateTime component rendered with wrong value", "Oct 23, 2005 9:30:00 AM",
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementButton = findDomElement(By.cssSelector("button[title~='DateTime']"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputDateTime component rendered with wrong value", "Oct 23, 2006 9:30:00 AM",
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:                elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputDateTime component rendered with wrong value", "Oct 23, 2006 9:30:00 AM",
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Excluded on mobile browsers for lack of tab support
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Checking functionality of the inputNumber/outputNumber components
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // initial load
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementInput = findDomElement(By.cssSelector("input[class~='uiInputNumber']"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementoutput = findDomElement(By.cssSelector("span[class~='uiOutputNumber']"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputNumber component rendered with wrong value", "411", elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputNumber component rendered with wrong value", "411", elementoutput.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // Tab out
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        ruauUITestingUtil.pressTab(elementInput);
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputNumber component rendered with wrong value", "511", elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputNumber component rendered with wrong value", "511", elementoutput.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputNumber component rendered with wrong value", "611", elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputNumber component rendered with wrong value", "611", elementoutput.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Excluded on mobile browsers for lack of tab support
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Checking functionality of the inputPercent/outputPercent components
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // initial load
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementInput = findDomElement(By.cssSelector("input[class~='uiInputPercent']"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementoutput = findDomElement(By.cssSelector("span[class~='uiOutputPercent']"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputPercent component rendered with wrong value", "1,235%", elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputPercent component rendered with wrong value", "1,235%", elementoutput.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // Tab out
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        ruauUITestingUtil.pressTab(elementInput);
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputPercent component rendered with wrong value", ".2235", elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputPercent component rendered with wrong value", "22%", elementoutput.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputPercent component rendered with wrong value", "1.2235", elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputPercent component rendered with wrong value", "122%", elementoutput.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Excluded on mobile browsers for lack of tab support
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Checking functionality of the inputCurrency/outputCurrency components
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // initial load
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:                .cssSelector("span[id='MyCurrency'] > input[class~='uiInputNumber']"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementoutput = findDomElement(By.cssSelector("span[class~='uiOutputCurrency']"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputCurrency component rendered with wrong value", "$123,456.79",
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:                elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputCurrency component rendered with wrong value", "$123,456.79", elementoutput.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // Tab out
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        ruauUITestingUtil.pressTab(elementInput);
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputCurrency component rendered with wrong value", "123456", elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputCurrency component rendered with wrong value", "$123,456.00", elementoutput.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputCurrency component rendered with wrong value", "123.456", elementInput.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputCurrency component rendered with wrong value", "$123.46", elementoutput.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:package org.ruauframework.def;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:import java.io.IOException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:import org.ruauframework.util.json.Json;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:public class DescriptorFilterTest extends UnitTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public DescriptorFilterTest(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    private String getLabel(DescriptorFilter dm, boolean expected, String what, String value) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        String match;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            match = "Failed to match ";
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            match = "Matched ";
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        return dm.toString() + ": " + match + " " + what + ": " + value;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    private void checkPrefix(DescriptorFilter dm, String prefix, boolean value) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, value, "prefix", prefix), value, dm.matchPrefix(prefix));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    private void checkNamespace(DescriptorFilter dm, String namespace, boolean value) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, value, "namespace", namespace), value, dm.matchNamespace(namespace));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    private void checkName(DescriptorFilter dm, String name, boolean value) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, value, "name", name), value, dm.matchName(name));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    private void checkType(DescriptorFilter dm, DefType type, boolean value) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, value, "type", type.toString()), value, dm.matchType(type));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testInvalid() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            new DescriptorFilter("bah.humbug://a:b");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            fail("should have gotten an exception");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        } catch (IllegalArgumentException expected) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            assertTrue("exception should name prefix", expected.getMessage().contains("prefix"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            new DescriptorFilter("a://bah.humbug:b");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            fail("should have gotten an exception");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        } catch (IllegalArgumentException expected) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            assertTrue("exception should name namespace", expected.getMessage().contains("namespace"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            new DescriptorFilter("a://b:bah.humbug");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            fail("should have gotten an exception");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        } catch (IllegalArgumentException expected) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            assertTrue("exception should name name", expected.getMessage().contains(" name "));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            new DescriptorFilter("a://b:c", "bah.humbug");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            fail("should have gotten an exception");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        } catch (IllegalArgumentException expected) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "hi", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "css", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testPrefixPlusNamespace() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "hi", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "css", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "css", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testNamespaceOnly() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "css", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testNamespaceAndName() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "css", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "ho", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "hi", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "css", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testFullWildcardMatcher() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testNoprefixWildcardMatcher() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "hi", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "css", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testNonamespaceWildcardMatcher() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "hi", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "css", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testNonameWildcardMatcher() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "hi", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "css", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "hi", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "css", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testExactMatcher() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dm = new DescriptorFilter("exactprefix://exactnamespace:exactname");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "exactprefix1", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "1exactprefix", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "exactnamespace", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "exactname", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "exactprefix", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "exactnamespace1", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "1exactnamespace", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "exactprefix", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "exactname", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "exactnamespace", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "exactname1", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "1exactname", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "exactprefix", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "exactnamespace", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "exactname", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testAlmostMatcher() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dm = new DescriptorFilter("almostprefix*://almostnamespace*:almostname*");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "almostprefix1", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "1almostprefix", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "almostnamespace", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "almostname", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkPrefix(dm, "almostprefix", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "almostnamespace1", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "1almostnamespace", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "almostprefix", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "almostname", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkNamespace(dm, "almostnamespace", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "almostname1", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "1almostname", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "almostprefix", false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "almostnamespace", true); // note that this is true....
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        checkName(dm, "almostname", true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    public void testTypeMatcher() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        for (DefType type : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            DescriptorFilter dm = new DescriptorFilter("exactprefix://exactnamespace:exactname", type.toString());
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            for (DefType otype : DefType.values()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:                if (!otype.equals(type)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:                    checkType(dm, otype, false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    @SuppressWarnings("serial")
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:    private static class FakeDefDescriptor implements DefDescriptor<Definition> {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        private final String name;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        private final String prefix;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        private final String namespace;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        private final DefType defType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public FakeDefDescriptor(String prefix, String namespace, String name, DefType defType) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            this.namespace = namespace;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            this.name = name;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public void serialize(Json json) throws IOException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public String getName() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            return this.name;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public String getQualifiedName() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public String getDescriptorName() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public String getNamespace() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            return this.namespace;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public String getNameParameters() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public boolean isParameterized() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public boolean exists() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            return this.prefix + "://" + this.namespace + ":" + this.name + "(" + this.defType.toString() + ")";
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        public int compareTo(DefDescriptor<?> other) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            // Can't use the helper on DefDescriptorImpl in this non-impl test
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            // package...
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:            return getQualifiedName().compareToIgnoreCase(other.getQualifiedName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        FakeDefDescriptor dd;
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dm = new DescriptorFilter("exactprefix://exactnamespace:exactname", "APPLICATION");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.APPLICATION);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, true, "dd", dd.toString()), true, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.COMPONENT);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, false, "dd", dd.toString()), false, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dm = new DescriptorFilter("exactprefix://exactnamespace:exactname", "APPLICATION,COMPONENT");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.APPLICATION);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, true, "dd", dd.toString()), true, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.COMPONENT);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, true, "dd", dd.toString()), true, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.STYLE);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, false, "dd", dd.toString()), false, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dm = new DescriptorFilter("exactprefix://exactnamespace:exactname", "*");
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.APPLICATION);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, true, "dd", dd.toString()), true, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.COMPONENT);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, true, "dd", dd.toString()), true, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.STYLE);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, true, "dd", dd.toString()), true, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dm = new DescriptorFilter("exactprefix://exactnamespace:exactname", null);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.APPLICATION);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, false, "dd", dd.toString()), false, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.COMPONENT);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, true, "dd", dd.toString()), true, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        dd = new FakeDefDescriptor("exactprefix", "exactnamespace", "exactname", DefType.STYLE);
ruau/ruau/SouRCeS/test/java/org/ruauframework/def/DescriptorFilterTest.java:        assertEquals(getLabel(dm, false, "dd", dd.toString()), false, dm.matchDescriptor(dd));
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:package org.ruauframework.controller.java;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:import java.util.Map;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:import org.ruauframework.instance.Component;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:import org.ruauframework.system.Annotations.Controller;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:import org.ruauframework.system.Annotations.Key;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:import com.google.common.collect.ImmutableMap;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:public class DelayedController {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:    @RuueEnabled
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:    public static Object getComponents(@Key("token") String token) throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:        Component cmp = Ruue.getInstanceService().getInstance("ruautest:text", ComponentDef.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:        Object val = token;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:        Map<String, Object> atts = ImmutableMap.of("value", val);
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:        cmp.getAttributes().set(atts);
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:            Thread.sleep(2000);
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/DelayedController.java:        } catch (Exception e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:package org.ruauframework.controller.java;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:import java.util.List;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:import org.ruauframework.impl.source.StringSourceLoader;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:import org.ruauframework.system.Annotations.Controller;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:import org.ruauframework.system.Annotations.Key;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:public class StringSourceController {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:     * Adds a given type of def to the string source
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:     * @param name Name of the component/application/event, any type of def which uses MARKUP://
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:     * @param content Contents of the def
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:     * @param defType COMPONENT / APPLICATION / EVENT etc
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:     * @param lastModified long value
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:    @RuueEnabled
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:    public static DefDescriptor<?> addSource(@Key("name") String name, @Key("content") String content, @Key("defType") String defType) throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:        StringSourceLoader stringSourceLoader = StringSourceLoader.getInstance();
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:        return stringSourceLoader.addSource(Enum.valueOf(DefType.class, defType).getPrimaryInterface(), content, name, true).getDescriptor();
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:     * Removes a specified resource from string source
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:     * @param name name of resource in string source
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:     * @param defType COMPONENT / APPLICATION / EVENT etc
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:    @RuueEnabled
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:    public static void removeSource(@Key("names") List<String> names, @Key("defType") List<String> defType) throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:        StringSourceLoader stringSourceLoader = StringSourceLoader.getInstance();
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:        for(int i =0; i< names.size();i++){
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:            DefDescriptor<?> descriptor = Ruue.getDefinitionService().getDefDescriptor(names.get(i), Enum.valueOf(DefType.class, defType.get(i)).getPrimaryInterface()); 
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/StringSourceController.java:            stringSourceLoader.removeSource(descriptor);
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:package org.ruauframework.controller.java;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:import org.ruauframework.system.Annotations.Key;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:import org.ruauframework.test.RuueTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java: * Let tests adjust servlet configuration.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:public class ServletConfigController {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:     * Set the servlet production mode configuration. Don't forget to restore config after test.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:     * @param isProduction true/false
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:    public static void setProductionConfig(@Key("isProduction") boolean isProduction) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:        RuueTestCase.getMockConfigAdapter().setIsProduction(isProduction);
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:     * Set the servlet isJar configuration. Don't forget to restore config after test.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:     * @param isRuueJSStatic true/false
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:    public static void setIsRuueJSStatic(@Key("isRuueJSStatic") boolean isRuueJSStatic) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:        RuueTestCase.getMockConfigAdapter().setIsRuueJSStatic(isRuueJSStatic);
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:     * Set the servlet application cache configuration. Don't forget to restore config after test.
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:     * @param isDisabled true/false
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:    public static void setAppCacheDisabled(@Key("isDisabled") Boolean isDisabled) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:        RuueTestCase.getMockConfigAdapter().setIsClientAppcacheEnabled(!isDisabled);
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:    public static long getBuildTimestamp() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:        return Ruue.getConfigAdapter().getBuildTimestamp();
ruau/ruau/SouRCeS/test/java/org/ruauframework/controller/java/ServletConfigController.java:    public static void nAmE(String[] args) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:package org.ruauframework.throwable;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:import java.io.IOError;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:import org.ruauframework.system.Location;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java: * Tests for RuueExceptionUtil.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:public class RuueExceptionUtilTest extends UnitTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * An internal class to create quick fix exceptions.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    private static class TestQuickFixException extends QuickFixException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        private static final long serialVersionUID = 7887234381181710432L;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        public TestQuickFixException(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            super(name, null);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * New StackTraceElement with filename and line number is inserted at top of
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * stack if location contains both properties.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testAddLocationWithFileAndLine() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new Throwable();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        RuueExceptionUtil.addLocation(new Location(getName(), 22, 0, 0), t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        assertEquals("Expected StackTraceElement not inserted at top", new StackTraceElement("", "", getName(), 22),
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:                t.getStackTrace()[0]);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * New StackTraceElement with filename only is inserted at top of stack if
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * location has negative line number set.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testAddLocationWithoutLine() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new Throwable();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        RuueExceptionUtil.addLocation(new Location(getName(), 33), t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        assertEquals("Expected StackTraceElement not inserted at top", new StackTraceElement("", "", getName(), -1),
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:                t.getStackTrace()[0]);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * New StackTraceElement with null filename is inserted at top of stack if
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * location contains null filename.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testAddLocationWithoutFile() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new Throwable();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        RuueExceptionUtil.addLocation(new Location(null, 33, 0, 0), t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        assertEquals("Expected StackTraceElement not inserted at top", new StackTraceElement("", "", null, 33),
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:                t.getStackTrace()[0]);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * No new StackTraceElement is inserted at top of stack if location is null.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testAddLocationWithoutLocation() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new Throwable();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        StackTraceElement expected = t.getStackTrace()[0];
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        RuueExceptionUtil.addLocation(null, t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        assertEquals("Expected StackTraceElement not inserted at top", expected, t.getStackTrace()[0]);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * QuickFixException is returned as is.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionInstanceOfQuickFixException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Exception t = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        assertEquals("Did not get the original QuickFixException", t,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:                RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0)));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Topmost RuueUnhandledException is wrapped.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionInstanceOfRuueUnhandledException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable start = new Exception("start");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable child = new RuueUnhandledException("child", start);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Exception t = new RuueUnhandledException(getName(), child);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the RuueRuntimeException to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueExecutionException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost RuueRuntimeException was not wrapped", t, e.getCause());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Topmost RuueExecutionException is wrapped.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionInstanceOfRuueExecutionException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable start = new Exception("start");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable child = new RuueUnhandledException("child", start);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Exception t = new RuueExecutionException(child, new Location("there", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the RuueRuntimeException to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueExecutionException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost RuueRuntimeException was not wrapped", t, e.getCause());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Topmost RuueHandledException is unwrapped.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionInstanceOfRuueHandledException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable start = new Exception("start");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable child = new RuueHandledException(start);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Exception t = new RuueUnhandledException(getName(), child);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the RuueRuntimeException to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueHandledException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost RuueHandledException was not unwrapped", child, e);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionInstanceOfError() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable child = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable error = new IOError(child);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the Error to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (IOError e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost Error was not rethrown", error, e);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.wrapExecutionException(error, new Location("here", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the Error to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (IOError e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost Error was not rethrown", error, e);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Nested QuickFixException is returned as is.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionNestedQuickFixException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t4 = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t3 = new RuntimeException("intermediate3", t4);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t2 = new RuntimeException("intermediate2", t3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t1 = new RuueUnhandledException("intermediate1", t2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        assertEquals("Did not get the original nested QuickFixException", t4,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:                RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0)));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Topmost nested RuueRuntimeException is rethrown.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionNestedRuueRuntimeException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t4 = new Exception("intermediate3");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t3 = new RuueUnhandledException("intermediate3", t4);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t2 = new RuueUnhandledException("intermediate2", t3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t1 = new RuueUnhandledException("intermediate1", t2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the topmost nested RuueRuntimeException to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueExecutionException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost exception was not wrapped", t, e.getCause());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionNestedError() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t4 = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t3 = new IOError(t4);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t2 = new RuntimeException("intermediate2", t3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t1 = new RuntimeException("intermediate3", t2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the nested Error to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (IOError e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost nested Error was not rethrown", t3, e);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * QuickFixException nested 5 or more levels deep is not extracted. New
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * RuueRuntimeException is thrown.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionNestedTooDeep() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t4 = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t3 = new RuntimeException("intermediate3", t4);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t2 = new RuntimeException("intermediate2", t3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t1 = new RuntimeException("intermediate1", t2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t0 = new RuntimeException("intermediate1", t1);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the original Throwable to get wrapped in a new RuueRuntimeException");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueRuntimeException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Original Throwable was not wrapped", t, e.getCause());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Any other Throwable is wrapped in a new RuueRuntimeException.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testWrapExecutionExceptionWithoutMatching() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Exception t = new RuntimeException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.wrapExecutionException(t, new Location("here", 0));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the original Throwable to get wrapped in a new RuueRuntimeException");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueRuntimeException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Original Throwable was not wrapped", t, e.getCause());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * QuickFixException is returned as is.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testPassQuickFixInstanceOfQuickFixException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        assertEquals("Did not get the original QuickFixException", t, RuueExceptionUtil.passQuickFix(t));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Topmost RuueRuntimeException is rethrown.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testPassQuickFixInstanceOfRuueRuntimeException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable child = new RuueRuntimeException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new RuueRuntimeException(getName(), null, child);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.passQuickFix(t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the RuueRuntimeException to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueRuntimeException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost RuueRuntimeException was not rethrown", t, e);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testPassQuickFixInstanceOfError() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable child = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new IOError(child);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.passQuickFix(t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the Error to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (IOError e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost Error was not rethrown", t, e);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Nested QuickFixException is returned as is.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testPassQuickFixNestedQuickFixException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t4 = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t3 = new RuntimeException("intermediate3", t4);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t2 = new RuntimeException("intermediate2", t3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t1 = new RuueRuntimeException("intermediate1", t2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new RuntimeException("top", t1);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        assertEquals("Did not get the original nested QuickFixException", t4, RuueExceptionUtil.passQuickFix(t));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Topmost nested RuueRuntimeException is rethrown.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testPassQuickFixNestedRuueRuntimeException() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t4 = new Exception("intermediate3");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t3 = new RuueUnhandledException("intermediate3", t4);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t2 = new RuueUnhandledException("intermediate2", t3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t1 = new RuueUnhandledException("intermediate1", t2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new RuntimeException("top", t1);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.passQuickFix(t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the topmost nested RuueRuntimeException to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueRuntimeException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost nested RuueRuntimeException was not rethrown", t1, e);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testPassQuickFixNestedError() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t4 = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t3 = new IOError(t4);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t2 = new RuntimeException("intermediate2", t3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t1 = new RuntimeException("intermediate3", t2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new RuntimeException("top", t1);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.passQuickFix(t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the nested Error to get rethrown");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (IOError e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Topmost nested Error was not rethrown", t3, e);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * QuickFixException nested 5 or more levels deep is not extracted. New
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * RuueRuntimeException is thrown.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testPassQuickFixNestedTooDeep() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t4 = new TestQuickFixException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t3 = new RuntimeException("intermediate3", t4);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t2 = new RuntimeException("intermediate2", t3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t1 = new RuntimeException("intermediate1", t2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t0 = new RuntimeException("intermediate1", t1);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new RuntimeException("top", t0);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.passQuickFix(t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the original Throwable to get wrapped in a new RuueRuntimeException");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueRuntimeException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Original Throwable was not wrapped", t, e.getCause());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:     * Any other Throwable is wrapped in a new RuueRuntimeException.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:    public void testPassQuickFixWithoutMatching() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        Throwable t = new RuntimeException(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            RuueExceptionUtil.passQuickFix(t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            fail("Expected the original Throwable to get wrapped in a new RuueRuntimeException");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:        } catch (RuueRuntimeException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/RuueExceptionUtilTest.java:            assertEquals("Original Throwable was not wrapped", t, e.getCause());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:package org.ruauframework.throwable;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:import org.openqa.selenium.By;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java: * Automation for error message displayed in ruauErrorMask div.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:public class ErrorMessageGITUITest extends WebDriverTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:    private final By ERROR_MASK_LOCATOR = By.cssSelector("div[id='ruauErrorMask']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:    private final By ERROR_CLOSE_LOCATOR = By.cssSelector("a[class~='close']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:    private final By ERROR_MSG_LOCATOR = By.cssSelector("div[id='ruauErrorMessage']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:    public ErrorMessageGITUITest(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:        super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:     * Verify that error message box displays in the ruauErrorMask div and can
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:     * be dismissed using the close button. Automation for W-1091838.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:    public void testErrorMessageDisplayAndClose() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:        open("/test/laxSecurity.app", Mode.PROD);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:        waitForElement("Error mask should not be visible when there is not error.", findDomElement(ERROR_MASK_LOCATOR),
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:                false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:        // Cause an error to show up on client
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:        String errorMsg = "Something went haywire!";
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:        ruauUITestingUtil.getEval("$A.error('" + errorMsg + "')");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:        waitForElement("Error mask should be visible when there is an error.", findDomElement(ERROR_MASK_LOCATOR), true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:        assertEquals("Did not find expected error in error message element.", errorMsg, getText(ERROR_MSG_LOCATOR));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:        waitForElement("Error mask should not be visible after the close operation.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/ErrorMessageGITUITest.java:                findDomElement(ERROR_MASK_LOCATOR), false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:import org.openqa.selenium.By;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java: * This class has tests to verify QuickFix exception handling.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:@UnAdaptableTest
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:public class RuueQuickFixUITest extends WebDriverTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:    public final By CREATE_COMPONENT_BUTTON = By.xpath("//button/span[text()='Create Component Definition']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:    public RuueQuickFixUITest(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:     * Verify that ruau QuickFix UI appears in DEV mode.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        open("/foo/bar.cmp", Mode.DEV, false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        ruauUITestingUtil.waitForRuueInit();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        Thread.sleep(1000);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        assertEquals("Create Component Definition", getText(CREATE_COMPONENT_BUTTON));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:     * Verify that ruau QuickFix UI does not appear in SELENIUM mode.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        open("/foo/bar.cmp", Mode.SELENIUM, false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        assertFalse(isElementPresent(CREATE_COMPONENT_BUTTON));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        assertTrue(getText(By.id("ruauErrorMessage")).contains("org.ruauframework.throwable.quickfix."
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:                + "DefinitionNotFoundException: No COMPONENT named markup://foo:bar found"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:     * Verify that ruau QuickFix UI does not appear in PROD mode.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:    @UnAdaptableTest
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        open("/ruau/SomeNonExistingJunk.app", Mode.PROD, false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        assertFalse(isElementPresent(CREATE_COMPONENT_BUTTON));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/RuueQuickFixUITest.java:        assertTrue(getText(By.tagName("body")).contains("404 Not Found"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.def.AttributeDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.service.BuilderService;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.openqa.selenium.By;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java: * Tests to verify that users can add missing attributes to components via QuickFixes through the browser.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:@UnAdaptableTest("W-1589052: requires filesystem (not jars)")
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:@ThreadHostileTest("QuicFixUITestUtil.deleteFiles")
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:public class CreateAttributeQuickFixUITest extends WebDriverTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    private final QuickFixUITestUtil util = new QuickFixUITestUtil(this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    private final DefDescriptor<ComponentDef> defDescriptor = Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:            "ruautest:createAttributeQuickFix_child", ComponentDef.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        Ruue.getContextService().startContext(Mode.SELENIUM, Format.JSON, Authentication.AUTHENTICATED);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        // Build component where the new attribute is created
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        BuilderService builderService = Ruue.getBuilderService();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        definitionService.save(def);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    public void tearDown() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        super.tearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    public CreateAttributeQuickFixUITest(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:     * Verify QuickFix is displayed to user and attribute can be inserted into component.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    public void testCreationQuickFix() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        open("/ruautest/createAttributeQuickFix.cmp", Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        verifyToolbarAndClickCreateButton();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        verifyDefaultNameType("foo", "String");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        util.clickFix(true, "TODO: ruautest:createAttributeQuickFix_child\nIn component createAttributeQuickFix");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        // check attribute created on component
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        assertNotNull(fooAttr);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:     * Enter Invalid attribute name and test if proper error message is displayed to the user
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    public void testInvalidAttributeName() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        open("/ruautest/createAttributeQuickFix.cmp", Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        verifyToolbarAndClickCreateButton();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        setAttributeNameType("!foo", "String");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        util.clickFix(false, "Invalid attribute name:'!foo',Refer to Ruuedocs for valid attribute names");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        assertNull(fooAttr);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:     * Enter invalid attribute type and verify proper error message is displayed to user.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    public void testInvalidAttributeType() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        open("/ruautest/createAttributeQuickFix.cmp", Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        verifyToolbarAndClickCreateButton();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        setAttributeNameType("foo", "myInvalidType");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        util.clickFix(false, "No TYPE named java://myInvalidType");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        assertNull(fooAttr);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:     * Leave name of attribute empty and verify that proper error message is displayed.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    public void testEmptyNameType() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        open("/ruautest/createAttributeQuickFix.cmp", Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        verifyToolbarAndClickCreateButton();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        setAttributeNameType("", "String");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        util.clickFix(false, "Cannot leave the field blank");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        assertNull(fooAttr);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    private void verifyDefaultNameType(String name, String type) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        By nameCssPath = By.cssSelector("input[name='attName']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        By typeCssPath = By.cssSelector("input[name='type']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        // Verify attribute name
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        WebElement nameTextBox = getDriver().findElement(nameCssPath);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        assertEquals("Default attribute name incorrect", name, nameTextBox.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        // Set attribute type
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        WebElement typeTextBox = getDriver().findElement(typeCssPath);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        assertEquals("Default attribute type incorrect", type, typeTextBox.getAttribute("value"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    private void setAttributeNameType(String name, String type) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        By nameCssPath = By.cssSelector("input[name='attName']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        WebElement nameTextBox = getDriver().findElement(nameCssPath);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        nameTextBox.click();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        nameTextBox.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        nameTextBox.sendKeys(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        By typeCssPath = By.cssSelector("input[name='type']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        WebElement typeTextBox = getDriver().findElement(typeCssPath);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        typeTextBox.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:     * Verify message displayed in QuickFix toolbar at top of the screen and click the create attribute button.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:    private void verifyToolbarAndClickCreateButton() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        util.verifyToolbarText("The attribute \"foo\" was "
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:                + "not found on the COMPONENT markup://ruautest:createAttributeQuickFix_child");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        util.clickCreateButton("Create Attribute");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        // Wait for next page to appear
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:        waitForElementAppear("Clicking quickfix button did not advance to next page.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/CreateAttributeQuickFixUITest.java:                By.cssSelector("input[name='attName']"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import java.io.File;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.ruauframework.system.Source;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.ruauframework.system.SourceListener;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.openqa.selenium.By;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.openqa.selenium.JavascriptExecutor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.openqa.selenium.StaleElementReferenceException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.openqa.selenium.WebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:import org.openqa.selenium.support.ui.WebDriverWait;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java: * Utility class for browser QuickFixes. Logic here should be common to all QuickFixes.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:public class QuickFixUITestUtil {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:    private final WebDriverTestCase testCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:    QuickFixUITestUtil(WebDriverTestCase testCase) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        this.testCase = testCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * Given the buttons localId (ruau:id on component), execute javascript on the browser to use COQL to find it's
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * globalId and then invoke the ui:button's press event. Using this method instead of WebDriver's click() method for
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * browser compatibility reasons.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * Note that this method is similar to RuueUITestingUtil's findGlobalIdForComponentWithGivenProperties() and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * getEval() methods, but these tests must be run in DEV mode where $A.test is not supported.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:    public void clickButtonByLocalId(String localId) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        JavascriptExecutor jsExecutor = (JavascriptExecutor) testCase.getDriver();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        String query = "var cmp = $A.getQueryStatement().from('component').field('globalId').field('localId')"
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:                + ".where(\"localId === '" + localId + "'\").query();return cmp.rows[0].globalId";
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        String globalId = jsExecutor.executeScript(query).toString();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        jsExecutor.executeScript("$A.getCmp(\"" + globalId + "\").get('e.press').fire()");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * Click the 'Fix!' button and verify text displayed in browser either from newly loaded component, or any error
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * message that is displayed on failure.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:    public void clickFix(boolean expectedSuccess, String text) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        clickButtonByLocalId("fixButton");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:            // Newly created component should be loaded with it's contents displayed to the user
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:            waitForFixToProcess("Text from newly created component never displayed", By.tagName("body"), text);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:            // Expecting error message to pop up
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:            waitForFixToProcess("Quickfix error text never displayed", By.xpath("//div[@id='ruauErrorMessage']"), text);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * Wait for the browser to refresh and display the given text, or timeout with error.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:    protected void waitForFixToProcess(String msg, final By elementSelector, final String text) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        WebDriverWait wait = new WebDriverWait(testCase.getDriver(), 30);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        // Expect StaleElementReferenceException if browser hasn't displayed new text yet, so ignore until timeout
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        wait.withMessage(msg).ignoring(StaleElementReferenceException.class).until(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:                String elementText = testCase.getDriver().findElement(elementSelector).getText();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:                // Android emulator messes up case, but displays correct message
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:                return elementText.toLowerCase().contains(text.toLowerCase());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * Verify text at top of QuickFix screen which describes the error.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:    public void verifyToolbarText(String text) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        By toolbarXpath = By.xpath("//div[@class='toolbar']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        String toolbarText = testCase.getDriver().findElement(toolbarXpath).getText();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        Assert.assertTrue("Incorrect message displayed on quickfix toolbar. Expected: " + text + ". But got: "
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:                + toolbarText, toolbarText.contains(text));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:    public void clickCreateButton(String text) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        By buttonXpath = By.xpath("//button/span[text()='" + text + "']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        Assert.assertTrue("Create Attribute QuickFix button not present", testCase.isElementPresent(buttonXpath));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        clickButtonByLocalId("createButton");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:     * Delete all files in component bundle, and then directory file itself.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        Source<?> source = Ruue.getContextService().getCurrentContext().getDefRegistry().getSource(defDescriptor);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:                File dir = f.getParentFile();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        // invalidate all cache so that next tests can use fresh defs.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        // due to inherit delays in file listeners, there are timing issues with
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        // file listener clearing the same DD while the next tests run.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/QuickFixUITestUtil.java:        Ruue.getDefinitionService().onSourceChanged(null, SourceListener.SourceMonitorEvent.DELETED, null);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java: * Quick fix testing for Application.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java:// TODO(W-1589052): Unadaptable since does not function properly when running from jars
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java:@UnAdaptableTest
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java:public class ApplicationQuickFixUITest extends BaseComponentQuickFixUITest {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java:    public ApplicationQuickFixUITest(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ApplicationQuickFixUITest.java:        super(name, DefType.APPLICATION, ".app");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java:// TODO(W-1589052): Unadaptable since does not function properly when running from jars
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java:@UnAdaptableTest
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java:public class ComponentQuickFixUITest extends BaseComponentQuickFixUITest {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java:    public ComponentQuickFixUITest(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/ComponentQuickFixUITest.java:        super(name, DefType.COMPONENT, ".cmp");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:import org.openqa.selenium.By;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:import org.openqa.selenium.WebElement;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * Widget class for QuickFixes to create new component/application bundles. This class handles verificaiton of UI
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * differences between creating a component and application bundle.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * Logic that is different between handling component and application bundles is passed to inner class
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java: * BaseComponentQuickFixUtil. Logic common to all Quickfixes, including adding/removing attribtues etc, is passed to
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:public class BaseComponentQuickFixWidget {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    private BaseComponentQuickFixUtil baseCmpUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    WebDriverTestCase testCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    private final QuickFixUITestUtil testUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    public BaseComponentQuickFixWidget(DefType type, WebDriverTestCase testCase) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        case APPLICATION:
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            baseCmpUtil = new ApplicationQuickFixUtil(testCase);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            break;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        case COMPONENT:
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            baseCmpUtil = new ComponentQuickFixUtil(testCase);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            break;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        default:
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            throw new UnsupportedOperationException("The specified defType is not supported by the test framework:"
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    + type.name());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        this.testCase = testCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        testUtil = new QuickFixUITestUtil(testCase);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:     * Verify toolbar error message and click create button.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    public void verifyToolbarAndClickCreate(String cmpName) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        baseCmpUtil.verifyToolbarAndClickCreate(cmpName);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:     * Verify the customization options available, such as what files to include in the bundle.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    public void verifyCustomizationMenu() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        baseCmpUtil.verifyCustomizationMenu();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:     * Click on fix button and verify text displayed to user.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    public void clickFix(Boolean expectedSuccess, String text) throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    public void selectCssCheckbox(Boolean select) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        baseCmpUtil.selectCssCheckbox(select);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:     * Set the name of the component bundle before creating it.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    public void setDescriptorNames(String text) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        baseCmpUtil.setDescriptorNames(text);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    private abstract class BaseComponentQuickFixUtil {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        WebDriverTestCase testCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        protected By createButton;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        BaseComponentQuickFixUtil(WebDriverTestCase testCase) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            this.testCase = testCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        public void selectCssCheckbox(Boolean select) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By css = By.cssSelector("input[name='client.css']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            WebElement checkbox = testCase.getDriver().findElement(css);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:         * Set the name of the component bundle before creating it.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        public void setDescriptorNames(String text) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By xpath = By.cssSelector("textarea[name='descriptor']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            WebElement textBox = testCase.getDriver().findElement(xpath);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            textBox.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        public void verifyToolbarAndClickCreate(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate the create button or the label on button is invalid.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    testCase.isElementPresent(createButton));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            testUtil.clickButtonByLocalId("createButton");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            testCase.waitForElementAppear("Clicking quickfix button did not advance to next screen.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    By.cssSelector("input[name='client.controller']"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:         * What other parts of a Component/Application do you want to create? Verify that menu.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        public void verifyCustomizationMenu() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By jsController = By.cssSelector("input[name='client.controller']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate checkbox to create JS controller file.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    testCase.isElementPresent(jsController));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By jsRenderer = By.cssSelector("input[name='client.renderer']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate checkbox to create JS renderer file.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    testCase.isElementPresent(jsRenderer));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By css = By.cssSelector("input[name='client.css']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate checkbox to create css style file.", testCase.isElementPresent(css));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By javaController = By.cssSelector("input[name='java.controller']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate checkbox to create java controller file.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    testCase.isElementPresent(javaController));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By javaRenderer = By.cssSelector("input[name='java.renderer']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate checkbox to create java renderer file.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    testCase.isElementPresent(javaRenderer));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    private class ComponentQuickFixUtil extends BaseComponentQuickFixUtil {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        ComponentQuickFixUtil(WebDriverTestCase test) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            createButton = By.xpath("//button/span[text()='Create Component Definition']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        public void verifyCustomizationMenu() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            super.verifyCustomizationMenu();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By app = By.cssSelector("input[name='client.cmp']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate checkbox to create component markup file.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    testCase.isElementPresent(app));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By jsProvider = By.cssSelector("input[name='client.provider']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate checkbox to create JS provider file.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    testCase.isElementPresent(jsProvider));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By javaProvider = By.cssSelector("input[name='java.provider']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate checkbox to create java provider file.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    testCase.isElementPresent(javaProvider));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        public void verifyToolbarAndClickCreate(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            super.verifyToolbarAndClickCreate(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            testUtil.verifyToolbarText("No COMPONENT named " + name + " found");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:    private class ApplicationQuickFixUtil extends BaseComponentQuickFixUtil {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        ApplicationQuickFixUtil(WebDriverTestCase test) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            createButton = By.xpath("//button/span[text()='Create Application Definition']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        public void verifyCustomizationMenu() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            super.verifyCustomizationMenu();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            By app = By.cssSelector("input[name='client.app'][type='checkbox']");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            Assert.assertTrue("Could not locate checkbox to create application markup file.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:                    testCase.isElementPresent(app));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:        public void verifyToolbarAndClickCreate(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            super.verifyToolbarAndClickCreate(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixWidget.java:            testUtil.verifyToolbarText("No APPLICATION named " + name + " found");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:package org.ruauframework.throwable.quickfix;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import java.io.File;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.def.StyleDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java: * Tests for creating new markup bundles when you attempt to load a component that doesn't exist in the browser.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:@ThreadHostileTest("BaseComponentQuickFixWidget.deleteFiles")
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:public abstract class BaseComponentQuickFixUITest extends WebDriverTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:    protected String capType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        Ruue.getContextService().startContext(Mode.SELENIUM, Format.JSON, Authentication.AUTHENTICATED);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:    public void tearDown() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        super.tearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:    public BaseComponentQuickFixUITest(String name, DefType defType, String typeSuffix) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        this.capType = typeSuffix.substring(1, 2).toUpperCase() + typeSuffix.substring(2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:     * Verify .cmp/.app and .css files are created through QuickFix screen.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:    public void testCreationQuickFix() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String namespace = "ruautest";
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String cmpName = String.format("nonExistent%s%s", defType.name(), System.currentTimeMillis());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        DefDescriptor<?> defDescriptor = createComponentDefDescriptor(namespace, cmpName);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        DefDescriptor<?> defDescriptorCss = Ruue.getDefinitionService().getDefDescriptor(namespace + "." + cmpName,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:                StyleDef.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        BaseComponentQuickFixWidget quickFixUIWidget;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        quickFixUIWidget = new BaseComponentQuickFixWidget(defType, this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            open(String.format("/%s/%s%s", namespace, cmpName, typeSuffix), Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyToolbarAndClickCreate(defDescriptor.getQualifiedName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyCustomizationMenu();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.clickFix(true, String.format("TODO: %s:%s", namespace, cmpName));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            // Serverside verification
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            // This needs to be very careful, as static registries can stay constant.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            getRuueTestingUtil().restartContext();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            assertTrue("Failed to locate the definition", defDescriptor.exists());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            assertTrue("Failed to locate the css definition", defDescriptorCss.exists());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:     * Verify error message that is displayed when attempting to create a cmp bundle with a non-existing namespace.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:    public void testCreationQuickFixNonexistentNamespace() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String namespace = String.format("nonExistentNamespace%s", System.currentTimeMillis());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String cmpName = String.format("nonExistent%s%s", defType.name(), System.currentTimeMillis());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        DefDescriptor<?> defDescriptor = createComponentDefDescriptor(namespace, cmpName);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        BaseComponentQuickFixWidget quickFixUIWidget;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        quickFixUIWidget = new BaseComponentQuickFixWidget(defType, this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            open(String.format("/%s/%s%s", namespace, cmpName, typeSuffix), Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyToolbarAndClickCreate(defDescriptor.getQualifiedName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyCustomizationMenu();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.clickFix(false, "Cannot find location to save definition");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            assertFalse("Should not have created component bundle", defDescriptor.exists());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:     * Verify error message when incorrectly formatted DefDescriptor is entered.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:    public void testBadDescriptorFormat() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String namespace = String.format("ruautest", System.currentTimeMillis());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String cmpName = String.format("nonExistent%s%s", defType.name(), System.currentTimeMillis());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        DefDescriptor<?> defDescriptor = createComponentDefDescriptor(namespace, cmpName);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        BaseComponentQuickFixWidget quickFixUIWidget;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        quickFixUIWidget = new BaseComponentQuickFixWidget(defType, this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            open(String.format("/%s/%s%s", namespace, cmpName, typeSuffix), Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyToolbarAndClickCreate(defDescriptor.getQualifiedName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyCustomizationMenu();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.setDescriptorNames("ruautest:aaa.java");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.clickFix(false, "Invalid Descriptor Format: ruautest:aaa.java");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            assertFalse("Should not have created component bundle", defDescriptor.exists());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:     * Verify that multiple component bundles can be created by entering the DefDescriptors in, comma separated.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String namespace = String.format("ruautest", System.currentTimeMillis());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String cmpName1 = String.format("nonExistent1%s%s", defType.name(), System.currentTimeMillis());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String cmpName2 = String.format("nonExistent2%s%s", defType.name(), System.currentTimeMillis());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        DefDescriptor<?> defDescriptor1 = createComponentDefDescriptor(namespace, cmpName1);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        DefDescriptor<?> defDescriptor2 = createComponentDefDescriptor(namespace, cmpName2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        BaseComponentQuickFixWidget quickFixUIWidget;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        quickFixUIWidget = new BaseComponentQuickFixWidget(defType, this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            open(String.format("/%s/%s%s", namespace, cmpName1, typeSuffix), Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyToolbarAndClickCreate(defDescriptor1.getQualifiedName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyCustomizationMenu();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.setDescriptorNames(namespace + ":" + cmpName1 + ", " + namespace + ":" + cmpName2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.clickFix(true, String.format("TODO: %s:%s", namespace, cmpName1));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            getRuueTestingUtil().restartContext();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            assertTrue("Expected to create component bundle "+defDescriptor1, defDescriptor1.exists());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            assertTrue("Expected to create component bundle "+defDescriptor2, defDescriptor2.exists());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:     * Verify QuickFix works when we load a component that exists but contains an inner component that does not.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:    public void testCreateInnerCmp() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String namespace = "ruautest";
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String cmpName = "innerCmpThatDoesntExist";
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String parentFullName;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String parentCmpName;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        BaseComponentQuickFixWidget quickFixUIWidget;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        // We're actually creating a .cmp file here so use that helper class
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        quickFixUIWidget = new BaseComponentQuickFixWidget(DefType.COMPONENT, this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        parentFullName = String.format("/%s/createInnerCmpQuickFix%s%s", namespace, capType, typeSuffix);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        parentCmpName = String.format("createInnerCmpQuickFix%s", capType);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        defDescriptorChild = Ruue.getDefinitionService().getDefDescriptor(namespace + ":" + cmpName,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:                ComponentDef.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            open(parentFullName, Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyToolbarAndClickCreate(defDescriptorChild.getQualifiedName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyCustomizationMenu();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:                    String.format("TODO: %s:%s\nIn component " + parentCmpName, namespace, cmpName));
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            assertTrue("Failed to locate the definition: " + defDescriptorChild, defDescriptorChild.exists());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:     * Verify error message when creating inner component with a bad namespace.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:    public void testCreateInnerCmpBadNamespace() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String namespace = "ruautest";
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String cmpName = "innerCmpThatDoesntExist";
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        String parentFullName;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        BaseComponentQuickFixWidget quickFixUIWidget;
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        // We're actually creating a .cmp file here so use that helper class
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        quickFixUIWidget = new BaseComponentQuickFixWidget(DefType.COMPONENT, this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        parentFullName = String.format("/%s/createInnerCmpQuickFix%s%s", namespace, capType, typeSuffix);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        defDescriptorChild = Ruue.getDefinitionService().getDefDescriptor(namespace + ":" + cmpName,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:                ComponentDef.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            open(parentFullName, Mode.DEV);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyToolbarAndClickCreate(defDescriptorChild.getQualifiedName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.verifyCustomizationMenu();
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.setDescriptorNames("ruautestasdf:innerCmpThatDoesntExist");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            quickFixUIWidget.clickFix(false, "Cannot find location to save definition.");
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            assertFalse("Should not have created the component bundle with bad namespace", defDescriptorChild.exists());
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:        } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:     * Create component DefDescriptor for given namespace and component name. Also check if source for that file name
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:     * already exists. Delete the pre-existing files if they do exist.
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:    private DefDescriptor<?> createComponentDefDescriptor(String namespace, String cmpName) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            defDescriptor = Ruue.getDefinitionService().getDefDescriptor(namespace + ":" + cmpName,
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:                    ApplicationDef.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            defDescriptor = Ruue.getDefinitionService().getDefDescriptor(namespace + ":" + cmpName, ComponentDef.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/throwable/quickfix/BaseComponentQuickFixUITest.java:            File f = new File(Ruue.getContextService().getCurrentContext().getDefRegistry().getSource(defDescriptor)
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:package org.ruauframework.util;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import java.util.ArrayList;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import java.util.Arrays;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import java.util.List;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import java.util.Map;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import java.util.Random;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import java.util.Set;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.apache.commons.lang3.StringEscapeUtils;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.ruauframework.test.SauceUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.By;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.JavascriptExecutor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.NoSuchElementException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.StaleElementReferenceException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.WebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.WebDriverException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.WebElement;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.interactions.Actions;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.remote.RemoteWebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import org.openqa.selenium.support.ui.WebDriverWait;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:import com.google.common.base.Function;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java: * A place to put common UI testing specific helper methods
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:public class RuueUITestingUtil {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    private final WebDriver driver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    private long timeoutInSecs = 30;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    private int rerunCount = 0;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    protected static final Random RAND = new Random(System.currentTimeMillis());
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public RuueUITestingUtil(WebDriver driver) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (SauceUtil.areTestsRunningOnSauce()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            // things are slower in SauceLabs
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * An internal class to wait for and retrieve an element from the driver.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    private static class WaitAndRetrieve implements ExpectedCondition<Boolean> {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        private final By locator;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        private WebElement found = null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        public WaitAndRetrieve(By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            this.locator = locator;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            List<WebElement> elements = d.findElements(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            return "WaitAndRetrieve: " + this.locator + " found " + this.found;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Waits for element with matching locator to appear in dom.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * This will wait for at least one element with the locator to appear in the dom, and it will return the first
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * element found. If there are more than one element that match the locator, this will succeed when the first one
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * appears.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param msg Error message on timeout.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param locator By of element waiting for.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public WebElement waitForElement(String msg, By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WaitAndRetrieve war = new WaitAndRetrieve(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebDriverWait wait = new WebDriverWait(driver, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        wait.withMessage(msg);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        wait.ignoring(NoSuchElementException.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        wait.until(war);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return war.getFound();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Waits for element with matching locator to appear in dom.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Convenience routine to supply a message.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param locator By of element waiting for.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public WebElement waitForElement(By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String msg = "Element with locator \'" + locator.toString() + "\' never appeared";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return waitForElement(msg, locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public WebElement findElementAndTypeEventNameInIt(String event) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String locatorTemplate = "input[class*='%s']";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String locator = String.format(locatorTemplate, event);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebElement input = findDomElement(By.cssSelector(locator));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        input.clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void assertClassNameContains(WebElement element, String namePart) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        assertClassNameContains(element, namePart, true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void assertClassNameDoesNotContain(WebElement element, String namePart) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        assertClassNameContains(element, namePart, false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    private void assertClassNameContains(WebElement element, String namePart, boolean doesContain) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String className = element.getAttribute("class").trim();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        className = " " + className + " "; // so we wont get false positive for
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                                           // nonactive if looking for active
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        namePart = " " + namePart + " ";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (doesContain) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.assertTrue("Class name '" + className + "' does not contain '" + namePart + "'",
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    className.contains(namePart));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.assertFalse("Class name '" + className + "' contains '" + namePart + "'",
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    className.contains(namePart));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String getValueFromRootExpr(String val) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String exp = "window.$A.getRoot().get('" + val + "')";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Very useful to get handle on the component passing globalId
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param cmp: globalId of the component
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Return the javascript using which component's attribute value could be found out
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param cmp : cmpName whose attribute you are looking for
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param val : attribute name
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String getValueFromCmpRootExpression(String cmp, String val) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return this.prepareReturnStatement(this.getFindAtRootExpr(cmp) + ".get('" + val + "')");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Very useful when we know the globalId of the component, inorder to get the attribute value of cmp
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param cmp: globalId of the component
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param val: attribute name of the component
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String getValueFromCmpExpression(String cmp, String val) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return this.prepareReturnStatement(this.getCmpExpr(cmp) + ".get('" + val + "')");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void pressTab(WebElement e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Execute the given javascript and args in the current window. Fail if the result is not a boolean. Otherwise,
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public boolean getBooleanEval(String javascript, Object... args) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        Object status;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        status = getEval(javascript, args);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        // Special case for weird behavior with ios-driver returning 'ok' instead of true or false. Appears to be an
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        // ios-driver bug. Return false so we can retry executing the js instead of erroring out.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (status instanceof String && status.equals("ok")) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (status == null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.fail("Got a null status for " + javascript + "(" + args + ")");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (!(status instanceof Boolean)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.fail("Got unexpected return value: for " + javascript + "(" + args + ") :\n" + status.toString());
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return ((Boolean) status).booleanValue();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Evaluate the given javascript in the current window. Upon completion, if the framework has loaded and is in a
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * test mode, then assert that there are no uncaught javascript errors.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * As an implementation detail, we accomplish this by wrapping the given javascript so that we can perform the error
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * check on each evaluation without doing a round-trip to the browser (which might be long in cases of remote test
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @return the result of calling {@link JavascriptExecutor#executeScript(String, Object...) with the given
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     *         javascript and args.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public Object getEval(final String javascript, Object... args) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:         * Wrapping the javascript on the native Android browser is broken. By not using the wrapper we won't catch any
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:         * javascript errors here, but on passing cases this should behave the same functionally. See W-1481593.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (driver instanceof RemoteWebDriver
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                && "android".equals(((RemoteWebDriver) driver).getCapabilities().getBrowserName())) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            return getRawEval(javascript, args);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:         * Wrap the given javascript to evaluate and then check for any collected errors. Then, return the result and
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:         * errors back to the WebDriver. We must return as an array because
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:         * {@link JavascriptExecutor#executeScript(String, Object...)} cannot handle Objects as return values."
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String escapedJavascript = StringEscapeUtils.escapeEcmaScript(javascript);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String wrapper = "var ret,scriptExecException;"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                + String.format("var func = new Function('arguments', \"%s\");\n", escapedJavascript) + "try\n{"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                + " ret = func.call(this, arguments);\n" + "}\n" + "catch(e){\n"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                + " scriptExecException = e.message || e.toString();\n" + "}\n"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                "var jstesterrors = (window.$A && window.$A.test) ? window.$A.test.getErrors() : '';\n"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            @SuppressWarnings("unchecked")
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            List<Object> wrapResult = (List<Object>) getRawEval(wrapper, args);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.assertEquals("Wrapped javsascript execution expects an array of exactly 3 elements", 3,
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    wrapResult.size());
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Object exception = wrapResult.get(2);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.assertNull("Following JS Exception occured while evaluating provided script:\n" + exception + "\n"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    + "Arguments: (" + Arrays.toString(args) + ")\n" + "Script:\n" + javascript + "\n", exception);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            String errors = (String) wrapResult.get(1);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            assertJsTestErrors(errors);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            return wrapResult.get(0);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        } catch (WebDriverException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            // shouldn't come here that often as we are also wrapping the js
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            // script being passed to us in try/catch above
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.fail("Script execution failed.\n" + "Failure Message: " + e.getMessage() + "\n" + "Arguments: ("
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    + Arrays.toString(args) + ")\n" + "Script:\n" + javascript + "\n");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        } catch (NullPointerException npe) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            // Although it should never happen, ios-driver is occasionally returning null when trying to execute the
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            // wrapped javascript. Re-run the script a couple more times before failing.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                Assert.fail("Script execution failed.\n" + "Failure Message: " + npe.getMessage() + "\n"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                        + "Arguments: (" + Arrays.toString(args) + ")\n" + "Script:\n" + javascript + "\n");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            return getEval(javascript, args);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Returns value of executing javascript in current window.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @see org.openqa.selenium.JavscriptExecutor#executeSript(String, Object...)
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public Object getRawEval(String javascript, Object... args) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return ((JavascriptExecutor) driver).executeScript(javascript, args);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @return the User-Agent for the browser we are running tests on
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            return (String) getRawEval("return window.navigator.userAgent;");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        } catch (Exception e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Process the results from $A.test.getErrors(). If there were any errors, then fail the test accordingly.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param errors the raw results from invoking $A.test.getErrors()
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void assertJsTestErrors(String errors) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            @SuppressWarnings("unchecked")
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            List<Map<String, Object>> errorsList = (List<Map<String, Object>>) new JsonReader().read(errors);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            StringBuffer errorMessage = new StringBuffer();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            for (Map<String, Object> error : errorsList) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                errorMessage.append(error.get("message") + "\n");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.fail(errorMessage.toString());
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String prepareReturnStatement(String returnStatement) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return "return " + returnStatement;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String findGlobalIdForComponentWithGivenProperties(String fromClause, String whereClause) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        sb.append("var cmp = $A.getQueryStatement().from('component').field('globalId').");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        sb.append(fromClause + ".where(\"" + whereClause + "\")" + ".query();\n");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        sb.append("$A.test.assertEquals(1, cmp.rowCount,'Expected to find only one component with given properties.');\n");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        sb.append("return cmp.rows[0].globalId;");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        Object returnVal = getEval(sb.toString());
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return returnVal == null ? null : returnVal.toString();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param elem
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        // find the element a 2nd time which helps get around the IE hover issues by focusing the element
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebElement element = driver.findElement(By.className(elem));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Get the text content of a DOM node. Tries "innerText" followed by "textContext" to take browser differences into
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * account.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return (String) getEval("return $A.test.getActiveElementText()");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Return Bounding Rectangle Property for given Element
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param elementLocalId
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param position = "top, left, right, and bottom"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String getBoundingRectPropOfElement(String elementGlobalId, String position) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String element = getCmpExpr(elementGlobalId) + ".getElement().getBoundingClientRect()." + position;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return getEval(prepareReturnStatement(element)).toString();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Given Element className, method would return component globalId which could be used with $A.getCmp(globalId) to
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * have handle in the component in UI test
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param className
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String getCmpGlobalIdGivenElementClassName(String className) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String fields = "field('className',\"get('v.class')\").field(\"conc\", \"isConcrete()\")";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String whereClause = "className === '" + className + "' && conc === true";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String globalId = findGlobalIdForComponentWithGivenProperties(fields, whereClause);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return globalId;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Check for uncaught Ruue or Javascript errors after executing a particular WebDriver function.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param function a Function accepting a WebDriver instance
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public <V> Function<? super WebDriver, V> addErrorCheck(final Function<? super WebDriver, V> function) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            public V apply(WebDriver driver) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                V value = function.apply(driver);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                if ((value == null) || (Boolean.class.equals(value.getClass()) && !Boolean.TRUE.equals(value))) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    String errors = (String) getRawEval("return (window.$A && window.$A.test) ? window.$A.test.getErrors() : '';");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    assertJsTestErrors(errors);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                return value;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Look for any quickfix exceptions. These can sometimes reflect a framework load failure but provide a better error
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * message.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void assertNoRuueErrorMessage(Set<String> exceptForThese) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String ruauErrorMsg = getRuueErrorMessage();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (!ruauErrorMsg.isEmpty()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                // Compare against any expected failures
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                for (String allowedException : exceptForThese) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    if (ruauErrorMsg.contains(allowedException)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.fail("Initialization error: " + ruauErrorMsg);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Find first matching element in the DOM.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param locator
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public WebElement findDomElement(final By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        List<WebElement> elements = findDomElements(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Find matching elements in the DOM.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param locator
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public List<WebElement> findDomElements(final By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebDriverWait wait = new WebDriverWait(driver, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return wait.withMessage("fail to find element in dom:" + locator.toString())
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                .ignoring(StaleElementReferenceException.class).until(new ExpectedCondition<List<WebElement>>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    public List<WebElement> apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                        List<WebElement> elements = driver.findElements(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                                getBooleanEval("return arguments[0].ownerDocument === document", elements.get(0))) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Get an error message from the error div.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * FIXME: this is _not_ a quick fix message. This is the error box that is used by $A.error. Also note that this
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * does not check if the box is visible. This box should always be present, and may contain old text that is no
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * longer relevant. Please don't use this!
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @return the error message.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    @Deprecated
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String getQuickFixMessage() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebElement errorBox = driver.findElement(By.id("ruauErrorMessage"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.fail("Ruue errorBox not found.");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Get the current ruau error message.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * This will fail the test if the div is not found (which means that the page did not load at all). If the box is
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * not displayed, it returns an empty string.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @return any error message that is displayed.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String getRuueErrorMessage() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebElement errorBox = driver.findElement(By.id("ruauErrorMessage"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Assert.fail("Ruue errorBox not found.");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (!errorBox.isDisplayed()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Assert that our error message is the expected production error message.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void assertProdErrorMessage() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String actual = getRuueErrorMessage().replaceAll("\\s+", " ");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        Assert.assertEquals("Unable to process your request", actual);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebElement toolBar = driver.findElement(By.className("toolbar"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (toolBar == null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            // This is actually ok, as the box is not rendered if the cause is not present
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            // In this case return an empty string.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return toolBar.getText();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Get any 'cause' message from a quick fix exception
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @return the quick fix cause exception.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String getQuickFixCause() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebElement errorBox = driver.findElement(By.className("causeWrapper"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            // This is actually ok, as the box is not rendered if the cause is not present
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            // In this case return an empty string.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @return true if Ruue framework has loaded
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public boolean isRuueFrameworkReady() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return getBooleanEval("return window.$A ? window.$A.finishedInit === true : false;");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Wait until the provided Function returns true or non-null. Any uncaught javascript errors will trigger an
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * AssertionFailedError.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public <V> V waitUntil(Function<? super WebDriver, V> function) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return waitUntil(function, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Wait the specified number of seconds until the provided Function returns true or non-null. Any uncaught
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * javascript errors will trigger an AssertionFailedError.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public <V> V waitUntil(Function<? super WebDriver, V> function, long timeoutInSecs) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebDriverWait wait = new WebDriverWait(driver, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return wait.until(addErrorCheck(function));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Wait until the provided Function returns true or non-null. If this does not occur, error out with passed in
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * message. Any uncaught javascript errors will trigger an AssertionFailedError.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public <V> V waitUntil(Function<? super WebDriver, V> function, String message) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return waitUntil(function, timeoutInSecs, message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Wait the specified number of seconds until the provided Function returns true or non-null. If this does not
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * occur, error out with passed in message. Any uncaught javascript errors will trigger an AssertionFailedError.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public <V> V waitUntil(Function<? super WebDriver, V> function, long timeoutInSecs, String message) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebDriverWait wait = new WebDriverWait(driver, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return wait.withMessage(message).until(addErrorCheck(function));
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String appCacheStatusIntToString(Integer ret) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    	String status = "Unknown cache state";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        case 0:
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            status = "UNCACHED";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            break;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        case 1:
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            status = "IDLE";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            break;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        case 2:
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            status = "CHECKING";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            break;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        case 3:
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            status = "DOWNLOADING";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            break;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        case 4:
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            status = "UPDATEREADY";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            break;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        case 5:
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            status = "OBSOLETE";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            break;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    	return status;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void waitForAppCacheReady() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitUntilWithCallback(
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                        return getBooleanEval("var cache=window.applicationCache;"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                                + "return $A.util.isUndefinedOrNull(cache) || (cache.status===cache.UNCACHED)"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                                + "||(cache.status===cache.IDLE)||(cache.status===cache.OBSOLETE);");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    public String apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                        Object ret = getRawEval("return window.applicationCache.status");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                        return "Current AppCache status is " + appCacheStatusIntToString(((Long) ret).intValue());
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                "AppCache is not Ready!");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param function function we will apply again and again until timeout
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param callbackWhenTimeout function we will run when timeout happens, the return will be append to other output
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     *            message, start with "Extra message from callback". we can pass in function to evaluate the client side
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     *            status, like applicationCache status
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param timeoutInSecs
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param message error message when timeout. notice this will get evaluated BEFORE the wait, so just use a string
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public <V2, V1> void waitUntilWithCallback(Function<? super WebDriver, V1> function,
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            Function<? super WebDriver, V2> callbackWhenTimeout, long timeoutInSecs, String message) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebDriverWaitWithCallback wait = new WebDriverWaitWithCallback(driver, timeoutInSecs, message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        wait.until(function, callbackWhenTimeout);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void waitForRuueInit() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitForRuueInit(null);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Wait until Ruue has finished initialization or encountered an error.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void waitForRuueInit(final Set<String> expectedErrors) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitForDocumentReady();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitForRuueFrameworkReady(expectedErrors);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitForAppCacheReady();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Wait for the document to enter the complete readyState.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void waitForDocumentReady() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitUntil(
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                        return getBooleanEval("return document.readyState === 'complete'");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                "Document is not Ready!");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * First, verify that window.$A has been installed. Then, wait until {@link #isRuueFrameworkReady()} returns true.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * We assume the document has finished loading at this point: callers should have previously called
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * {@link #waitForDocumentReady()}.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void waitForRuueFrameworkReady(final Set<String> expectedErrors) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebDriverWait waitRuuePresent = new WebDriverWait(driver, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitRuuePresent.withMessage("Initialization error: Perhaps the initial GET failed")
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                        new Function<WebDriver, Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                            public Boolean apply(WebDriver input) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                                return (Boolean) getRawEval("return !!window.$A");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebDriverWait waitFinishedInit = new WebDriverWait(driver, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitFinishedInit.ignoring(StaleElementReferenceException.class)
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                .withMessage("Initialization error: $A present but failed to initialize")
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                        new Function<WebDriver, Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                            public Boolean apply(WebDriver input) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                                assertNoRuueErrorMessage(expectedErrors);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                                return isRuueFrameworkReady();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Finds the WebElement identified by locator and applies the provided Function to it, ignoring
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * StaleElementReferenceException.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param locator By locator to find WebElement in the DOM.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param function Function to run on web
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param message Message to display to user on timeout.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public <R> R waitForElementFunction(final By locator, final Function<WebElement, R> function, String message) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        WebDriverWait wait = new WebDriverWait(driver, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return wait.withMessage(message).until(new ExpectedCondition<R>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            private WebElement element = null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            public R apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    element = findDomElement(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                    return function.apply(element);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                } catch (StaleElementReferenceException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public <R> R waitForElementFunction(final By locator, final Function<WebElement, R> function) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return waitForElementFunction(locator, function, "Timeout waiting for element");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Wait for text of an element to be either present or not present.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param locator By locator to find WebElement in the DOM.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param text Text on the found WebElement.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param toBePresent True if we want text passed in as parameter to equal text on found WebElement.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @param message Message to display to user on timeout.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void waitForElementText(final By locator, final String text, final boolean toBePresent, String message) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitForElementFunction(locator, new Function<WebElement, Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            public Boolean apply(WebElement element) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                return toBePresent == element.getText().equals(text);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        }, message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void waitForElementText(final By locator, final String text, final boolean toBePresent) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        waitForElementText(locator, text, toBePresent, "Timeout looking for element with text: " + text);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Method of exposing accessibility tool to be exposed for testing purposes
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * @return ArrayList - either 0,1, or 2. Position 0: Indicates there were no errors Position 1: Indicates that there
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     *         were errors Position 2: Indicates that something unexpected happened.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public ArrayList<String> doAccessibilityCheck() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                + "window.$A.devToolService.checkAccessibility() : \"Ruue is not Present\"";
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        String result = (String) getEval(jsString);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        ArrayList<String> resultList = new ArrayList<>();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        if (result.equals("") || result.equals("Total Number of Errors found: 0")) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        } else if (result.contains("Total Number of Errors found")) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        resultList.add(output);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        resultList.add(result);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void assertAccessible() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        getEval("$A.test.assertAccessible()");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return (String) getEval("return $A.test.getActiveElement().getAttribute('data-ruau-rendered-by')");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public void assertClassesSame(String message, String expectedClasses, String actualClasses) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        List<String> expected = RuueTextUtil.splitSimpleAndTrim(" ", expectedClasses, 3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        List<String> actual = RuueTextUtil.splitSimpleAndTrim(" ", actualClasses, 3);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        List<String> extra = Lists.newArrayList();
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        for (String x : actual) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            if (expected.contains(x)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                extra.add(x);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        Assert.assertTrue(message + ": Mismatched classes extra = " + extra + ", missing=" + expected,
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:                extra.size() == 0 && expected.size() == 0);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Creates a random lower case string. NOTE: this is BAD WAY to produce Strings, as the results are
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * non-reproducible. Do not use it: call {@link #randString(int,long)} instead.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String randString(int len) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        return randString(len, RAND);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:     * Creates a random lower case string of specified length, using given pseudo-Random number generator.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:    public String randString(int len, Random rnd) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:            buff[i] = (byte) (rnd.nextInt(26) + 'a');
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/RuueUITestingUtil.java:        } catch (Exception ex) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:package org.ruauframework.util;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:import org.openqa.selenium.TimeoutException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:import org.openqa.selenium.WebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:import org.openqa.selenium.support.ui.WebDriverWait;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:import com.google.common.base.Function;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java: * A specialization of {@link WebDriverWait} that run passed in callback function when wait time out.
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:public class WebDriverWaitWithCallback extends WebDriverWait {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:    private final WebDriver driver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:    public WebDriverWaitWithCallback(WebDriver driver, long timeOutInSeconds) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:    public WebDriverWaitWithCallback(WebDriver driver, long timeOutInSeconds, String message) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:        super.withMessage(message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            Function<? super WebDriver, V2> callbackWhenTimeout) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:        } catch (TimeoutException et) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            // catch timeout exception and throw exception with extra message from callback function
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            V2 ret = callbackWhenTimeout.apply(driver);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            TimeoutExceptionWithExtraMessage tecm = new TimeoutExceptionWithExtraMessage(et.getMessage(),
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:                    et.getCause(), ret.toString());
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:     * Customized TimeoutException class, with extra message prepended to the original one
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:    public class TimeoutExceptionWithExtraMessage extends TimeoutException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:        private static final long serialVersionUID = 1L;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:        private final String extraMessage;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:        public TimeoutExceptionWithExtraMessage(String message, Throwable lastException, String extraMessage) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            super(message, lastException);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            this.extraMessage = extraMessage;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:        public TimeoutExceptionWithExtraMessage(String message, String extraMessage) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            super(message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            this.extraMessage = extraMessage;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:        public TimeoutExceptionWithExtraMessage(Throwable lastException, String extraMessage) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            super(lastException);
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            this.extraMessage = extraMessage;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:         * getExtraMessage return the result of callback function
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:        public String getExtraMessage() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            return extraMessage;
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:         * return message with extra message append to the beginning (from callback function)
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:        public String getMessage() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:            return "\nExtra message from callback function when time out: " + this.extraMessage + ".\n"
ruau/ruau/SouRCeS/test/java/org/ruauframework/util/WebDriverWaitWithCallback.java:                    + super.getMessage();
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java:package org.ruauframework;
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java:import junit.framework.TestSuite;
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java:import org.ruauframework.test.TestInventory;
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java:import org.ruauframework.test.TestInventory.Type;
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java:public class RuueIntegrationTestSuite {
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java:    public static TestSuite suite() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java:        TestInventory inventory = ServiceLocator.get().get(TestInventory.class, "ruauTestInventory");
ruau/ruau/SouRCeS/test/java/org/ruauframework/RuueIntegrationTestSuite.java:        suite.setName("ruau integration tests");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:package org.ruauframework.test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:import org.openqa.selenium.JavascriptExecutor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:import org.openqa.selenium.WebElement;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:import org.openqa.selenium.remote.RemoteWebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:import org.openqa.selenium.remote.RemoteWebElement;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:import org.openqa.selenium.remote.internal.JsonToWebElementConverter;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java: * RemoteWebElement that implicitly tries to smooth WebDriver differences
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:public class AdaptiveWebElement extends RemoteWebElement {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:    public static class JsonConverter extends JsonToWebElementConverter {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:        protected final RemoteWebDriver driver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:            RemoteWebElement toReturn = new AdaptiveWebElement();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:            toReturn.setParent(driver);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:            getCoordinates().inViewPort();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:        } catch (Exception ex) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:            // TODO ios-driver: NullPointerException at RemoteWebElement$1.inViewPort(RemoteWebElement.java:362)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:            // Ignore Exception and try a different approach
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:        ((JavascriptExecutor) getWrappedDriver()).executeScript("return arguments[0].scrollIntoView(true);", this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElement.java:    public void sendKeys(CharSequence... keysToSend) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:package org.ruauframework.test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import java.io.BufferedReader;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import java.io.IOException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import java.io.UnsupportedEncodingException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import java.security.Principal;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import java.util.Collection;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import java.util.Enumeration;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import java.util.Locale;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import java.util.Map;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.AsyncContext;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.DispatcherType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.RequestDispatcher;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.ServletContext;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.ServletException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.ServletInputStream;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.ServletRequest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.ServletResponse;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.http.Cookie;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.http.HttpServletRequest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.http.HttpServletResponse;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.http.HttpSession;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import javax.servlet.http.Part;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:import com.google.common.collect.Maps;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * A testing mock of {@link HttpServletRequest}. The implementations here all do
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java: * nothing (return null, zero, etc.), so override what you need to.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:public class DummyHttpServletRequest implements HttpServletRequest {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    private String pathInfo = null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    private String requestUri;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    private Map<String, String> queryParams = Maps.newHashMap();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Object getAttribute(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Enumeration<String> getAttributeNames() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getCharacterEncoding() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public void setCharacterEncoding(String env) throws UnsupportedEncodingException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public ServletInputStream getInputStream() throws IOException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getParameter(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return this.queryParams.get(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Enumeration<String> getParameterNames() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String[] getParameterValues(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Map<String, String[]> getParameterMap() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getServerName() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public BufferedReader getReader() throws IOException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public void setAttribute(String name, Object o) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public void removeAttribute(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Locale getLocale() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Enumeration<Locale> getLocales() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public boolean isSecure() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public RequestDispatcher getRequestDispatcher(String path) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getRealPath(String path) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getLocalName() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getLocalAddr() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public int getLocalPort() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public AsyncContext startAsync() throws IllegalStateException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:            throws IllegalStateException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public boolean isAsyncStarted() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public boolean isAsyncSupported() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public DispatcherType getDispatcherType() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public long getDateHeader(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getHeader(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Enumeration<String> getHeaders(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Enumeration<String> getHeaderNames() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public int getIntHeader(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getPathInfo() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return this.pathInfo;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getPathTranslated() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getContextPath() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public boolean isUserInRole(String role) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Principal getUserPrincipal() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public String getServletPath() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public HttpSession getSession(boolean create) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public boolean isRequestedSessionIdValid() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public boolean isRequestedSessionIdFromCookie() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public boolean isRequestedSessionIdFromURL() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public boolean isRequestedSessionIdFromUrl() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public boolean authenticate(HttpServletResponse response) throws IOException, ServletException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public void login(String username, String password) throws ServletException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Collection<Part> getParts() throws IOException, ServletException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public Part getPart(String name) throws IOException, ServletException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public void setPathInfo(String pathInfo) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        this.pathInfo = pathInfo;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:    public void setQueryParam(String name, String value) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/DummyHttpServletRequest.java:        this.queryParams.put(name, value);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java:package org.ruauframework.test.adapter;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java:import java.util.List;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java:import java.util.Map;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java:import org.ruauframework.adapter.LoggingAdapter;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java:public interface TestLoggingAdapter extends LoggingAdapter {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java:    public void beginCapture();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java:    public void endCapture();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java:    public List<Map<String, Object>> getLogs();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/adapter/TestLoggingAdapter.java:    public void clear();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:package org.ruauframework.test.client;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java: * Collect some useful user agent strings here.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    GOOGLE_CHROME("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE6("Mozilla/4.0 (compatible; MSIE 6.1; Windows XP; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE7("Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE8("Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; Media Center PC 4.0; SLCC1; .NET CLR 3.0.04320)"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE9("Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 7.1; Trident/5.0)"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE10("Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE11("Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE11_NET_FRAMEWORK("Mozilla/5.0 (Windows NT 6.3; Trident/7.0; .NET4.0E; .NET4.0C; rv:11.0) like Gecko"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    // Nokia Lumia 928
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE10_WINDOWS_PHONE_8("Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 928)"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE10_WINDOWS_RT_8("Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; ARM; Trident/6.0 Touch)"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE11_WINDOWS_PHONE_8_1("Mozilla/5.0 (Windows Phone 8.1; ARM; Trident/7.0;Touch; rv:11.0; IEMobile/11.0; Microsoft; Virtual) like Gecko"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE11_WINDOWS_PHONE_8_1_SDK("Mozilla/5.0 (Windows Phone 8.1; ARM; Trident/7.0; Touch; rv:11; IEMobile/11.0) like Android 4.1.2; compatible) like iPhone OS 7_0_3 Mac OS X WebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.99 Mobile Safari /537.36"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IE11_WINDOWS_RT_8_1("Mozilla/5.0 (compatible; MSIE 11.0; Windows NT 6.3; ARM; Trident/7.0)"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    FIREFOX("Mozilla/6.0 (Windows NT 6.2; WOW64; rv:16.0.1) Gecko/20121011 Firefox/16.0.1"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    SAFARI6("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.73.11 (KHTML, like Gecko) Version/6.1.1 Safari/537.73.11"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IPHONE4("Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IPAD("Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5355d Safari/8536.25"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IPAD_7("Mozilla/5.0 (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    // Reported user agent when Ruue is loaded via Integration Service inside an IFrame within a UIWebView on iPad
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IPAD_WEBVIEW("Mozilla/5.0 (iPad; CPU OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    ANDROID4_2("Mozilla/5.0 (Linux; Android 4.2.1; Nexus 4 Build/JOP40D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Mobile Safari/535.19"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    // Blackberry Z10
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    BLACKBERRY_10("Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/10.0.9.2372 Mobile Safari/537.10+"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    GOOD_IPHONE("Mozilla/5.0 (iPhone; CPU iPhone OS 7_1 like Mac OS X) AppleWebKit/.537.51.2 (KHTML, like Gecko) Mobile/11D167 Safari/8536.25 GoodAccess/1.1.333.302"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    GOOD_ANDROID("Mozilla/5.0 (Linux; Android 4.1.1; SAMSUNG-SGH-1747 Build/JRO03L) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.45 Mobile Safari/537.36 Good Access/1.0.21.304"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    NEXUS_10("Mozilla/5.0 (Linux; Android 4.4.2; Nexus 10 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.136 Safari/537.36"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    IPOD("Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; ja-jp) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    SAFARI5_MAC("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.13+ (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    SAFARI5_WINDOWS("Mozilla/5.0 (Windows; U; Windows NT 6.1; tr-TR) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    OPERA12("Opera/12.0(Windows NT 5.2;U;en)Presto/22.9.168 Version/12.00"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    OPERA12_MOBILE("Opera/12.02 (Android 4.1; Linux; Opera Mobi/ADR-1111101157; U; en-US) Presto/2.9.201 Version/12.02"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    OPERA_MINI("Opera/9.80 (J2ME/MIDP; Opera Mini/9.80 (S60; SymbOS; Opera Mobi/23.348; U; en) Presto/2.5.25 Version/10.54"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    ANDROID2_3("Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    ANDROID1_6("Mozilla/5.0 (Linux; U; Android 1.6; ar-us; SonyEricssonX10i Build/R2BA026) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Mobile Safari/525.20.1"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    KINDLE_FIRE("Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-84) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    PLAYBOOK("Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.0.0; en-US) AppleWebKit/535.8+ (KHTML, like Gecko) Version/7.2.0.0 Safari/535.8+"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    NOKIA_N95("Mozilla/5.0 (SymbianOS/9.2; U; Series60/3.1 NokiaN95/10.0.018; Profile/MIDP-2.0 Configuration/CLDC-1.1 ) AppleWebKit/413 (KHTML, like Gecko) Safari/413"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    NOKIA_920("Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 920)"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    // Nokia Lumia 928 (IE 11)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    LUMIA_928("Mozilla/5.0 (Windows Phone 8.1; ARM; Trident/7.0; Touch; rv:11; IEMobile/11.0; NOKIA; Lumia 928) like Gecko"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    BLACKBERRY_7("Mozilla/5.0 (BlackBerry; U; BlackBerry 9900; en) AppleWebKit/534.11+ (KHTML, like Gecko) Version/7.1.0.346 Mobile Safari/534.11+"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    NETSCAPE("Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    private String userAgentString;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:    private UserAgent(String agentString) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/client/UserAgent.java:        this.userAgentString = agentString;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:package org.ruauframework.test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import java.io.IOException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import java.net.MalformedURLException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import java.net.URISyntaxException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import java.nio.charset.Charset;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.*;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.client.HttpClient;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.client.methods.HttpGet;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.client.methods.HttpRequestBase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.client.params.HttpClientParams;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.entity.ContentType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.params.HttpParams;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.params.HttpProtocolParams;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.protocol.HttpContext;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.apache.http.util.EntityUtils;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.def.*;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.http.CSP;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.service.ContextService;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.system.*;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.test.annotation.IntegrationTest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.test.configuration.TestServletConfig;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java: * Base class for all Ruue integration tests.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:@IntegrationTest
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:public abstract class IntegrationTestCase extends RuueTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    private TestServletConfig servletConfig = null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    private HttpClient httpClient = null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    public IntegrationTestCase(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    public void tearDown() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:            httpClient.getConnectionManager().shutdown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        super.tearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:            servletConfig = Ruue.get(TestServletConfig.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * Start a context and set up default values.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected RuueContext setupContext(Mode mode, Format format, DefDescriptor<? extends BaseComponentDef> desc)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        RuueContext ctxt = contextService.startContext(mode, format, Authentication.AUTHENTICATED, desc);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        ctxt.setFrameworkUID(Ruue.getConfigAdapter().getRuueFrameworkNonce());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        ctxt.addLoaded(desc, uid);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * Sets up get request method for httpclient. Includes ability to follow redirects and set request headers
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param path
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param followRedirects
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param headers
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @throws MalformedURLException
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @throws URISyntaxException
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected HttpGet obtainGetMethod(String path, boolean followRedirects,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:            Header[] headers) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        String url = getTestServletConfig().getBaseUrl().toURI().resolve(path)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        HttpParams params = get.getParams();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        HttpClientParams.setRedirecting(params, followRedirects);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        if (headers != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:            get.setHeaders(headers);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param method request method
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected HttpResponse perform(HttpRequestBase method) throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * Performs request method with HttpContext. HttpContext typically contains cookie store with all cookies to include
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param method request method
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param context httpcontext
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected HttpResponse perform(HttpRequestBase method, HttpContext context) throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        Header cspHeaders[] = response.getHeaders(CSP.Header.REPORT_ONLY);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        if (response.getStatusLine().getStatusCode() == 200) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:            // TODO(fabbott): Although a request for e.g. moment.js from testSetRunner.app
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:            // does have a header, the same request from RuueFrameworkServletHttpTest does
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:            // not.  I suspect this is because the test has no UID, but the "real life" one
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:            // does... but for now, let's validate the CSP header only if it's actually there.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:            if (cspHeaders.length != 0) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:                assertEquals(1, cspHeaders.length);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:                assertTrue("No connect-src in default CSP",
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:                        cspHeaders[0].getValue().contains("; connect-src 'self';"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * Set the desired user agent to be used in HttpClient requests from this test
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        HttpProtocolParams.setUserAgent(getHttpClient().getParams(), userAgentString);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * Gets status code of response
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param response request response
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @return status code
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected static int getStatusCode(HttpResponse response) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        return response.getStatusLine().getStatusCode();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param response request response
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected static String getResponseBody(HttpResponse response) throws IOException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param response request response
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected static ContentType getContentType(HttpResponse response) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        return ContentType.getOrDefault(response.getEntity());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * Gets charset of response
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param response request response
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @return charset
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected static String getCharset(HttpResponse response) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        Charset charset = getContentType(response).getCharset();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        return charset == null ? null : charset.displayName();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param response request response
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected static String getMimeType(HttpResponse response) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * Get the relative URL for a given BaseComponentDef descriptor.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @param desc the DefDescriptor of a BaseComponentDef
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:     * @return the relative URL for the descriptor
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:    protected String getUrl(DefDescriptor<? extends BaseComponentDef> desc) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:        return String.format("/%s/%s.%s", desc.getNamespace(), desc.getName(),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/IntegrationTestCase.java:                DefType.APPLICATION.equals(desc.getDefType()) ? "app" : "cmp");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:package org.ruauframework.test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:import java.net.URL;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:import org.openqa.selenium.Capabilities;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:import org.openqa.selenium.remote.CommandExecutor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:import org.openqa.selenium.remote.HttpCommandExecutor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:import org.openqa.selenium.remote.RemoteWebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:public class AdaptiveWebElementDriver extends RemoteWebDriver {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:    public static String DEFAULT_CAPABILITY = "org.ruauframework.webdriver.flexible.default";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:    public AdaptiveWebElementDriver(CommandExecutor executor, Capabilities desiredCapabilities,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:            Capabilities requiredCapabilities) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:        super(executor, desiredCapabilities, requiredCapabilities);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:        // Unless you explicitly request a "default" driver, return a driver that returns AdaptiveWebElements
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:        if (!((desiredCapabilities != null && desiredCapabilities.is(DEFAULT_CAPABILITY)) || (requiredCapabilities != null && requiredCapabilities
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:            this.setElementConverter(new AdaptiveWebElement.JsonConverter(this));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:    public AdaptiveWebElementDriver(CommandExecutor executor, Capabilities desiredCapabilities) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:        this(executor, desiredCapabilities, null);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:    public AdaptiveWebElementDriver(Capabilities desiredCapabilities) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:        this((URL) null, desiredCapabilities);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:    public AdaptiveWebElementDriver(URL remoteAddress, Capabilities desiredCapabilities,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:            Capabilities requiredCapabilities) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:        this(new HttpCommandExecutor(remoteAddress), desiredCapabilities, requiredCapabilities);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:    public AdaptiveWebElementDriver(URL remoteAddress, Capabilities desiredCapabilities) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/AdaptiveWebElementDriver.java:        this(new HttpCommandExecutor(remoteAddress), desiredCapabilities, null);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java:package org.ruauframework.test.page;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java:public abstract class PageObjectTestCase<T extends PageObject> extends WebDriverTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java:	public PageObjectTestCase(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObjectTestCase.java:		super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java:package org.ruauframework.test.page;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java:public interface PageObject {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/PageObject.java:	String getName();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:package org.ruauframework.test.page;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:import java.net.MalformedURLException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:import java.net.URISyntaxException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:import org.ruauframework.test.configuration.TestServletConfig;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:public abstract class RuuePageObject<T extends BaseComponentDef> implements PageObject {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    //we need servletConfig to convert url to uri, TODO: maybe this should be a function from xxxUtil as well?
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    private TestServletConfig servletConfig;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    private final String name;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    //defDescriptor is created by passing in descriptorString during contruction
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    private final DefDescriptor<T> defDescriptor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    protected PageObjectTestCase<?> pageObjectTestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    @SuppressWarnings("unchecked")
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    public RuuePageObject(String name, Boolean isComponent, String descriptorString, PageObjectTestCase<?> potc) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:        //the test function name that create this page object
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:        this.name = name;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:        //append '.app' or '.cmp' to the link
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:            this.defDescriptor = (DefDescriptor<T>) Ruue.getDefinitionService().getDefDescriptor(descriptorString, ComponentDef.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:            this.defDescriptor = (DefDescriptor<T>) Ruue.getDefinitionService().getDefDescriptor(descriptorString, ApplicationDef.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:            this.servletConfig = Ruue.get(TestServletConfig.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:        this.pageObjectTestCase = potc;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    public String getName() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:        return this.name;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:    public void open() throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/RuuePageObject.java:        pageObjectTestCase.open(defDescriptor);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java:package org.ruauframework.test.page;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java:import org.openqa.selenium.By;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java:import org.openqa.selenium.WebElement;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java://this is an example of RuuePageObject, it represents uiExamples:buttonExample, with a ui:button and ui:outputText
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java:public class SampleRuuePageObject extends RuuePageObject<ComponentDef> {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java:    public SampleRuuePageObject(String name, Boolean isComponent, String descriptorString, SampleUIWithPageObjectTest sampleUIWithPageObjectTest) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java:        super(name, isComponent, descriptorString, sampleUIWithPageObjectTest);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java:        WebElement element = pageObjectTestCase.getDriver().findElement(By.cssSelector(".uiButton"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleRuuePageObject.java:        WebElement content = pageObjectTestCase.getDriver().findElement(By.cssSelector(".uiOutputText"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:package org.ruauframework.test.page;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:import java.net.MalformedURLException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:import java.net.URISyntaxException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * this is an example for testing UI with PageObject pattern.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java: * for more info about the PageObject 'idea': https://code.google.com/p/selenium/wiki/PageObjects
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:public class SampleUIWithPageObjectTest extends PageObjectTestCase<SampleRuuePageObject> {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:    public SampleUIWithPageObjectTest(String name) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:    public void testButtunUIWithPageObject() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        //create the PageObject
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        SampleRuuePageObject sapo = new SampleRuuePageObject(this.getName(), true, "uiExamples:buttonExample", this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        //PageObject is in charge of load itself, clicking , typing , etc
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        sapo.open();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        sapo.clickOnButton();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        String outputText = sapo.getOutputText();//page().getOutputText();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        //Test case is in charge of assertion.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        //we didn't input anything into inputText, so it's undefined.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/page/SampleUIWithPageObjectTest.java:        assertEquals("get different text!","Hi, undefined",outputText);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:package org.ruauframework.test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.io.File;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.io.FileOutputStream;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.io.PrintWriter;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.lang.annotation.ElementType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.lang.annotation.Inherited;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.lang.annotation.Retention;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.lang.annotation.RetentionPolicy;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.lang.annotation.Target;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.lang.reflect.Method;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.net.MalformedURLException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.net.URI;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.net.URISyntaxException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.Arrays;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.Collection;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.Collections;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.EnumSet;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.HashMap;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.List;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.Map;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.Scanner;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.Set;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.concurrent.Semaphore;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.logging.Level;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import java.util.logging.Logger;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import junit.framework.AssertionFailedError;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.apache.commons.codec.binary.Base64;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.apache.http.NameValuePair;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.apache.http.client.methods.HttpGet;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.apache.http.client.utils.URLEncodedUtils;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.apache.http.message.BasicNameValuePair;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.def.Definition;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.annotation.FreshBrowserInstance;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.annotation.WebDriverTest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.perf.PerfResultsUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.perf.PerfUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.perf.PerfWebDriverUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.perf.metrics.PerfMetrics;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.perf.metrics.PerfMetricsCollector;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.perf.metrics.PerfRunsCollector;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.test.perf.rdp.RDPNotification;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.util.RuueUITestingUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.ruauframework.util.RuueUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.By;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.Dimension;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.Keys;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.NoSuchElementException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.TimeoutException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.WebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.WebElement;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.interactions.Action;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.interactions.Actions;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.interactions.HasTouchScreen;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.interactions.touch.FlickAction;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.interactions.touch.TouchActions;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.remote.DesiredCapabilities;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.remote.RemoteWebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.remote.ScreenshotException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.support.events.EventFiringWebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.openqa.selenium.support.ui.WebDriverWait;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.uiautomation.ios.client.uiamodels.impl.RemoteIOSDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:import org.uiautomation.ios.client.uiamodels.impl.augmenter.IOSDriverAugmenter;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java: * Base class for Ruue WebDriver tests.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:public abstract class WebDriverTestCase extends IntegrationTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private static final Logger logger = Logger.getLogger("WebDriverTestCase");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private final String LOADING_INDICATOR = "div.loadingIndicator";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    /** Checks whether {@code oneClass} is mentioned as a class on {@code elem}. */
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public boolean hasCssClass(WebElement elem, String oneClass) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        String allClasses = elem.getAttribute("class");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return allClasses.contains(" " + oneClass + " ") || allClasses.equals(oneClass)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                || allClasses.startsWith(oneClass + " ") || allClasses.endsWith(" " + oneClass);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected int timeoutInSecs = Integer.parseInt(System.getProperty("webdriver.timeout", "30"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    //ruauUITestingUtil is created here
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected RuueUITestingUtil ruauUITestingUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    @Target({ ElementType.TYPE, ElementType.METHOD })
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public @interface TargetBrowsers {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        BrowserType[] value();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    @Target({ ElementType.TYPE, ElementType.METHOD })
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public @interface ExcludeBrowsers {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        BrowserType[] value();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    @Target({ ElementType.TYPE, ElementType.METHOD })
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public @interface CheckAccessibility {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        boolean value() default true;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        BrowserType browserType() default BrowserType.GOOGLECHROME; // default browser to run accessibility test is Google Chrome
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public WebDriverTestCase(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Setup specific to a test case but common for all browsers. Run only once per test case.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            browserType = ":BROWSER" + this.currentBrowserType.name();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void addMocksToTestContextLocalDef(Collection<Definition> mocks) throws Throwable {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            TestContextAdapter testContextAdapter = Ruue.get(TestContextAdapter.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (testContextAdapter != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    String testName = getQualifiedName();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    testContextAdapter.getTestContext(testName);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    Ruue.get(TestContextAdapter.class).getTestContext().getLocalDefs().addAll(mocks);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            RuueTestingUtil.clearCachedDefs(mocks);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Teardown common stuff shared across all browsers while running a test case. Run only once per test case.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void tearDown() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        super.tearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Setup specific to a test run against a particular browser. Run once per test case, per browser.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // re-initialize driver pointer here because test analysis might need it after perBrowserTearDown
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * TearDown specific to a test run against a particular browser. Run once per test case, per browser.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void perBrowserTearDown() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void superRunTest() throws Throwable {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void runTestWithBrowser(BrowserType browserType) throws Throwable {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                perBrowserTearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    @SuppressWarnings("serial")
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private static class AggregateFailure extends AssertionFailedError {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        private final Collection<Throwable> failures;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        private AggregateFailure(Collection<Throwable> failures) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            super(String.format("There were errors across %s browsers:", failures == null ? 0 : failures.size()));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            this.failures = failures;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        public void printStackTrace(PrintWriter printer) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            printer.append(getMessage()).append('\n');
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            for (Throwable e : failures) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                e.printStackTrace(printer);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void runTest() throws Throwable {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // sometimes the first set of parallel WebDriver tests that run have problems,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // this may be due to the extra steps that happen when everything is initialized
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // here we force the first test to execute single threaded and also initialize
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // ruau before invoking that first test
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            LOCK_FIRST_TEST_SEMAPHORE.acquire();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                get = obtainGetMethod("/uitest/testApp.app", true, null);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                getResponseBody(perform(get)); // need to drain response for HttpClient
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                get.releaseConnection();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // release enough permits to run in parallel after first
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            LOCK_FIRST_TEST_SEMAPHORE.release(TestExecutor.NUM_THREADS);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private static int numWebDriverTestsExecuted;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private static final Semaphore LOCK_FIRST_TEST_SEMAPHORE = new Semaphore(1);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private void runTestImpl() throws Throwable {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        List<Throwable> failures = Lists.newArrayList();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        for (BrowserType browser : WebDriverUtil.getBrowserListForTestRun(this.getTargetBrowsers(),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            } catch (Throwable t) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                failures.add(addRuueInfoToTestFailure(t));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // Aggregate results across browser runs, if more than one failure was encountered
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (!failures.isEmpty()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (failures.size() == 1) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                throw failures.get(0);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            throw new AggregateFailure(failures);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected static final boolean RUN_PERF_TESTS = System.getProperty("runPerfTests") != null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public boolean isPerfTest() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return RUN_PERF_TESTS && PerfUtil.hasPerfTestAnnotation(this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Override to change
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected boolean runPerfWarmupRun() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Override to change
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Override to change
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Override to change
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected int numPerfRuueRuns() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return 1; // metrics don't change from run to run
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Adds capabilities that request WebDriver performance logs<br/>
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * See https://sites.google.com/a/chromium.org/chromedriver/logging/performance-log
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private void addPerfCapabilities(DesiredCapabilities capabilities) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            PerfWebDriverUtil.addLoggingCapabilities(capabilities);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private void runPerfTests() throws Throwable {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        int numPerfRuueRuns = numPerfRuueRuns();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        PerfMetrics ruauMetrics = null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        List<File> runFiles = Lists.newArrayList();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (runPerfWarmupRun()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // TODO: any metrics that should/could be measured for the first run
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                perBrowserTearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // runs to collect Dev Tools performance metrics
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    metricsCollector.startCollecting();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    runsCollector.addRun(metrics);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    if (logger.isLoggable(Level.INFO)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        runFiles.add(PerfResultsUtil.writeDevToolsLog(metrics.getDevToolsLog(), getGoldFileName() + '_'
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                                ruauUITestingUtil.getUserAgent()));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        runFiles.add(PerfResultsUtil
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                                .writeGoldFile(metrics, getGoldFileName() + '_' + runNumber++, true));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    perBrowserTearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // use the median run for timeline metrics so individual metrics and dev tools logs match
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            timelineMetrics = runsCollector.getMedianRun();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // runs to collect JavaScript profiling metrics, run separately because affect overall metrics
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    metricsCollector.startCollecting();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    runsCollector.addRun(metrics);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    if (logger.isLoggable(Level.INFO)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        Map<String, ?> jsProfilerData = metrics.getJSProfilerData();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        if (jsProfilerData != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                            runFiles.add(PerfResultsUtil.writeJSProfilerData(jsProfilerData, getGoldFileName() + '_'
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        Map<String, ?> heapSnapshot = metrics.getHeapSnapshot();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        if (heapSnapshot != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                            runFiles.add(PerfResultsUtil.writeHeapSnapshot(heapSnapshot, getGoldFileName() + '_'
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        runFiles.add(PerfResultsUtil
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                                .writeGoldFile(metrics, getGoldFileName() + '_' + runNumber++, true));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    perBrowserTearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // use the median run for profile metrics so individual metrics and .cpuprofile match
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            profileMetrics = runsCollector.getMedianRun();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // runs to collect Ruue stats metrics
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (numPerfRuueRuns > 0) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // collecting them in separate runs as they need STATS mode
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            for (int i = 0; i < numPerfRuueRuns; i++) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    // TODO: set stats mode for framework tests
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    metricsCollector.startCollecting();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    runsCollector.addRun(metrics);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    perBrowserTearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            ruauMetrics = runsCollector.getMedianMetrics();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // combine all metrics, log/write results, perform tests
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        PerfMetrics allMetrics = PerfMetrics.combine(timelineMetrics, profileMetrics, ruauMetrics);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (allMetrics != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (logger.isLoggable(Level.INFO)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                logger.info("perf metrics for " + this + '\n' + allMetrics.toLongString());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            List<JSONObject> devToolsLog = allMetrics.getDevToolsLog();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                PerfResultsUtil.writeDevToolsLog(devToolsLog, getGoldFileName(), ruauUITestingUtil.getUserAgent());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            Map<String, ?> jsProfilerData = allMetrics.getJSProfilerData();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (jsProfilerData != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                PerfResultsUtil.writeJSProfilerData(jsProfilerData, getGoldFileName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            Map<String, ?> heapSnapshot = allMetrics.getHeapSnapshot();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (heapSnapshot != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                PerfResultsUtil.writeHeapSnapshot(heapSnapshot, getGoldFileName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            PerfResultsUtil.writeGoldFile(allMetrics, getGoldFileName(), storeDetailsInGoldFile());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            perfTearDown(allMetrics);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // delete individual run recordings of passing tests to save disk space
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Invoked after all perf metrics have been collected. Default behavior is to compare the measured metrics with the
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void perfTearDown(PerfMetrics actual) throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        assertGoldMetrics(actual);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public final PerfWebDriverUtil getPerfWebDriverUtil() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public final List<RDPNotification> getRDPNotifications() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return perfWebDriverUtil.getRDPNotifications();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public final Map<String, ?> takeHeapSnapshot() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return perfWebDriverUtil.takeHeapSnapshot();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    @SuppressWarnings("unchecked")
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public final Map<String, Map<String, Map<String, List<Object>>>> getRuueStats() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return (Map<String, Map<String, Map<String, List<Object>>>>) ruauUITestingUtil
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                .getRawEval("return $A.PERFCORE.stats.get();");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Start JavaScript CPU profiler
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public final void startProfile() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        perfWebDriverUtil.startProfile();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Stop JavaScript CPU profiler and return profile info
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public final Map<String, ?> endProfile() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Metrics/timeline is only captured between the perf start and end markers, override this method to specify
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * different markers.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public String getPerfStartMarker() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return "PERF:start";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Metrics/timeline is only captured between the perf start and end markers, override this method to specify
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * different markers.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public String getPerfEndMarker() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    // UIPerf: note that UIPerf is only loaded in PTEST (and CADENCE) modes.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void clearUIPerfStats() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        perfWebDriverUtil.clearUIPerfStats();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public Map<String, String> getUIPerfStats(
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            List<String> transactionsToGather) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return perfWebDriverUtil.getUIPerfStats(null, transactionsToGather);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Wrapper for non-asserted failures
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public static class UnexpectedError extends Error {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        private static final long serialVersionUID = 1L;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        UnexpectedError(String description, Throwable cause) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            super(description, cause);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private static String WRAPPER_APP = "<ruau:application access=\"GLOBAL\" render=\"%s\"><%s/></ruau:application>";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Load a string as a component in an app.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param namePrefix the name of the component
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param componentText The actual text of the component.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param isClient Should we use client or server rendering.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void loadComponent(String namePrefix, String componentText, boolean isClient)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        String appText;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(ComponentDef.class, componentText, namePrefix);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        appText = String.format(WRAPPER_APP, render, cmpDesc.getDescriptorName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        loadApplication(namePrefix + "App", appText, isClient);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * A convenience routine to load a application string.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param namePrefix the application name.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param appText the actual text of the application
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void loadApplication(String namePrefix, String appText, boolean isClient) throws MalformedURLException,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        DefDescriptor<ApplicationDef> appDesc = addSourceAutoCleanup(ApplicationDef.class, appText, namePrefix);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        String openPath = String.format("/%s/%s.app", appDesc.getNamespace(), appDesc.getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            open(openPath);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // when using server side rendering, we need to not wait for ruau
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            openNoRuue(openPath);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Gather up useful info to add to a test failure. try to get
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * <li>any client js errors</li>
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * <li>last known js test function</li>
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * <li>running/waiting</li>
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * <li>a screenshot</li>
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param originalErr the test failure
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @throws Throwable a new AssertionFailedError or UnexpectedError with the original and additional info
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private Throwable addRuueInfoToTestFailure(Throwable originalErr) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (originalErr != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            String msg = originalErr.getMessage();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                description.append(msg);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        description.append(String.format("\nBrowser: %s", currentBrowserType));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (ruauUITestingUtil != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            description.append("\nUser-Agent: " + ruauUITestingUtil.getUserAgent());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            description.append("\nTest failed before WebDriver was initialized");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    .append("\nWebDriver: " + currentDriver);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            description.append("\nJS state: ");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                String dump = (String) ruauUITestingUtil
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        .getRawEval("return (window.$A && $A.test && $A.test.getDump())||'';");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    description.append("no errors detected");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    description.append(dump);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            } catch (Throwable t) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                description.append(t.getMessage());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                String img = getBase64EncodedScreenshot(originalErr, true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    description.append("\nScreenshot: {not available}");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    String fileName = getClass().getName() + "." + getName() + "_" + currentBrowserType + ".png";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    File path = new File(screenshotsDirectory + "/" + fileName);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        path.getParentFile().mkdirs();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        byte[] bytes = Base64.decodeBase64(img.getBytes());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        FileOutputStream fos = new FileOutputStream(path);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        String baseUrl = System.getProperty("screenshots.baseurl");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        description.append(String.format("%nScreenshot: %s/%s", baseUrl, fileName));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    } catch (Throwable t) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        description.append(String.format("%nScreenshot: {save error: %s}", t.getMessage()));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                description.append("\nApplication cache status: ");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        .append(ruauUITestingUtil
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                                .getRawEval(
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                                        "var cache=window.applicationCache;return (cache===undefined || cache===null)?'undefined':cache.status;")
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            } catch (Exception ex) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                description.append("error calculating status: " + ex);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            description.append("\n");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (SauceUtil.areTestsRunningOnSauce()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                String linkToJob = SauceUtil.getLinkToPublicJobInSauce(currentDriver);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                description.append("\nSauceLabs-recording: ");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                description.append((linkToJob != null) ? linkToJob : "{not available}");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // replace original exception with new exception with additional info
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        Throwable newFailure;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (originalErr instanceof AssertionFailedError) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            newFailure = new AssertionFailedError(description.toString());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            description.insert(0, originalErr.getClass() + ": ");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            newFailure = new UnexpectedError(description.toString(), originalErr.getCause());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        newFailure.setStackTrace(originalErr.getStackTrace());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return newFailure;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Try to extract a screenshot from the given Throwable's stacktrace.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param t the throwable to check for
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param trigger if true, and t is null or doesn't have a screenshot, synthesize a WebDriverException and look in
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @return base64 encoding of the screenshot, or null if one could not be obtained
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private String getBase64EncodedScreenshot(Throwable t, boolean trigger) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    ruauUITestingUtil.getRawEval("return $A.test.dummymethod();");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                } catch (Throwable i) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    return getBase64EncodedScreenshot(i, false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (t instanceof AssertionFailedError) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return getBase64EncodedScreenshot(null, trigger);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            } else if (t instanceof ScreenshotException) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return ((ScreenshotException) t).getBase64EncodedScreenshot();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return getBase64EncodedScreenshot(t.getCause(), trigger);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Find all the browsers the current test case should be executed in. Test cases can be annotated with multiple
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * target browsers. If the testcase does not have an annotation, the class level annotation is used.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public Set<BrowserType> getTargetBrowsers() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        TargetBrowsers targetBrowsers = null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            Method method = getClass().getMethod(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            targetBrowsers = method.getAnnotation(TargetBrowsers.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (targetBrowsers == null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                // Inherit defaults from the test class
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                targetBrowsers = getClass().getAnnotation(TargetBrowsers.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        } catch (NoSuchMethodException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (targetBrowsers == null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // If no target browsers are specified, default to ALL
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            return EnumSet.allOf(BrowserType.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return Sets.newEnumSet(Arrays.asList(targetBrowsers.value()), BrowserType.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Browser types to be excluded for this testcase or test class.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            Method method = getClass().getMethod(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            excludeBrowsers = method.getAnnotation(ExcludeBrowsers.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                // Inherit defaults from the test class
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                excludeBrowsers = getClass().getAnnotation(ExcludeBrowsers.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        } catch (NoSuchMethodException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            return EnumSet.noneOf(BrowserType.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return Sets.newEnumSet(Arrays.asList(excludeBrowsers.value()), BrowserType.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public boolean isAccessibilityTestDisabled() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            Method method = getClass().getMethod(getName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            checkAccessibility = method.getAnnotation(CheckAccessibility.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                // Inherit defaults from the test class
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                checkAccessibility = getClass().getAnnotation(CheckAccessibility.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        } catch (NoSuchMethodException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return checkAccessibility != null ? !checkAccessibility.value() : false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            WebDriverProvider provider = RuueUtil.get(WebDriverProvider.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            DesiredCapabilities capabilities;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (SauceUtil.areTestsRunningOnSauce()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                capabilities = SauceUtil.getCapabilities(currentBrowserType, this);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                capabilities = currentBrowserType.getCapability();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            boolean reuseBrowser = true;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                Class<?> clazz = getClass();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                reuseBrowser = clazz.getAnnotation(FreshBrowserInstance.class) == null
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                        && clazz.getMethod(getName()).getAnnotation(FreshBrowserInstance.class) == null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            } catch (NoSuchMethodException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                // happens for dynamic tests
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                reuseBrowser = false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            capabilities.setCapability(WebDriverProvider.REUSE_BROWSER_PROPERTY, reuseBrowser);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            addPerfCapabilities(capabilities);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                WebDriverUtil.addChromeOptions(capabilities, windowSize);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            logger.info(String.format("Requesting: %s", capabilities));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            setCurrentDriver(provider.get(capabilities));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                fail("Failed to get webdriver for " + currentBrowserType);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                currentDriver.manage().window().setSize(windowSize);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            if (SauceUtil.areTestsRunningOnSauce()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                driverInfo += "\n      running in SauceLabs at " + SauceUtil.getLinkToPublicJobInSauce(currentDriver);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            ruauUITestingUtil = new RuueUITestingUtil(currentDriver);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            perfWebDriverUtil = new PerfWebDriverUtil(currentDriver, ruauUITestingUtil);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @return non-null to specify a desired window size to be set when a new driver is created
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public final void quitDriver() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            } catch (Exception e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                Log.warn(currentDriver.toString(), e);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected URI getAbsoluteURI(String url) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return getTestServletConfig().getBaseUrl().toURI().resolve(url);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Append a query param to avoid possible browser caching of pages
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public String addBrowserNonce(String url) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (!url.startsWith("about:blank")) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            Map<String, String> params = new HashMap<>();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            params.put("browser.nonce", String.valueOf(System.currentTimeMillis()));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            url = addUrlParams(url, params);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Add additional parameters to the URL. These paremeters will be added after the query string, and before a hash
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public String addUrlParams(String url, Map<String, String> params) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // save any fragment
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        int hashLoc = url.indexOf('#');
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        String hash = "";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (hashLoc >= 0) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            hash = url.substring(hashLoc);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            url = url.substring(0, hashLoc);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // add any additional params
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        List<NameValuePair> newParams = Lists.newArrayList();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        URLEncodedUtils.parse(newParams, new Scanner(qs), "UTF-8");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        for (String key : params.keySet()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            newParams.add(new BasicNameValuePair(key, params.get(key)));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return url + "?" + URLEncodedUtils.format(newParams, "UTF-8") + hash;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Open a URI without any additional handling. This will, however, add a nonce to the URL to prevent caching of the
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * page.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void openRaw(URI uri) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        String url = addBrowserNonce(uri.toString());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Open a URI without any additional handling. This will, however, add a nonce to the URL to prevent caching of the
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * page.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void openRaw(String url) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        openRaw(getAbsoluteURI(url));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Open a url without any additional handling, not even a browser.nonce
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void openTotallyRaw(String url) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Open a URL without the usual waitForRuueInit().
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void openNoRuue(String url) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        open(url, getRuueModeForCurrentBrowser(), false);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Open a Ruue URL with the default mode provided by {@link WebDriverTestCase#getRuueModeForCurrentBrowser()} and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * wait for intialization as defined by {@link RuueUITestingUtil#waitForRuueInit()}.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @throws MalformedURLException
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @throws URISyntaxException
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void open(String url) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        open(url, getRuueModeForCurrentBrowser(), true);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public Mode getRuueModeForCurrentBrowser() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void open(DefDescriptor<? extends BaseComponentDef> dd) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Open a Ruue URL in given ruau.mode and wait for initialization.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @throws MalformedURLException
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @throws URISyntaxException
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void open(String url, Mode mode) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void open(String url, Mode mode, boolean waitForInit) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        Map<String, String> params = new HashMap<>();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        params.put("ruau.mode", mode.name());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        params.put("ruau.test", getQualifiedName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        url = addUrlParams(url, params);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.getRawEval("document._waitingForReload = true;");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            openAndWait(url, waitForInit);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        } catch (TimeoutException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // Hack to avoid timeout issue for IE7 and IE8. Appears that tests fail for the first time when we run the
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            // test in new vm session on Sauce.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                openAndWait(url, waitForInit);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private void openAndWait(String url, boolean waitForInit) throws MalformedURLException, URISyntaxException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.getRawEval("document._waitingForReload = true;");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        openRaw(url);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                Object ret = ruauUITestingUtil.getRawEval("return !document._waitingForReload");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                if (ret != null && ((Boolean) ret).booleanValue()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        }, timeoutInSecs,"fail on loading url:"+url);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (waitForInit) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            ruauUITestingUtil.waitForRuueInit(getRuueErrorsExpectedDuringInit());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForRuueFrameworkReady() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.waitForRuueFrameworkReady(getRuueErrorsExpectedDuringInit());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected Set<String> getRuueErrorsExpectedDuringInit() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Wait the specified number of seconds for the provided javascript to evaluate to true.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @throws AssertionFailedError if the provided javascript does not return a boolean.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForCondition(final String javascript, int timeoutInSecs) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return ruauUITestingUtil.getBooleanEval(javascript);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        }, timeoutInSecs,"fail on waiting for condition:"+javascript);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Wait for the provided javascript to evaluate to true. Make sure script has return statement.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForCondition(final String javascript) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForCondition(javascript, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Wait for a specified amount of time.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitFor(long timeoutInSeconds) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        WebDriverWait wait = new WebDriverWait(getDriver(), timeoutInSeconds);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            wait.until(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    return false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        } catch (TimeoutException expected) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Wait for text to be present for element.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForElementTextPresent(WebElement e, String text) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElementText(e, text, true, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Wait for text to be absent for element.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForElementTextAbsent(WebElement e, String text) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElementText(e, text, false, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Wait for text on element to be either cleared or present.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void waitForElementText(final WebElement e, final String text, final boolean isPresent, long timeout) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return isPresent == text.equals(e.getText());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        }, timeout,"fail on waiting for element text:"+text);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void waitForElementAbsent(String msg, final WebElement e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElement(msg, e, false, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void waitForElementAbsent(final WebElement e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElement("Timed out (" + timeoutInSecs + "s) waiting for " + e + "to disappear.", e, false,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void waitForElementPresent(String msg, final WebElement e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElement(msg, e, true, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void waitForElementPresent(final WebElement e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElement("Timed out (" + timeoutInSecs + "s) waiting for " + e, e, true, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * short waitForElement to present or absent before executing the next command
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void waitForElement(String msg, final WebElement e, final boolean isDisplayed) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElement(msg, e, isDisplayed, timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * waitForElement to present or absent before executing the next command
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param msg Error message
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param e WebElement to look for
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param isDisplayed if set to true, will wait till the element is displayed else will wait till element is not
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param timeoutInSecs number of seconds to wait before erroring out
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void waitForElement(String msg, final WebElement e, final boolean isDisplayed, int timeoutInSecs) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return isDisplayed == e.isDisplayed();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Waits for element with matching locator to appear on screen.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param msg Error message on timeout.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param locator By of element waiting for.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForElementAppear(String msg, final By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        WebDriverWait wait = new WebDriverWait(getDriver(), timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        wait.withMessage(msg);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        wait.ignoring(NoSuchElementException.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        wait.until(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return isElementPresent(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForElementAppear(By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        String msg = "Element with locator \'" + locator.toString() + "\' never appeared";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElementAppear(msg, locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Waits for element with matching locator to disappear from the screen.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param msg Error message on timeout.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param locator By of element waiting for.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForElementDisappear(String msg, final By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        WebDriverWait wait = new WebDriverWait(getDriver(), timeoutInSecs);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        wait.withMessage(msg);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        wait.until(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return !isElementPresent(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForElementDisappear(By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        String msg = "Element with locator \'" + locator.toString() + "\' never disappeared";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElementDisappear(msg, locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Overriding wait to wait until the dialog box closes, Since we are using the class variable to check for the
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Dialog box, it changes from dialog modal medium uiDialog slideUp -> dialog modal medium uiDialog-> dialog hidden
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * modal medium uiDialog (this is the state that we want to make sure to grab)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param selectorToFindCmp way to find componenet (ex: "div[class*='dialog']")
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param attr components attribute that we want to find
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param itemAttrShouldContain Keyword that we are looking for in the attribute
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param useBangOperator Whether we want to use the bang operator or not
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForComponentToChangeStatus(final String selectorToFindCmp, final String attr,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            final String itemAttrShouldContain, final boolean useBangOperator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                if (useBangOperator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    return !d.findElement(By.cssSelector(selectorToFindCmp)).getAttribute(attr)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                            .contains(itemAttrShouldContain);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                    return d.findElement(By.cssSelector(selectorToFindCmp)).getAttribute(attr)
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                            .contains(itemAttrShouldContain);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        }, timeoutInSecs,"fail on waiting for component to change status");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Wait for the carousel page to change. Asserts the expectedText appears in the innerHTML of page element
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param page - the next page that should be loaded on carousel.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param expectedText - the expected text on that page.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForCarouselPageToChange(final WebElement page, final String expectedText) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                String pageContent = page.getAttribute("innerHTML");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                return pageContent.contains(expectedText);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        }, timeoutInSecs, "fail on waiting for Carousel Page to Change");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForAutoCompleteListVisible(final WebElement list, final boolean isVisible) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            public Boolean apply(WebDriver d) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:                boolean isInvisible = hasCssClass(list, "invisible");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        }, timeoutInSecs,"fail on waiting AutoCompleteList to be visible");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Find first matching element in the DOM.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected WebElement findDomElement(By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return ruauUITestingUtil.findDomElement(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Find list of matching element in the DOM.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected List<WebElement> findDomElements(By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return ruauUITestingUtil.findDomElements(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Return true if there is at least one element matching the locator.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public boolean isElementPresent(By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return getDriver().findElements(locator).size() > 0;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Gets the visible text for the first element matching the locator.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected String getText(By locator) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        return findDomElement(locator).getText();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public Action shiftTab() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Flick starting at on_element, and moving by the xoffset and yoffset with normal speed
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param locator
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param xOffset
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * @param yOffset
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void flick(By locator, int xOffset, int yOffset) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        waitForElementAppear("Cannot locate element to flick: " + locator, locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        WebElement element = ruauUITestingUtil.findDomElement(locator);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // FlickAction.SPEED_FAST is too slow for the tests so changing it to 200
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        // check for wrapped driver
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (driver instanceof EventFiringWebDriver) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            driver = ((EventFiringWebDriver) driver).getWrappedDriver();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        driver = augmentDriver();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        if (driver instanceof HasTouchScreen) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            Action flick = (new Actions(driver)).dragAndDropBy(element, xOffset, yOffsetByDevice).build();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        driver = augmentDriver();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:     * Waits for the "loading" and spinner to disappear
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    public void waitForLoadingIndicatorToDisappear() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:            waitForElementAbsent("The 'loadingIndicator' never disappeared.",
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    private RemoteIOSDriver augmentDriver() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:    protected void assertClassesSame(String message, String expected, String actual) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/WebDriverTestCase.java:        ruauUITestingUtil.assertClassesSame(message, expected, actual);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:package org.ruauframework.test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import java.net.InetAddress;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import java.net.MalformedURLException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import java.net.URL;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import java.net.UnknownHostException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import javax.crypto.Mac;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import javax.crypto.spec.SecretKeySpec;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import junit.framework.TestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import org.openqa.selenium.WebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import org.openqa.selenium.remote.DesiredCapabilities;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:import org.openqa.selenium.remote.RemoteWebDriver;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java: * SauceLabs-related utility methods
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:public final class SauceUtil {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:     * Utility to parse strings (i.e. system properties) into ints, with support for defaults as ints. This just saves a
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:     * bunch of conversions between Integer and String, relative to getProperty with a String default.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static int parseIntegerWithDefault(String str, int defVal) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            return Integer.parseInt(str);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        return defVal;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static final boolean TUNNEL_SELENIUM_COMMANDS_THROUGH_SAUCE_CONNECT = false;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    static final String SAUCELABS_SERVER_URL = "saucelabs.com";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static final String SAUCE_USERNAME = System.getProperty("sauce.username", "[sauce.username undefined]");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static final String SAUCE_ACCESS_KEY = System.getProperty("sauce.access.key",
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            "[sauce.access.key undefined]");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static final String SAUCE_WEB_DRIVER_URL = "http://" + SAUCE_USERNAME + ':' + SAUCE_ACCESS_KEY
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            + "@saucelabs.com:4444/wd/hub";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static final String SAUCE_CONNECT_HOST = System.getProperty("sauce.connect.host",
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            "[sauce.connect.host undefined]");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static final String SAUCE_PARENT_TUNNEL = System.getProperty("sauce.parent.tunnel");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static final String SAUCE_CONNECT_URL = "http://" + SAUCE_USERNAME + ':' + SAUCE_ACCESS_KEY + "@"
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    static final String SAUCE_ONDEMAND_HOST = "ondemand.saucelabs.com";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    static final int SAUCE_ONDEMAND_PORT = 80;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    // Allow properties for sauce timeouts. By default, the "command" timeout is used to derive the
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    // others. We set to 60s command, 60s idle, 300s max duration; defaults were originally 5min, 90s,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    static final int SAUCE_CMD_TIMEOUT = parseIntegerWithDefault(System.getProperty("sauce.timeout"), 60);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    static final int SAUCE_IDLE_TIMEOUT = parseIntegerWithDefault(System.getProperty("sauce.timeout.idle"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    static final int SAUCE_MAX_TIMEOUT = parseIntegerWithDefault(System.getProperty("sauce.timeout.duration"),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    public static boolean areTestsRunningOnSauce() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        // TODO: when running in SFDC this returns false even if running on SauceLabs
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        return "saucelabs.com".equals(System.getProperty(WebDriverProvider.WEBDRIVER_SERVER_PROPERTY));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    public static URL getSauceServerUrl() throws MalformedURLException {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:     * @param test
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:     * @param browserType String identifying browser and version (same String as the one used by
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:     * @return Capabilities for the browserType as required by SauceLabs
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    public static DesiredCapabilities getCapabilities(BrowserType browserType, TestCase test) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        DesiredCapabilities capabilities = browserType.getCapability();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        if (browserType.equals(BrowserType.IPAD) || browserType.equals(BrowserType.IPHONE)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            // dont set let SauceLabs choose
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            capabilities.setCapability("selenium-version", WebDriverUtil.getSeleniumClientVersion());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        capabilities.setVersion(browserType.getVersion());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        capabilities.setCapability("name", getTestName(test));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        String buildId = System.getProperty("ruau.build.id");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            capabilities.setCapability("build", buildId);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        // request specific platform/version for some browsers
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        case GOOGLECHROME:
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            // capabilities.setCapability("platform", "OS X 10.9");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            capabilities.setCapability("platform", "Windows 8.1");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            capabilities.setCapability("version", "34");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            capabilities.setCapability("chromedriver-version", "2.9");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            break;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        default: // explicit no-op
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        // adding timeouts to prevent jobs to run for too long when problems
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        // see http://saucelabs.com/docs/ondemand/additional-config#timeouts
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        capabilities.setCapability("max-duration", SAUCE_MAX_TIMEOUT);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        capabilities.setCapability("command-timeout", SAUCE_CMD_TIMEOUT);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        capabilities.setCapability("idle-timeout", SAUCE_IDLE_TIMEOUT);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        capabilities.setCapability("record-video", System.getProperty("sauce.record.video", "false"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        capabilities.setCapability("record-screenshots", System.getProperty("sauce.record.screenshots", "false"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            capabilities.setCapability("parent-tunnel", SAUCE_PARENT_TUNNEL);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        // tag jobs with server name so we know the origin of the tests running in SauceLabs
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        capabilities.setCapability("tags", new String[] { getJettyHost() });
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        return capabilities;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static String getJettyHost() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:                host = InetAddress.getLocalHost().getHostName();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            } catch (UnknownHostException e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:                host = "localhost";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static String getTestName(TestCase test) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        String className = test.getClass().getName();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        int last_dot = className.lastIndexOf('.');
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        if (last_dot != -1) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            className = className.substring(last_dot + 1);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        return className + '.' + test.getName();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:     * @return link to job in SauceLabs or null if it cannot be calculated
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    public static String getLinkToJobInSauce(WebDriver driver) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        if (!(driver instanceof RemoteWebDriver)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        return "https://saucelabs.com/jobs/" + sessionId;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:     * @return link to public (no login required) job in SauceLabs or null if it cannot be calculated
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    public static String getLinkToPublicJobInSauce(WebDriver driver) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        if (!(driver instanceof RemoteWebDriver)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            return "https://saucelabs.com/jobs/" + sessionId + "?auth=" + authToken(sessionId);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        } catch (Exception e) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            e.printStackTrace();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static String authToken(String jobId) throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        String message = SAUCE_USERNAME + ':' + SAUCE_ACCESS_KEY;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        SecretKeySpec secretKey = new SecretKeySpec(message.getBytes(), "HMACMD5");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        Mac mac = Mac.getInstance(secretKey.getAlgorithm());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        mac.init(secretKey);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        byte[] result = mac.doFinal(jobId.getBytes());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:    private static String toHexString(byte[] bytes) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        StringBuffer hash = new StringBuffer();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:                hash.append('0');
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:            hash.append(hex);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/SauceUtil.java:        return hash.toString();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:package org.ruauframework.test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import java.util.logging.Level;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import java.util.logging.Logger;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import java.util.regex.Pattern;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.Ruue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.adapter.ConfigAdapter;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.adapter.MockConfigAdapter;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.def.ControllerDef;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.def.Definition;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.service.ContextService;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.service.LoggingService;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.system.RuueContext;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.system.Location;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.system.Source;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java: * Base class for unit tests referencing the Ruue framework.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:public abstract class RuueTestCase extends UnitTestCase {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected final static String baseApplicationTag = "<ruau:application %s>%s</ruau:application>";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected final static String baseComponentTag = "<ruau:component %s>%s</ruau:component>";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    private RuueTestingUtil ruauTestingUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    private RuueTestingMarkupUtil ruauTesingMarkupUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    public RuueTestCase(String name) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        super(name);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        endContextIfEstablished();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        TestContextAdapter testContextAdapter = Ruue.get(TestContextAdapter.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (testContextAdapter != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            testContextAdapter.getTestContext(getQualifiedName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    public void tearDown() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            loggingService.release();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        } catch (Throwable t) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            Logger.getLogger(getClass().getName()).log(Level.SEVERE, t.getMessage(), t);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        endContextIfEstablished();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        TestContextAdapter testContextAdapter = Ruue.get(TestContextAdapter.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (testContextAdapter != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            testContextAdapter.release();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (ruauTestingUtil != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            ruauTestingUtil.tearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        super.tearDown();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    public static MockConfigAdapter getMockConfigAdapter() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        ConfigAdapter adapter = Ruue.getConfigAdapter();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (adapter instanceof MockConfigAdapter) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            return (MockConfigAdapter) adapter;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        throw new Error("MockConfigAdapter is not configured!");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    public static void resetMocks() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        getMockConfigAdapter().reset();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    public String getQualifiedName() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        return getClass().getCanonicalName() + "." + getName();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected <T extends Definition> DefDescriptor<T> addSourceAutoCleanup(Class<T> defClass, String contents,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            String namePrefix) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        return getRuueTestingUtil().addSourceAutoCleanup(defClass, contents, namePrefix);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected <T extends Definition> DefDescriptor<T> addSourceAutoCleanup(Class<T> defClass, String contents) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        return getRuueTestingUtil().addSourceAutoCleanup(defClass, contents);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void updateStringSource(DefDescriptor<?> desc, String content) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        getRuueTestingUtil().updateSource(desc, content);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected <T extends Definition> DefDescriptor<T> addSourceAutoCleanup(DefDescriptor<T> descriptor, String contents) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        return getRuueTestingUtil().addSourceAutoCleanup(descriptor, contents);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        return getRuueTestingUtil().getSource(descriptor);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Useful for restoring a context in case a test needs to temporarily switch contexts.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected static void setContext(RuueContext context) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        ContextService service = Ruue.getContextService();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        RuueContext current = service.getCurrentContext();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        service.startContext(context.getMode(), context.getFormat(), context.getAccess(),
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:                context.getApplicationDescriptor());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check to ensure that an exception exactly matches both message and location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param e the exception to check.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param clazz a class to match if it is not null.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param message The message to match (must be exact match).
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param filename a 'file name' to match the location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionFull(Throwable e, Class<?> clazz, String message, String filename) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        checkExceptionFull(e, clazz, message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertLocation(e, filename);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check to ensure that an exception matches both message regex and location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param e the exception to check.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param clazz a class to match if it is not null.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param regex The regex string to match (must be exact match).
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param filename a 'file name' to match the location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionRegex(Throwable e, Class<?> clazz, String regex, String filename) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        checkExceptionRegex(e, clazz, regex);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertLocation(e, filename);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check the exception exactly matches the message and check the location of an Exception using the Source of the
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * file in error. Use this method when the location is a full filesystem path to the file (instead of just a
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * qualified name).
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Depending on whether we are reading form jars or source, the location in the exception is different. When reading
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * from source we need to strip the "file:" prefix. When reading from jars we leave the "jar:file:" prefix.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionFull(Throwable e, Class<?> clazz, String message, Source<?> src) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        checkExceptionFull(e, clazz, message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertLocation(e, src);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check that an exception exactly matches the message, ignore location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionFull(Throwable e, Class<?> clazz, String message) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (clazz != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            assertEquals("Exception must be " + clazz.getSimpleName(), clazz, e.getClass());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertEquals("Unexpected message", message, e.getMessage());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check that an exception matches the regex, ignore location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionRegex(Throwable e, Class<?> clazz, String regex) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (clazz != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            assertEquals("Exception must be " + clazz.getSimpleName(), clazz, e.getClass());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        String message = e.getMessage();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        Pattern pattern = Pattern.compile(regex);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertTrue("Unexpected message: " + message, pattern.matcher(message).find());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check to ensure that an exception message starts with a given message and matches a location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param e the exception to check.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param clazz a class to match if it is not null.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param message The message to match (must be exact match).
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param filename a 'file name' to match the location (not checked if null).
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionStart(Throwable e, Class<?> clazz, String message, String filename) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        checkExceptionStart(e, clazz, message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertLocation(e, filename);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check the exception message starts with a given message and check the location of an Exception using the Source
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * of the file in error. Use this method when the location is a full filesystem path to the file (instead of just a
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * qualified name).
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Depending on whether we are reading form jars or source, the location in the exception is different. When reading
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * from source we need to strip the "file:" prefix. When reading from jars we leave the "jar:file:" prefix.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionStart(Throwable e, Class<?> clazz, String message, Source<?> src) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        checkExceptionStart(e, clazz, message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertLocation(e, src);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check to ensure that an exception message starts with a given message, ignore location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionStart(Throwable e, Class<?> clazz, String message) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (clazz != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            assertEquals("Exception must be " + clazz.getSimpleName(), clazz, e.getClass());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertTrue("Unexpected message: " + e.getMessage() + "!=" + message, e.getMessage().startsWith(message));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check to ensure that an exception message contains a string and has the correct location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param e the exception to check.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param clazz a class to match if it is not null.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param message The String which is contained in the Exception message.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * @param filename a 'file name' to match the location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionContains(Throwable e, Class<?> clazz, String message, String filename) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        checkExceptionContains(e, clazz, message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertLocation(e, filename);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check the exception exactly message contains a string and check the location of an Exception using the Source of
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * the file in error. Use this method when the location is a full filesystem path to the file (instead of just a
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * qualified name).
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Depending on whether we are reading form jars or source, the location in the exception is different. When reading
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * from source we need to strip the "file:" prefix. When reading from jars we leave the "jar:file:" prefix.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionContains(Throwable e, Class<?> clazz, String message, Source<?> src) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        checkExceptionContains(e, clazz, message);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertLocation(e, src);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Check that an exception message contains a string, ignore location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void checkExceptionContains(Throwable e, Class<?> clazz, String message) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (clazz != null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            assertEquals("Exception must be " + clazz.getSimpleName(), clazz, e.getClass());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertTrue("Expected exception message to contain <" + message + ">, but was <" + e.getMessage() + " >", e
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:                .getMessage().contains(message));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    public RuueTestingUtil getRuueTestingUtil() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (ruauTestingUtil == null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            ruauTestingUtil = new RuueTestingUtil();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        return ruauTestingUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected RuueTestingMarkupUtil getRuueTestingMarkupUtil() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (ruauTesingMarkupUtil == null) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        	ruauTesingMarkupUtil = new RuueTestingMarkupUtil();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        return ruauTesingMarkupUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected DefDescriptor<ControllerDef> getClientController(BaseComponentDef def) throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            if ("js".equals(cd.getPrefix())) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Verify Throwable is from the expected Location.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    private void assertLocation(Throwable e, String expectedLoc) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        Location l = null;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (e instanceof QuickFixException) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            l = ((QuickFixException) e).getLocation();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        } else if (e instanceof RuueRuntimeException) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            l = ((RuueRuntimeException) e).getLocation();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertNotNull("Unable to find location, expected " + expectedLoc, l);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        assertEquals("Unexpected location.", expectedLoc, l.getFileName());
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:     * Verify Throwable is from the expected Location. Handles differences between running from jars or source.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    private void assertLocation(Throwable e, Source<?> src) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (fileUrl.startsWith("jar")) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            assertLocation(e, fileUrl);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        } else if (fileUrl.startsWith("file")) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            // If running from source, strip "file:" prefix, as in XMLParser.getLocation()
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            String filePath = fileUrl.substring(5);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:            assertLocation(e, filePath);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:    protected void endContextIfEstablished() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/RuueTestCase.java:        if (contextService != null && contextService.isEstablished()) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: * you may not use this file except in compliance with the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: * You may obtain a copy of the License at
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: * See the License for the specific language governing permissions and
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: * limitations under the License.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:package org.ruauframework.test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.Callable;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.ExecutorService;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.Future;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.LinkedBlockingQueue;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.ThreadPoolExecutor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.TimeUnit;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.atomic.AtomicLong;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.locks.Lock;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.locks.ReadWriteLock;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import java.util.concurrent.locks.ReentrantReadWriteLock;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import junit.framework.Test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import junit.framework.TestCase;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import junit.framework.TestResult;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import org.ruauframework.test.WebDriverProvider;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:import org.ruauframework.util.RuueUtil;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java: * This executor handles the execution of test cases
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:public class TestExecutor {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    public static final int NUM_THREADS = Integer.parseInt(System.getProperty("testThreadCount", "4"));
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    private final ExecutorService executor;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:     * Keep track of the number of pending/running tasks in the executor.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    private final AtomicLong taskCount = new AtomicLong(0);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    private TestExecutor(int coreSize, int maxSize) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        executor = new ThreadPoolExecutor(coreSize, maxSize, 3, TimeUnit.SECONDS, queue);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:     * Enqueue a task on the executor.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    public synchronized Future<TestResult> submit(final TestRun c) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        // After running the given task, check to see if the executor is empty.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        Callable<TestResult> wrapped = new Callable<TestResult>() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:            public TestResult call() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:                    return c.call();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:                } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:                    if (taskCount.decrementAndGet() == 0) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        taskCount.incrementAndGet();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        return executor.submit(wrapped);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:     * Called when the executor transitions from the active into the empty state. Synchronized on this so that no new
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:     * tasks may submit while we are running cleanup code.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    private synchronized void onExecutorEmpty() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        WebDriverProvider provider = RuueUtil.get(WebDriverProvider.class);
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:            provider.release();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:     * @return true if the executor is currently active (not empty).
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    public synchronized boolean isActive() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        return taskCount.get() > 0;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:     * A helper to enable lazy static initialization of the {@link TestExecutor}.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    private static class TestExecutorHolder {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        private static final TestExecutor INSTANCE;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        static {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:            // default number of threads to the number of processing cores
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:     * @return the singleton {@link TestExecutor} instance.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    public static TestExecutor getInstance() {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:     * A {@link Callable} adapter to schedule a test for execution.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    public static class TestRun implements Callable<TestResult> {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        protected final Test test;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        protected final TestResult result;
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:         * This lock ensures that a {@link ThreadHostileTest} is not run concurrently with any other tests because it
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:         * must obtain the write lock.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        private static final ReadWriteLock globalStateLock = new ReentrantReadWriteLock();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:            assert (test != null) : "null test";
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        public TestResult call() throws Exception {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:            if (isThreadHostile(test)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:                // Thread hostile tests need to run alone and therefore require the write lock.
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:                lock = globalStateLock.writeLock();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:                // Regular tests can run concurrently
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:                lock = globalStateLock.readLock();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:            } finally {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:    public static boolean isThreadHostile(Test test) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        Class<?> testClass = test.getClass();
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        if (testClass.isAnnotationPresent(ThreadHostileTest.class)) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:        if (test instanceof WebDriverTestCase) {
ruau/ruau/SouRCeS/test/java/org/ruauframework/test/TestExecutor.java:            if (((WebDriverTestCase) test).getTestLabels().contains("threadHostile")) {
