ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        return data;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Get a string representing the labels for the x-axis.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public String buildAxisLabels() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        string.append("2:|Number of cmps >>|");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        string.append("3:|Time in Î¼s^");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Get a string representing the label for each series in this chart.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        List<String> seriesNames = new ArrayList<>();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        for (ChartAxisPoints axisPoint : axisPoints) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            seriesNames.add(axisPoint.axisPointLabel);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        return StringUtils.join(seriesNames.iterator(), "|");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Encodes a list of values into the Google Charts API "extended encoding",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * scaling to the supplied max value.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * http://code.google.com/apis/chart/docs/data_formats.html#extended
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Try and dig into their data formats sometime. They're pretty annoying.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public String buildDataPoints() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        StringBuilder data = new StringBuilder();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.append("t:");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        for (ChartAxisPoints axisPoint : axisPoints) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            List<String> xValues = new ArrayList<>();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            List<String> yValues = new ArrayList<>();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            for (ChartPoint point : axisPoint.seriesDataPoints) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                xValues.add("" + scaleXValue(Long.valueOf(point.xValue)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                yValues.add("" + scaleYValue(point.yValue));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                data.append("|");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            data.append(StringUtils.join(xValues.iterator(), ",") + "|" + StringUtils.join(yValues.iterator(), ","));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        return data.toString();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public long scaleYValue(long y) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        if (getMaxYDataPointForChart() != 0) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            return (100 * y) / getMaxYDataPointForChart();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public long scaleXValue(long x) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        if (getMaxXDataPointForChart() != 0) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            return (100 * x) / getMaxXDataPointForChart();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Write the chart to the specified file. If the file already exists, it
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * will be replaced.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * @param file Write to this file.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * @return Whether the file was successfully created.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    @SuppressWarnings("deprecation")
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public boolean writeToFile(File file) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        HttpParams httpParams = new BasicHttpParams();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        HttpConnectionParams.setConnectionTimeout(httpParams, 24000);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        HttpConnectionParams.setSoTimeout(httpParams, 24000);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        DefaultHttpClient http = new DefaultHttpClient(httpParams);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        List <NameValuePair> nvps = new ArrayList<>();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        Map<String, String> params = buildRequestParams();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        for (Map.Entry<String, String> entry : params.entrySet()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            nvps.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        post.setHeader(HttpHeaders.CONTENT_TYPE, "application/x-www-form-urlencoded; charset=UTF-8");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            InputStream in = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            FileOutputStream fw = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            ByteArrayOutputStream baos = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            boolean successful = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            int responseCode = response.getStatusLine().getStatusCode();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    file.createNewFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    in = new BufferedInputStream(response.getEntity().getContent());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    baos = new ByteArrayOutputStream();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    fw = new FileOutputStream(file);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    IOUtil.copyStream(in, baos);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    byte[] bytes = baos.toByteArray();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    throw new RuntimeException("Callout to Google Charts API failed.");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                post.releaseConnection();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                if (baos != null) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    baos.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:package org.ruauframework.util.perfomance;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:import java.io.File;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:import junit.framework.Test;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:import org.ruauframework.util.perfomance.PTestGoogleChart.ChartPoint;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java: * This test util is based on JTroup's AbstractCadenceTest framework.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:public class PerformanceTestUtil {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:    PTestResultsHandler resultsHandler;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:    public PerformanceTestUtil(Test test, File resultsDir) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:        this.resultsHandler = getResultsHandler(resultsDir);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:     * Get the handler which decides what to do with the test results. Currently
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:     * we save the results to a local file.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:    protected PTestResultsHandler getResultsHandler(File resultsDir) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:        return new LocalFilePTestResultsHandler(this.test, resultsDir);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:     * Write the results to a file.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:    public void handleResults(String testName, List<ChartPoint> dataPoints) throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PerformanceTestUtil.java:        resultsHandler.handleResults(testName, dataPoints);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java:package org.ruauframework.util.perfomance;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java:import junit.framework.Test;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * This test util is based on JTroup's AbstractCadenceTest framework. This class
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java: * mirrors CadenceResultsHandler.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java:public abstract class PTestResultsHandler {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java:    public PTestResultsHandler(Test test) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java:    public abstract void handleResults(String testName,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/perfomance/PTestResultsHandler.java:            List<org.ruauframework.util.perfomance.PTestGoogleChart.ChartPoint> dataPoints) throws Exception;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:package org.ruauframework.util.resource;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import java.io.File;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import java.io.FileInputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import java.io.FileWriter;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import java.io.InputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import java.net.URISyntaxException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import java.net.URL;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import java.net.URLClassLoader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import java.util.Scanner;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:import org.ruauframework.util.IOUtil;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java: * Tests for ruau.util.resource.ResourceLoader
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:public class ResourceLoaderTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * The test folder serves as the root for all temporary files that these
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * tests create so that each test can clean up after itself.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private File testFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Tests should use this for creating any temporary files or folders for
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * populating the cache.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private File origFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * The cache folder used by the file loader.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private File cacheFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * The standard file-based loader.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private ResourceLoader fileLoader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * A JAR based loader. Note that refreshing contents in a JAR is currently
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private ResourceLoader jarLoader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private File jar;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private File tempFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private File jarTempFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private File jarCacheFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:         * The test folders are all rooted at /path/to/testRootFolder with the following defaults
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:         *  /TestName-ORIG : the original source files that will be cached and read back
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:         *  /TestName-TEMP: the temp dir used to create the file-based loader
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:         *  /TestName-TEMP/resourceCache: the resource cache for the file-based loader (initially does not exist)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:         *  /TestName-JARTEMP: the temp dir used to create the jar-based loader
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:         *  /TestName-JARTEMP/resourceCache: the resource cache for the jar-based loader  (initially does not exist)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:         *  /TestName.jar: the jar file that packs up the source found in /TestName-ORIG for the jar-based loader.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        testFolder = Files.createTempDir();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        origFolder = new File(testFolder, getName() + "-ORIG");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        tempFolder = new File(testFolder, getName() + "-TEMP");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        cacheFolder = new File(tempFolder, ResourceLoader.RESOURCE_CACHE_NAME);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        // Tests create the cacheFolder explicitly.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        jarTempFolder = new File(testFolder, getName() + "-JARTEMP");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        jarTempFolder.mkdir();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        jarCacheFolder = new File(jarTempFolder, ResourceLoader.RESOURCE_CACHE_NAME);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        jar = new File(testFolder, getName() + ".jar");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void tearDown() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private File makeTestFile() throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        return File.createTempFile(getName(), null, origFolder);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private void writeStringToFile(File file, String string) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    @SuppressWarnings("resource")
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private String readStreamAsString(InputStream is) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        Scanner scanner = new Scanner(is);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        String ret = scanner.useDelimiter("\\A").next();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        scanner.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private void createResourceLoader(boolean deleteCacheOnStart) throws IOException, URISyntaxException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        URLClassLoader fileURLLoader = new URLClassLoader(new URL[] { origFolder.toURI().toURL() });
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        fileLoader = new ResourceLoader(tempFolder.getPath(), fileURLLoader, deleteCacheOnStart);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    private void createJarResourceLoader(boolean deleteCacheOnStart) throws IOException, URISyntaxException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        IOUtil.createJarFromFolder(origFolder, jar);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        URLClassLoader jarURLLoader = new URLClassLoader(new URL[] { jar.toURI().toURL() });
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        jarLoader = new ResourceLoader(jarTempFolder.getPath(), jarURLLoader, deleteCacheOnStart);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Must specify a cache directory location.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testCacheDirNull() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            new ResourceLoader(null, null, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            fail("No error for null cache dir");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertEquals("Unexpected exception message", "Cache dir name must be specified", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Verify that null value for parent is handled.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    // Automation for "W-1405114"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testParentDirNull() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            ResourceLoader loader = new ResourceLoader(tempFolder.getPath(), null, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            loader.getResource("/foo/bar.txt");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            fail("No error for null Classloader.");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertEquals("Unexpected exception message", "ClassLoader must be specified", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Cache directory is created if it doesn't exist.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testCacheDirDoesntExist() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        // We should get the same results, regardless of the value of
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        // deleteOnStart.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        for (int pass = 0; pass < 2; pass++) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertFalse(cacheFolder.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            new ResourceLoader(tempFolder.getPath(), pass == 0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertTrue("Cache not created", cacheFolder.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertTrue("Cache isn't a directory", cacheFolder.isDirectory());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Existing cache contents are retained if deleteCacheOnStart is false.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testCacheDirDoesExist() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File childDir = new File(cacheFolder, "child");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File childFile = File.createTempFile(getName(), null, cacheFolder);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        new ResourceLoader(tempFolder.getPath(), false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Cache not created", cacheFolder.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Cache isn't a directory", cacheFolder.isDirectory());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Child dir was deleted", childDir.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Child file was deleted", childFile.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Existing cache contents are deleted if deleteCacheOnStart is true.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testCacheDirDoesExistDeleteOnStart() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        cacheFolder.mkdirs();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File childDir = new File(cacheFolder, "child");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File childFile = File.createTempFile(getName(), null, cacheFolder);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        new ResourceLoader(tempFolder.getPath(), true);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Cache not created", cacheFolder.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Cache isn't a directory", cacheFolder.isDirectory());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertFalse("Child dir not deleted", childDir.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertFalse("Child file not deleted", childFile.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Cache directory parent is actually a file, not a directory.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testCacheDirParentIsAFile() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File testFile = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        // Create a temp folder that is actually a file.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File fakeTempFolder = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        URLClassLoader testLoader = new URLClassLoader(new URL[] { origFolder.toURI().toURL() });
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        ResourceLoader loader = new ResourceLoader(fakeTempFolder.getPath(), testLoader, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            loader.getResourceAsStream(testFile.getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            fail("Should have failed to cache resource");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertTrue(e.getMessage().endsWith("java.io.IOException: Not a directory"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Cache directory parent not writable.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testCacheDirParentNotWritable() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File testFile = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        tempFolder.setWritable(false, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            createResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                fileLoader.getResourceAsStream(testFile.getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                fail("Should have failed to cache resource");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                assertTrue(e.getMessage().endsWith("java.io.IOException: No such file or directory"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            tempFolder.setWritable(true);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Cache directory parent not readable. Cache still OK if writable at least.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testCacheDirParentNotReadable() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        tempFolder.setReadable(false, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            File testFile = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            String expected = getName();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            createResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertEquals(expected, readStreamAsString(fileLoader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            tempFolder.setReadable(true, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Resource not already in cache is cached.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testGetResourceNotCached() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File testFile = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        String expected = getName();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createJarResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("Unexpected content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                readStreamAsString(fileLoader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("Unexpected content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                readStreamAsString(jarLoader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Resource not cached", new File(cacheFolder, testFile.getName()).exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Resource not cached", new File(jarCacheFolder, testFile.getName()).exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Hash not cached", new File(cacheFolder, String.format(".%s.version", testFile.getName())).exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Hash not cached",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                new File(jarCacheFolder, String.format(".%s.version", testFile.getName())).exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Cached resource is served, even if original is updated.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testGetResourceCached() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File testFile = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        String expected = getName();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("Unexpected initial content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                readStreamAsString(fileLoader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        // Update the content
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        writeStringToFile(testFile, "updated" + getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("Unexpected cached content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                readStreamAsString(fileLoader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Updated cache content is served, but version is not updated. Original is
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * re-read and version updated if refreshCached called.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testGetResourceCachedUpdated() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File testFile = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        String expected = getName();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("Unexpected initial content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                readStreamAsString(fileLoader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        writeStringToFile(testFile, "updated" + getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        expected = "realupdate" + getName();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        ResourceLoader loader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        folder = this.cacheFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        loader = this.fileLoader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File version = new File(folder, String.format(".%s.version", testFile.getName()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        String versionValue = readStreamAsString(new FileInputStream(version));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File cached = new File(folder, testFile.getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        writeStringToFile(cached, expected);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("Unexpected updated cached content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                readStreamAsString(loader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Version not found", version.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Didn't expect cached copy to be re-versioned",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                versionValue.equals(readStreamAsString(new FileInputStream(version))));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        loader.refreshCache(testFile.getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        expected = "updated" + getName();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("Unexpected updated cached content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                readStreamAsString(loader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Version not found", version.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertFalse("Version not updated", versionValue.equals(readStreamAsString(new FileInputStream(version))));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testFileUpdates() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File testFile = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("version 1", readStreamAsString(fileLoader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        fileLoader.refreshCache(testFile.getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("version 2", readStreamAsString(fileLoader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Original is re-read if cached content is deleted, but version is not
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * updated. Note, that this test is unable to exercise the JAR loader
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * because refreshing JAR contents is broken, but it is loosely specified
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * and is only required during development.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testGetResourceCachedMissing() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File testFile = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        String expected = getName();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        ResourceLoader loader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        loader = fileLoader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        folder = this.cacheFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("Unexpected initial content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                readStreamAsString(loader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File cached = new File(folder, testFile.getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File version = new File(folder, String.format(".%s.version", testFile.getName()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        String versionValue = readStreamAsString(new FileInputStream(version));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Cached copy not found", cached.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        expected = "updated" + getName();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        cached.delete();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertFalse("Failed to delete cached copy", cached.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertEquals("Unexpected updated content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                readStreamAsString(loader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Failed to re-cache file", cached.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertTrue("Version not found", version.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        assertFalse("Version not updated", versionValue.equals(readStreamAsString(new FileInputStream(version))));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Served resource is not affected if version is deleted. Version is
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * recomputed on refreshCache.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:    public void testGetResourceCachedMissingVersion() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File testFile = makeTestFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        String expected = getName();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createJarResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        for (int pass = 0; pass < 2; pass++) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            ResourceLoader loader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            if (pass == 0) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                loader = fileLoader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                folder = this.cacheFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                loader = jarLoader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                folder = jarCacheFolder;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertEquals("Unexpected initial content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                    readStreamAsString(loader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            File version = new File(folder, String.format(".%s.version", testFile.getName()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            String versionValue = readStreamAsString(new FileInputStream(version));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertTrue("Cached version not found", version.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertFalse("Failed to delete cached version", version.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertEquals("Unexpected cached content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                    readStreamAsString(loader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertTrue("Cached copy not found", new File(folder, testFile.getName()).exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertFalse("Didn't expect cached copy to be re-versioned", version.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            loader.refreshCache(testFile.getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertEquals("Unexpected updated cached content", expected,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                    readStreamAsString(loader.getResourceAsStream(testFile.getName())));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertTrue("Version not found", version.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertTrue("Version not restored", versionValue.equals(readStreamAsString(new FileInputStream(version))));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * Verify that a request for a directory, regardless of it return code, does
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * not cause subsequent requests for elements beneath that directory to
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:     * fail.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        // create a file tree consisting of <origFolder>/foo/bar
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        File bar = new File(foo, "bar");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        bar.createNewFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        mu.createNewFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        writeStringToFile(bar, "Hi, my name is bar.");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        createJarResourceLoader(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        ResourceLoader[] loaders = new ResourceLoader[] { fileLoader, jarLoader };
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:        for (ResourceLoader loader : loaders) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            // Load foo using both forms 'foo' and 'foo/'
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                loader.getResource("foo");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            } catch (Exception e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:                loader.getResource("foo/");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            } catch (Exception e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            // Sanity check our setup: we should be able to read mu regardless.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertEquals("moo", readStreamAsString(loader.getResourceAsStream("mu")));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            // Now check the regression case.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            URL loadedBar = loader.getResource("foo/bar");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertNotNull("The loading of /foo should not block the subsequent load of /foo/bar", loadedBar);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            String barValue = readStreamAsString(loadedBar.openStream());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/ResourceLoaderTest.java:            assertEquals("Hi, my name is bar.", barValue);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java: * Copyright, 2013, salesforce.com All Rights Reserved Company Confidential
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:package org.ruauframework.util.resource;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:import java.io.ByteArrayInputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:import java.io.InputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:import java.io.UnsupportedEncodingException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:/** Test class for the from-jars-only variation of an RuueJavascriptGroup */
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:public class CompiledGroupTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:    public static final String GROUP_NAME = "test-group";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:    public static final String SAVE_FILE = "test-group.properties";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:    private static class MockAJRG extends CompiledGroup {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        public MockAJRG(String name, String saveFileName, String hash, String lastMod) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            super(name, saveFileName);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            StringBuilder builder = new StringBuilder("# Header text\n");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            if (hash != null) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                builder.append(CompiledGroup.UUID_PROPERTY);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                builder.append("=");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                builder.append(hash);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                builder.append("\n");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            if (lastMod != null) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                builder.append(CompiledGroup.LASTMOD_PROPERTY);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                builder.append("=");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                builder.append(lastMod);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                builder.append("\n");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        protected InputStream getPropertyStream() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                return new ByteArrayInputStream(props.getBytes(VERSION_CHARSET));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            } catch (UnsupportedEncodingException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                throw new UnsupportedOperationException(VERSION_CHARSET + " should be supported!", e);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        CompiledGroup ajrg = new MockAJRG(GROUP_NAME, SAVE_FILE, "aMockHashValue", "23456789");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        assertEquals("aMockHashValue", ajrg.getGroupHash().toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        assertEquals(23456789L, ajrg.getLastMod());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                protected InputStream getPropertyStream() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            compiled.getGroupHash();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            fail("Exception expected for null file stream");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getMessage().startsWith("Can't find"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getMessage().contains(SAVE_FILE));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:    public void testThrowsWithBadLastMod() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            CompiledGroup compiled = new MockAJRG(GROUP_NAME, SAVE_FILE, "aMockHashValue", "BadNumberFormat");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            compiled.getLastMod();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            fail("Should have exception for bad number format");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        } catch (NumberFormatException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getMessage().contains("BadNumberFormat"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:    public void testThrowsWithoutHash() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            compiled.getGroupHash();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            fail("Exception expected for null hash");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getMessage().startsWith("Can't parse "));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getMessage().contains(SAVE_FILE));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            compiled.getGroupHash();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            fail("Exception expected for empty hash string");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getMessage().startsWith("Can't parse "));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getMessage().contains(SAVE_FILE));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                protected InputStream getPropertyStream() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                    return new InputStream() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                        public int read() throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:                            throw new IOException("expected simulated read error");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            compiled.getGroupHash();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            fail("IOException expected");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:        } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getMessage().startsWith("Can't parse "));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getMessage().contains(SAVE_FILE));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/resource/CompiledGroupTest.java:            assertTrue(e.getCause() instanceof IOException);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:package org.ruauframework.util.javascript;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:import java.io.File;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:import java.io.FileNotFoundException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:import java.io.FileWriter;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:import java.io.Writer;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:import org.ruauframework.util.IOUtil;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:import org.ruauframework.util.text.Hash;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * Tests for CommonJavascriptGroupImpl class {@link CommonJavascriptGroupImpl}. This class has implementation of some
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * common functionality required for grouping javascript files in modules. The current class has some tests for
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java: * verifying the implementation of javascript grouping functionality.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:public class CommonJavascriptGroupImplTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:    public CommonJavascriptGroupImplTest(String name) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        super(name);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:     * Test basic initialization and other exposed public methods of CommonJavascriptGroupImpl.java.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:    public void testBasicInitialization() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        getResourceFile("/testdata/javascript/head.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        getResourceFile("/testdata/javascript/JSfilterValidation.junk.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        File file = getResourceFile("/testdata/javascript/dummyDir/innerSibling.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        CommonJavascriptGroupImpl localCJG = new TestCommonJavascriptGroupImpl("test", file.getParentFile()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:                .getParentFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        assertEquals("Javascript Group name not set on the group object", localCJG.getName(), "test");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        // Verify Initialization
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        verifyCleanState(localCJG);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        localCJG.clear();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        verifyCleanState(localCJG);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        String validJSFile = "head.js";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        String validJSDirectory = "dummyDir";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        String invalidJSFile = "JSfilterValidation.junk.js";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        String invalidJSDirectory = "javascriptBoogaBoo";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        // Add a directory to the group
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        localCJG.addDirectory(validJSDirectory);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        assertTrue("Directories should be accepted for Javascript Groups", localCJG.getFiles().size() == 1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        // There should only be one js file and that should be innersibling.js
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        assertTrue("", localCJG.getFiles().iterator().next().getName().equals(file.getName()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        localCJG.clear();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            localCJG.addDirectory(validJSFile);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            fail("Add Directory should not be accepting files");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        } catch (FileNotFoundException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            File absoluteFile = new File(file.getParentFile().getParentFile(), validJSFile);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertEquals("Directory did not exist: " + absoluteFile.getPath(), e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            localCJG.addDirectory(invalidJSDirectory);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            fail("Add Directory should not be accepting non existing directories");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        } catch (FileNotFoundException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            File absoluteFile = new File(file.getParentFile().getParentFile(), invalidJSDirectory);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertEquals("Directory did not exist: " + absoluteFile.getPath(), e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        // Add an invalid file but one that ends in .js
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        localCJG.addFile(invalidJSFile);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        assertFalse("Only valid Javascript files can be accepted", localCJG.getFiles().size() == 0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        // Add a valid javascript file
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        localCJG.addFile(validJSFile);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        File[] list = localCJG.getFiles().toArray(new File[localCJG.getFiles().size()]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        assertFalse("Addition of a valid javascript file failed",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:                list.length == 1 || list[0].getName().equals("head.js"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        localCJG.clear();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            localCJG.addFile(validJSDirectory);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            fail("Add File should not be accepting files");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        } catch (FileNotFoundException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertTrue("Add File function failed because of an unexpected error message",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:                    e.getMessage().startsWith("File did not exist or was not a valid, acceptable file: "));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            localCJG.addFile(invalidJSDirectory);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            fail("Add File should not be accepting non existing directories");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        } catch (FileNotFoundException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertTrue("Add File function failed because of an unexpected error message",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:                    e.getMessage().startsWith("File did not exist or was not a valid, acceptable file: "));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        // Create a new file and add it to the Group and verify that the last
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        // mod date has been changed.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        localCJG.clear();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        String newFileName = new Long(System.currentTimeMillis()).toString() + ".js";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        File newFile = new File(localCJG.getRoot(), newFileName);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        localCJG.addFile(newFileName);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertTrue("Last modified time of javascript group not set",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:                    localCJG.getLastMod() == newFile.lastModified());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:     * Test that group hash is recalculated only during certain actions. We test with recorded hash values because the
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:     * value should only depend on the file content which is defined in the test and shouldn't depend on file names or
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:     * other external factors.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:    public void testGetGroupHash() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        File newFile = getResourceFile("/testdata/javascript/testGetGroupHash.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        newFile.getParentFile().mkdirs();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        Writer writer = new FileWriter(newFile, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            writer.append("var simple='hi';");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        File nestedFile = new File(newFile.getParentFile(), "testDir/testGetGroupHashNested.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        nestedFile.getParentFile().mkdir();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        File dest = File.createTempFile(getName(), "");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            TestCommonJavascriptGroupImpl test = new TestCommonJavascriptGroupImpl("test", newFile.getParentFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            Hash hash = test.getGroupHash();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertEquals("Unexpected hash", "1B2M2Y8AsgTpgAmY7PhCfg", hash.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            // Need this sleep so the last modified time changes, otherwise the
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            // test runs too fast and the test fails
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            // because the last modified time was not updated by the OS
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            Thread.sleep(2000);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            // Update a js file which is part of the group
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            writer = new FileWriter(newFile, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            writer.append("var simple='bye';");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            // hash value is retained after update, but recalculated when adding
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            hash = test.getGroupHash();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertEquals("Hash shouldn't be updated without a manual reset", "1B2M2Y8AsgTpgAmY7PhCfg", hash.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            // just add same file to trigger
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            test.addFile("testGetGroupHash.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            hash = test.getGroupHash();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertEquals("Hash should have been updated after file added to group", "4EZCacmVcFMwWJRaluefgw",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:                    hash.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            // hash value doesn't change when adding empty directory to group
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            test.addDirectory("testDir");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            hash = test.getGroupHash();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertEquals("Hash should not have changed after adding empty directory to group",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:                    "4EZCacmVcFMwWJRaluefgw", hash.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            // hash value should change when adding non-empty directory to group
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            writer = new FileWriter(nestedFile, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:                writer.append("var simple='sayonara';");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            test.addDirectory("testDir");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            hash = test.getGroupHash();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            assertEquals("Hash should have been updated after adding non-empty directory to group",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:                    "CUadD1uu9gF9HA_AFPb0Cg", hash.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            IOUtil.delete(nestedFile.getParentFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:     * Helper Function, add more stuff as CommonJavascriptGroup gets Fleshed out
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:    public void verifyCleanState(CommonJavascriptGroupImpl pCJG) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        assertTrue("Last modified date not initialized to -1", pCJG.getLastMod() == -1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        assertTrue("javascript Group should not be initialized with a list of files", pCJG.getFiles().size() == 0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        assertTrue("Hash should not be unset", pCJG.getGroupHash().isSet());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        assertTrue("Hash should not be empty", pCJG.getGroupHash().toString().length() > 0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:    private static class TestCommonJavascriptGroupImpl extends CommonJavascriptGroupImpl {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        public TestCommonJavascriptGroupImpl(String s, File f) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        public void generate(File destRoot, boolean doValidation) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        public boolean isStale() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:            return false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        public void parse() throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/CommonJavascriptGroupImplTest.java:        public void regenerate(File destRoot) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:package org.ruauframework.util.javascript.directive;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:import java.util.HashSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java: * Automation to verify JavascriptGeneratorMode class.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:public class JavascriptGeneratorModeTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:     * Verify that all modes have a unique suffix. Javascript generation for
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:     * various modes is parallelized. If two modes use the same suffix,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:     * generation can cause exceptions.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:        HashSet<String> suffixes = new HashSet<>();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:        for (JavascriptGeneratorMode m : JavascriptGeneratorMode.values()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:            if (suffixes.contains(m.getSuffix())) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:                fail("JavascriptGeneratorMode: Two modes should not use same suffix. Reused suffix is :"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorModeTest.java:            suffixes.add(m.getSuffix());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java:package org.ruauframework.util.javascript.directive;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java:import java.io.File;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java:import java.util.EnumSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java:import com.google.common.collect.ImmutableList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java:public class TestGroup extends DirectiveBasedJavascriptGroup {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java:    public TestGroup(File start) throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java:        super("testerify", start.getParentFile(), start.getName(), ImmutableList.<DirectiveType<?>> of(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java:                DirectiveFactory.getMockDirective(), DirectiveFactory.getMultiLineMockDirectiveType()), EnumSet.of(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/TestGroup.java:                JavascriptGeneratorMode.MOCK1, JavascriptGeneratorMode.MOCK2));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:package org.ruauframework.util.javascript.directive;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import java.io.File;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import java.util.ArrayList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import java.util.EnumSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import java.util.LinkedList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import org.ruauframework.util.javascript.JavascriptProcessingError;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import org.ruauframework.util.javascript.JavascriptValidator;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import org.ruauframework.util.javascript.directive.impl.IncludeDirectiveType;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:import com.google.common.collect.ImmutableList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * This class is to test the DirectiveParser class {@link DirectiveParser}.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * DirectiveParser class parses specified files for directives. Directives are
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * specified with //# as prefix. The list of directives, root node of the file
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * system and javascript generation modes are specified in an
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java: * DirectiveBasedJavascriptGroup object.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:public class DirectiveParserTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:    public DirectiveParserTest(String name) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        super(name);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * Try to pass an empty set of directive. Ideally the test should return
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * just the contents of the file after stripping of all the lines with
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * directives (lines starting with //#)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/head.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), new ArrayList<DirectiveType<?>>(), EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.PRODUCTION), ".js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * "end" is a reserved DirectiveType label. This must not be used by other
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/head.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getEndDirective()), EnumSet.of(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                        JavascriptGeneratorMode.DEVELOPMENT, JavascriptGeneratorMode.TESTING,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                        JavascriptGeneratorMode.PRODUCTION));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:            dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:            fail("Passing an END directive should have thrown an exception");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:            assertTrue("The Javascript Processor failed for some unkown reason",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                    e.getMessage().equals("cannot create a directive with the reserved label \"end\""));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * Duplicate directive labels must not be accepted
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/head.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMockDirective(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                        DirectiveFactory.getDummyDirectiveType(), DirectiveFactory.getMockDirective()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:            dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:            fail("Passing an directives with duplicate labels should have failed");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        } catch (RuntimeException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:            assertTrue("The Javascript Processor failed for some unkown reason",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                    e.getMessage().startsWith("Mutliple directives registered for label"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * Tests for the parse() method in DirectiveParser
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * What if the javascript that is being processed has a standard
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * DirectiveType but the Javascript Group does not have a reference to that
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:    public void testMissingDirectiveSpecification() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/testMissingDirectiveSpecification.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMockDirective()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        List<JavascriptProcessingError> error = dp.validate(new JavascriptValidator());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("Should have thrown one error for unrecognized directive", error.size() == 1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * Negative test: Multi line directive without an END directive
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/testMultilineWithoutEndDirective.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMultiLineMockDirectiveType()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        List<JavascriptProcessingError> error = dp.validate(new JavascriptValidator());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("Should have thrown an error for not closing a multiline directive", error.size() == 1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("The only error should have been for an missing end directive.", error.listIterator().next()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                .getMessage().equals("no end found for directive"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * Negative test: Multi line directive with no opening directive statement
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/testJustEndDirective.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMultiLineMockDirectiveType()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        List<JavascriptProcessingError> error = dp.validate(new JavascriptValidator());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                "Should have thrown an error for having just an end directive without a matching opening multiline directive",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("The only error should have been for an unmatched end directive.", error.listIterator().next()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                .getMessage().equals("unmatched end directive"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * Negative test: A nested directive is not supported yet. So an error
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * should be flagged when such directives are encountered.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/testNestedDirective.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMultiLineMockDirectiveType(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                        new IncludeDirectiveType()), EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        List<JavascriptProcessingError> error = dp.validate(new JavascriptValidator());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("Should have thrown an error for encoutering a multi-line directive", error.size() == 1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("The only error should have been for an unmatched end directive.", error.listIterator().next()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                .getMessage().equals("nested directive found, ignored"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * Positive test: Test a multiline directive by gold filing the contents
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * passed to the directive object
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/testMultilineDirective.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMultiLineMockDirectiveType()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("Should have created a MultiLineMockDirective after parsing the file", multiLine.getClass()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                .getName().contains("MultiLineMockDirective"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        // asked to generateOutput
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        goldFileText(multiLine.generateOutput(JavascriptGeneratorMode.TESTING), ".js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * Tests for the generate() method in DirectiveParser
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:    public void testCallGenerateBeforeParse() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/testMultilineDirective.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMultiLineMockDirectiveType()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:            dp.generate(JavascriptGeneratorMode.TESTING);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:            fail("Parser should generate output only after parsing the files");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        } catch (Exception expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:            // Should say generate cannot be called before parsing the group
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * Gold filing the output generated by different kinds of generation modes
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:    public void testAllKindsOfDirectiveGenerate() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        File file = getResourceFile("/testdata/javascript/testAllKindsOfDirectiveGenerate.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMultiLineMockDirectiveType(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:                        DirectiveFactory.getMockDirective(), DirectiveFactory.getDummyDirectiveType()), null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.TESTING), "_test.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.AUTOTESTING), "_auto.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        // The content generated in PRODUCTION mode still has comments because
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        // the DirectiveParser doesn't really
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        // Compression is handled in DirectivebasedJavascriptGroup
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.PRODUCTION), "_prod.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.DEVELOPMENT), "_dev.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("Should not have found any error while processing this file", dp.validate(new JavascriptValidator())
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:    public void testParser() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        TestGroup g = new TestGroup(getResourceFile("/testdata/directive/testParser.js"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser parser = new DirectiveParser(g, g.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        parser.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        LinkedList<Directive> directives = parser.directives;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertEquals("didn't found the right number of directives", 2, directives.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        // directives are in reverse order
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        Directive last = directives.get(0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertEquals(last.getLine(), "{\"modes\": [\"MOCK2\"]}");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue(last.hasOutput(JavascriptGeneratorMode.MOCK2));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertFalse(last.hasOutput(JavascriptGeneratorMode.MOCK1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertFalse(last.hasOutput(JavascriptGeneratorMode.PRODUCTION));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertEquals(first.getLine(), "{\"modes\": [\"MOCK1\"]}");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue(first.hasOutput(JavascriptGeneratorMode.MOCK1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertFalse(first.hasOutput(JavascriptGeneratorMode.MOCK2));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertFalse(first.hasOutput(JavascriptGeneratorMode.PRODUCTION));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        List<JavascriptProcessingError> errors = parser.validate(new JavascriptValidator());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("should not have been any validation errors", errors.isEmpty());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:     * tests that a directive can begin with // #
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:    public void testSpaceInDirective() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        TestGroup g = new TestGroup(getResourceFile("/testdata/javascript/testSpaces.js"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        DirectiveParser parser = new DirectiveParser(g, g.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        parser.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        LinkedList<Directive> directives = parser.directives;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertEquals("didn't found the right number of directives", 3, directives.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        // directives are in reverse order
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue(first.hasOutput(JavascriptGeneratorMode.MOCK2));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertFalse(first.hasOutput(JavascriptGeneratorMode.MOCK1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertEquals(first.getLine(), "{\"modes\": [\"MOCK2\"], \"blah\": \"my\"}");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue(second.hasOutput(JavascriptGeneratorMode.MOCK1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertFalse(second.hasOutput(JavascriptGeneratorMode.MOCK2));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertEquals(second.getLine(), "{\"modes\": [\"MOCK1\"], \"blah\": \"spatula\"}");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue(third.isMultiline());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        List<JavascriptProcessingError> errors = parser.validate(new JavascriptValidator());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveParserTest.java:        assertTrue("should not have been any validation errors", errors.isEmpty());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:package org.ruauframework.util.javascript.directive.impl;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import java.io.File;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import java.util.EnumSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import org.ruauframework.util.javascript.directive.Directive;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import org.ruauframework.util.javascript.directive.DirectiveBasedJavascriptGroup;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import org.ruauframework.util.javascript.directive.DirectiveParser;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import org.ruauframework.util.javascript.directive.DirectiveType;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import org.ruauframework.util.javascript.directive.DirectiveTypes;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import org.ruauframework.util.javascript.directive.JavascriptGeneratorMode;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:import com.google.common.collect.ImmutableList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:public class IncludeDirectiveTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * Test basic initialization.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:    public void testIncludeDirectiveBasicInitialization() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        assertTrue("Include Directive type should be labled as 'include'", directiveTypeObj.getLabel()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                .equals("include"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        assertFalse("Include directive is a multiline directive", directiveObj.isMultiline());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * Test config parameters passed for Include directive
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        String[] config = { "{\"modes\": [\"TESTING\"]}", "reallyconkyinclude" };
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            fail("Should not have continued processing the include directive without a value for path");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        } catch (AssertionError expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            assertTrue(expected.getMessage().equals("Path is required in include directive config"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            // just to avoid the "local variable never read" error
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            assertTrue(id == null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            File file = getResourceFile("/testdata/javascript/head.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                    file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveTypes.includeType),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                    EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            fail("should have failed because 'reallyconkyinclude' is an invalid javascript file to include");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        } catch (IOException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            // Expected the Javascript group to throw an error while adding an
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            // invalid file
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * Cannot have this test in autobuild. If it fails it will hose the whole
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * autobuild. But a bug has been filed for this.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * https://gus.soma.salesforce.com/a0790000000DQ06AAG public void
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * testCyclicInclude() throws Exception{ DirectiveBasedJavascriptGroup jg =
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * new DirectiveBasedJavascriptGroup( "testDummy", new
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * File(SettingsTestUtil.getTestdataDir()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * "javascript/includeDirective/cyclicInclude1.js", false,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * ImmutableList.of(DirectiveTypes.includeType),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * EnumSet.of(JavascriptGeneratorMode.TESTING)); DirectiveParser dp = new
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * DirectiveParser (jg, jg.getStartFile()); try{ dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * fail("Should not have processed a cyclic INCLUDE directive"); }catch(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * assertTrue("The Javascript Processor failed for some unkown reason"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * ,e.getMessage().startsWith("Cyclic Include directives found")); } }
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * https://gus.soma.salesforce.com/a0790000000DQ3AAAW Test common inclusion.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * What if the same javascript file is included twice. Ideally each included
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * javascript should be parsed and processed only once.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        getResourceFile("/testdata/javascript/includeDirective/testCommonInclude.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        getResourceFile("/testdata/javascript/includeDirective/testCommonInclude_inner1.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        getResourceFile("/testdata/javascript/includeDirective/testCommonInclude_inner2.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        getResourceFile("/testdata/javascript/includeDirective/testCommonInclude_commonstuff.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                getResourceFile("/testdata/"), "javascript/includeDirective/testCommonInclude.js",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                ImmutableList.<DirectiveType<?>> of(DirectiveTypes.includeType),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.TESTING), ".js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * Include some non-existing file. Really this is handled by
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * DirectivebasedJavascriptGroup. But having this test here only doubles the
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        File file = getResourceFile("/testdata/javascript/includeDirective/testIncludeNonExistingFile.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveTypes.includeType),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            fail("Should have failed processing a non-existing file");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        } catch (IOException expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:            assertTrue("Add File function failed because of an unexpected error message",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                expected.getMessage().startsWith("File did not exist or was not a valid, acceptable file"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:     * Positive test case for INCLUDE directive
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        getResourceFile("/testdata/javascript/includeDirective/testIncludeDirective.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        getResourceFile("/testdata/javascript/includeDirective/testIncludeDirective1.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        getResourceFile("/testdata/javascript/includeDirective/testIncludeDirective2.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        getResourceFile("/testdata/javascript/includeDirective/nestedInclude/testIncludeDirective3.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                getResourceFile("/testdata/"), "javascript/includeDirective/testIncludeDirective.js",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                ImmutableList.<DirectiveType<?>> of(DirectiveTypes.includeType, DirectiveTypes.ifType),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.TESTING), "_test.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IncludeDirectiveTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.AUTOTESTING), "_auto.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:package org.ruauframework.util.javascript.directive.impl;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:import java.util.EnumSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:import org.ruauframework.util.javascript.JavascriptProcessingError;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:import org.ruauframework.util.javascript.JavascriptValidator;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:import org.ruauframework.util.javascript.directive.DirectiveBasedJavascriptGroup;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:import org.ruauframework.util.javascript.directive.JavascriptGeneratorMode;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * receive the configuration for a directive as a JSON string. This class is to
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java: * test the basic implementation in DirectiveImpl abstract class.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:public class DirectiveImplTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:    public DirectiveImplTest(String name) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        super(name);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:     * 1. Testing basic initialization stuff of DirectiveImpl 2. Tests that
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:     * content cannot be set for a MultiLine Directive
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertFalse("The base DirectImpl directive should not be multiline", d.isMultiline());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertEquals("Setting the right offset value for the Directive failed", 56, d.getOffset());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertEquals("Passing the right Configuration for the directive failed", s, d.getLine());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertEquals("Expected only 1 generator mode", 1, d.getModes().size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue("Didnt find the right mode", d.getModes().contains(JavascriptGeneratorMode.DEVELOPMENT));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue("Didn't register the specified generation mode", d.hasOutput(JavascriptGeneratorMode.DEVELOPMENT));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:            d.setContent("blah");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:            fail("Shouldn't be here: Content cannot be set for non-multiline directives");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        } catch (UnsupportedOperationException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:            assertTrue("Not a multiline directive".equals(e.getMessage()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:            fail("Shouldn't be here: Content cannot be got for non-multiline directives");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        } catch (UnsupportedOperationException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:            assertTrue("Not a multiline directive".equals(e.getMessage()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:     * Test various combinations of mode string that could be sent for
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:     * Constructing a Directive {@link DirectiveImpl#DirectiveImpl(int, String)}
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:    public void testCombinationsOfConfigs() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        String[] sample = { "literal", "{\"mode\": [\"MOCK2\"], \"blah\": \"howdy doody\"}",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                "{\"modes\":, \"blah\": \"howdy doody\"}", "{\"modes\": [], \"blah\": \"howdy doody\"}",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                "{\"modes\": [\"blah\"], \"blah\": \"howdy doody\"}",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                "{\"modes\": [\"MOCK1\", \"MOCK2\"], \"blah\": \"son of a diddly\"}",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                "{\"modes\": [\"MOCK2\"], \"blah\": \"howdy doody\"}",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                "{\"blah\": \"howdy doody\", \"modes\": [\"MOCK2\"], \"blah\": \"son of a diddly\" }",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                "{\"modes\" : [\"TESTING\",\"DEVELOPMENT\"],  \"blah\": \"howdy doody}" };
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        // Literal
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        d = new TestDirective(4, sample[0]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue("Unstructured directives should not be processed", d.getConfig() == null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue("When no mode is specified, all modes should be used by default",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                d.getModes().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        // Incorrect key "mode" instead of "modes"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        d = new TestDirective(4, sample[1]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue("When no mode is specified, all modes should be used by default",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                d.getModes().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * TODO: https://gus.soma.salesforce.com/a0790000000DOV9AAO //Blank mode
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * value d = new TestDirective(4,sample[2]); assertTrue(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * "When no mode is specified, all modes should be used by default"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * ,d.getModes ().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        // Blank key value for Mode
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * d = new TestDirective(4,sample[3]); assertTrue(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * "When no mode is specified, all modes should be used by default"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * ,d.getModes().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * TODO: Non existant mode should be checked Non existant mode
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * java.lang.IllegalArgumentException: No enum const class
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * lib.javascript.directive.JavascriptGeneratorMode.blah d = new
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * TestDirective(4,sample[4]); assertTrue(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * "When no mode is specified, all modes should be used by default"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * ,d.getModes().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        d = new TestDirective(4, sample[5]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue(d.getConfig().toString().equals("{modes=[MOCK1, MOCK2], blah=son of a diddly}"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        d = new TestDirective(4, sample[6]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue(d.getConfig().toString().equals("{modes=[MOCK2], blah=howdy doody}"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        // 1. that mode can be specified in the middle of a config line
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        // 2. When two values are specified for the same key value, the right
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        // most assignment will be used
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        d = new TestDirective(4, sample[7]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue(d.getConfig().toString().equals("{modes=[MOCK2], blah=son of a diddly}"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        d = new TestDirective(4, sample[8]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue(d.getModes().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        d = new TestDirective(4, sample[9]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue(d.getModes().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue("When an empty string is provided for mode, all modes should be used by default", d.getModes()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                .equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue("When a null string is provided for mode, all modes should be used by default",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                d.getModes().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:     * Test excluseModes specification in directive.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        String[] sample = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                // 0: Positive case: Simple excludes mode
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                "{\"excludeModes\": [\"MOCK2\"], \"blah\": \"howdy doody\"}",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                // 1: Negative case: Both excludes and includes
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                "{\"excludeModes\" : [\"foobar\"]}", };
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        d = new TestDirective(4, sample[0]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        EnumSet<JavascriptGeneratorMode> expectedModes = EnumSet.allOf(JavascriptGeneratorMode.class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        expectedModes.remove(JavascriptGeneratorMode.MOCK2);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue("Failed to Exclude specified mode", d.getModes().equals(expectedModes));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:            d = new TestDirective(4, sample[1]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:            fail("Should not be allowed to use 'excludesModes' and 'modes' in a directive");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        } catch (UnsupportedOperationException expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        d = new TestDirective(4, sample[2]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        assertTrue("All modes should be included when 'excludeModes' specifies a empty config.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:                d.getModes().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * TODO: W-749502 Non existant mode should be checked Non existant mode
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * java.lang.IllegalArgumentException: No enum const class
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * lib.javascript.directive.JavascriptGeneratorMode.blah d = new
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * TestDirective(4, sample[4]); assertTrue(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * "All modes should be included when 'excludeModes' specifies garbage ."
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:         * , d.getModes().equals(EnumSet.allOf(JavascriptGeneratorMode.class)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:    private static class TestDirective extends DirectiveImpl {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        public String generateOutput(JavascriptGeneratorMode mode) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        public void processDirective(DirectiveBasedJavascriptGroup parser) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DirectiveImplTest.java:        public List<JavascriptProcessingError> validate(JavascriptValidator validator) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:package org.ruauframework.util.javascript.directive.impl;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import java.io.File;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import java.util.EnumSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import org.ruauframework.util.javascript.directive.Directive;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import org.ruauframework.util.javascript.directive.DirectiveBasedJavascriptGroup;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import org.ruauframework.util.javascript.directive.DirectiveParser;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import org.ruauframework.util.javascript.directive.DirectiveType;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import org.ruauframework.util.javascript.directive.DirectiveTypes;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import org.ruauframework.util.javascript.directive.JavascriptGeneratorMode;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:import com.google.common.collect.ImmutableList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:public class IfDirectiveTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:    public IfDirectiveTest(String name) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        super(name);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:     * Test basic initialization.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:    public void testIfDirectiveBasicInitialization() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        assertTrue("If Directive type should be labled as 'if'", directiveTypeObj.getLabel().equals("if"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        assertTrue("If directive is a multiline directive", directiveObj.isMultiline());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        String content = "Write anything you want and this will just throw is back. But it should throw back the exact same thing";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        // Regardless of the javascriptGenerator mode, an IF directive just
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        // spits out its contents. Hence using null as
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        assertTrue("If directive should just spit out whatever was given to it", directiveObj.generateOutput(null)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:                .equals(content));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:     * Test basic javascript generation with IF directives
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        File file = getResourceFile("/testdata/javascript/testIfDirective_positive.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveTypes.ifType),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        DirectiveParser dp = new DirectiveParser(jg, jg.getStartFile());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        dp.parseFile();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.TESTING), "_test.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/IfDirectiveTest.java:        goldFileText(dp.generate(JavascriptGeneratorMode.PRODUCTION), "_prod.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:package org.ruauframework.util.javascript.directive.impl;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:import java.util.Set;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:import org.ruauframework.util.javascript.directive.Directive;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:import org.ruauframework.util.javascript.directive.JavascriptGeneratorMode;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:public class DebuggerDirectiveTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:     * Test basic initialization.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:    public void testDebuggerDirectiveTypeBasicInitialization() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        assertEquals("debugger", d.getLabel());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        assertFalse("Debugger directive should be a multiline directive.", directiveObj.isMultiline());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:     * Test javascript generation modes specification for debuggerDirective.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:    public void testJavascriptModesForDebuggerDirectiveType() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        Set<JavascriptGeneratorMode> modes = d.getModes();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        assertEquals("Directive code specified just 2 modes but DebuggerDirective has more or less.", 2, modes.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        assertTrue("Development mode missing.", modes.contains(JavascriptGeneratorMode.DEVELOPMENT));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        assertTrue("Testing mode missing.", modes.contains(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:     * Test default javascript generation mode in debuggerDirective.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:    public void testDefaultJavascriptModeForDebuggerDirectiveType() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        Set<JavascriptGeneratorMode> modes = d.getModes();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        assertEquals(4, modes.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        assertTrue("Dev mode should be included by default.", modes.contains(JavascriptGeneratorMode.DEVELOPMENT));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        assertTrue("TestingDebug mode should be included by default.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:                modes.contains(JavascriptGeneratorMode.TESTINGDEBUG));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:        assertTrue("AutoDebug mode should be included by default.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/impl/DebuggerDirectiveTest.java:                modes.contains(JavascriptGeneratorMode.AUTOTESTINGDEBUG));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:package org.ruauframework.util.javascript.directive;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:import org.ruauframework.util.javascript.JavascriptProcessingError;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:import org.ruauframework.util.javascript.JavascriptValidator;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:import org.ruauframework.util.javascript.directive.impl.DirectiveImpl;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * This class acts as a repository of Directives used for testing the Directive
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java: * based javascript group processing.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:public class DirectiveFactory {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    private static class EndDirective extends DirectiveImpl {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public String generateOutput(JavascriptGeneratorMode mode) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:            return JavascriptGeneratorMode.TESTING.toString() + "\n";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public void processDirective(DirectiveBasedJavascriptGroup parser) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public List<JavascriptProcessingError> validate(JavascriptValidator validator) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    private static class EndDirectiveType implements DirectiveType<EndDirective> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public String getLabel() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:     * A mock directive which just replaces the word "blah" with its key. The
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:     * (key, value) pair is provided as part of the directive configuration in
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:     * the source javascript file.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    private static class MockDirective extends DirectiveImpl {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public String generateOutput(JavascriptGeneratorMode mode) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:            Object o = getConfig().get("blah");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public void processDirective(DirectiveBasedJavascriptGroup parser) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public List<JavascriptProcessingError> validate(JavascriptValidator validator) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    private static class MockDirectiveType implements DirectiveType<MockDirective> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public String getLabel() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:     * A dummy directive which just generates the word "TESTINGdummy" in all
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    private static class DummyDirective extends DirectiveImpl {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public String generateOutput(JavascriptGeneratorMode mode) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:            return "\n" + JavascriptGeneratorMode.TESTING.toString() + "dummy\n";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public void processDirective(DirectiveBasedJavascriptGroup parser) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public List<JavascriptProcessingError> validate(JavascriptValidator validator) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    private static class DummyDirectiveType implements DirectiveType<DummyDirective> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public String getLabel() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:     * A multiline mock directive. In testing mode, this just generated the
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:     * contents as is from the directive specified in the source js file. In all
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    private static class MultiLineMockDirective extends DirectiveImpl {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        // Just throws the content as is appears in the source code
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        // Just a helper
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public String generateOutput(JavascriptGeneratorMode mode) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:            if (mode.equals(JavascriptGeneratorMode.TESTING)) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:                return "/* generating in: " + mode.name() + "*/\n";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public void processDirective(DirectiveBasedJavascriptGroup parser) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public List<JavascriptProcessingError> validate(JavascriptValidator validator) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public boolean isMultiline() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    private static class MultiLineMockDirectiveType implements DirectiveType<MultiLineMockDirective> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:        public String getLabel() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    public static DirectiveType<?> getEndDirective() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    public static DirectiveType<?> getMockDirective() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    public static DirectiveType<?> getDummyDirectiveType() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveFactory.java:    public static DirectiveType<?> getMultiLineMockDirectiveType() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:package org.ruauframework.util.javascript.directive;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:public class JavascriptGeneratorTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:    public JavascriptGeneratorTest(String name) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:        super(name);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:    public void testGeneration() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:        TestGroup g = new TestGroup(getResourceFile("/testdata/directive/testGeneration.js"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:        g.parse();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:        goldFileText(g.buildContent(JavascriptGeneratorMode.MOCK1), "_mock1.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/JavascriptGeneratorTest.java:        goldFileText(g.buildContent(JavascriptGeneratorMode.MOCK2), "_mock2.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:package org.ruauframework.util.javascript.directive;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:import java.io.BufferedReader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:import java.io.File;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:import java.io.FileReader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:import java.io.FileWriter;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:import java.io.Writer;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:import java.util.EnumSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:import com.google.common.collect.ImmutableList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * Automation for verifying the implementation in DirectiveBasedJavascriptGroupTest
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * {@link DirectiveBasedJavascriptGroup}. Javascript files can be grouped in modules. This helps in keeping the
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java: * javascript modularized.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:public class DirectiveBasedJavascriptGroupTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:    public DirectiveBasedJavascriptGroupTest(String name) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        super(name);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:     * Should not be able to specify a Directory as start file for a Javascript group
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:    public void testPassingDirForStartFile() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            DirectiveBasedJavascriptGroup test = new DirectiveBasedJavascriptGroup("test",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                    getResourceFile("/testdata/"), "javascript", ImmutableList.<DirectiveType<?>> of(DirectiveFactory
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                            .getDummyDirectiveType()), EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            fail("Creating a Directive Based javascript Group by specifying a directory as start file should have failed."
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                    + test.getName());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        } catch (IOException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            assertTrue("Add File function failed because of an unexpected error message",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                e.getMessage().startsWith("File did not exist or was not a valid, acceptable file"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:     * Check the workings of isStale(). isStale() only checks the last modified time stamp of EXISTING files in the
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:     * group. If new files are added, then isStale() will not reflect the real state of the group. However, if you were
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:     * to INCLUDE a new js file using a include directive in on of the files in the group , then isStale() would still
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:    public void testIsStale() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        File newFile = getResourceFile("/testdata/javascript/testIsStale.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        newFile.getParentFile().mkdirs();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        Writer writer = new FileWriter(newFile, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            writer.append(new Long(System.currentTimeMillis()).toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            DirectiveBasedJavascriptGroup test = new DirectiveBasedJavascriptGroup("test", newFile.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                    newFile.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getDummyDirectiveType()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                    EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            // Immediately after the javascript group is instantiated, the group
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            // is stale because we don't know previous contents.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            assertTrue(test.isStale());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            test.getGroupHash(); // Hash it.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            // Without modification, after that it is un-stale.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            assertFalse("Unmodified group should be un-stale", test.isStale());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            // Update a js file which is part of the group
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            writer = new FileWriter(newFile, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            writer.append("New time: ");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            writer.append(new Long(System.currentTimeMillis()).toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            assertTrue("An existing file in the group was modified and isStale() could not recognize the modification",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                    test.isStale());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:     * Use the javascript processor to generate javascript files in 5 modes. Gold file the five modes and also verify
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:     * that the file was not created in the 6th mode.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:    public void testJavascriptGeneration() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        File file = getResourceFile("/testdata/javascript/testAllKindsOfDirectiveGenerate.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("testDummy", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMultiLineMockDirectiveType(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                        DirectiveFactory.getMockDirective(), DirectiveFactory.getDummyDirectiveType()), EnumSet.of(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                        JavascriptGeneratorMode.DEVELOPMENT, JavascriptGeneratorMode.AUTOTESTING,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                        JavascriptGeneratorMode.PRODUCTION, JavascriptGeneratorMode.MOCK1,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                        JavascriptGeneratorMode.MOCK2));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        String expectedGenFiles[] = { "testDummy_auto", "testDummy_dev", "testDummy_mock1", "testDummy_mock2",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        File dir = getResourceFile("/testdata/javascript/generated/");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            jg.parse();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            jg.generate(dir, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            for (String genFileName : expectedGenFiles) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                File genFile = new File(dir, genFileName + ".js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                    fail("Javascript processor failed to create " + genFile.getAbsolutePath());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                    BufferedReader reader = new BufferedReader(new FileReader(genFile));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                        String line = reader.readLine();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                            fileContents.append(line);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                            fileContents.append("\n");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                            line = reader.readLine();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                    } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                        reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                    goldFileText(fileContents.toString(), "/" + genFileName + ".js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            // Regardless of the javascript processor generating the files,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            // clean up the expected files
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            for (String genFileName : expectedGenFiles) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                File genFile = new File(dir, genFileName + ".js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        assertFalse(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                "javascript processor generated a file for test mode even though the group was not specified to do so.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:     * Make sure the processor regeneration stops when there are errors in the source file
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:    public void testJavascriptReGenerationFails() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        File file = getResourceFile("/testdata/javascript/testJavascriptReGenerationFails.js");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        DirectiveBasedJavascriptGroup jg = new DirectiveBasedJavascriptGroup("regenerationFail", file.getParentFile(),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                file.getName(), ImmutableList.<DirectiveType<?>> of(DirectiveFactory.getMockDirective()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:                EnumSet.of(JavascriptGeneratorMode.TESTING));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            jg.regenerate(getResourceFile("/testdata/javascript/generated/"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            fail("The test should fail because this source file has a multilinemock directive but the javascript was created with just a mock directive");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:        } catch (RuntimeException expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            // This is just an extra check
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            String notExpectedGenFile = "regenerationFail_test.js";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            File genFile = new File(getResourceFile("/testdata/javascript/generated/"), notExpectedGenFile);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/directive/DirectiveBasedJavascriptGroupTest.java:            assertFalse("The javascript processor should not have created this file.", genFile.exists());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:package org.ruauframework.util.javascript;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import java.io.ByteArrayInputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import java.io.InputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import java.net.MalformedURLException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import java.net.URL;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import java.net.URLConnection;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import java.net.URLStreamHandler;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import java.util.Arrays;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import java.util.Collection;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import org.apache.commons.lang3.StringUtils;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:import com.google.common.collect.ImmutableSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:public class MultiStreamReaderTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testConstructNullArray() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        MultiStreamReader reader = new MultiStreamReader(urls);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        MultiStreamReader reader = new MultiStreamReader(urls);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testConstructEmptyArray() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        MultiStreamReader reader = new MultiStreamReader(urls);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        Collection<URL> urls = ImmutableSet.of();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        MultiStreamReader reader = new MultiStreamReader(urls);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadSingleStream() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(1, "something");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadSingleStreamInChunks() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(3, "something");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadSingleEmptyStream() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(1, "");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadMultipleShortStreams() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(1, "a", "b", "c");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadMultipleEmptyStreams() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(1, "", "", "");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadMultipleStreamsWithFirstBeingLonger() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(1, StringUtils.repeat("a", 100), "b", "c");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadMultipleStreamsInChunksWithFirstBeingLonger() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(3, StringUtils.repeat("a", 100), "b", "c");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadMultipleStreamsWithSecondBeingLonger() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(1, "a", StringUtils.repeat("b", 100), "c");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadMultipleStreamsInChunksWithSecondBeingLonger() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(3, "a", StringUtils.repeat("b", 100), "c");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadMultipleStreamsWithThirdBeingLonger() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(1, "a", "b", StringUtils.repeat("c", 100));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public void testReadMultipleStreamsInChunksWithThirdBeingLonger() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        assertReadingMultipleStreams(3, "a", "b", StringUtils.repeat("c", 100));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    private void assertReadingMultipleStreams(int numChunks, String... content) throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:            urls.add(getStringStreamURL(conString));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:            result.append(conString);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        MultiStreamReader reader = new MultiStreamReader(urls);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:            int expectedReadCount;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:                expectedReadCount = -1;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:                expectedReadCount = chunkLength;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:                expectedString = result.substring(i * chunkLength, i * chunkLength + expectedReadCount);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:                expectedReadCount = result.length() - i * chunkLength;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:                expectedString = result.substring(i * chunkLength, i * chunkLength + expectedReadCount);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:            char[] array = new char[chunkLength];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:            assertEquals("Unexpected number of characters read from streams for chunk " + i, expectedReadCount,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:                    reader.read(array));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:            if (expectedReadCount > 0) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:                assertEquals("Unexpected concatenated set of characters read from streams for chunk " + i,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:                        expectedString, new String(Arrays.copyOf(array, expectedReadCount)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    private URL getStringStreamURL(final String content) throws MalformedURLException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        return new URL("string", null, 0, "" + System.nanoTime(), new URLStreamHandler() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:                return new StringStreamURLConnection(u, content);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:    public class StringStreamURLConnection extends URLConnection {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        private final String content;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        protected StringStreamURLConnection(URL url, String content) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:        public InputStream getInputStream() throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/MultiStreamReaderTest.java:            return new ByteArrayInputStream(content.getBytes("UTF-8"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:package org.ruauframework.util.javascript;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:import org.ruauframework.util.javascript.JavascriptProcessingError.Level;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:import org.ruauframework.util.validation.ValidationError;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:import org.ruauframework.util.validation.ValidationTestUtil;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:public final class JavascriptValidatorTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:    public void testValidate() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        JavascriptValidator validator = new JavascriptValidator();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        List<JavascriptProcessingError> errors = validator.validate("input.js", "var index = 1;\nindex++\nindex += 4;",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:                false, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals(1, errors.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        ValidationError error = errors.get(0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals("input.js", error.getFilename());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals(2, error.getLine());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals(8, error.getStartColumn());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals("jslint", error.getValidatingTool());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals("Expected ';' and instead saw 'index'", error.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals("index++", error.getEvidence());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals(Level.Error, error.getLevel());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertNull(error.getRule());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        // can rerun on the same validator
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        errors = validator.validate("input2.js", "var i = 1\ni++\n;", false, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals(1, errors.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals("input2.js", errors.get(0).getFilename());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        // UC: the new jslint reports unused variables
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        JavascriptValidator validator = new JavascriptValidator();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        List<JavascriptProcessingError> errors = validator.validate("input.js", "function unused() {var index = 1}",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:                false, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals(2, errors.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        ValidationTestUtil
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:                .assertError("input.js [line 1, column 33] jslint: Expected ';' and instead saw '}'", errors.get(0));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        ValidationTestUtil
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:                .assertError("input.js [line 1, column 24] jslint: Unused 'index'", errors.get(1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        validator = new JavascriptValidator(true);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        errors = validator.validate("input.js", "function unused() {var index = 1}",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:                false, false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        assertEquals(1, errors.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:        ValidationTestUtil
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/javascript/JavascriptValidatorTest.java:                .assertError("input.js [line 1, column 33] jslint2009: Missing semicolon", errors.get(0));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:package org.ruauframework.util.date;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:import java.text.DateFormat;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:import java.util.ArrayList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:import java.util.Date;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:import java.util.Locale;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:import java.util.TimeZone;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:public class DateServiceTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    private StringBuilder sb;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    @SuppressWarnings("serial")
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    private static class DebugDate extends Date {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        private final String debugInfo;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DebugDate(long time, String debugInfo) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DebugDate(long time) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            this(time, "Date(" + time + ")");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:     * Test Data
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    final Date[] DATE_TIME = { new DebugDate(1), // now
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            new DebugDate(1000L), // 12:00:01 AM GMT
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            new DebugDate(1333322872649L), // 4:27:52.649 PM PDT (GMT-7)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            new DebugDate(0) // 00:00:00.000 GMT
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public static final int[] DATE_TIME_STYLES = { DateFormat.SHORT, DateFormat.MEDIUM, DateFormat.LONG,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateFormat.FULL, -1 };
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public static final String[] SIMPLE_DATE_FORMAT_PATTERNS = { "yyyy.MM.dd G 'at' HH:mm:ss z", "EEE, MMM d, ''yy",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        "h:mm a", "hh 'o''clock' a, zzzz", "K:mm a, z", "yyyyy.MMMMM.dd GGG hh:mm aaa",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public List<LocaleConfig> getConfigs() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        List<LocaleConfig> configs = new ArrayList<>();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        configs.add(new LocaleConfig(Locale.TRADITIONAL_CHINESE, TimeZone.getTimeZone("GMT+8")));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        configs.add(new LocaleConfig(Locale.US, TimeZone.getTimeZone("EST")));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        configs.add(new LocaleConfig(new Locale("en", "US"), TimeZone.getTimeZone("PDT")));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public static class LocaleConfig {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        private Locale locale = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        private TimeZone timeZone = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        public LocaleConfig(Locale locale) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            setLocale(locale);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            setTimeZone(TimeZone.getDefault());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        public LocaleConfig(Locale locale, TimeZone timeZone) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            setLocale(locale);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        public Locale getLocale() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            return this.locale;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        public void setLocale(Locale locale) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            this.locale = locale;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:     * NOTE: api's converter.format(date) and converter.parse(date) will rely on
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:     * the TimeZone.getDefault() value to do their job. Thus, tests for these
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:     * will return different results based on default TimeZone that is set.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:     * Tests for different converters including parsing and formatting
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testGetDateTimeISO8601Converter() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateConverter converter = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        converter = DateServiceImpl.get().getDateTimeISO8601Converter();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        for (LocaleConfig c : getConfigs()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            for (Date d : DATE_TIME) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                // formatting
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                String formattedDate = converter.format(d, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                // parsing
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                Date parsedDate = converter.parse(formattedDate, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                String text = "Input date:" + d.toString() + "\t\tFormatted date:" + formattedDate + "\t\tParsed date:"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                + parsedDate.getTime() + "\t\tTimezone:" + tz.getID() + "\n";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                sb.append(text);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        goldFileText("Test:testGetDateTimeISO8601Converter\n" + sb.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testGetDateISO8601Converter() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateConverter converter = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        converter = DateServiceImpl.get().getDateISO8601Converter();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        for (LocaleConfig c : getConfigs()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            for (Date d : DATE_TIME) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                // formatting
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                String formattedDate = converter.format(d, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                // parsing
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                Date parsedDate = converter.parse(formattedDate, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                String text = "Input date:" + d.toString() + "\t\tFormatted date:" + formattedDate + "\t\tParsed date:"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                + parsedDate.getTime() + "\t\tTimezone:" + tz.getID() + "\n";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                sb.append(text);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        goldFileText("Test:testGetDateISO8601Converter\n" + sb.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateConverter converter = DateServiceImpl.get().getGenericISO8601Converter();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // date time
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        for (LocaleConfig c : getConfigs()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            for (Date d : DATE_TIME) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                // formatting
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                String formattedDate = converter.format(d, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                // parsing
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                Date parsedDate = converter.parse(formattedDate, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                text = "Input date:" + d.toString() + "\t\tFormatted date:" + formattedDate + "\t\tParsed date:"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                + parsedDate.getTime() + "\t\tTimezone:" + tz.getID() + "\n";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                sb.append(text);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // datetime no seconds
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        for (LocaleConfig c : getConfigs()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    // parsing
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    Date parsedDate = converter.parse(d, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    // formatting
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    String formattedDate = converter.format(parsedDate, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    text = "Input date:" + d.toString() + "\t\tFormatted date:" + formattedDate + "\t\tParsed date:"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    + parsedDate.getTime() + "\n";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    sb.append(text);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    sb.append(e.getMessage() + "\n");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testGetDateStyleConverter_locale_dateStyle() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateConverter converter = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        for (LocaleConfig c : getConfigs()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            Locale l = c.getLocale();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            for (Date d : DATE_TIME) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        converter = DateServiceImpl.get().getDateStyleConverter(l, ds);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        // formatting
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        String formattedDate = converter.format(d, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        // parsing
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            Date parsedDate = converter.parse(formattedDate, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            text = "Input date:" + d.toString() + "\t\tFormatted date:" + formattedDate
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            + "\t\tParsed date:" + parsedDate.getTime() + "\t\tLocale:" + l.getDisplayName()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            + "\t\tTimeZone: " + tz.getID() + "\t\tDate style: " + ds + "\n";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            sb.append(text);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            sb.append(e.getMessage() + "\n");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        goldFileText("Test:testGetDateStyleConverter_locale_dateStyle\n" + sb.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testGetTimeStyleConverter_locale_timeStyle() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateConverter converter = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        for (LocaleConfig c : getConfigs()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            Locale l = c.getLocale();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            for (Date d : DATE_TIME) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        converter = DateServiceImpl.get().getTimeStyleConverter(l, ts);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        // formatting
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        String formattedDate = converter.format(d, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        // parsing
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            Date parsedDate = converter.parse(formattedDate, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            text = "Input date:" + d.toString() + "\t\tFormatted date:" + formattedDate
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            + "\t\tParsed date:" + parsedDate.getTime() + "\t\tLocale:" + l.getDisplayName()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            sb.append(text);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            sb.append(e.getMessage() + "\n");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        goldFileText("Test:testGetTimeStyleConverter_locale_timeStyle\n" + sb.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testGetDateTimeStyleConverter_locale_dateStyle_timeStyle() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateConverter converter = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        for (LocaleConfig c : getConfigs()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            Locale l = c.getLocale();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            for (Date d : DATE_TIME) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            converter = DateServiceImpl.get().getDateTimeStyleConverter(l, ds, ts);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            // formatting
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            String formattedDate = converter.format(d, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            // parsing
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                                Date parsedDate = converter.parse(formattedDate, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                                text = "Input date:" + d.toString() + "\t\tFormatted date:" + formattedDate
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                                + "\t\tParsed date:" + parsedDate.getTime() + "\t\tLocale:"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                                + l.getDisplayName() + "\t\tTimeZone: " + tz.getID() + "\t\tDate style: " + ds
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                                sb.append(text);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                            } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                                sb.append(e.getMessage() + "\n");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        goldFileText("Test:testGetDateTimeStyleConverter_locale_dateStyle_timeStyle\n" + sb.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testGetPatternConverter_locale_pattern() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateConverter converter = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // format/parse(date, timezone)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // SimpleDateFormat style
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        for (LocaleConfig c : getConfigs()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            Locale l = c.getLocale();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            for (Date d : DATE_TIME) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                for (String pattern : SIMPLE_DATE_FORMAT_PATTERNS) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    converter = DateServiceImpl.get().getPatternConverter(l, pattern);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    // formatting
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    String formattedDate = converter.format(d, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    // parsing
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        Date parsedDate = converter.parse(formattedDate, tz);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        text = "Input date:" + d.toString() + "\t\tFormatted date:" + formattedDate
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        + "\t\tParsed date:" + parsedDate.getTime() + "\t\tLocale:" + l.getDisplayName()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        + "\t\tTimeZone:" + tz.getID() + "\t\tSimpleDateFormat pattern:" + pattern + "\n";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        sb.append(text);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                        sb.append(e.getMessage() + "\n");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        goldFileText("Test:testGetPatternConverter_locale_pattern\n" + sb.toString());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            int dateFormatStyleInteger = DateServiceImpl.get().getStyle(s);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# date format style integer does not match for style " + s, dateFormatStyleInteger, i);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testDateTimeNoneConverter() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getDateTimeStyleConverter(Locale.US, -1, -1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getDateTimeStyleConverter(Locale.US, -1, -1)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Style '--' is invalid", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getDateStyleConverter(Locale.US, -1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getDateStyleConverter(Locale.US, -1)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Style '--' is invalid", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getTimeStyleConverter(Locale.US, -1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getTimeStyleConverter(Locale.US, -1)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Style '--' is invalid", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testNullDataForConverters() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getDateTimeStyleConverter(null, -0, -0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getDateTimeStyleConverter(null, -0, -0)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Both dateStyle and timeStyle are invalid", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getDateStyleConverter(null, -0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getDateStyleConverter(null, -0)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Style '--' is invalid", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getTimeStyleConverter(null, -0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getTimeStyleConverter(null, -0)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Style '--' is invalid", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getPatternConverter(null, null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getPatternConverter(null, null)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Invalid pattern specification", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getStyle(null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getStyle(null)", "Style is null", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testNullDataForFormatAndParse() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getDateTimeISO8601Converter().format(null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getDateTimeISO8601Converter().format(null)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Date can not be null", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getDateTimeISO8601Converter().format(null, null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getDateTimeISO8601Converter().format(null, null)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Date can not be null", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getDateTimeISO8601Converter().parse(null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getDateTimeISO8601Converter().parse(null)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Date can not be null", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            DateServiceImpl.get().getDateTimeISO8601Converter().parse(null, null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:            assertEquals("# Incorrect exception message for api getDateTimeISO8601Converter().parse(null, null)",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:                    "Date can not be null", e.getMessage());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testFormatWithTimeZone() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // this is equivalent to 1970-01-01 5pm EST
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        Date testDate = new Date(offsetEST);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateConverter converter = DateServiceImpl.get().getDateISO8601Converter();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // gmt-8 here is the equivalent of using the default JDK timezone
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // hardcoded so the test works wherever it is run
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        String result = converter.format(testDate, TimeZone.getTimeZone("GMT-8"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals("1969-12-31", result);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // 1970-01-01 midnight EST should match EST, right?
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        result = converter.format(testDate, TimeZone.getTimeZone("GMT-5"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals("1970-01-01", result);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // switch to datetime converter
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        converter = DateServiceImpl.get().getDateTimeISO8601Converter();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // gmt-8 here is the equivalent of using the default JDK timezone
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // hardcoded so the test works wherever it is run
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        result = converter.format(testDate, TimeZone.getTimeZone("GMT-8"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // 9PM PST = midnight EST, right? note the 21:00 and -08:00
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals("1969-12-31T21:00:00.000-08:00", result);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // and a quick reverse check to verify
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals(offsetEST, converter.parse(result).getTime());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // 1970-01-01 midnight EST should match EST
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        result = converter.format(testDate, TimeZone.getTimeZone("GMT-5"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals("1970-01-01T00:00:00.000-05:00", result);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:    public void testParseWithTimeZone() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // if someone types in 1970-01-01, and they're in GMT - that's date=0L
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        String testDate = "1970-01-01";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        DateConverter converter = DateServiceImpl.get().getDateISO8601Converter();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // 1970-01-01, and they're in EST, that's 5 hours behind.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // but when they hit 1970-01-01, they're 5 hours later than when GMT
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // date=0 PLUS (5x60x60x1000)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        Date resultDate = converter.parse(testDate, TimeZone.getTimeZone("EST"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals(offsetEST, resultDate.getTime());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // 1970-01-01, and they're in China, that's 8 hours ahead of GMT.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // but when they hit 1970-01-01, they're 8 hours earlier than when GMT
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // date=0 MINUS (8x60x60x1000)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        resultDate = converter.parse(testDate, TimeZone.getTimeZone("GMT+8"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals(offsetGMT8, resultDate.getTime());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // If parse, without timezone is called, the JDK's default timezone
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        resultDate = converter.parse(testDate);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals(-TimeZone.getDefault().getRawOffset(), resultDate.getTime());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // switch to dateTime converter
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        converter = DateServiceImpl.get().getDateTimeISO8601Converter();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // timezone is in this date - EST again - so we should get the same as
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // above
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        testDate = "1970-01-01T00:00:00.000-05:00";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        resultDate = converter.parse(testDate);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals(offsetEST, resultDate.getTime());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        // specifying a timezone shouldn't change a thing
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        resultDate = converter.parse(testDate, TimeZone.getTimeZone("GMT+8"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/date/DateServiceTest.java:        assertEquals(offsetEST, resultDate.getTime());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:public class CustomPairTypeParameterizedConverter implements Converter<String, CustomPairType> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:    public CustomPairType convert(String value) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:        List<String> splitList = RuueTextUtil.splitSimple("$", value);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:        return new CustomPairType(splitList.get(0), Integer.parseInt(splitList.get(1)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:    public Class<String> getFrom() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:        return String.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:    public Class<CustomPairType> getTo() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:        return CustomPairType.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:    public Class<?>[] getToParameters() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairTypeParameterizedConverter.java:        return new Class[] { String.class, Integer.class };
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:import java.util.ArrayList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:public class StringToCustomPairArrayConverter implements Converter<String, CustomPairType[]> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:    public CustomPairType[] convert(String value) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:        if (!value.startsWith("[") && !value.endsWith("]")) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:            return new CustomPairType[] {};
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:        value = value.substring(1, value.length() - 1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:        ArrayList<CustomPairType> ret = new ArrayList<>();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:        for (String parts : value.split(",")) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:            ret.add(TypeUtil.convert(parts, CustomPairType.class));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:        return ret.toArray(new CustomPairType[ret.size()]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:    public Class<String> getFrom() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:        return String.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:    public Class<CustomPairType[]> getTo() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:        return CustomPairType[].class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairArrayConverter.java:    public Class<?>[] getToParameters() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:public class StringToCustomPairConverter implements Converter<String, CustomPairType> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:    public CustomPairType convert(String value) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:        List<String> splitList = RuueTextUtil.splitSimple("$", value);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:        return new CustomPairType(splitList.get(0), Integer.parseInt(splitList.get(1)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:    public Class<String> getFrom() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:        return String.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:    public Class<CustomPairType> getTo() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:        return CustomPairType.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/StringToCustomPairConverter.java:    public Class<?>[] getToParameters() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java:public class CustomParentType {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java:    public CustomParentType(String s) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomParentType.java:	public CustomParentType() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:import org.ruauframework.util.json.Json;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:public abstract class CustomAbstractType implements JsonSerializable {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:	private String strValue;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:	private int intValue;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:	protected CustomAbstractType(String strValue, int intValue) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:		this.strValue = strValue;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:		this.intValue = intValue;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:	public String getStrValue() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:		return strValue;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:	public int getIntValue() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:		return intValue;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:	public void serialize(Json json) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:		json.writeMapBegin();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:        json.writeMapEntry("strValue", strValue);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:        json.writeMapEntry("intValue", intValue);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractType.java:        json.writeMapEnd();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java:public class CustomDupConverter2 implements Converter<String, CustomDupType> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java:    public CustomDupType convert(String value) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java:    public Class<String> getFrom() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java:        return String.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java:    public Class<CustomDupType> getTo() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java:        return CustomDupType.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter2.java:    public Class<?>[] getToParameters() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:import java.util.HashSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:import java.util.Set;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:public class CustomAbstractTypeConverter implements MultiConverter<CustomAbstractType> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:	private static Set<Class<?>> toSet;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:	static {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:		toSet = new HashSet<>();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:		toSet.add(CustomConcreteType1.class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:		toSet.add(CustomConcreteType2.class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:	public CustomAbstractType convert(Class<? extends CustomAbstractType> toClass, Object fromValue) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:		String fromStr = (String)fromValue;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:		String stringPart = fromStr.substring(0, splitIndex);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:		Integer intPart = Integer.parseInt(fromStr.substring(splitIndex + 1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:		if (toClass == CustomConcreteType1.class) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:			return new CustomConcreteType1(stringPart, intPart);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:		} else if (toClass == CustomConcreteType2.class) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:			return new CustomConcreteType2(stringPart, intPart);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:			throw new RuntimeException("This should never happen");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:	public Class<?> getFrom() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:		return String.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomAbstractTypeConverter.java:	public Set<Class<?>> getTo() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java:public class CustomConcreteType1 extends CustomAbstractType {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java:	protected CustomConcreteType1(String strValue, int intValue) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType1.java:		super(strValue, intValue);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java:public class BadConverter implements Converter<CustomPairType, String> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java:    public String convert(CustomPairType value) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java:    public Class<CustomPairType> getFrom() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java:    public Class<String> getTo() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/BadConverter.java:    public Class<?>[] getToParameters() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java:public class CustomDupConverter1 implements Converter<String, CustomDupType> {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java:    public CustomDupType convert(String value) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java:    public Class<String> getFrom() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java:        return String.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java:    public Class<CustomDupType> getTo() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java:        return CustomDupType.class;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupConverter1.java:    public Class<?>[] getToParameters() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:import org.ruauframework.util.type.TypeUtil.ConversionException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java: * Verify implementation of TypeUtil used to convert data from a given type to
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:public class TypeUtilTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:     * Verify conversion of String to Custom data type using custom converters.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        // 1. Convert from String to a custom type
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertTrue("Failed to register custom converter",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(String.class, CustomPairType.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertFalse("Converter registration is not commutative.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(CustomPairType.class, String.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertFalse("Registered a fictatious converter.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(Integer.class, CustomPairType.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        CustomPairType result = TypeUtil.convert("HouseNo$300", CustomPairType.class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertNotNull(result);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertEquals("Custom type converter failed to convert string value.", "HouseNo", result.getStrMember());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertEquals("Custom type converter failed to convert string value.", 300, result.getIntMember());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        // 2. Convert from String to an array of custom type converters
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertTrue("Failed to register a custom array converter.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(String.class, CustomPairType[].class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertFalse("Registered a fictatious converter.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(Integer.class, CustomPairType[].class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        CustomPairType[] arrayOfValues = TypeUtil.convert("[lat$12890,long$5467]", CustomPairType[].class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertNotNull(arrayOfValues);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertEquals("Custom array type converter failed to convert.", 2, arrayOfValues.length);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertEquals("Custom array type converter failed to convert.", new CustomPairType("lat", 12890),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                arrayOfValues[0]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertEquals("Custom array type converter failed to convert.", new CustomPairType("long", 5467),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                arrayOfValues[1]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:     * Verify conversion of custom converters that handle multiple output types.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        // 1. Try to convert from String to subclasses of CustomAbstractType.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertTrue("Failed to register custom multi converter",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(String.class, CustomConcreteType1.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertTrue("Failed to register custom multi converter",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(String.class, CustomConcreteType2.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        CustomAbstractType result = TypeUtil.convert("blah:52", CustomConcreteType1.class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertNotNull(result);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertEquals("Custom multi converter failed to convert string value.", "blah", result.getStrValue());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertEquals("Custom multi converter failed to convert string value.", 52, result.getIntValue());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        result = TypeUtil.convert("zebra zebra:73", CustomConcreteType2.class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertNotNull(result);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertEquals("Custom multi converter failed to convert string value.", "zebra zebra", result.getStrValue());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertEquals("Custom multi converter failed to convert string value.", -146, result.getIntValue());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:     * W-1295660 This is a big hole. Anybody can override the converters we have
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:     * written and screw up the system. Or may be this is acceptable. Currently
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:     * we use the last converter to be encountered while going through classes
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:     * in classpath.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:    public void testRegisteringDuplicateTypeConverters() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertTrue("Failed to register custom converter",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(String.class, CustomDupType.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:            TypeUtil.convert("foobar", CustomDupType.class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:            fail("expected ConversionException due to duplicate registration");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        } catch (ConversionException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:     * Verify that value of assignable types don't need a special converter.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:    public void testImplicitConversionThroughInheritance() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        // 1. Upcasting value object
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertFalse("Should not have found a converter as there are none registered for this conversion",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(CustomChildType.class, CustomParentType.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        CustomParentType newObj = TypeUtil.convert(obj, CustomParentType.class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertNotNull(newObj);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        // Make sure conversion up the inheritance hierarchy did not go through
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        // any special procedure
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertTrue("Converting a value object of child type to parent failed.", newObj == obj);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        // 2. Downcasting value object
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertFalse("Should not have found a converter as there are none registered for this conversion",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(CustomParentType.class, CustomChildType.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        CustomParentType pObj = new CustomParentType();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:            TypeUtil.convert(pObj, CustomChildType.class);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:            fail("Should have thrown conversion exception due to missing converter");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        } catch (ConversionException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:     * Verify that TypeUtil doesn't barf because of bad converters. Enable
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:     * converter registration in TestTypeConvertersConfig.java
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:    public void testHandlingNulls() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertFalse(TypeUtil.hasConverter(CustomPairType.class, String.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:    public void testParameterizedConverter() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertTrue("Failed to locate parameterized converter.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(String.class, CustomPairType.class, "String,Integer"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertFalse("Should not have found a converter for this parameter.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(String.class, CustomPairType.class, "String"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertFalse("Should not have found a converter for this parameter.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(String.class, CustomPairType.class, ""));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        // Will use the non parameterized converter
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:        assertTrue("Using null for parameter should have resulted in usage of default converter.",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/TypeUtilTest.java:                TypeUtil.hasConverter(String.class, CustomPairType.class, null));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:import org.ruauframework.util.json.Json;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:public class CustomDupType implements JsonSerializable {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:    private String name = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:    public void serialize(Json json) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:    public void setName(String name) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:        this.name = name;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:    public String getName() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:        return name;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomDupType.java:        name = s;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:import org.ruauframework.util.json.Json;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:public class CustomPairType implements JsonSerializable {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:    private String strMember = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:    private int intMember;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:    public CustomPairType(String s, int i) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:    public int hashCode() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:        return this.intMember + this.strMember.hashCode();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:    public boolean equals(Object other) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:        if (other instanceof CustomPairType) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:            if (((CustomPairType) other).getStrMember().equals(getStrMember())
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:                    && ((CustomPairType) other).getIntMember() == getIntMember()) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:        return false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:    public void serialize(Json json) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:        json.writeMapBegin();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:        json.writeMapEntry("strMember", getStrMember());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:        json.writeMapEntry("intMember", getIntMember());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomPairType.java:        json.writeMapEnd();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomChildType.java:public class CustomChildType extends CustomParentType {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java:package org.ruauframework.util.type;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java:public class CustomConcreteType2 extends CustomAbstractType {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java:	protected CustomConcreteType2(String strValue, int intValue) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/type/CustomConcreteType2.java:		super(strValue, -2 * intValue);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:package org.ruauframework.util.io;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:import java.io.ByteArrayInputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:import java.io.ByteArrayOutputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:import java.io.InputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:import java.io.Reader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:import java.util.Arrays;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:import org.ruauframework.util.Utf8InputStreamReader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:import com.google.common.base.Charsets;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java: * Test cases for the Utf8InputStreamReader
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:public class Utf8InputStreamReaderTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:    public Utf8InputStreamReaderTest(String name) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        super(name);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:    public void testLatinCharsOnly() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final ByteArrayOutputStream baos = new ByteArrayOutputStream(10);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final String testChars = "abc123_+/`";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(testChars.getBytes(Charsets.UTF_8));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final Reader reader = new Utf8InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final char[] actual = new char[10];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertTrue(reader.ready());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(8, reader.read(actual, 0, 8));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertFalse(reader.ready());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(2, reader.read(actual, 8, 8));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read(actual, 10, 8));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read(actual));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertFalse(reader.ready());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            // Ensure that we match
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertTrue(Arrays.equals(testChars.toCharArray(), actual));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * Tests 1-byte, 2-byte, 3-byte, and 4-byte UTF-8 characters, some which
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * decode into UTF-16 surrogate pairs, using an InputStream that reads only
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * one byte at a time, just to exercise the inner bulk read in read()
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:    public void testUTF8CharsUsingAnInputStreamThatReadsOneByteAtATime() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        testUTF8Chars(true);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * Tests 1-byte, 2-byte, 3-byte, and 4-byte UTF-8 characters, some which
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * decode into UTF-16 surrogate pairs
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:    public void testUTF8Chars() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        testUTF8Chars(false);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:    private void testUTF8Chars(boolean oneByteAtATime) throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final ByteArrayOutputStream baos = new ByteArrayOutputStream(88 /*
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                                                                         * actual
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                                                                         * is an
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                                                                         * estimate
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final String testChars = "ð¥±ð¥©ð¥´ð¥´ð¥±ð¥±ð µðð¦ð¸ðï¼ï©¦ïîíªÈ¦EÂ§×§à®ð¥´";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(testChars.getBytes(Charsets.UTF_8));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        InputStream in = new ByteArrayInputStream(baos.toByteArray());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            final InputStream delegate = in;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            in = new InputStream() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                public int read() throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                    return delegate.read();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                public int read(byte[] b, int off, int len) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                        final int ch = read();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final Reader reader = new Utf8InputStreamReader(in);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final char[] actual = new char[testChars.length()];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                assertTrue(reader.ready());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(testChars.length(), reader.read(actual));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read(actual, 10, 8));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read(actual));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertFalse(reader.ready());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            // Ensure that we match
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertTrue(Arrays.equals(testChars.toCharArray(), actual));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:    public void testFiveAndSixByteUTF8Char() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final ByteArrayOutputStream baos = new ByteArrayOutputStream(20);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xfc); // 6-byte UTF-8 (maybe someday...)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xbf);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xbf);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xbf);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xbf);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xbf);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xf8); // 5-byte UTF-8 (maybe someday...)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xbf);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xbf);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xbf);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xbf);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write('h');
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xfe); // not valid UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xff); // not valid UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write('i');
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final Reader reader = new Utf8InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertTrue(reader.ready());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals('h', reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertFalse(reader.ready());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals('i', reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertFalse(reader.ready());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:    public void testInvalidUTF8() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        // Try an invalid UTF-8 sequence. The problem here is on the third and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        // We should get back 0x04, since the first byte caused the first four
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        // to be read in
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        // for the first character
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final ByteArrayOutputStream baos = new ByteArrayOutputStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xF0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xA0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x02);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x03);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x04);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final Reader reader = new Utf8InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(0x04, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * Ensures that reading a byte that is actually in the middle of a UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * byte sequence causes the current sequence to be skipped and the next
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * character read.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final ByteArrayOutputStream baos = new ByteArrayOutputStream(12);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBF); // middle of a UTF-8 sequence
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xE4); // 3-byte UTF-8 starts here (for ä·¾)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xB7);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBE);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xB0); // middle of a UTF-8 sequence
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xB2); // middle of a UTF-8 sequence
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xB2); // middle of a UTF-8 sequence
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xB2); // middle of a UTF-8 sequence
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBF); // middle of a UTF-8 sequence
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xB2); // middle of a UTF-8 sequence
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write('H'); // 1-byte UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final Reader reader = new Utf8InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals('ä·¾', reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals('H', reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final ByteArrayOutputStream baos = new ByteArrayOutputStream(3);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xF0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xA0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final Reader reader = new Utf8InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * Ensure that byte order markers (BOMs) are ignored. BOMs are not relevant
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * in UTF-8, but they could be given to us by a customer's crazy software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * anyway.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final ByteArrayOutputStream baos = new ByteArrayOutputStream(7);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xEF); // Little endian BOM in UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBF);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBE);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xEF); // Big endian BOM in UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBB);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBF);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write('H');
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xEF); // Little endian BOM in UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBF);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBE);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final Reader reader = new Utf8InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals('H', reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * Ensures that surrogate pair codepoints that are improperly used in UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * get ignored. These codepoints are to exist only in UTF-16 bytes as per
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:     * the standard. CharsetDecoder conveniently skips these for us.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:    public void testUTF16SurrogatePairs() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final ByteArrayOutputStream baos = new ByteArrayOutputStream(7);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xED); // First high surrogate, expressed as UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x9F);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xC0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xEE); // Last low surrogate, expressed as UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x80);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x79);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xEE); // Last low surrogate, expressed as UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x80);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x79);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xED); // First high surrogate, expressed as UTF-8
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x9F);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xC0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xED); // Last char before the first high surrogate (okay to
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                          // read)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x9F);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xBF);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0xEE); // First char after the last low surrogate (okay to
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:                          // read)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x80);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write(0x80);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        baos.write('H');
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        final Reader reader = new Utf8InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals('í¿', reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals('î', reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals('H', reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            assertEquals(-1, reader.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/Utf8InputStreamReaderTest.java:            reader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:package org.ruauframework.util.io;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:import java.io.ByteArrayInputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:import java.io.InputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:import org.ruauframework.util.LimitedLengthInputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:import org.ruauframework.util.LimitedLengthInputStream.StreamFinishedListener;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java: * Tests for the LimitedLengthInputStream
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:public class LimitedLengthInputStreamTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    private boolean callbackCalled;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    private InputStream wrappedStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    public LimitedLengthInputStreamTest(String name) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        super(name);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    private class TestStreamFinishedListener implements StreamFinishedListener {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        public void streamFinished(InputStream is) throws IOException {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals("Stream didn't match what we expected", LimitedLengthInputStreamTest.this.wrappedStream, is);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = true;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    private InputStream createTestStream(int byteCount) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        final byte[] bytes = new byte[byteCount];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        return wrappedStream = new ByteArrayInputStream(bytes);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // We get the callback upon construction in this case
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        LimitedLengthInputStream in = new LimitedLengthInputStream(createTestStream(10), 0,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                new TestStreamFinishedListener());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.getLength());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(new byte[5]));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(new byte[5], 0, 5));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.skip(1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(10);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        final StreamFinishedListener listener = new TestStreamFinishedListener();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        final byte[] array = new byte[5];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with a regular read
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        LimitedLengthInputStream in = new LimitedLengthInputStream(wrappedStream, 1, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(1, in.getLength());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(1, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with the array read
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, 1, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(1, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(1, in.read(array));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with the array+pos+length read
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, 1, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(1, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(1, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(2, array[0]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, 1, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(1, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(1, in.skip(1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.skip(1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:     * Ensures that a limit that is greater than the underlying stream and also
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:     * smaller than Integer.MAX_VALUE works properly
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    public void testLimitGreaterThanStream() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        testLimitGreaterThanStream(6);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:     * Ensures that a limit that is greater than Integer.MAX_VALUE works
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    public void testVeryLargeLimit() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        testLimitGreaterThanStream(Long.MAX_VALUE);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    private void testLimitGreaterThanStream(long limit) throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        final StreamFinishedListener listener = new TestStreamFinishedListener();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        byte[] array = new byte[5];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with a regular read
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        LimitedLengthInputStream in = new LimitedLengthInputStream(wrappedStream, limit, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(limit, in.getLength());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(i, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(4 - i, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(limit, in.getLength());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with the array read
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, limit, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.read(array));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(i, array[i]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with the array+pos+length read (aligned with actual underlying
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, limit, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(i, array[i]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with the array+pos+length read (not aligned with actual
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        array = new byte[10];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, limit, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(i, array[i]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, limit, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.skip(5));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.skip(1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled); // The contract of skip() doesn't let
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                                         // us definitively say that we're at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                                         // the EOF, so the callback won't get
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                                         // called until we read
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.skip(1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    public void testLimitEqualToStream() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        final StreamFinishedListener listener = new TestStreamFinishedListener();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        byte[] array = new byte[5];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with a regular read
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        InputStream in = new LimitedLengthInputStream(wrappedStream, 5, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(i, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(4 - i, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with the array read
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, 5, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.read(array));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(i, array[i]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with the array+pos+length read (aligned with actual underlying
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, 5, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(i, array[i]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try it with the array+pos+length read (not aligned with actual
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        array = new byte[10];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, 5, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertEquals(i, array[i]);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(-1, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        in = new LimitedLengthInputStream(wrappedStream, 5, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(5, in.skip(5));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertTrue(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            callbackCalled = false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.skip(1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(callbackCalled);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        createTestStream(5);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        final StreamFinishedListener listener = new TestStreamFinishedListener();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        byte[] array = new byte[5];
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Close the stream, which should put us ahead three bytes
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        InputStream in = new LimitedLengthInputStream(wrappedStream, 3, listener);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Ensure that none of the methods work
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        assertEquals(-1, in.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        assertEquals(-1, in.read(array));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        assertEquals(-1, in.read(array, 0, array.length));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        assertEquals(0, in.available());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        assertEquals(0, in.skip(1));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Try close() again. Nothing should happen
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        // Ensure that our wrapped stream has two bytes left in it
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        assertEquals(3, wrappedStream.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        assertEquals(4, wrappedStream.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        assertEquals(-1, wrappedStream.read());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    public void testMarkingUnsupported() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        InputStream in = new LimitedLengthInputStream(createTestStream(10), 5, new TestStreamFinishedListener());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            // Nothing should happen
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            in.mark(3);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            in.mark(0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            in.mark(Integer.MIN_VALUE);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            in.mark(Integer.MAX_VALUE);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            // Ensure that mark is unsupported (apologies to anyone named Mark)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            assertFalse(in.markSupported());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                fail("reset should have failed");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            } catch (IOException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:                assertTrue(e.getMessage().contains("mark not supported"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:    public void testBadConstruction() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            new LimitedLengthInputStream(null, 1, null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            fail();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            new LimitedLengthInputStream(new ByteArrayInputStream(new byte[] { 1 }), -1, null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            fail();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            new LimitedLengthInputStream(null, -1, null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:            fail();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/io/LimitedLengthInputStreamTest.java:        } catch (IllegalArgumentException e) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * You may obtain a copy of the License at
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * limitations under the License.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:package org.ruauframework.util.json;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.io.ByteArrayInputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.io.ByteArrayOutputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.io.DataOutputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.io.IOException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.io.InputStream;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.io.Reader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.math.BigDecimal;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.util.ArrayList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.util.Arrays;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.util.Collections;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.util.HashMap;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.util.List;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import java.util.Map;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import org.ruauframework.util.IOUtil;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import org.ruauframework.util.json.JsonStreamReader.JsonParseException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import org.ruauframework.util.json.JsonStreamReader.JsonStreamParseException;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import com.google.common.base.Charsets;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:import com.google.common.collect.ImmutableList;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * @hierarchy Ruue.Unit Tests.Json StreamReader
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java: * @userStorySyncIdOrName a0790000000DQXVAA4
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:public class JsonStreamReaderTest extends UnitTestCase {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private JsonStreamReader jsonStreamReader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        // Keep the reader clean
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        jsonStreamReader = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    public void tearDown() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        // Close the stream
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        if (jsonStreamReader != null) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        super.tearDown();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Testing extreme cases for constructor
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    public void testExtremeCases() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Reader nullReader = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        JsonHandlerProvider nullProvider = null;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            new JsonStreamReader(nullReader, new JsonHandlerProviderImpl());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            fail("Should not have accepted a null reader");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } catch (JsonParseException expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            new JsonStreamReader(nullString, nullProvider);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            fail("Should not have accepted a null string");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } catch (JsonParseException expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        // When a null provider is passed, it's expected to use a default
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        JsonStreamReader obj = new JsonStreamReader("[{key:\"value\"},30]", nullProvider);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(obj.getValue() instanceof List);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseFailure [] literal_failures = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("class as key", "class", 1, 1, "class", "Reserved word used as a literal"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseSuccess [] literal_successes = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("null", "null", null),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("empty", "", null),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Passing a literal to a Json reader should throw an exception
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    public void testLiteral() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseFailures(literal_failures);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseSuccesses(literal_successes);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseFailure [] boolean_failures = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseSuccess [] boolean_successes = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("true", "true", Boolean.TRUE),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("false", "false", Boolean.FALSE),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    public void testBoolean() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseFailures(boolean_failures);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseSuccesses(boolean_successes);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        checkGetters(JsonConstant.BOOLEAN, "true");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        checkGetters(JsonConstant.BOOLEAN, "false");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseFailure [] number_failures = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("invalid number", "30xyz", 1, 1, null, "Could not parse a number"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseSuccess [] number_successes = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("integer", "30", new BigDecimal(30)),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("positive integer", "+30", new BigDecimal(30)),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("negative integer", "-30", new BigDecimal(-30)),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("negaitive exp", "-1.2E-20", BigDecimal.valueOf(-1.2E-20)),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("exp", "1.2E-20", BigDecimal.valueOf(1.2E-20)),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("positive exp", "1.2E-20", BigDecimal.valueOf(1.2E-20)),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("float", "123.456", BigDecimal.valueOf(123.456)),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("positive float", "+123.456", BigDecimal.valueOf(123.456)),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("negative float", "-123.456", BigDecimal.valueOf(-123.456)),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("negative infinity", "-Infinity", Double.NEGATIVE_INFINITY),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("positive infinity", "Infinity", Double.POSITIVE_INFINITY),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("not-a-number", "NaN", Double.NaN),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseFailures(number_failures);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseSuccesses(number_successes);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        checkGetters(JsonConstant.NUMBER, "30");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseFailure [] string_failures = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("mismatched quotes", "\"string\'", 1, 1, null, "Unterminated string"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("mismatched quotes", "\'string\"", 1, 1, null, "Unterminated string"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("newline", "\"string\n\"", 1, 1, null, "Unterminated string"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseSuccess [] string_successes = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("doubleslash in string", "\" // \""," // "),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("comment in string", "\" /*  * *  */ \""," /*  * *  */ "),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("string plus whitespace", "'a'\b","a"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("simple string", "\"a\"","a"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("newline", "\"\\n\"","\n"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("tab", "\"\\t\"","\t"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("backslashes", "\"\\\\\"","\\"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("backspace", "\"\\b\"","\b"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("form-feed", "\"\\f\"","\f"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("return", "\"\\r\"","\r"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("double quote", "\"\\\"\"","\""),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("slash", "\"\\/\"","/"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("e-umlaut", "\"Ã«\"","Ã«"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("chinese", "\"å\"","å"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("different chinese", "\"æ¬\"","æ¬"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("japanese", "\"ì¡°\"","ì¡°"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("unicode 1111", "\"á\"","\u1111"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("unicode 2111", "\"\u2111\"","\u2111"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("single quote", "\"\\'\"","'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("backslash + quote", "\"\\\\\\'\"","\\'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("many backslashes", "\"\\\\\\\\\"","\\\\"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("unicode <", "\"\\u003C\"","<"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("unicode >", "\"\\u003E\"",">"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("unicode !", "\"\\u0021--\"","!--"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("unicode ! plus quote", "'\\\"\\u0021--\\\"'","\"!--\""),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("random chars", "\"    ! @#$%^&*()_+-=|}{[]:;?.,`~\"","    ! @#$%^&*()_+-=|}{[]:;?.,`~"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("many chinese", "\"éãè¶è²ã®ã­ããã¯æ ãèã®ç¬ãè·³ã³è¶ãã¾ããã ç¦åæ¯å¸æçå¿«éè·³è¿æçã ìë¥¼ ê±´ëë°ììµëë¤. ê²ì¼ë¥´ê³  ê° \"","éãè¶è²ã®ã­ããã¯æ ãèã®ç¬ãè·³ã³è¶ãã¾ããã ç¦åæ¯å¸æçå¿«éè·³è¿æçã ìë¥¼ ê±´ëë°ììµëë¤. ê²ì¼ë¥´ê³  ê° "),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("russian, german, hebrew", "\"ÐÑÑÑÑÑÐ¹ ÐÑÐ°ÑÐ½ Ð¤Ð¾ÐºÑ Ð²ÑÑÐ¾ÑÐ»Ð¾ Ð·Ð° Ð»ÐµÐ½Ð¸Ð²ÑÐ¹ ÑÐ¾Ð±Ð°ÐºÐ°. Die schnelle Braun Fuchs sprang Ã¼ber den faulen Hund. ××©××¢× ×××× ×××××¨ ×§×¤×¥ ××¢× ×××× ××¢×¦××.\"","ÐÑÑÑÑÑÐ¹ ÐÑÐ°ÑÐ½ Ð¤Ð¾ÐºÑ Ð²ÑÑÐ¾ÑÐ»Ð¾ Ð·Ð° Ð»ÐµÐ½Ð¸Ð²ÑÐ¹ ÑÐ¾Ð±Ð°ÐºÐ°. Die schnelle Braun Fuchs sprang Ã¼ber den faulen Hund. ××©××¢× ×××× ×××××¨ ×§×¤×¥ ××¢× ×××× ××¢×¦××."),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseFailures(string_failures);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseSuccesses(string_successes);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        checkGetters(JsonConstant.STRING, "'test'");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseFailure [] array_failures = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("unclosed", "[1,", 1, 1, null, "Unterminated array"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("unclosed, no comma", "[1", 1, 2, null, "Expected ',' or ']'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("mismatched quote", "['hi', \"ho']", 1, 8, null, "Unterminated string"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("missing comma (1)", "[ 'a' 'b' ]", 1, 7, "b", "Expected ',' or ']'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("missing comma (2)", "[ 'a' }", 1, 7, null, "Expected ',' or ']'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseSuccess [] array_successes = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("empty array", "[]", Lists.newArrayList()),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("one element array", "[\"test1\"]", Lists.newArrayList("test1")),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("two element array", "[\"test1\",\"test2\"]", Lists.newArrayList("test1", "test2")),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseSuccess("multi-type element array", "[\"test1\", 1.0 ]", Lists.newArrayList("test1", BigDecimal.valueOf(1.0))),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Tests to verify parsing of Arrays.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    public void testArray() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseFailures(array_failures);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseSuccesses(array_successes);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        checkGetters(JsonConstant.ARRAY, "['test']");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static class ParseObjectSuccess {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        public ParseObjectSuccess(String name, String input, int count, List<String> keys) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            this.name = name;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                keys = Lists.newArrayList();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            this.keys = ImmutableList.copyOf(keys);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        public final String name;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        public final String input;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        public final int count;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        public final List<String> keys;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseObjectSuccess [] object_successes = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseObjectSuccess("empty", "{}", 0, null),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseObjectSuccess("simple string", "{key:\"value\"}", 1, Lists.newArrayList("key")),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseObjectSuccess("single quoted key", "{'key':\"value\"}", 1, Lists.newArrayList("key")),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseObjectSuccess("double quoted key", "{\"key\":\"value\"}", 1, Lists.newArrayList("key")),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseObjectSuccess("empty function", "{key:function() {}}", 1, Lists.newArrayList("key")),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseObjectSuccess("space in key", "{\"key with space\":function() {}}", 1, Lists.newArrayList("key with space")),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static final ParseFailure [] object_failures = {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("missing comma: object (1)", "{key:function() { } bad", 1, 21, "bad", "Expected ',' or '}'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("missing comma: object (2)", "{key:function() { }  {", 1, 22, null, "Expected ',' or '}'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("missing comma: object (3)", "{key:function() { } \n{", 2, 1, null, "Expected ',' or '}'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("missing colon: object", "{key function() { } bad", 1, 6, null, "Expected ':'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        // Note the odd 'matching' here, making the error occur at character 13.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("mismatched quotes (1)", "{\"objName\':\"string\"}", 1, 13, null, "Expected ':'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("mismatched quotes (2)", "{\'objName\":\"string\"}", 1, 2, null, "Unterminated string"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("unmatched quotes (1)", "{\"objName\n\":\"string\"}", 1, 2, null, "Unterminated string"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("bad space in key", "{obj Name:\"string\"}", 1, 6, null, "Expected ':'"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        new ParseFailure("class as key", "{key:\"string\", class:\"string\"}", 1, 16, "class", "Reserved word used as a literal"),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        for (ParseObjectSuccess pos : object_successes) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            @SuppressWarnings("unchecked")
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            Map<String,Object> m = (Map<String,Object>)parseAndRetrieve(pos.input);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            // ordering of keys not guaranteed
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            List<String> keys = Lists.newArrayList(m.keySet());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("Test Case: "+pos.name+" must match length", pos.count, m.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("Test Case: "+pos.name+" expected keys", pos.keys, keys);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runParseFailures(object_failures);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        checkGetters(JsonConstant.OBJECT, "{'test':'test2'}");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    // The tests after this point probably need an audit.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Positive and negative tests for {@link JsonStreamReader#getList()} for
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * when recursive reading is disabled
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    public void testGetListWithRecursiveReadDisabled() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runGetListTest(new JsonStreamGetObjectOrArrayTestConfig() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            public JsonStreamReader createJsonStreamReader(String json) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                final JsonStreamReader reader = new JsonStreamReader(new ByteArrayInputStream(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                        json.getBytes(Charsets.UTF_8)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                assertFalse(reader.isRecursiveReadEnabled());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                return reader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            public boolean isRecursiveReadEnabled() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                return false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Positive and negative tests for {@link JsonStreamReader#getList()}.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runGetListTest(new JsonStreamGetObjectOrArrayTestConfig() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            public JsonStreamReader createJsonStreamReader(String json) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                final JsonStreamReader reader = new JsonStreamReader(json);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                assertTrue(reader.isRecursiveReadEnabled());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                return reader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            public boolean isRecursiveReadEnabled() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Positive and negative tests for {@link JsonStreamReader#getList()}.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private void runGetListTest(JsonStreamGetObjectOrArrayTestConfig config) throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader = config.createJsonStreamReader("\"string\"");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.next();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.getList();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            fail("Trying to get a list by passing a string should have failed.");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } catch (JsonStreamParseException expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            // Make sure the exception was because of mis-match between expected
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            // token and actual token
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(expected.getMessage().startsWith("Current Token is 'STRING', not 'ARRAY'"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        jsonStreamReader = config.createJsonStreamReader("[\"test1\",\"test2\"]");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(config.isRecursiveReadEnabled() ? JsonConstant.ARRAY : JsonConstant.ARRAY_START,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    jsonStreamReader.next());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            List<Object> list = jsonStreamReader.getList();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader should have extracted only 2 items", 2, list.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader has extracted the wrong string or disordered the elements", list.get(0),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader has extracted the wrong string or disordered the elements", list.get(1),
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:         * Positive test case 2: Passing a combination of object types
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        jsonStreamReader = config.createJsonStreamReader("[\"test1\",20]");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(config.isRecursiveReadEnabled() ? JsonConstant.ARRAY : JsonConstant.ARRAY_START,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    jsonStreamReader.next());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            List<Object> assortedList = jsonStreamReader.getList();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader should have extracted only 2 items", 2, assortedList.size());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(assortedList.get(0) instanceof String);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader has extracted the wrong string or disordered the elements",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    assortedList.get(0), "test1");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(assortedList.get(1) instanceof BigDecimal);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader has extracted the wrong element or disordered the elements",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    ((BigDecimal) assortedList.get(1)).doubleValue(), 20.0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:         * Positive test case 3: Pass a Json string with Arrays inside of an
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:         * Array
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        jsonStreamReader = config.createJsonStreamReader("[[\"test1\",\"test2\"],[20,30],true]");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(config.isRecursiveReadEnabled() ? JsonConstant.ARRAY : JsonConstant.ARRAY_START,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    jsonStreamReader.next());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            List<Object> nestedList = jsonStreamReader.getList();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader should have extracted only 3 list items from the nested list", 3,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader should have extracted only 2 items for the first inner list", 2,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue("JsonStreamReader has extracted the wrong element or disordered the elements", stringList.get(0)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    .equals("test1"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue("JsonStreamReader has extracted the wrong element or disordered the elements", stringList.get(1)
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    .equals("test2"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader should have extracted only 2 items for the second inner list", 2,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader has extracted the wrong element or disordered the elements",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    ((BigDecimal) numberList.get(0)).doubleValue(), 20.0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("JsonStreamReader has extracted the wrong element or disordered the elements",
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    ((BigDecimal) numberList.get(1)).doubleValue(), 30.0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue("JsonStreamReader has extracted the wrong element", o.equals(Boolean.TRUE));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private static interface JsonStreamGetObjectOrArrayTestConfig {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        JsonStreamReader createJsonStreamReader(String json);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        boolean isRecursiveReadEnabled();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Positive and Negative test for {@link JsonStreamReader#getObject()} and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * {@link JsonStreamReader#next()} when recursive reading is disabled. Also
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * other cases while parsing a string representing an Object
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    public void testGetObjectWithRecursiveReadDisabled() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runGetObjectTest(new JsonStreamGetObjectOrArrayTestConfig() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            public JsonStreamReader createJsonStreamReader(String json) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                final JsonStreamReader reader = new JsonStreamReader(new ByteArrayInputStream(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                        json.getBytes(Charsets.UTF_8)));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                assertFalse(reader.isRecursiveReadEnabled());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                return reader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            public boolean isRecursiveReadEnabled() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                return false;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Positive and Negative test for {@link JsonStreamReader#getObject()} and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * {@link JsonStreamReader#next()}. Also other cases while parsing a string
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * representing an Object
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        runGetObjectTest(new JsonStreamGetObjectOrArrayTestConfig() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            public JsonStreamReader createJsonStreamReader(String json) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                final JsonStreamReader reader = new JsonStreamReader(json);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                assertTrue(reader.isRecursiveReadEnabled());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                return reader;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            public boolean isRecursiveReadEnabled() {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Positive and Negative test for {@link JsonStreamReader#getObject()} and
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * {@link JsonStreamReader#next()}. Also other cases while parsing a string
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * representing an Object
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    private void runGetObjectTest(JsonStreamGetObjectOrArrayTestConfig config) throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        jsonStreamReader = config.createJsonStreamReader("[\"test1\",20]");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        jsonStreamReader.next();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.getObject();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            fail("Expecting an object when a string representing an array is passed.");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } catch (JsonStreamParseException expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            // Make sure the exception was because of mis-match between expected
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            // token and actual token
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(expected.getMessage().startsWith(
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    "Current Token is '" + (config.isRecursiveReadEnabled() ? "ARRAY" : "[") + "', not 'OBJECT'"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        jsonStreamReader = config
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                .createJsonStreamReader("//comment 0\n/*comment1*/{/*comme\n\n\nnt2*/objName://comment 3\n20/*comment4*/}");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(config.isRecursiveReadEnabled() ? JsonConstant.OBJECT : JsonConstant.OBJECT_START,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    jsonStreamReader.next());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            Map<String, Object> o = jsonStreamReader.getObject();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(o.containsKey("objName"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(o.get("objName") instanceof BigDecimal);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(((BigDecimal) o.get("objName")).doubleValue(), 20.0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader = config.createJsonStreamReader("{\"objName\":null}");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(config.isRecursiveReadEnabled() ? JsonConstant.OBJECT : JsonConstant.OBJECT_START,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    jsonStreamReader.next());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            Map<String, Object> o = jsonStreamReader.getObject();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(o.containsKey("objName"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(o.get("objName") == null);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:         * Positive test case 3: object with comments and multi line comments
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:         * and special characters Object starts with comments, consists of
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        jsonStreamReader = config.createJsonStreamReader(" //comment line, followed by another //\n"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                + "/*  Start object paren  */ \n" + "{" + "/*comme\n\n\nnt2*/" + "objName:" + "//comment 3\n" + "20"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(config.isRecursiveReadEnabled() ? JsonConstant.OBJECT : JsonConstant.OBJECT_START,
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                    jsonStreamReader.next());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            Map<String, Object> o = jsonStreamReader.getObject();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(o.containsKey("objName"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(o.get("objName") instanceof BigDecimal);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(((BigDecimal) o.get("objName")).doubleValue(), 20.0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Test method for {@link JsonStreamReader#next()}.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * FIXME: this test is a random amalgamation of stuff, we could do better with individual tests.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    @SuppressWarnings("unchecked")
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        String func = "function(arg1, arg2) {   /*comment\n\n\n*/var str = \"\\\"\"; var str2 = '\\'vads\\nadf' var foo = {\n}; var func = function(){ var foo = {};var str = \"{\";};}";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        jsonStreamReader = new JsonStreamReader("  { " + "'foo' : 'bar', " + "'baz' : 'qux', "
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                + "\"quux\" : \"corge grault\\n\\\"\\\\\\tga\\u030A\\u031Frply\", "
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                + "'waldo' : [ 'fred','plu\\'gh' , 'xyzzy'], " + "'thud' : { 'wibble' : 'wobble'},"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                + " wubble : \"flob\"," + "spam : true ," + "ham : false ," + "eggs : null," + "num : -123.456E2,"
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                + ", jsean :  'whose\\'s son?'," + "Ð¤Ð¾ÐºÑ : 'Ð·Ð°'}");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(jsonStreamReader.hasNext());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(JsonConstant.OBJECT, jsonStreamReader.next());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertFalse(jsonStreamReader.hasNext());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            Map<String, Object> outerMap = jsonStreamReader.getObject();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("bar", outerMap.get("foo"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("qux", outerMap.get("baz"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("corge grault\n\"\\\tga\u030A\u031Frply", outerMap.get("quux"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            List<String> waldo = new ArrayList<>();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            waldo.add("fred");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            waldo.add("plu'gh");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            waldo.add("xyzzy");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(waldo, outerMap.get("waldo"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            Object thud = outerMap.get("thud");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            Map<String, Object> wibble = (Map<String, Object>) thud;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(wibble.containsKey("wibble"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(wibble.get("wibble").equals("wobble"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("flob", outerMap.get("wubble"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue((Boolean) outerMap.get("spam"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertFalse((Boolean) outerMap.get("ham"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertNull(outerMap.get("eggs"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(-12345.6, ((BigDecimal) outerMap.get("num")).doubleValue());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(1.23456, ((BigDecimal) outerMap.get("otherNum")).doubleValue());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals(12345.6, ((BigDecimal) outerMap.get("otherOtherNum")).doubleValue());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertTrue(outerMap.get("func") instanceof JsFunction);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("\n" + RuueTextUtil.replaceSimple(func, "/*comment\n\n\n*/", "\n"), Json.serialize(outerMap.get("func"), true, false));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("whose's son?", outerMap.get("jsean"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            assertEquals("Ð·Ð°", outerMap.get("Ð¤Ð¾ÐºÑ"));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } finally {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            jsonStreamReader.close();
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:     * Tests for reading functions.
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:    public void testReadFunction() throws Exception {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        String func = "{key:function (arg1, arg2) {   " + "var str = \"\\\"\"; " + "var func = function(){ "
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                + "var foo = {};" + "var str = \"{\";" + "}; " +
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                // missing closing paranthesis for outer function
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            this.parseAndRetrieve(func);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            fail("Unterminated function body should be recognized and throws back as exception");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } catch (JsonStreamParseException expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            // expect this to fail since the function body is unterminated
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        func = "{key:function (arg1, arg2) {" + "var str = \"\\\"\"; " + "var str2 = '\\'vads\\nadf' "
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                + "var foo = {\n}; " + "var func = function(){ " + "var foo = {};" + "var str = \"{\";" +
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:                // Missing closing paranthesis for inner function body
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            this.parseAndRetrieve(func);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            fail("Invalid function body should be recognized and throws back as exception");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        } catch (JsonStreamParseException expected) {
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:            // expect this to fail since the function body is unterminated
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        func = "{key:function () {var str = \"do Nothing\";}}";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Object funcMapObj = this.parseAndRetrieve(func);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(funcMapObj instanceof Map);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Map<?, ?> funcObj = (Map<?, ?>) funcMapObj;
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(funcObj.get("key") instanceof JsFunction);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(jsfuncObj.getArguments().size() == 0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertEquals("var str = \"do Nothing\";", jsfuncObj.getBody());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Object functionAsLiteral = this.parseAndRetrieve("function () {var str = \"do Nothing\";}");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(functionAsLiteral instanceof JsFunction);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertEquals("var str = \"do Nothing\";", ((JsFunction) functionAsLiteral).getBody());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Object functionAsList = this.parseAndRetrieve("[function () {var str = \"do Nothing\";} , 30]");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(functionAsList instanceof List);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertEquals(((List<?>) functionAsList).size(), 2);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(((List<?>) functionAsList).get(0) instanceof JsFunction);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(functionAsListObj1.getArguments().size() == 0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertEquals("var str = \"do Nothing\";", functionAsListObj1.getBody());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(((List<?>) functionAsList).get(1) instanceof BigDecimal);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertEquals(((BigDecimal) ((List<?>) functionAsList).get(1)).doubleValue(), 30.0);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Object functionAsStringInList = this.parseAndRetrieve("[\"function () {var str = \\\"do Nothing\\\";}\" , 30]");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(functionAsStringInList instanceof List);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(((List<?>) functionAsStringInList).get(0) instanceof String);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        func = "{key:function(a101, a280) {var str = 'do nothing';}}";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Object functionLiteralArgs = this.parseAndRetrieve(func);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(functionLiteralArgs instanceof Map);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(((Map<?, ?>) functionLiteralArgs).get("key") instanceof JsFunction);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        JsFunction functionLiteralArgs1 = (JsFunction) ((Map<?, ?>) functionLiteralArgs).get("key");
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(functionLiteralArgs1.getArguments().size() == 2);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertEquals("a101", functionLiteralArgs1.getArguments().get(0));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertEquals("var str = \'do nothing\';", functionLiteralArgs1.getBody());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        func = "function(a101, a280) {var str = 'do nothing';}";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Object functionAsLiteral1 = this.parseAndRetrieve(func);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(functionAsLiteral1 instanceof JsFunction);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        JsFunction functionLiteralArgs2 = (JsFunction) (functionAsLiteral1);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(functionLiteralArgs2.getArguments().size() == 2);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertEquals("a101", functionLiteralArgs2.getArguments().get(0));
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertEquals("var str = 'do nothing';", functionLiteralArgs2.getBody());
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        func = "{key:function foo(arg1, arg2) { var str = 'do nothing';}}";
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        this.parseAndRetrieve(func);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Object namedFuncMapObj = this.parseAndRetrieve(func);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        assertTrue(namedFuncMapObj instanceof Map);
ruau/ruau-util/SouRCeS/test/java/org/ruauframework/util/json/JsonStreamReaderTest.java:        Map<?, ?> namedFuncObj = (Map<?, ?>) namedFuncMapObj;
