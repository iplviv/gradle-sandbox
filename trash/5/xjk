ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.impl.java.model.JavaModel;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.instance.AttributeSet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.instance.Model;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.instance.ValueProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java: * TODO: make public
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:public class IterationValueProvider<D extends BaseComponentDef, I extends BaseComponent<D, I>> implements
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        BaseComponent<D, I> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:    private final I attributeValueProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:    private final Map<String, Object> additionalValueProviders;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:    public IterationValueProvider(I attributeValueProvider, Map<String, Object> additionalValueProviders) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        this.attributeValueProvider = attributeValueProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        this.additionalValueProviders = additionalValueProviders;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        return attributeValueProvider.getDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        attributeValueProvider.serialize(json);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:    public Object getValue(PropertyReference key) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        Object o = additionalValueProviders.get(root);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:                if (o instanceof ValueProvider) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:                    return ((ValueProvider) o).getValue(stem);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:                    return JavaModel.getValue(o, stem, null);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        return attributeValueProvider.getValue(key);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:    public String getGlobalId() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        return attributeValueProvider.getGlobalId();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:    public String getLocalId() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        return attributeValueProvider.getLocalId();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        return attributeValueProvider.getAttributes();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        attributeValueProvider.index(component);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        return attributeValueProvider.getSuper();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:    public boolean hasLocalDependencies() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        return attributeValueProvider.hasLocalDependencies();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        return attributeValueProvider.getModel();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:    public String getPath() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:        return attributeValueProvider.getPath();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:	public void reinitializeModel() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IterationValueProvider.java:		attributeValueProvider.reinitializeModel();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import java.util.ArrayList;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.def.ComponentConfigProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.instance.AttributeSet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.instance.InstanceStack;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.system.Annotations.Provider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:public class IfProvider implements ComponentConfigProvider {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        InstanceStack iStack = context.getInstanceStack();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        List<Component> components = new ArrayList<Component>();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        Map<String, Object> m = Maps.newHashMapWithExpectedSize(1);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        AttributeSet atts = component.getAttributes();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        m.put("template", atts.getValue("body"));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        Object o = atts.getValue("isTrue");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        Boolean isTrue = (Boolean) o;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        ComponentDefRefArrayImpl facet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        // get body facet if true, else facet if false
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        if (isTrue != null && isTrue.booleanValue()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:            facet = (ComponentDefRefArrayImpl) atts.getValue("body");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:            facet = (ComponentDefRefArrayImpl) atts.getValue("else");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:        if (facet != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:            iStack.setAttributeName("body");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:            components.addAll(facet.newInstance(atts.getValueProvider()));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/IfProvider.java:            iStack.clearAttributeName("body");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import static org.ruauframework.instance.ValueProviderType.LABEL;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import java.io.Serializable;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import java.util.ArrayList;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import java.util.Collection;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import java.util.Collections;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import java.util.LinkedHashMap;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.builder.BaseComponentDefBuilder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.DependencyDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.DesignDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.EventHandlerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.HelperDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.ImportDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.ModelDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.RendererDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.ResourceDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.SVGDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.StyleDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.impl.root.RootDefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.impl.root.intf.InterfaceDefImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.throwable.RuueUnhandledException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidExpressionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:public abstract class BaseComponentDefImpl<T extends BaseComponentDef> extends
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        RootDefinitionImpl<T> implements BaseComponentDef, Serializable {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public static final DefDescriptor<InterfaceDef> ROOT_MARKER = DefDescriptorImpl.getInstance(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            "markup://ruau:rootComponent", InterfaceDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private static final long serialVersionUID = -2485193714215681494L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final boolean isAbstract;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final boolean isExtensible;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final boolean isTemplate;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final DefDescriptor<ModelDef> modelDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final DefDescriptor<T> extendsDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final DefDescriptor<ComponentDef> templateDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final DefDescriptor<TestSuiteDef> testSuiteDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final DefDescriptor<StyleDef> styleDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final List<DefDescriptor<RendererDef>> rendererDescriptors;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final List<DefDescriptor<HelperDef>> helperDescriptors;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final List<DefDescriptor<ResourceDef>> resourceDescriptors;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final DefDescriptor<ControllerDef> compoundControllerDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final DefDescriptor<ThemeDef> cmpThemeDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final DefDescriptor<DesignDef> designDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final DefDescriptor<SVGDef> svgDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final Set<DefDescriptor<InterfaceDef>> interfaces;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final List<DefDescriptor<ControllerDef>> controllerDescriptors;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final Map<String, RegisterEventDef> events;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final List<EventHandlerDef> eventHandlers;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final List<ImportDef> imports;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final List<AttributeDefRef> facets;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final Set<PropertyReference> expressionRefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final RenderType render;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final WhitespaceBehavior whitespaceBehavior;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final List<DependencyDef> dependencies;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final List<ClientLibraryDef> clientLibraries;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private final int hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private transient Boolean localDeps = null;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    protected BaseComponentDefImpl(Builder<T> builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.controllerDescriptors = RuueUtil.immutableList(builder.controllerDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.interfaces = RuueUtil.immutableSet(builder.interfaces);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (this.interfaces.contains(ROOT_MARKER)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                this.extendsDescriptor = getDefaultExtendsDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.templateDefDescriptor = builder.templateDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.events = RuueUtil.immutableMap(builder.events);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.eventHandlers = RuueUtil.immutableList(builder.eventHandlers);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.imports = RuueUtil.immutableList(builder.imports);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.isAbstract = builder.isAbstract;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.isTemplate = builder.isTemplate;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.facets = RuueUtil.immutableList(builder.facets);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.dependencies = RuueUtil.immutableList(builder.dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.clientLibraries = RuueUtil.immutableList(builder.clientLibraries);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.whitespaceBehavior = builder.whitespaceBehavior;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.expressionRefs = RuueUtil.immutableSet(builder.expressionRefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.compoundControllerDescriptor = DefDescriptorImpl.getAssociateDescriptor(getDescriptor(),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    ControllerDef.class, DefDescriptor.COMPOUND_PREFIX);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        this.hashCode = RuueUtil.hashCode(super.hashCode(), events, controllerDescriptors, modelDefDescriptor,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                extendsDescriptor, interfaces, rendererDescriptors, helperDescriptors, resourceDescriptors,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @see Definition#validateDefinition()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (AttributeDef att : this.attributeDefs.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            att.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (events.containsKey(att.getName())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        "Cannot define an attribute and register an event with the same name: %s", att.getName()),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        MasterDefRegistry mdr = Ruue.getDefinitionService().getDefRegistry();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        	mdr.assertAccess(this.descriptor, modelDefDescriptor.getDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            mdr.assertAccess(this.descriptor, d.getDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (AttributeDefRef facet : this.facets) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            facet.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (RegisterEventDef def : events.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (EventHandlerDef def : eventHandlers) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // an abstract component that you can't extend is pretty useless
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (this.isAbstract() && !this.isExtensible()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    "Abstract component %s must be extensible.", getDescriptor()), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (this.interfaces.contains(ROOT_MARKER)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            // only ruau has root access (this could be solved with namespace
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            // only visiblity of the rootComponent interface someday)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (!"ruau".equals(this.descriptor.getNamespace())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                throw new InvalidDefinitionException(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                                "Component %s cannot implement the rootComponent interface because it is not in the ruau namespace",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                                getDescriptor()), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            // cannot be a root and extend something
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                throw new InvalidDefinitionException(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                                "Component %s cannot be a rootComponent and extend %s", getDescriptor(),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // validate all client libraries
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (ClientLibraryDef def : this.clientLibraries) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public boolean hasLocalDependencies() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (localDeps == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            computeLocalDependencies();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return localDeps == Boolean.TRUE;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * Computes the local (server) dependencies.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * Terminology: "remote" - a JavaScript provider or renderer "local" - a Java/Apex/server provider, renderer, or
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private synchronized void computeLocalDependencies() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (localDeps != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            localDeps = Boolean.TRUE;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            boolean hasRemote = false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (!rendererDescriptor.getDef().isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    hasRemote = true;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (!hasRemote) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                localDeps = Boolean.TRUE;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            boolean hasRemote = providerDescriptors.isEmpty();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (!providerDescriptor.getDef().isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    hasRemote = true;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (!hasRemote) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                localDeps = Boolean.TRUE;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // Walk the super component tree applying slightly different dependency rules.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (superDef != null && superDef.hasLocalDependencies() &&
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                // super has model
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                // or has renderer that's local
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                (superDef.getRendererDescriptor() != null && superDef.getRendererDescriptor().getDef().isLocal()))) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            // Only local/server models and renderers on the super/parent are considered local dependencies for the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            localDeps = Boolean.TRUE;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (localDeps == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            localDeps = Boolean.FALSE;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        super.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (AttributeDef att : this.attributeDefs.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            att.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (AttributeDefRef facet : this.facets) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            facet.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // TODO: lots more validation an stuff!!!!!!! #W-689596
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        MasterDefRegistry registry = Ruue.getDefinitionService().getDefRegistry();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            T parentDef = extendsDescriptor.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (parentDef == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                throw new DefinitionNotFoundException(extendsDescriptor, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (parentDef.getDescriptor().equals(descriptor)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        "%s cannot extend itself", getDescriptor()), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (!parentDef.isExtensible()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        "%s cannot extend non-extensible component %s", getDescriptor(), extendsDescriptor),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            registry.assertAccess(descriptor, parentDef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (support.ordinal() > extDef.getSupport().ordinal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    throw new InvalidDefinitionException(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                            String.format("%s cannot widen the support level to %s from %s's level of %s",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                                    support, extDesc, extDef.getSupport()), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (DefDescriptor<InterfaceDef> intf : interfaces) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            InterfaceDef interfaze = intf.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (interfaze == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                throw new DefinitionNotFoundException(intf, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            registry.assertAccess(descriptor, interfaze);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (RegisterEventDef def : events.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (EventHandlerDef def : eventHandlers) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // have to do all sorts of craaaazy checks here for dupes and matches
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // and bah
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        validateExpressionRefs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (ClientLibraryDef def : this.clientLibraries) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            def.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            registry.assertAccess(descriptor, def);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * Does all the validation of the expressions defined in this component
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private void validateExpressionRefs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ValueProviderType vpt = ValueProviderType.getTypeByPrefix(root);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                // validate that its a foreachs
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            } else if (vpt.isGlobal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                RuueContext lc = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                GlobalValueProvider gvp = lc.getGlobalProviders().get(vpt);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        throw new InvalidExpressionException("Expression didn't have enough terms: " + e,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                                e.getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    gvp.validate(stem);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            } else if (vpt == ValueProviderType.VIEW) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (e.getStem() != null) { // checks for private attributes used in expressions ..
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    AttributeDef attr = getAttributeDef(stem);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    if ((attr != null) && (attr.getVisibility() == Visibility.PRIVATE)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                            && (!this.attributeDefs.values().contains(attr))) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                                "Expression %s refers to a private attribute '%s' ", e, attr), e.getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * Retrieve labels for a list of descriptors.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private <D extends Definition> void retrieveListLabels(DefinitionService definitionService,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                definitionService.getDefinition(desc).retrieveLabels();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public void retrieveLabels() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        GlobalValueProvider labelProvider = Ruue.getContextService().getCurrentContext().getGlobalProviders()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (e.getRoot().equals(LABEL.getPrefix())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                labelProvider.getValue(e.getStem());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        retrieveListLabels(definitionService, controllerDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        retrieveListLabels(definitionService, rendererDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        retrieveListLabels(definitionService, helperDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        retrieveListLabels(definitionService, providerDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * Recursively adds the ComponentDescriptors of all components in this ComponentDef's children to the provided set.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * The set may then be used to analyze freshness of all of those types to see if any of them should be recompiled
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @param dependencies A Set that this method will append RootDescriptors to for every RootDef that this
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (AttributeDefRef facet : this.facets) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            facet.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.add(extendsDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (DefDescriptor<InterfaceDef> intf : interfaces) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.add(intf);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (RegisterEventDef register : events.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            register.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (EventHandlerDef handler : eventHandlers) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            handler.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.addAll(controllerDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.add(modelDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.addAll(rendererDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.addAll(helperDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.addAll(resourceDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.add(styleDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (templateDefDescriptor != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.add(templateDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.add(cmpThemeDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.add(designDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dependencies.add(svgDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                dependencies.add(imported.getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            dep.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public void appendSupers(Set<DefDescriptor<?>> supers) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            supers.add(getExtendsDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (DefDescriptor<InterfaceDef> interfaze : getInterfaces()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            supers.add(interfaze);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public void addClientLibs(List<ClientLibraryDef> clientLibs) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        clientLibs.addAll(this.clientLibraries);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        Set<ResourceDef> resourceDefs = Sets.newHashSet();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                resourceDefs.add(resourceDesc.getDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * This is used to validate by the compiler to validate EventDefRefs.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @return all the events this component can fire, including those inherited
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public Map<String, RegisterEventDef> getRegisterEventDefs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        Map<String, RegisterEventDef> ret = new LinkedHashMap<>();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (DefDescriptor<InterfaceDef> intf : interfaces) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            InterfaceDef intfDef = intf.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return Collections.unmodifiableMap(ret);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @return all the handlers on this component, including those inherited
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public Collection<EventHandlerDef> getHandlerDefs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return eventHandlers;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @return all the library imports from this component, including those inherited
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @return all the attributes for this component, including those inherited from a super component
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        Map<DefDescriptor<AttributeDef>, AttributeDef> map = new LinkedHashMap<>();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            map.putAll(getSuperDef().getAttributeDefs());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (DefDescriptor<InterfaceDef> intf : interfaces) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            InterfaceDef intfDef = intf.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            for (Map.Entry<DefDescriptor<AttributeDef>, AttributeDef> entry : intfDef.getAttributeDefs().entrySet()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (map.containsKey(desc)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    // FIXMEDLP - do some validation #W-690040
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                map.put(desc, entry.getValue());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (map.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return attributeDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            map.putAll(attributeDefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return Collections.unmodifiableMap(map);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret = new ArrayList<>();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.addAll(this.controllerDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.addAll(getSuperDef().getControllerDefDescriptors());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public ControllerDef getDeclaredControllerDef() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public DefDescriptor<ComponentDef> getTemplateDefDescriptor() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return templateDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public ComponentDef getTemplateDef() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (templateDefDescriptor == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return getSuperDef().getTemplateDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return templateDefDescriptor.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public boolean isAbstract() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return isAbstract;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public boolean isExtensible() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public boolean isTemplate() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return isTemplate;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public Set<DefDescriptor<InterfaceDef>> getInterfaces() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return interfaces;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private Set<DefDescriptor<InterfaceDef>> getAllInterfaces() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        Set<DefDescriptor<InterfaceDef>> ret = Sets.newLinkedHashSet();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (DefDescriptor<InterfaceDef> intf : interfaces) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            addAllInterfaces(intf, ret);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private void addAllInterfaces(DefDescriptor<InterfaceDef> intf, Set<DefDescriptor<InterfaceDef>> set)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        set.add(intf);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        for (DefDescriptor<InterfaceDef> zuper : intf.getDef().getExtendsDescriptors()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            set.add(zuper);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            addAllInterfaces(zuper, set);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @see java.lang.Object#equals(java.lang.Object)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (obj instanceof BaseComponentDefImpl) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            BaseComponentDefImpl<?> other = (BaseComponentDefImpl<?>) obj;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return getDescriptor().equals(other.getDescriptor())
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    && controllerDescriptors.equals(other.controllerDescriptors)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                            : modelDefDescriptor.equals(other.modelDefDescriptor))
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                            : extendsDescriptor.equals(other.extendsDescriptor))
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                            : cmpThemeDescriptor.equals(other.cmpThemeDescriptor))
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    && events.equals(other.events)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    && getLocation().equals(other.getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @see RootDefinitionImpl#hashCode()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public int hashCode() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * Serialize this component to json. The output will include all of the attributes, events, and handlers inherited.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * It doesn't yet include inherited ComponentDefRefs, but maybe it should.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            boolean preloaded = context.isPreloaded(getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            boolean preloading = context.isPreloading();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (preloaded) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                json.writeValue(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                json.writeMapEntry("descriptor", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                context.pushCallingDescriptor(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    if (rendererDef != null && !rendererDef.isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        json.writeMapEntry("rendererDef", rendererDef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                } finally {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    context.popCallingDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (helperDef != null && !helperDef.isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("helperDef", helperDef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                json.writeMapEntry("styleDef", getStyleDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                json.writeMapEntry("controllerDef", getControllerDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                json.writeMapEntry("modelDef", getModelDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                json.writeMapEntry("superDef", getSuperDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (preloading) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("isCSSPreloaded", preloading);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                Collection<AttributeDef> attrDefs = getAttributeDefs().values();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (!attrDefs.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("attributeDefs", attrDefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                Set<DefDescriptor<InterfaceDef>> allInterfaces = getAllInterfaces();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (allInterfaces != null && !allInterfaces.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("interfaces", allInterfaces);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                Collection<RegisterEventDef> regevents = getRegisterEventDefs().values();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("registerEventDefs", regevents);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                Collection<EventHandlerDef> handlers = getHandlerDefs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (!handlers.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("handlerDefs", handlers);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("imports", imports);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (!facets.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("facets", facets);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                boolean local = hasLocalDependencies();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (local) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("hasServerDeps", true);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (isAbstract) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("isAbstract", isAbstract);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (providerDef != null && !providerDef.isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("providerDef", providerDef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("subDefs", subDefs.values());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (mode.equals(Mode.AUTOJSTEST)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    json.writeMapEntry("testSuiteDef", getTestSuiteDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                serializeFields(json);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        } catch (QuickFixException e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            throw new RuueUnhandledException("unhandled exception", e);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    protected abstract void serializeFields(Json json) throws IOException,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public RendererDef getLocalRendererDef() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (def.isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @return The primary renderer def. If multiple exist, this will be the remote one.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (!def.isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @return The primary helper def. If multiple exist, this will be the remote one.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (!def.isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @see ComponentDef#getLocalModelDefDescriptor()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public DefDescriptor<ModelDef> getLocalModelDefDescriptor() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        context.pushCallingDescriptor(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        } finally {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            context.popCallingDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        List<DefDescriptor<ModelDef>> ret = new ArrayList<>();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.add(modelDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.addAll(getSuperDef().getModelDefDescriptors());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public List<ClientLibraryDef> getClientLibraries() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return clientLibraries;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public static abstract class Builder<T extends BaseComponentDef> extends
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            RootDefinitionImpl.Builder<T> implements BaseComponentDefBuilder<T> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder(Class<T> defClass) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            super(defClass);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public boolean isAbstract;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public boolean isExtensible;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public boolean isTemplate;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public DefDescriptor<ComponentDef> templateDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public List<AttributeDefRef> facets;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Set<DefDescriptor<InterfaceDef>> interfaces;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Map<String, RegisterEventDef> events;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public List<EventHandlerDef> eventHandlers;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public WhitespaceBehavior whitespaceBehavior;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public List<ClientLibraryDef> clientLibraries;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        private RenderType renderType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> setFacet(String key, Object value) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (facets == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                facets = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            AttributeDefRefImpl.Builder atBuilder = new AttributeDefRefImpl.Builder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            atBuilder.setDescriptor(key);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            atBuilder.setLocation(getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            atBuilder.setValue(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            facets.add(atBuilder.build());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public void addRenderer(String name) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                this.rendererDescriptors = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.rendererDescriptors.add(DefDescriptorImpl.getInstance(name, RendererDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public void addHelper(String name) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                this.helperDescriptors = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.helperDescriptors.add(DefDescriptorImpl.getInstance(name, HelperDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public void addResource(String name) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                this.resourceDescriptors = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.resourceDescriptors.add(DefDescriptorImpl.getInstance(name, ResourceDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> addControllerDef(ControllerDef controllerDef) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                controllerDescriptors = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            controllerDescriptors.add(controllerDef.getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> addInterfaceDef(InterfaceDef interfaceDef) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (interfaces == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                interfaces = Sets.newLinkedHashSet();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            interfaces.add(interfaceDef.getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> addRendererDef(RendererDef rendererDef) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                rendererDescriptors = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            rendererDescriptors.add(rendererDef.getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> setAbstract(boolean abs) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.isAbstract = abs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> setExtensible(boolean extensible) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.render = renderType.name();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> setWhitespaceBehavior(WhitespaceBehavior whitespaceBehavior) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.whitespaceBehavior = whitespaceBehavior;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> setTemplateDef(ComponentDef templateDef) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.templateDefDescriptor = templateDef.getDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> setTemplate(String templateName) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.templateDefDescriptor = Ruue.getDefinitionService().getDefDescriptor(templateName, ComponentDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> addDependency(DependencyDef dependency) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                this.dependencies = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.dependencies.add(dependency);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        public Builder<T> addClientLibrary(ClientLibraryDef clientLibrary) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            if (this.clientLibraries == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                this.clientLibraries = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            this.clientLibraries.add(clientLibrary);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    this.renderType = RenderType.valueOf(render.toUpperCase());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                } catch (Exception e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    setParseError(e);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @see RootDefinition#isInstanceOf(DefDescriptor)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public boolean isInstanceOf(DefDescriptor<? extends RootDefinition> other) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        case INTERFACE:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            for (DefDescriptor<InterfaceDef> intf : interfaces) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (intf.equals(other) || intf.getDef().isInstanceOf(other)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return (extendsDescriptor != null && getSuperDef().isInstanceOf(other));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        case COMPONENT:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        case APPLICATION:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return descriptor.equals(other)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                            .isInstanceOf(other));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        default:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @see ComponentDef#getFacets()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public List<AttributeDefRef> getFacets() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return facets;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        List<DefDescriptor<?>> ret = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.addAll(controllerDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.addAll(rendererDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.add(modelDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.addAll(providerDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.add(styleDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.addAll(helperDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (documentationDescriptor != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret.add(documentationDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * This should not be here it should be a call off of MDR.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public boolean isLocallyRenderable() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return isLocallyRenderable(Sets.<DefDescriptor<?>> newLinkedHashSet());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * Helper routine for public call. DIE! please?
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:     * @param already the set of processed descriptors.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    private boolean isLocallyRenderable(Set<DefDescriptor<?>> already) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // FIXME: OMG W-1501702 really?!?!?!
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // We desperately need to make this go away. It is heinousness
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // incarnate, but the entirety of server side rendering is blocking
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // Currently, the server side throws an UnsupportedOperationException,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // so the styles (which is one part that currently breaks) never get
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // also see W-922563
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // This will probably stay here til we fix server side rendering (or at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // least the style part). Also, we need to allow dual renderers.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        if (this.getDescriptor().getQualifiedName().equals("markup://ruau:placeholder")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        RendererDef rendererDef = getLocalRendererDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        boolean ret = false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // have a local renderer?
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            // ok, is there a remote one?
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // If we've gotten this far, let's check for remote providers
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            ret = ret && isInConcreteAndHasLocalProvider();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // If we've gotten this far, let's check for controllers.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // If we've gotten this far, let's check for Styles (server rendering
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        // If we've gotten this far, let's spider dependencies.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            Set<DefDescriptor<?>> deps = Sets.newLinkedHashSet();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:            appendDependencies(deps);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                if (!already.contains(dep)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                    already.add(dep);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        BaseComponentDefImpl<?> depDef = (BaseComponentDefImpl<?>) dep.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                            ret = ret && depDef.isLocallyRenderable(already);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                                return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        InterfaceDefImpl depDef = (InterfaceDefImpl) dep.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        ret = ret && depDef.isInConcreteAndHasLocalProvider();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:                        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public WhitespaceBehavior getWhitespaceBehavior() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:        return whitespaceBehavior;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/BaseComponentDefImpl.java:    public abstract DefDescriptor<T> getDefaultExtendsDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import javax.annotation.concurrent.Immutable;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.builder.ComponentDefRefBuilder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.builder.LazyComponentDefRefBuilder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.throwable.quickfix.InvalidReferenceException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:@Immutable
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:public class LazyComponentDefRef extends ComponentDefRefImpl {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:    private static final long serialVersionUID = -957235808680675063L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:    public static final DefDescriptor<ComponentDef> PLACEHOLDER_DESC = DefDescriptorImpl.getInstance(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            "ruau:placeholder", ComponentDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:    private static final Set<String> acceptableAttributeTypes = Sets.newHashSet("Integer", "Long", "Double", "Decimal",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            "Boolean", "String", "Date", "DateTime");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:    public LazyComponentDefRef(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        DefDescriptor<?> descriptor = (DefDescriptor<?>) getAttributeDefRef("refDescriptor").getValue(); 
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        dependencies.add(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        ComponentDef def = ((DefDescriptor<ComponentDef>) getAttributeDefRef("refDescriptor").getValue()).getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        Map<DefDescriptor<AttributeDef>, Object> lazyAttributes = (Map<DefDescriptor<AttributeDef>, Object>) getAttributeDefRef(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:                "attributes").getValue();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        for (DefDescriptor<AttributeDef> at : lazyAttributes.keySet()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            AttributeDef other = def.getAttributeDef(at.getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:                throw new InvalidReferenceException(String.format("Attribute %s does not exist", at.getName()),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:                        getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            if (!(otherType.getPrefix().equals("ruau") && acceptableAttributeTypes.contains(otherType.getName()))) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:                throw new InvalidReferenceException(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:                        String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:                                "Lazy Component References can only have attributes of simple types passed in (%s is not simple)",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:                                at.getName()), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        super.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:    public static class Builder extends ComponentDefRefImpl.Builder implements LazyComponentDefRefBuilder {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        private final Map<DefDescriptor<AttributeDef>, Object> lazyAttributes = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            this.setComponentAttribute("attributes", lazyAttributes);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        public Builder setComponentAttribute(String key, Object value) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            AttributeDefRefImpl.Builder valueBuilder = new AttributeDefRefImpl.Builder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            valueBuilder.setDescriptor(DefDescriptorImpl.getInstance(key, AttributeDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            valueBuilder.setValue(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            AttributeDefRef adr = valueBuilder.build();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            super.setAttribute(adr.getDescriptor(), adr);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        public Builder setAttribute(DefDescriptor<AttributeDef> key, AttributeDefRef value) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            lazyAttributes.put(key, value.getValue());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:            return new LazyComponentDefRef(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/LazyComponentDefRef.java:        public ComponentDefRefBuilder setLoad(Load load) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import java.util.Collection;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.util.json.Json.Serialization;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * The real runtime component thing that sits in the tree. The Component
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java: * interface is just what is exposed to models
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:@Serialization(referenceType = ReferenceType.IDENTITY)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:public final class ComponentImpl extends BaseComponentImpl<ComponentDef, Component> implements Component {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:    public ComponentImpl(DefDescriptor<ComponentDef> descriptor, Map<String, Object> attributes)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:        super(descriptor, attributes);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:    public ComponentImpl(DefDescriptor<ComponentDef> descriptor, Collection<AttributeDefRef> attributeDefRefs,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:            BaseComponent<?, ?> attributeValueProvider, String localId) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:        super(descriptor, attributeDefRefs, attributeValueProvider, localId);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:    protected void createSuper() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:            	Ruue.getDefinitionService().getDefRegistry().assertAccess(descriptor, superDefDescriptor.getDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:            RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:            context.pushCallingDescriptor(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:            BaseComponent<?, ?> oldComponent = context.setCurrentComponent(new ProtoComponentImpl(descriptor,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                    getGlobalId(), attributeSet));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                ProviderDef providerDef = root.getLocalProviderDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                        // In this case, we have a 'remote' provider (i.e. client side) and we simply
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                        // continue on as if nothing happened.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                    	throw new InvalidDefinitionException(String.format("%s cannot be instantiated directly.",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            descriptor), root.getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                if (providerDef.isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                        if (remoteProviderDef == null || remoteProviderDef.isLocal()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            hasLocalDependencies = true;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                                throw new RuueRuntimeException(String.format("%s is not a component", descriptor));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            if (c.isAbstract()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                                throw new RuueRuntimeException(String.format("%s cannot be instantiated directly.",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            // new component may have its own controllerdef so add that one
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                                this.valueProviders.put(ValueProviderType.CONTROLLER.getPrefix(), cd);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                        } catch (DefinitionNotFoundException dnfe) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            throw new RuueRuntimeException(String.format("%s did not provide a valid component",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                        attributeSet.setRootDefDescriptor(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                        Map<String, Object> providedAttributes = config.getAttributes();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            // if there is a remote provider and attributes were
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            // set, we assume/pray the remote provider does too
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            hasProvidedAttributes = true;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            attributeSet.startTrackingDirtyValues();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                            attributeSet.set(providedAttributes);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:            } finally {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                context.popCallingDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:            BaseComponent<?, ?> attributeValueProvider = attributeSet.getValueProvider();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:            if (attributeValueProvider != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:                attributeValueProvider.index(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:    private ComponentImpl(DefDescriptor<ComponentDef> descriptor, Component extender,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:            BaseComponent<?, ?> attributeValueProvider, Component concreteComponent) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/component/ComponentImpl.java:        super(descriptor, extender, attributeValueProvider, concreteComponent);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:package org.ruauframework.impl.root;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import java.util.Collection;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import java.util.HashSet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import java.util.Iterator;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.def.EventHandlerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.impl.expression.PropertyReferenceImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.impl.root.event.EventHandlerImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.impl.type.ComponentArrayTypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.impl.type.ComponentTypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.instance.Attribute;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.instance.AttributeSet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.instance.EventHandler;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.instance.Instance;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.instance.InstanceStack;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.instance.ValueProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.instance.Wrapper;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.throwable.RuueUnhandledException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.throwable.quickfix.AttributeNotFoundException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.throwable.quickfix.MissingRequiredAttributeException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.util.json.Json.Serialization;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:@Serialization(referenceType = ReferenceType.IDENTITY)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:public class AttributeSetImpl implements AttributeSet {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private static final Location SUPER_PASSTHROUGH = RuueUtil
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            .getExternalLocation("super component attribute passthrough");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private DefDescriptor<? extends RootDefinition> rootDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private final Map<DefDescriptor<AttributeDef>, Attribute> attributes = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private final Map<DefDescriptor<EventHandlerDef>, EventHandler> events = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private final BaseComponent<?, ?> valueProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private final Instance<?> parent;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private boolean trackDirty = false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            BaseComponent<?, ?> valueProvider, Instance<?> parent) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        this.valueProvider = valueProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        this.parent = parent;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        setDefaults();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        setDefaults();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private void setDefaults() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        Map<DefDescriptor<AttributeDef>, AttributeDef> attrs = rootDefDescriptor.getDef().getAttributeDefs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        for (Map.Entry<DefDescriptor<AttributeDef>, AttributeDef> attr : attrs.entrySet()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            AttributeDefRef ref = attr.getValue().getDefaultValue();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            if (ref != null && !attributes.containsKey(attr.getKey())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private void set(EventHandler eventHandler) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        events.put(eventHandler.getDescriptor(), eventHandler);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private void set(Attribute attribute) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (trackDirty) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            attribute.markDirty();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        attributes.put(attribute.getDescriptor(), attribute);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private void set(AttributeDefRef attributeDefRef) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        Map<DefDescriptor<AttributeDef>, AttributeDef> attributeDefs = def.getAttributeDefs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        AttributeDef attributeDef = attributeDefs.get(attributeDefRef.getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        // setAndValidateAttribute should be merged with creating the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        AttributeImpl attribute;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (attributeDef == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            Map<String, RegisterEventDef> events = def.getRegisterEventDefs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            if (events.containsKey(attributeDefRef.getDescriptor().getName())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                EventHandlerImpl eh = new EventHandlerImpl(attributeDefRef.getDescriptor().getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                Object o = attributeDefRef.getValue();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                if (!(o instanceof PropertyReference)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    // FIXME: where are we?
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    throw new InvalidDefinitionException(String.format("%s no can haz %s", eh.getName(), o),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                // FIXME: where are we?
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                throw new AttributeNotFoundException(rootDefDescriptor, attributeDefRef.getName(), SUPER_PASSTHROUGH);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            attribute = new AttributeImpl(attributeDef.getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        Object value = attributeDefRef.getValue();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        InstanceStack iStack = Ruue.getContextService().getCurrentContext().getInstanceStack();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        iStack.markParent(parent);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        iStack.setAttributeName(attributeDef.getDescriptor().toString());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        value = attributeDef.getTypeDef().initialize(value, valueProvider);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        iStack.clearAttributeName(attributeDef.getDescriptor().toString());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        iStack.clearParent(parent);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        attribute.setValue(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        set(attribute);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public void set(Collection<AttributeDefRef> attributeDefRefs) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        for (AttributeDefRef attributeDefRef : attributeDefRefs) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            set(attributeDefRef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public void set(Collection<AttributeDefRef> facetDefRefs, AttributeSet attributeSet) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        Map<DefDescriptor<AttributeDef>, AttributeDef> attrs = rootDef.getAttributeDefs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        Map<DefDescriptor<?>, Object> lookup = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        for (Attribute attribute : attributeSet) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            lookup.put(DefDescriptorImpl.getInstance(attribute.getName(), AttributeDef.class), attribute);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        for (AttributeDefRef attributeDefRef : facetDefRefs) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            lookup.put(attributeDefRef.getDescriptor(), attributeDefRef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        for (DefDescriptor<AttributeDef> desc : attrs.keySet()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            Object val = lookup.get(desc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            if (val != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                if (val instanceof Attribute) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    Attribute attribute = (Attribute) val;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    setExpression(attribute.getDescriptor(), new PropertyReferenceImpl("v." + attribute.getName(),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                } else if (val instanceof AttributeDefRef) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    set((AttributeDefRef) val);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public void set(Map<String, Object> attributeMap) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (attributeMap != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            Map<DefDescriptor<AttributeDef>, AttributeDef> attrs = rootDef.getAttributeDefs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            for (Map.Entry<String, Object> entry : attributeMap.entrySet()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                DefDescriptor<AttributeDef> desc = DefDescriptorImpl.getInstance(entry.getKey(), AttributeDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                if (attrs.containsKey(desc)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    setExpression(desc, entry.getValue());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public Object getValue(String name) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        PropertyReference expr = new PropertyReferenceImpl(name,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                RuueUtil.getExternalLocation("direct attributeset access"));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            throw new InvalidDefinitionException("No dots allowed", expr.getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        return getValue(expr);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public <T> T getValue(String name, Class<T> clazz) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        Object val = getValue(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (val == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            return clazz.cast(val);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        } catch (ClassCastException cce) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            throw new RuueRuntimeException("attribute <" + name + "> is of the wrong type: expected "
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    + clazz.getName() + " but got " + val.getClass().getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public Object getExpression(String name) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        DefDescriptor<AttributeDef> desc = DefDescriptorImpl.getInstance(name, AttributeDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        Attribute at = attributes.get(desc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (at != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            return at.getValue();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    private void setExpression(DefDescriptor<AttributeDef> desc, Object value) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        AttributeDef ad = rd.getAttributeDefs().get(desc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (ad == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            // this location isn't even close to right...
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            throw new InvalidDefinitionException(String.format("Attribute %s not defined on %s", desc.getName(),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    rootDefDescriptor.getName()), rd.getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        AttributeImpl att = new AttributeImpl(desc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (value instanceof Expression) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            att.setValue(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            InstanceStack iStack = Ruue.getContextService().getCurrentContext().getInstanceStack();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            iStack.markParent(parent);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            iStack.setAttributeName(desc.toString());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            att.setValue(rootDefDescriptor.getDef().getAttributeDef(att.getName()).getTypeDef().initialize(value, null));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            iStack.clearAttributeName(desc.toString());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            iStack.clearParent(parent);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        set(att);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public Object getValue(PropertyReference expr) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        Object value = getExpression(expr.getRoot());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (value instanceof Expression) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            value = ((Expression) value).evaluate(valueProvider);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (value instanceof ValueProvider && stem != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            value = ((ValueProvider) value).getValue(stem);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            AttributeDef attributeDef = rootDefDescriptor.getDef().getAttributeDef(expr.getRoot());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            value = attributeDef.getTypeDef().wrap(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            if (value instanceof ValueProvider) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                value = ((ValueProvider) value).getValue(stem);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        if (value instanceof Wrapper) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            value = ((Wrapper) value).unwrap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        return value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            json.writeMapEntry("valueProvider", valueProvider);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            if (!attributes.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                json.writeMapKey("values");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                for (Attribute attribute : attributes.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    String name = attribute.getName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    AttributeDef attributeDef = def.getAttributeDef(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    if (attributeDef == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                        throw new AttributeNotFoundException(rootDefDescriptor, name, def.getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    if (attributeDef.getSerializeTo() == AttributeDef.SerializeToType.BOTH) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                        TypeDef typeDef = attributeDef.getTypeDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                        if ((valueProvider == null && !((typeDef instanceof ComponentArrayTypeDef) || (typeDef instanceof ComponentTypeDef)))
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                                || attribute.isDirty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                            json.writeMapEntry(name, attribute.getValue());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                json.writeMapEntry("events", events);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        } catch (QuickFixException e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            throw new RuueUnhandledException("unhandled exception", e);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        return attributes.size();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:     * @return Returns the valueProvider.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public BaseComponent<?, ?> getValueProvider() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        return valueProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public Iterator<Attribute> iterator() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        return attributes.values().iterator();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public boolean isEmpty() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        return attributes.isEmpty() && events.isEmpty();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public void startTrackingDirtyValues() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        trackDirty = true;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:    public void validate() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            throw new MissingRequiredAttributeException(rootDefDescriptor, missingAttributes.iterator().next()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    .getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        Map<DefDescriptor<AttributeDef>, AttributeDef> attrs = rootDefDescriptor.getDef().getAttributeDefs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:        for (Map.Entry<DefDescriptor<AttributeDef>, AttributeDef> attr : attrs.entrySet()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:            if (attr.getValue().isRequired() && !attributes.containsKey(attr.getKey())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                    missingAttributes = new HashSet<AttributeDef>(attrs.entrySet().size());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeSetImpl.java:                missingAttributes.add(attr.getValue());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:package org.ruauframework.impl.root;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * The definition of an attribute. Holds all information about a given component's AttributeDefRef, aside from the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java: * actual ValueDefRef. AttrbitueInfos are immutable. Once they are created, they can only be replaced, never changed.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:public final class AttributeDefImpl extends DefinitionImpl<AttributeDef> implements AttributeDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * Construct an AttributeDef
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @param descriptor the descriptor of this attribute
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @param parentDescriptor the parent descriptor of this attribute
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @param typeDefDescriptor The TypeDef Descriptor for the Type of instances of this AttributeDef
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @param defaultValue The ValueDef for the default value to be used if no Value is set on the Attribute instance
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @param required true if is required that this attribute Value be set (not defaulted) on Attribute instances that
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @param location The location where this AttributeDef was defined in the markup.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:                            DefDescriptor<? extends RootDefinition> parentDescriptor, DefDescriptor<TypeDef> typeDefDescriptor,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:                            AttributeDefRef defaultValue, boolean required, SerializeToType serializeTo, Location location , Visibility visibility) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        super(descriptor, location, visibility);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        this.parentDescriptor = parentDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        this.defaultValue = defaultValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        this.serializeTo = serializeTo;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        this.parentDescriptor = builder.parentDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        this.defaultValue = builder.defaultValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        this.serializeTo = builder.serializeTo;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @return The ValueDef that defines type information about Values for instances of this AttributeDef
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @return The default value to be used for instances of this AttributeDef that do not have a Value explicitly set
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    public AttributeDefRef getDefaultValue() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        return defaultValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @return True if instances must require a value to be explicitly set
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    public boolean isRequired() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @return SERVER if this attribute should only be serialized from client to server, BOTH if serialization should
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     *         occur in both directions (the default)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    public SerializeToType getSerializeTo() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        return serializeTo != null ? serializeTo : SerializeToType.BOTH;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        json.writeMapEntry("name", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        json.writeMapEntry("type", typeDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        if (defaultValue != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            json.writeMapEntry("default", defaultValue.getValue());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            json.writeMapEntry("required", true);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        if (defaultValue != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            defaultValue.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        dependencies.add(typeDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            throw new InvalidDefinitionException("Invalid typeDefDescriptor: null", getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        String name = this.descriptor.getName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        // Calls the validateAttributeName method in RuueTextUtil.java to check if its a valid attribute name
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        if ((RuueTextUtil.validateAttributeName(name)) != true) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            throw new InvalidDefinitionException("Invalid attribute name: '" + name
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:                    + "', Refer to RuueDocs for valid attribute names", getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        if (this.serializeTo == SerializeToType.INVALID) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            throw new InvalidDefinitionException("Invalid serializeTo value", getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            throw new InvalidDefinitionException("Cannot set an attribute as required and private", getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            if (defaultValue != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:                defaultValue.parseValue(typeDef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:                defaultValue.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        } catch (RuueRuntimeException e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            if (e.getCause() instanceof ClassNotFoundException) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:                throw new DefinitionNotFoundException(typeDefDescriptor, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:                throw e; // Don't try to be clever about unknown bad things!
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:     * @return Returns the parentDescriptor.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    public DefDescriptor<? extends RootDefinition> getParentDescriptor() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        return parentDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<AttributeDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            super(AttributeDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        public AttributeDefRef defaultValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        public SerializeToType serializeTo;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        private DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        private boolean required;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * @see org.ruauframework.impl.system.DefinitionImpl.BuilderImpl#build()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * Sets the parentDescriptor for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * @param parentDescriptor The parentDescriptor.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        public Builder setParentDescriptor(DefDescriptor<? extends RootDefinition> parentDescriptor) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            this.parentDescriptor = parentDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * Sets the typeDefDescriptor for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * @param typeDefDescriptor The typeDefDescriptor.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * Sets the defaultValue for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * @param defaultValue The defaultValue.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        public Builder setDefaultValue(AttributeDefRef defaultValue) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            this.defaultValue = defaultValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * Sets whether or not this instance is required.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * @param required The required.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        public Builder setRequired(boolean required) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:         * Sets how this attribute should be serialized (to client, to server, or both (default)).
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:        public Builder setSerializeTo(SerializeToType serializeTo) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:            this.serializeTo = serializeTo;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    private static final long serialVersionUID = 2241357665688011566L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    private final DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    private final DefDescriptor<TypeDef> typeDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    private final AttributeDefRef defaultValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    private final boolean required;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefImpl.java:    private final SerializeToType serializeTo;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:package org.ruauframework.impl.root.intf;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import java.util.Collections;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import java.util.LinkedHashMap;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.impl.root.RootDefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * The definition of an interface. Holds all information about a given type of
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * interface. InterfaceDefs are immutable singletons per type. Once they are
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java: * created, they can only be replaced, never changed.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:public class InterfaceDefImpl extends RootDefinitionImpl<InterfaceDef> implements InterfaceDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    private static final long serialVersionUID = 2253697052585693264L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    private final Set<DefDescriptor<InterfaceDef>> extendsDescriptors;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    private final Map<String, RegisterEventDef> events;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    private final int hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    protected InterfaceDefImpl(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        this.extendsDescriptors = RuueUtil.immutableSet(builder.extendsDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        this.events = RuueUtil.immutableMap(builder.events);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        this.hashCode = RuueUtil.hashCode(super.hashCode(), extendsDescriptors, events);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            throw new InvalidDefinitionException("Descriptor cannot be null for InterfaceDef", getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        for (AttributeDef att : this.attributeDefs.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            att.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            if (events.containsKey(att.getName())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:                throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:                        "Cannot define an attribute and register an event with the same name: %s", att.getName()),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:                        getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            if(att.getVisibility() == Visibility.PRIVATE){
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:                throw new InvalidDefinitionException("Cannot declare an Interface attribute as private",getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        for (RegisterEventDef reg : this.events.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            reg.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     * quick pass to ensure everything this extends and registers exists TODO:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     * lots of logic around making sure this doesn't clash with what it extends
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        super.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        MasterDefRegistry registry = Ruue.getDefinitionService().getDefRegistry();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        for (DefDescriptor<InterfaceDef> extended : extendsDescriptors) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            InterfaceDef def = extended.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:                throw new DefinitionNotFoundException(extended, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            if (extended.equals(descriptor)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:                throw new InvalidDefinitionException(String.format("%s cannot extend itself", getDescriptor()),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:                        getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            registry.assertAccess(descriptor, def);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        // make sure the registered events actually exist
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        for (RegisterEventDef reg : this.events.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            reg.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        for (AttributeDef att : this.attributeDefs.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            att.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     * Recursively adds the Descriptors of all RootDefs in this InterfaceDef's
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     * children to the provided set. The set may then be used to analyze
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     * freshness of all of those types to see if any of them should be
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     * @param dependencies A Set that this method will append RootDescriptors to
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     *            for every RootDef that this InterfaceDef requires
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        dependencies.addAll(extendsDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        for (RegisterEventDef register : this.events.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            register.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public Map<String, RegisterEventDef> getRegisterEventDefs()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            throws org.ruauframework.throwable.quickfix.QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        Map<String, RegisterEventDef> ret = new LinkedHashMap<String, RegisterEventDef>();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        for (DefDescriptor<InterfaceDef> extendsDescriptor : extendsDescriptors) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            InterfaceDef extendsDef = extendsDescriptor.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            return Collections.unmodifiableMap(ret);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     * @return all the attributes for this interface, including those inherited
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     *         from a super interface
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        Map<DefDescriptor<AttributeDef>, AttributeDef> ret = new LinkedHashMap<DefDescriptor<AttributeDef>, AttributeDef>();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        for (DefDescriptor<InterfaceDef> extendsDescriptor : extendsDescriptors) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            InterfaceDef extendsDef = extendsDescriptor.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            ret.putAll(attributeDefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            return attributeDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            return Collections.unmodifiableMap(ret);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public Set<DefDescriptor<InterfaceDef>> getExtendsDescriptors() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        if (obj instanceof InterfaceDefImpl) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            InterfaceDefImpl other = (InterfaceDefImpl) obj;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            // TODO: factor attributeDefs into this? #W-689622
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            return getDescriptor().equals(other.getDescriptor()) && extendsDescriptors.equals(other.extendsDescriptors)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:                    && events.equals(other.events) && getLocation().equals(other.getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public int hashCode() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        return hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:     * Used by Json.serialize
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        json.writeMapEntry("attributes", attributeDefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        json.writeMapEntry("isAbstract", true);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public static class Builder extends RootDefinitionImpl.Builder<InterfaceDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            super(InterfaceDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        public Set<DefDescriptor<InterfaceDef>> extendsDescriptors;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        public Map<String, RegisterEventDef> events;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        public InterfaceDefImpl build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            return new InterfaceDefImpl(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:    public boolean isInstanceOf(DefDescriptor<? extends RootDefinition> other) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        case INTERFACE:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            if (descriptor.equals(other)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            for (DefDescriptor<InterfaceDef> intf : extendsDescriptors) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:                if (intf.equals(other) || intf.getDef().isInstanceOf(other)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        default:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:            return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/intf/InterfaceDefImpl.java:        List<DefDescriptor<?>> ret = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:package org.ruauframework.impl.root.namespace;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.def.NamespaceDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.impl.root.RootDefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:public class NamespaceDefImpl extends RootDefinitionImpl<NamespaceDef> implements NamespaceDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    private static final long serialVersionUID = 7336912248343144688L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    private final Map<String, String> styleTokens;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    protected NamespaceDefImpl(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        this.styleTokens = RuueUtil.immutableMap(builder.styleTokens);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        DefinitionService ds = Ruue.getDefinitionService();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        dependencies.add(ds.getDefDescriptor("String", TypeDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        dependencies.add(ds.getDefDescriptor("Map", TypeDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    public Map<String, RegisterEventDef> getRegisterEventDefs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    public boolean isInstanceOf(DefDescriptor<? extends RootDefinition> other) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:            if (!key.equals(key.toUpperCase())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:                throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:                        "All keys in style tokens must be all caps.  %s is not.", key), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    public Map<String, String> getStyleTokens() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:    public static class Builder extends RootDefinitionImpl.Builder<NamespaceDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        private Map<String, String> styleTokens;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:            super(NamespaceDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        public NamespaceDefImpl build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:            return new NamespaceDefImpl(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/namespace/NamespaceDefImpl.java:        public Builder setStyleTokens(Map<String, String> styleTokens) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:package org.ruauframework.impl.root.application;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import java.util.Collections;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.builder.ApplicationDefBuilder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.impl.RuueImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.impl.root.component.BaseComponentDefImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:import com.google.common.base.Objects;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * The definition of an Application. Holds all information about a given type of application. ApplicationDefs are
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java: * immutable singletons per type of Application. Once they are created, they can only be replaced, never changed.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:public class ApplicationDefImpl extends BaseComponentDefImpl<ApplicationDef> implements ApplicationDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public static final DefDescriptor<ApplicationDef> PROTOTYPE_APPLICATION = DefDescriptorImpl.getInstance(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            "markup://ruau:application", ApplicationDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    protected ApplicationDefImpl(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        this.locationChangeEventDescriptor = builder.locationChangeEventDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        this.layoutsDefDescriptor = builder.layoutsDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        this.isAppcacheEnabled = builder.isAppcacheEnabled;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        this.additionalAppCacheURLs = builder.additionalAppCacheURLs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        this.isOnePageApp = builder.isOnePageApp;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        this.themeDescriptors = RuueUtil.immutableList(builder.themeDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        this.hashCode = RuueUtil.hashCode(super.hashCode(), themeDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public static class Builder extends BaseComponentDefImpl.Builder<ApplicationDef> implements ApplicationDefBuilder {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        public DefDescriptor<EventDef> locationChangeEventDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        public DefDescriptor<LayoutsDef> layoutsDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        public Boolean isAppcacheEnabled;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        public Boolean isOnePageApp;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        public String additionalAppCacheURLs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        public List<DefDescriptor<ThemeDef>> themeDescriptors = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            super(ApplicationDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        public ApplicationDefImpl build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            return new ApplicationDefImpl(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        public Builder setLayouts(LayoutsDef layouts) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            layoutsDefDescriptor = layouts.getDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        public ApplicationDefBuilder appendThemeDescriptor(DefDescriptor<ThemeDef> themeDescriptor) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            themeDescriptors.add(themeDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public DefDescriptor<ApplicationDef> getDefaultExtendsDescriptor() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        return ApplicationDefImpl.PROTOTYPE_APPLICATION;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:     * @return Returns the locationChangeEventDescriptor.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public DefDescriptor<EventDef> getLocationChangeEventDescriptor() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (locationChangeEventDescriptor == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            ApplicationDef superDef = getSuperDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                return superDef.getLocationChangeEventDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            return locationChangeEventDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public DefDescriptor<LayoutsDef> getLayoutsDefDescriptor() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        return layoutsDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    protected void serializeFields(Json json) throws IOException, QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        DefDescriptor<EventDef> locationChangeEventDescriptor = getLocationChangeEventDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (locationChangeEventDescriptor != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            json.writeMapEntry("locationChangeEventDef", locationChangeEventDescriptor.getDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (layoutsDefDescriptor != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            json.writeMapEntry("layouts", getLayoutsDefDescriptor().getDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public void retrieveLabels() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        super.retrieveLabels();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (layoutsDefDescriptor != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            LayoutsDef layouts = layoutsDefDescriptor.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            layouts.retrieveLabels();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (layoutsDefDescriptor != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            dependencies.add(layoutsDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            dependencies.add(themeDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (locationChangeEventDescriptor != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            dependencies.add(locationChangeEventDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public Boolean isAppcacheEnabled() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        return isAppcacheEnabled != null ? isAppcacheEnabled : getSuperDef().isAppcacheEnabled();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public List<String> getAdditionalAppCacheURLs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (additionalAppCacheURLs != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            Expression expression = RuueImpl.getExpressionAdapter().buildExpression(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                    TextTokenizer.unwrap(additionalAppCacheURLs), null);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            if (!(expression instanceof PropertyReference)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                throw new RuueRuntimeException(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                        "Value of 'additionalAppCacheURLs' attribute must be a reference to a server Action");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            ActionDef actionDef = controllerDef.getSubDefinition(ref.toString());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            Action action = Ruue.getInstanceService().getInstance(actionDef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            Action previous = context.setCurrentAction(action);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                action.run();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            } finally {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            List<String> additionalURLs = (List<String>) action.getReturnValue();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            if (additionalURLs != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                urls = additionalURLs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public Boolean isOnePageApp() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        return isOnePageApp;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        super.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        // MasterDefRegistry reg =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        // Ruue.getContextService().getCurrentContext().getDefRegistry();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        EventDef locationChangeDef = getLocationChangeEventDescriptor().getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (!locationChangeDef.isInstanceOf(Ruue.getDefinitionService().getDefDescriptor("ruau:locationChange",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                EventDef.class))) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            throw new InvalidDefinitionException(String.format("%s must extend ruau:locationChange",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                    locationChangeDef.getDescriptor()), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            // the theme must not be a component theme. otherwise, it would allow users to circumvent var
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            // cross-reference validation (regular themes enforce that cross references are defined in the same file,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            // but cmp themes allow cross references to the namespace-default file.)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                throw new InvalidDefinitionException(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                        String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                                "%s must not specify a component-specific or app-specific theme as the main app theme",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                                getName()), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        List<DefDescriptor<?>> ret = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        ret.addAll(super.getBundle());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (layoutsDefDescriptor != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            ret.add(layoutsDefDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public int hashCode() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        return hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        if (obj instanceof ApplicationDefImpl) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            ApplicationDefImpl other = (ApplicationDefImpl) obj;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:            return super.equals(obj)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:                    && Objects.equal(this.themeDescriptors, other.themeDescriptors);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    private final DefDescriptor<EventDef> locationChangeEventDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    private final DefDescriptor<LayoutsDef> layoutsDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    private final List<DefDescriptor<ThemeDef>> themeDescriptors;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    private final int hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    private final Boolean isAppcacheEnabled;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    private final String additionalAppCacheURLs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    private final Boolean isOnePageApp;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationDefImpl.java:    private static final long serialVersionUID = 9044177107921912717L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:package org.ruauframework.impl.root.application;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import org.ruauframework.impl.root.component.BaseComponentImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import org.ruauframework.instance.Application;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import org.ruauframework.util.json.Json.Serialization;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:@Serialization(referenceType = ReferenceType.IDENTITY)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:public class ApplicationImpl extends BaseComponentImpl<ApplicationDef, Application> implements Application {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:    public ApplicationImpl(ApplicationDef def, Map<String, Object> attributes) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:        super(def, attributes);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:    public ApplicationImpl(DefDescriptor<ApplicationDef> descriptor, Map<String, Object> attributes)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:        super(descriptor, attributes);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:    protected ApplicationImpl(DefDescriptor<ApplicationDef> descriptor, Application extender,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:            BaseComponent<?, ?> attributeValueProvider, Application concreteApplication) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:        super(descriptor, extender, attributeValueProvider, concreteApplication);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:    protected void createSuper() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:        ApplicationDef def = getComponentDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:            DefDescriptor<ApplicationDef> superDefDescriptor = def.getExtendsDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:            	Ruue.getDefinitionService().getDefRegistry().assertAccess(descriptor, superDefDescriptor.getDef());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:            	Application concrete = concreteComponent == null ? this : concreteComponent;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/application/ApplicationImpl.java:                superComponent = new ApplicationImpl(superDefDescriptor, this, this, concrete);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:package org.ruauframework.impl.root;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import java.util.Collection;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.throwable.quickfix.InvalidExpressionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.util.json.Json.Serialization;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * A reference to an attribute.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java: * FIXME: W-1328558 This should extend DefinitionImpl<AttributeDefRef> and getAttributeDescriptor should be an override
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:@Serialization(referenceType = ReferenceType.NONE)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:public class AttributeDefRefImpl extends DefinitionImpl<AttributeDef> implements AttributeDefRef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    private static final long serialVersionUID = -7125435060409783114L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    public static final String BODY_ATTRIBUTE_NAME = "body";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    // the original value , which could be a string representation
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    private final Object value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:     * if the original value was a string representation of a non-string type, then this is the value parsed from that
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:     * string this is set in the parseValue method which is called during the validateReferences stage of compilation
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    private Object parsedValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    private final int hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        this.value = builder.value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        this.parsedValue = value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        this.hashCode = RuueUtil.hashCode(descriptor, value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    public void parseValue(TypeDef typeDef) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        if (!(this.value instanceof Expression)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:                this.parsedValue = typeDef.valueOf(this.value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:            } catch (Throwable t) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:                throw new InvalidExpressionException(t.getMessage(), getLocation(), t);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        Object v = this.getValue();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        if (v instanceof Definition) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:            ((Definition) v).validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        } else if (v instanceof Collection) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:                if (obj instanceof Definition) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:                    ((Definition) obj).validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        Object v = this.getValue();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        if (v instanceof Definition) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:            def.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        } else if (v instanceof Collection) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:                if (obj instanceof Definition) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:                    def.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        json.writeMapEntry("value", getValue());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    public Object getValue() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        return parsedValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    public boolean equals(Object o) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        if (o instanceof AttributeDefRefImpl) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:            return getName().equals(e.getName()) && value.equals(e.value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        // output the original value
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        return String.valueOf(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    public final int hashCode() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        return hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:    public static class Builder extends DefinitionImpl.RefBuilderImpl<AttributeDef, AttributeDefRef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:            super(AttributeDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        public Object value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:         * Sets the value for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:        public Builder setValue(Object value) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:            if (value == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:                throw new NullPointerException("Value cannot be null");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/AttributeDefRefImpl.java:            this.value = value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:package org.ruauframework.impl.root;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.impl.parser.ParserFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.impl.source.SourceFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.impl.system.DefFactoryImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.system.CacheableDefFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.system.Parser;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.system.Source;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.system.SourceWriter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * Creates new ComponentDefs from source or cache.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * Should not be used directly. Used by ComponentDefRegistry population of
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * registry. This is actually incorrectly typed, as it is not meant to return a
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java: * single type. We probably should allow a non-typed Factory, or somehow clean
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:public final class RootDefFactory extends DefFactoryImpl<RootDefinition> implements CacheableDefFactory<RootDefinition> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    private final SourceFactory sourceFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    public RootDefFactory(SourceFactory sourceFactory) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        this.sourceFactory = sourceFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        Source<?> source = sourceFactory.getSource(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:         * We don't require the xml file to actually exist for namespaces. The
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:         * existance of the dir is enough. If the dir doesn't exist, source will
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        Parser parser = ParserFactory.getParser(source.getFormat());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        def = parser.parse(descriptor, source);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    public long getLastMod(DefDescriptor<RootDefinition> descriptor) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        return sourceFactory.getSource(descriptor).getLastModified();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    public boolean hasFind() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    public Set<DefDescriptor<RootDefinition>> find(DefDescriptor<RootDefinition> matcher) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(matcher.getNamespace())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:            throw new RuueRuntimeException(String.format("Empty or malformed namespace in: %s",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:                    matcher.getQualifiedName()));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        return sourceFactory.find(matcher);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    public Set<DefDescriptor<?>> find(DescriptorFilter matcher) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        return sourceFactory.find(matcher);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    public Set<String> getNamespaces() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        return sourceFactory.getNamespaces();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    public void save(RootDefinition def) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        Source<?> source = sourceFactory.getSource(def.getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:            throw new RuueRuntimeException("Cannot find location to save definition.");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        // Before saving a new definition, clear the old definition in the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        source.clearContents();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        SourceWriter writer = ParserFactory.getWriter(source.getFormat());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:            DefDescriptor<ComponentDef> javaDescriptor = DefDescriptorImpl.getAssociateDescriptor(descriptor,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:                    ComponentDef.class, "java");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:            Source<?> source = sourceFactory.getSource(javaDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:                SourceWriter writer = ParserFactory.getWriter(source.getFormat());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        return sourceFactory.getSource(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:    public boolean exists(DefDescriptor<RootDefinition> descriptor) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/RootDefFactory.java:        Ruue.getLoggingService().incrementNum("RootDefFactory.exists");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:package org.ruauframework.impl.root.layouts;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import java.util.Collection;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.def.LayoutDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.def.LayoutItemDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:public class LayoutDefImpl extends DefinitionImpl<LayoutDef> implements LayoutDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    private static final long serialVersionUID = 8414825652777198915L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    private final Map<DefDescriptor<LayoutItemDef>, LayoutItemDef> layoutItemDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    private final String name;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    private final Object title;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    private final String match;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    protected LayoutDefImpl(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        layoutItemDefs = RuueUtil.immutableMap(builder.layoutItemDefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        this.name = builder.name;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        this.match = builder.match;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<LayoutDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:            super(LayoutDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        private Map<DefDescriptor<LayoutItemDef>, LayoutItemDef> layoutItemDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        private String name;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        private String match;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        private Object title;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        public LayoutDefImpl build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:            return new LayoutDefImpl(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        public Builder addLayoutItemDef(LayoutItemDef layoutItemDef) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:            if (this.layoutItemDefs == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:                this.layoutItemDefs = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:            this.layoutItemDefs.put(layoutItemDef.getDescriptor(), layoutItemDef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:         * Sets the name for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:         * @param name The name.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        public Builder setName(String name) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:            this.name = name;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        public String getName() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:            return this.name;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:         * Sets the match for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:         * @param match The match.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        public Builder setMatch(String match) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:            this.match = match;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:         * Sets the title for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:         * @param title The title.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    public Collection<LayoutItemDef> getLayoutItemDefs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        return this.layoutItemDefs.values();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        json.writeMapEntry("layoutItemDefs", getLayoutItemDefs());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        json.writeMapEntry("name", name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        json.writeMapEntry("title", title);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        json.writeMapEntry("match", match);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    public LayoutItemDef getLayoutItemDef(String containerName) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        SubDefDescriptor<LayoutDef, LayoutsDef> subdefDesc = (SubDefDescriptor<LayoutDef, LayoutsDef>) getDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        DefDescriptor<LayoutsDef> parentDesc = subdefDesc.getParentDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        DefDescriptor<?> desc = SubDefDescriptorImpl.getInstance(containerName, parentDesc, LayoutItemDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        return layoutItemDefs.get(desc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        Collection<LayoutItemDef> layoutItems = getLayoutItemDefs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:        for (LayoutItemDef layoutItem : layoutItems) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutDefImpl.java:            layoutItem.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:package org.ruauframework.impl.root.layouts;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import static org.ruauframework.instance.ValueProviderType.LABEL;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import java.util.Collection;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.def.LayoutDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.def.LayoutsDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.impl.root.RootDefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:public class LayoutsDefImpl extends RootDefinitionImpl<LayoutsDef> implements LayoutsDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    private static final long serialVersionUID = 309255009681421736L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    private final List<LayoutDef> layoutDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    private final Map<String, LayoutDef> layoutDefsByName;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    private final String catchall;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    private final String defaultLayout;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    private final Set<PropertyReference> expressionRefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    protected LayoutsDefImpl(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        layoutDefs = RuueUtil.immutableList(builder.layoutDefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        catchall = builder.catchall;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        defaultLayout = builder.defaultLayout;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        this.expressionRefs = RuueUtil.immutableSet(builder.expressionRefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        Map<String, LayoutDef> byName = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        for (LayoutDef layout : layoutDefs) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            byName.put(layout.getName(), layout);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        layoutDefsByName = RuueUtil.immutableMap(byName);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    public static class Builder extends RootDefinitionImpl.Builder<LayoutsDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            super(LayoutsDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        public List<LayoutDef> layoutDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        public String catchall;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        public String defaultLayout;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        public LayoutsDefImpl build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            return new LayoutsDefImpl(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        public void addLayoutDef(LayoutDef layoutDef) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            if (this.layoutDefs == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:                this.layoutDefs = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            this.layoutDefs.add(layoutDef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    public Collection<LayoutDef> getLayoutDefs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        return this.layoutDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    public Map<String, RegisterEventDef> getRegisterEventDefs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    public boolean isInstanceOf(DefDescriptor<? extends RootDefinition> other) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        json.writeMapEntry("layoutDefs", layoutDefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        json.writeMapEntry("defaultLayout", defaultLayout);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        json.writeMapEntry("catchall", catchall);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    public LayoutDef getLayoutDef(String name) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        return layoutDefsByName.get(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    public void retrieveLabels() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        GlobalValueProvider labelProvider = Ruue.getContextService().getCurrentContext().getGlobalProviders()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            if (e.getRoot().equals(LABEL.getPrefix())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:                labelProvider.getValue(e.getStem());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        // default is required attribute
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(defaultLayout)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            throw new InvalidDefinitionException("The \"default\" attribute is required for layouts", getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        // the default layout must exist
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        if (getLayoutDef(defaultLayout) == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            throw new InvalidDefinitionException(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:                    String.format("The default layout \"%s\" doesn't exist", defaultLayout), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        // if catchall is specified, it must exist
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        if (catchall != null && (RuueTextUtil.isEmptyOrWhitespace(catchall) || getLayoutDef(catchall) == null)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            throw new InvalidDefinitionException(String.format("The catchall layout \"%s\" doesn't exist", catchall),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:                    getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:        for (LayoutDef layout : getLayoutDefs()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutsDefImpl.java:            layout.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:package org.ruauframework.impl.root.layouts;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.def.LayoutItemDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.throwable.quickfix.RemoveAttributeQuickFix;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.throwable.quickfix.RemoveBodyQuickFix;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:public class LayoutItemDefImpl extends DefinitionImpl<LayoutItemDef> implements LayoutItemDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private static final long serialVersionUID = -717942308004793881L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private final List<ComponentDefRef> body;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private final String cache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private final String container;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private final Object action;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private final String layoutName;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:     * @param builder
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    protected LayoutItemDefImpl(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        this.body = RuueUtil.immutableList(builder.body);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        this.cache = builder.cache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        this.container = builder.container;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        this.action = builder.action;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        this.layoutName = builder.layoutName;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<LayoutItemDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            super(LayoutItemDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        private List<ComponentDefRef> body;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        private String cache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        private String container;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        private Object action;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        private String layoutName;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        public LayoutItemDefImpl build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            return new LayoutItemDefImpl(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        public Builder addComponentDefRef(ComponentDefRef ref) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:                body = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            body.add(ref);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        public Builder addComponentDefRefs(List<? extends ComponentDefRef> refs) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:                body = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            body.addAll(refs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:         * Sets the cache for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:         * @param cache The cache.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        public void setCache(String cache) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            this.cache = cache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:         * Sets the container for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:         * @param container The container.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        public void setContainer(String container) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            this.container = container;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:         * Sets the action for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:         * @param action The action.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        public void setAction(Object action) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            this.action = action;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:         * Sets the layoutName for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:         * @param layoutName The layoutName.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        public void setLayoutName(String layoutName) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            this.layoutName = layoutName;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(cache)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            json.writeMapEntry("cache", cache);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        json.writeMapEntry("body", getBody());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        json.writeMapEntry("container", container);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        json.writeMapEntry("action", action);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    public String getCache() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        return this.cache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    public String getContainer() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        return container;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        if (this.action != null && this.body != null && !this.body.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:                    "layoutItem should have only either an action or markup but not both", getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        } else if (this.action == null && (this.body == null || this.body.isEmpty())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            throw new BothActionAndBodyDefinedException("layoutItem should have either an action or markup",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:                    getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private DefDescriptor<?> getLayoutsDesc() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        return ((SubDefDescriptor<?, ?>) descriptor).getParentDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private String getLayoutName() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        return this.layoutName;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private String getQuery() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        return "//layouts/layout[@name=\"" + this.getLayoutName() + "\"]/layoutItem[@container=\""
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:                + this.getContainer() + "\"]";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private LayoutItemDef getDef() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:    private class BothActionAndBodyDefinedException extends QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        private static final long serialVersionUID = -954704188121588134L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:        BothActionAndBodyDefinedException(String message, Location location) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:            super(message, location, new RemoveAttributeQuickFix(getLayoutsDesc(), "action", getQuery(), getDef()),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/layouts/LayoutItemDefImpl.java:                    new RemoveBodyQuickFix(getLayoutsDesc(), getQuery(), getDef()));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:package org.ruauframework.impl.root.theme;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import static com.google.common.base.Preconditions.checkState;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import java.util.Collection;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.builder.ThemeDefBuilder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.ThemeDescriptorProviderDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.ThemeMapProviderDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.def.VarDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.impl.root.RootDefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.throwable.quickfix.ThemeValueNotFoundException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import com.google.common.base.Objects;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import com.google.common.base.Optional;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import com.google.common.collect.ImmutableList;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import com.google.common.collect.ImmutableSet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import com.google.common.collect.Iterables;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java: * Implementation for {@link ThemeDef}.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:public final class ThemeDefImpl extends RootDefinitionImpl<ThemeDef> implements ThemeDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    private static final long serialVersionUID = -7900230831915100535L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    private final boolean isCmpTheme;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    private final Map<String, VarDef> vars;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    private final List<DefDescriptor<ThemeDef>> imports;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    private final Set<PropertyReference> expressionRefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    private final DefDescriptor<ThemeDef> extendsDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    private final DefDescriptor<ThemeDescriptorProviderDef> descriptorProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    private final DefDescriptor<ThemeMapProviderDef> mapProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    private final int hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        this.imports = builder.orderedImmutableImports();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        this.vars = RuueUtil.immutableMap(builder.vars);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        this.mapProvider = builder.mapProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        this.expressionRefs = RuueUtil.immutableSet(builder.expressionRefs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        this.hashCode = RuueUtil.hashCode(super.hashCode(),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                extendsDescriptor, imports, vars, descriptorProvider, mapProvider);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public boolean isCmpTheme() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public DefDescriptor<ThemeMapProviderDef> getMapProvider() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return mapProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public boolean hasVar(String name) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        if (vars.containsKey(name)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (theme.getDef().hasVar(name)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (extendsDescriptor.getDef().hasVar(name)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Optional<Object> getVar(String name) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        Optional<VarDef> def = getVarDef(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return def.isPresent() ? Optional.of(def.get().getValue()) : Optional.absent();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Optional<VarDef> getVarDef(String name) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        if (vars.containsKey(name)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            return Optional.of(vars.get(name));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            Optional<VarDef> value = theme.getDef().getVarDef(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (value.isPresent()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                return value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            return extendsDescriptor.getDef().getVarDef(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return Optional.absent();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Map<String, VarDef> getDeclaredVarDefs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return vars;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public List<DefDescriptor<ThemeDef>> getDeclaredImports() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Set<String> getDeclaredNames() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return vars.keySet();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Iterable<String> getImportedNames() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            return ImmutableSet.of();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        List<Iterable<String>> iterables = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            iterables.add(theme.getDef().getAllNames());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return Iterables.concat(iterables);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Iterable<String> getInheritedNames() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return extendsDescriptor != null ? extendsDescriptor.getDef().getAllNames() : ImmutableSet.<String>of();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Iterable<String> getOwnNames() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return Iterables.concat(getDeclaredNames(), getImportedNames());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Iterable<String> getAllNames() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return Iterables.concat(getDeclaredNames(), getImportedNames(), getInheritedNames());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Set<String> getOverriddenNames() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return Sets.intersection(ImmutableSet.copyOf(getOwnNames()), ImmutableSet.copyOf(getInheritedNames()));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        for (VarDef def : vars.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            def.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        // themes with providers are basically only expected to be used in isolation from other features
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        if (descriptorProvider != null || mapProvider != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (!vars.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Theme %s must not specify vars if using a provider", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Theme %s must not specify imports if using a provider", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Theme %s must not use 'extends' and 'provider' attributes together",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // component-bundle themes can't use a provider
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Component theme %s must not specify a provider", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // namespace default theme should not utilize a provider
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            DefDescriptor<ThemeDef> nsDefaultTheme = Themes.getNamespaceDefaultTheme(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (nsDefaultTheme.equals(descriptor)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Namespace-default theme %s must not specify a provider", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        super.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new DefinitionNotFoundException(extendsDescriptor, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // can't extend itself
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (extendsDescriptor.equals(descriptor)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Theme %s cannot extend itself", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // ensure no circular hierarchy
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                if (current.equals(descriptor)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    String msg = String.format("%s must not through its parent eventually extend itself", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // it would be a mistake to extend an imported theme
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (imports.contains(extendsDescriptor)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Cannot extend and import from the same theme %s", extendsDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // cmp themes can't extend other themes. This is an arbitrary restriction to prevent improper usage.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // if changing, be sure to look over any impact on appendDependencies as well.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Component theme %s must not extend any other theme", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // the parent theme must not be a cmp theme. This would usually be a mistake/improper usage.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Theme %s must not extend from a component theme", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        // cmp themes cannot import. most of the time this would be improper usage.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        // if changing, be sure to look over any impact on appendDependencies as well.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            throw new InvalidDefinitionException("Component themes cannot import another theme", getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // can't import a cmp theme
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Theme %s cannot be imported because it is a component theme", theme);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // can't import a theme with a parent. This is an arbitrary restriction to enforce a level of var lookup
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // simplicity and prevent misuse of imports.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Theme %s cannot be imported since it uses the 'extends' attribute", theme);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // can't import a theme that uses a provider.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (def.getDescriptorProvider() != null || def.getMapProvider() != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                String msg = String.format("Theme %s cannot be imported since it uses a provider", theme);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new InvalidDefinitionException(msg, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        // vars
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        for (VarDef def : vars.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            def.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        // verify var cross references refer to something defined on this theme or on a parent theme. Or if this is a
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        // cmp theme it can also refer to something on the namespace default theme.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        Iterable<String> names = getAllNames();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            DefDescriptor<ThemeDef> nsDefaultTheme = Themes.getNamespaceDefaultTheme(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (nsDefaultTheme.exists()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                names = Iterables.concat(names, nsDefaultTheme.getDef().getAllNames());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        Set<String> namesSet = ImmutableSet.copyOf(names);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            if (!namesSet.contains(ref.toString())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                throw new ThemeValueNotFoundException(ref.toString(), descriptor, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            dependencies.add(descriptorProvider);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        if (mapProvider != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            dependencies.add(mapProvider);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            dependencies.add(extendsDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        for (VarDef def : vars.values()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            def.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        dependencies.addAll(imports);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        // cmp themes might cross reference a global var from the namespace-default theme
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            Set<String> names = getDeclaredNames();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            DefDescriptor<ThemeDef> nsDefaultTheme = Themes.getNamespaceDefaultTheme(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                if (!names.contains(ref.toString())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    dependencies.add(nsDefaultTheme);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        json.writeMapEntry("imports", imports);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        json.writeMapEntry("vars", vars);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Map<String, RegisterEventDef> getRegisterEventDefs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public boolean isInstanceOf(DefDescriptor<? extends RootDefinition> other) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return other.getDefType().equals(DefType.THEME) && descriptor.equals(other);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        throw new UnsupportedOperationException("attributes not supported on ThemeDef");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDef> getDeclaredAttributeDefs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        throw new UnsupportedOperationException("attributes not supported on ThemeDef");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public AttributeDef getAttributeDef(String name) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        throw new UnsupportedOperationException("attributes not supported on ThemeDef");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        throw new UnsupportedOperationException("method not supported on ThemeDef");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public ProviderDef getLocalProviderDef() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        throw new UnsupportedOperationException("method not supported on ThemeDef");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        throw new UnsupportedOperationException("method not supported on ThemeDef");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public boolean isInConcreteAndHasLocalProvider() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        throw new UnsupportedOperationException("method not supported on ThemeDef");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public int hashCode() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        if (obj instanceof ThemeDefImpl) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            return Objects.equal(descriptor, other.descriptor)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    && Objects.equal(location, other.location)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    && Objects.equal(extendsDescriptor, other.extendsDescriptor)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    && Objects.equal(imports, other.imports)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    && Objects.equal(vars, other.vars)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    && Objects.equal(descriptorProvider, other.descriptorProvider)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                    && Objects.equal(mapProvider, other.mapProvider);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:    public static final class Builder extends RootDefinitionImpl.Builder<ThemeDef> implements ThemeDefBuilder {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        private boolean isCmpTheme;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        private DefDescriptor<ThemeDef> extendsDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        private DefDescriptor<ThemeDescriptorProviderDef> descriptorProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        private DefDescriptor<ThemeMapProviderDef> mapProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        private Set<PropertyReference> expressionRefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        private Set<DefDescriptor<ThemeDef>> imports = Sets.newLinkedHashSet();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        private Map<String, VarDef> vars = Maps.newLinkedHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            super(ThemeDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public Builder setIsCmpTheme(boolean isCmpTheme) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public Builder addImport(DefDescriptor<ThemeDef> themeDescriptor) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // this check is also done by the handler, but in case this theme is being built by something else we
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // still need to check it. imports must come first in order to correctly indicate that while
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // "last one wins", declared vars will always win out over vars from imports. If that fact changes, this
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // check can go away. This is mainly for simplifying the var lookup implementation, while still
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            // matching the most common expected usages of imports vs. declared vars.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            checkState(vars.isEmpty(), "Theme imports must be added before all vars");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            imports.add(themeDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public Builder addVarDef(VarDef var) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            vars.put(var.getName(), var);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public Builder setMapProvider(DefDescriptor<ThemeMapProviderDef> mapProvider) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            this.mapProvider = mapProvider;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public Map<String, VarDef> vars() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            return vars;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public Builder addAllExpressionRefs(Collection<PropertyReference> refs) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:                expressionRefs = Sets.newHashSet();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            expressionRefs.addAll(refs);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public List<DefDescriptor<ThemeDef>> orderedImmutableImports() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            return ImmutableList.copyOf(imports).reverse(); // reverse so that lookups follow "last one wins" semantics.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            throw new UnsupportedOperationException("use var defs instead of attribute defs");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public void addAttributeDef(DefDescriptor<AttributeDef> attrdesc, AttributeDef attributeDef) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            throw new UnsupportedOperationException("use var defs instead of attribute defs");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:        public void addProvider(String name) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefImpl.java:            throw new UnsupportedOperationException("use setProviderDescriptor instead");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:package org.ruauframework.impl.root.theme;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:import org.ruauframework.def.StyleDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:public final class Themes {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:     * Gets the theme in the same component bundle as the given style (note, this doesn't check whether a theme actually
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:     * @param styleDef The {@link DefDescriptor} of the style def in the component bundle.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:    public static DefDescriptor<ThemeDef> getCmpTheme(DefDescriptor<StyleDef> styleDef) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:        String fmt = String.format("%s:%s", styleDef.getNamespace(), styleDef.getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:        return DefDescriptorImpl.getInstance(fmt, ThemeDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:     * Gets the namespace-default theme for the same namespace as the given {@link DefDescriptor}. The given
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:     * {@link DefDescriptor} can be for any type (component, style, etc...).
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:     * @param descriptor Find the namespace-default theme for this descriptor.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:    public static DefDescriptor<ThemeDef> getNamespaceDefaultTheme(DefDescriptor<?> descriptor) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:        String fmt = String.format("%s:%sTheme", descriptor.getNamespace(), descriptor.getNamespace());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/Themes.java:        return DefDescriptorImpl.getInstance(fmt, ThemeDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:package org.ruauframework.impl.root.theme;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:import org.ruauframework.def.VarDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:import com.google.common.base.Objects;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:public final class VarDefImpl extends DefinitionImpl<VarDef> implements VarDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    private static final String INVALID_NAME = "Invalid var name: '%s', Refer to RuueDocs for valid attribute names";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    private static final String MISSING_VALUE = "Missing required attribute 'value'";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    private static final long serialVersionUID = 344237166606014917L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    private final Object value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    private final int hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    public VarDefImpl(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        this.value = builder.value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        this.hashCode = RuueUtil.hashCode(descriptor, value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    public Object getValue() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        return value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        json.writeMapEntry("descriptor", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        json.writeMapEntry("value", value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        // must have valid name
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        String name = this.descriptor.getName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        if (!RuueTextUtil.validateAttributeName(name)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:            throw new InvalidDefinitionException(String.format(INVALID_NAME, name), getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        // must have a value
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        if (value == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:            throw new InvalidDefinitionException(MISSING_VALUE, getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        return String.valueOf(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    public final int hashCode() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        return hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        if (obj instanceof VarDefImpl) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:            VarDefImpl other = (VarDefImpl) obj;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:            return Objects.equal(descriptor, other.descriptor)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:                    && Objects.equal(location, other.location)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:                    && Objects.equal(value, other.value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:    public static final class Builder extends DefinitionImpl.BuilderImpl<VarDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:            super(VarDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        Object value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        public VarDefImpl build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:            return new VarDefImpl(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:        public Builder setValue(Object value) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/VarDefImpl.java:            this.value = value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:package org.ruauframework.impl.root.theme;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import org.ruauframework.def.ThemeDefRef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:import com.google.common.base.Objects;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:public class ThemeDefRefImpl extends DefinitionImpl<ThemeDefRef> implements ThemeDefRef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    private static final long serialVersionUID = -3610356270716608682L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    private final DefDescriptor<ThemeDef> themeDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    private final int hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        this.hashCode = RuueUtil.hashCode(descriptor, themeDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        json.writeMapEntry("descriptor", descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        json.writeMapEntry("themeDescriptor", themeDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:            throw new InvalidDefinitionException("Missing name", getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        super.validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        themeDescriptor.getDef().validateReferences();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        dependencies.add(themeDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        return String.valueOf(themeDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    public final int hashCode() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        return hashCode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        if (obj instanceof ThemeDefRefImpl) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:            return Objects.equal(descriptor, other.descriptor)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:                    && Objects.equal(location, other.location)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:                    && Objects.equal(themeDescriptor, other.themeDescriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:        return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:    public static final class Builder extends DefinitionImpl.BuilderImpl<ThemeDefRef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/theme/ThemeDefRefImpl.java:            super(ThemeDefRef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:package org.ruauframework.impl.root.parser;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import java.io.Reader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import java.io.StringReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import java.net.URL;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import javax.xml.stream.XMLInputFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import javax.xml.stream.XMLStreamConstants;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.impl.root.parser.handler.RootTagHandler;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.impl.root.parser.handler.RootTagHandlerFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.system.Location;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.system.Parser;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.system.Source;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.throwable.RuueExceptionInfo;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.throwable.RuueUnhandledException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * Implementation of Parser. Parses XML Formatted Source to produce
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * ComponentDefs. Implemented as a pull-style parser using the StAX cursor API
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java: * to try to keep the memory footprint low, and reduce creation of extraneous
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:public class XMLParser implements Parser {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:    private static final XMLInputFactory xmlInputFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:    static {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        xmlInputFactory = XMLInputFactory.newInstance();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        // Setting IS_NAMESPACE_AWARE to true will require all xml to be valid xml and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        // we would need to enforce namespace definitions ie xmlns in all cmp and app files.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        xmlInputFactory.setProperty(XMLInputFactory.IS_COALESCING, true);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, true);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        xmlInputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            // sjsxp does not currently have a thread-safe XMLInputFactory, as that implementation
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            // tries to cache and reuse theXMLStreamReader. Setting the parser-specific "reuse-instance"
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            // property to false prevents this.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            // All other known open-source stax parsers (and the bea ref impl) have thread-safe factories.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            // W-2316503: remove compatibility code for both SJSXP and Woodstox
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            xmlInputFactory.setProperty("reuse-instance", false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        } catch (IllegalArgumentException ex) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            // Other implementations will likely throw this exception since "reuse-instance"
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            // is implementation specific. NO-OP
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:    private static final XMLParser instance = new XMLParser();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:    private XMLParser() {}
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:    public static XMLParser getInstance() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        return instance;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:    public <D extends Definition> D parse(DefDescriptor<D> descriptor, Source<?> source) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        Reader reader = null;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        XMLStreamReader xmlReader = null;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        RootTagHandler<? extends RootDefinition> handler = null;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                reader = new HTMLReader(new StringReader(contents));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                xmlReader = xmlInputFactory.createXMLStreamReader(reader);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            handler = RootTagHandlerFactory.newInstance((DefDescriptor<RootDefinition>) descriptor,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    (Source<RootDefinition>) source, xmlReader);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            if (xmlReader != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                // need to skip junk above the start that is ok
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                LOOP: while (xmlReader.hasNext()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    int type = xmlReader.next();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    case XMLStreamConstants.START_ELEMENT:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                        break LOOP;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    case XMLStreamConstants.DTD:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    case XMLStreamConstants.START_DOCUMENT:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    case XMLStreamConstants.COMMENT:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    case XMLStreamConstants.SPACE:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                        break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    default:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                        throw new InvalidDefinitionException(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                                String.format("Found unexpected element of type %s", type), getLocation(xmlReader,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                if (!xmlReader.hasNext()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    throw new InvalidDefinitionException("Empty file", getLocation(xmlReader, source));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            ret = (D)handler.getElement();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            if (xmlReader != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                LOOP: while (xmlReader.hasNext()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    int type = xmlReader.next();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    case XMLStreamConstants.END_DOCUMENT:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                        break LOOP;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    case XMLStreamConstants.COMMENT:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    case XMLStreamConstants.SPACE:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                        break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    default:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                        throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                                "Found unexpected element of type %s when expecting end of file.", type), getLocation(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                                xmlReader, source));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        } catch (Exception e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            if (handler != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                if (e instanceof RuueExceptionInfo) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    handler.setParseError(e);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    handler.setParseError(new RuueUnhandledException(e.getLocalizedMessage(),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                        getLocation(xmlReader, source), e));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    ret = (D)handler.getErrorElement();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                } catch (Throwable t) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    // rethrow our original error, what else can we do?
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    throw new RuueUnhandledException(e.getLocalizedMessage(), getLocation(xmlReader, source), e);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                throw new RuueUnhandledException(e.getLocalizedMessage(), getLocation(xmlReader, source), e);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        } finally {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                if (reader != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    reader.close();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            } catch (IOException e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                // Throwing this seems wrong, if there was already an error, it
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                // should pass through,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                // and if not, well, something went wrong with the close...
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                // throw new RuueUnhandledException("parse error",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                // getLocation(xmlReader, source), e);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            } finally {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    if (xmlReader != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                        xmlReader.close();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                } catch (XMLStreamException e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    // Throwing this seems wrong, if there was already an error,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    // it should pass through,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    // and if not, well, something went wrong with the close...
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    // throw new RuueUnhandledException("parse error",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    // getLocation(xmlReader, source), e);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * Returns a location for the reader and source provided. When
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * {@code xmlReader} is provided, its location will be used for the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * finer-grain information such as line number; otherwise, a new and more
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * limited location will be constructed based on {@code source}.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * @param xmlReader
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * @param source
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * @return An as-specific-as-possible location.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:    public static Location getLocation(XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        if (xmlReader != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            assert source != null;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            // xmlLocation provides column and line number.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            javax.xml.stream.Location xmlLocation = xmlReader.getLocation();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            String location = source.getUrl();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            if (location == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                // Not a file (DB) so let's provide the component name
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                location = source.getDescriptor().getQualifiedName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            if (location.startsWith("file:")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                location = location.substring(5);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            URL cacheUrl = source.getCacheUrl();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            return new Location(location, xmlLocation.getLineNumber() - 1, xmlLocation.getColumnNumber(),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:                    source.getLastModified(), cacheUrl == null ? null : cacheUrl.toString());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:            return new Location(source.getSystemId(), source.getLastModified());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * Convenience method to use input factory to create steam reader
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * @param reader reader
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * @return xml stream reader implementation
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:     * @throws XMLStreamException
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:    public XMLStreamReader createXMLStreamReader(Reader reader) throws XMLStreamException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/XMLParser.java:        return xmlInputFactory.createXMLStreamReader(reader);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:package org.ruauframework.impl.root.parser;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:import java.io.FilterReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:import java.io.Reader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:import java.io.StringReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * prepends a mini dtd that has common html entity references in it to the real
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * reader to work around the fact that we can't get the stax parser to resove
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * these entity references by any other documented mechanism. Hopefully the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * features of the stax parser will be fixed in the future, and then we can
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java: * This includes an arbitrarily shortened list of entities from html -- the ones
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:public class HTMLReader extends FilterReader {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    private static final String dtd = "<!DOCTYPE Ruue[" +
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    // This section could be replaced with the following, if caching proves to
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    // be reasonable
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    // <!ENTITY % HTMLlat1 PUBLIC
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    // "-//W3C//ENTITIES Latin 1 for XHTML//EN"
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    // "http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent">
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY nbsp   \"&#160;\">" + // no-break space = non-breaking
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // space, U+00A0 ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY iexcl  \"&#161;\">" + // inverted exclamation mark, U+00A1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY yen    \"&#165;\">" + // yen sign = yuan sign, U+00A5
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY brvbar \"&#166;\">" + // broken bar = broken vertical bar,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY uml    \"&#168;\">" + // diaeresis = spacing diaeresis,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00A8 ISOdia
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ordf   \"&#170;\">" + // feminine ordinal indicator,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY laquo  \"&#171;\">" + // left-pointing double angle
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // quotation mark = left pointing
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY not    \"&#172;\">" + // not sign = angled dash, U+00AC
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY shy    \"&#173;\">" + // soft hyphen = discretionary
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // trade mark sign, U+00AE ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY macr   \"&#175;\">" + // macron = spacing macron =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // overline = APL overbar, U+00AF
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // ISOdia
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // digit two = squared, U+00B2
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY acute  \"&#180;\">" + // acute accent = spacing acute,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00B4 ISOdia
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY para   \"&#182;\">" + // pilcrow sign = paragraph
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY middot \"&#183;\">" + // middle dot = Georgian comma =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY cedil  \"&#184;\">" + // cedilla = spacing cedilla, U+00B8
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // ISOdia
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ordm   \"&#186;\">" + // masculine ordinal indicator,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY raquo  \"&#187;\">" + // right-pointing double angle
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // quotation mark = right pointing
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY frac14 \"&#188;\">" + // vulgar fraction one quarter =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // fraction one quarter, U+00BC
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY frac12 \"&#189;\">" + // vulgar fraction one half =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // fraction one half, U+00BD ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY frac34 \"&#190;\">" + // vulgar fraction three quarters =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // fraction three quarters, U+00BE
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY iquest \"&#191;\">" + // inverted question mark = turned
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // question mark, U+00BF ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Agrave \"&#192;\">" + // latin capital letter A with grave
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // = latin capital letter A grave,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00C0 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Aacute \"&#193;\">" + // latin capital letter A with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // acute, U+00C1 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Acirc  \"&#194;\">" + // latin capital letter A with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00C2 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Atilde \"&#195;\">" + // latin capital letter A with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // tilde, U+00C3 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Auml   \"&#196;\">" + // latin capital letter A with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00C4 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Aring  \"&#197;\">" + // latin capital letter A with ring
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // above = latin capital letter A
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // ring, U+00C5 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY AElig  \"&#198;\">" + // latin capital letter AE = latin
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // capital ligature AE, U+00C6
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Ccedil \"&#199;\">" + // latin capital letter C with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // cedilla, U+00C7 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Egrave \"&#200;\">" + // latin capital letter E with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // grave, U+00C8 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Eacute \"&#201;\">" + // latin capital letter E with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // acute, U+00C9 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Ecirc  \"&#202;\">" + // latin capital letter E with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00CA ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Euml   \"&#203;\">" + // latin capital letter E with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00CB ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Igrave \"&#204;\">" + // latin capital letter I with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // grave, U+00CC ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Iacute \"&#205;\">" + // latin capital letter I with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // acute, U+00CD ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Icirc  \"&#206;\">" + // latin capital letter I with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00CE ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Iuml   \"&#207;\">" + // latin capital letter I with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00CF ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ETH    \"&#208;\">" + // latin capital letter ETH, U+00D0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Ntilde \"&#209;\">" + // latin capital letter N with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // tilde, U+00D1 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Ograve \"&#210;\">" + // latin capital letter O with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // grave, U+00D2 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Oacute \"&#211;\">" + // latin capital letter O with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // acute, U+00D3 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Ocirc  \"&#212;\">" + // latin capital letter O with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00D4 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Otilde \"&#213;\">" + // latin capital letter O with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // tilde, U+00D5 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Ouml   \"&#214;\">" + // latin capital letter O with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00D6 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY times  \"&#215;\">" + // multiplication sign, U+00D7
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Oslash \"&#216;\">" + // latin capital letter O with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // stroke = latin capital letter O
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // slash, U+00D8 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Ugrave \"&#217;\">" + // latin capital letter U with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // grave, U+00D9 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Uacute \"&#218;\">" + // latin capital letter U with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // acute, U+00DA ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Ucirc  \"&#219;\">" + // latin capital letter U with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00DB ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Uuml   \"&#220;\">" + // latin capital letter U with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00DC ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Yacute \"&#221;\">" + // latin capital letter Y with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // acute, U+00DD ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY THORN  \"&#222;\">" + // latin capital letter THORN,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00DE ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY szlig  \"&#223;\">" + // latin small letter sharp s =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // ess-zed, U+00DF ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY agrave \"&#224;\">" + // latin small letter a with grave =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // latin small letter a grave,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00E0 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY aacute \"&#225;\">" + // latin small letter a with acute,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00E1 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY acirc  \"&#226;\">" + // latin small letter a with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00E2 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY atilde \"&#227;\">" + // latin small letter a with tilde,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00E3 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY auml   \"&#228;\">" + // latin small letter a with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00E4 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY aring  \"&#229;\">" + // latin small letter a with ring
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // above = latin small letter a
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // ring, U+00E5 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY aelig  \"&#230;\">" + // latin small letter ae = latin
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // small ligature ae, U+00E6 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ccedil \"&#231;\">" + // latin small letter c with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // cedilla, U+00E7 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY egrave \"&#232;\">" + // latin small letter e with grave,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00E8 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY eacute \"&#233;\">" + // latin small letter e with acute,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00E9 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ecirc  \"&#234;\">" + // latin small letter e with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00EA ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY euml   \"&#235;\">" + // latin small letter e with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00EB ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY igrave \"&#236;\">" + // latin small letter i with grave,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00EC ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY iacute \"&#237;\">" + // latin small letter i with acute,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00ED ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY icirc  \"&#238;\">" + // latin small letter i with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00EE ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY iuml   \"&#239;\">" + // latin small letter i with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00EF ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY eth    \"&#240;\">" + // latin small letter eth, U+00F0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ntilde \"&#241;\">" + // latin small letter n with tilde,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00F1 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ograve \"&#242;\">" + // latin small letter o with grave,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00F2 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY oacute \"&#243;\">" + // latin small letter o with acute,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00F3 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ocirc  \"&#244;\">" + // latin small letter o with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00F4 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY otilde \"&#245;\">" + // latin small letter o with tilde,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00F5 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ouml   \"&#246;\">" + // latin small letter o with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00F6 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY oslash \"&#248;\">" + // latin small letter o with stroke,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // = latin small letter o slash,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00F8 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ugrave \"&#249;\">" + // latin small letter u with grave,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00F9 ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY uacute \"&#250;\">" + // latin small letter u with acute,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00FA ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ucirc  \"&#251;\">" + // latin small letter u with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // circumflex, U+00FB ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY uuml   \"&#252;\">" + // latin small letter u with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00FC ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY yacute \"&#253;\">" + // latin small letter y with acute,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // U+00FD ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY thorn  \"&#254;\">" + // latin small letter thorn, U+00FE
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY yuml   \"&#255;\">" + // latin small letter y with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                            // diaeresis, U+00FF ISOlat1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            // This section could be replaced with the following, if caching
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            // proves to be reasonable
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            // <!ENTITY % HTMLspecial PUBLIC
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            // "-//W3C//ENTITIES Special for XHTML//EN"
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            // "http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent">
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY quot    \"&#34;\">" + // quotation mark, U+0022 ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY amp     \"&#38;#38;\">" + // ampersand, U+0026 ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY lt      \"&#38;#60;\">" + // less-than sign, U+003C ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY gt      \"&#62;\">" + // greater-than sign, U+003E ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY apos     \"&#39;\">" + // apostrophe = APL quote, U+0027
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY OElig   \"&#338;\">" + // latin capital ligature OE,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                             // U+0152 ISOlat2
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY oelig   \"&#339;\">" + // latin small ligature oe, U+0153
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                             // ISOlat2
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Scaron  \"&#352;\">" + // latin capital letter S with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                             // caron, U+0160 ISOlat2
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY scaron  \"&#353;\">" + // latin small letter s with caron,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                             // U+0161 ISOlat2
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Yuml    \"&#376;\">" + // latin capital letter Y with
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                             // diaeresis, U+0178 ISOlat2
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                             // accent, U+02C6 ISOpub
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY tilde   \"&#732;\">" + // small tilde, U+02DC ISOdia
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ensp    \"&#8194;\">" + // en space, U+2002 ISOpub
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY emsp    \"&#8195;\">" + // em space, U+2003 ISOpub
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY thinsp  \"&#8201;\">" + // thin space, U+2009 ISOpub
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY lrm     \"&#8206;\">" + // left-to-right mark, U+200E NEW
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rlm     \"&#8207;\">" + // right-to-left mark, U+200F NEW
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ndash   \"&#8211;\">" + // en dash, U+2013 ISOpub
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY mdash   \"&#8212;\">" + // em dash, U+2014 ISOpub
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY lsquo   \"&#8216;\">" + // left single quotation mark,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rsquo   \"&#8217;\">" + // right single quotation mark,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY sbquo   \"&#8218;\">" + // single low-9 quotation mark,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ldquo   \"&#8220;\">" + // left double quotation mark,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rdquo   \"&#8221;\">" + // right double quotation mark,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY bdquo   \"&#8222;\">" + // double low-9 quotation mark,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY dagger  \"&#8224;\">" + // dagger, U+2020 ISOpub
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Dagger  \"&#8225;\">" + // double dagger, U+2021 ISOpub
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY lsaquo  \"&#8249;\">" + // single left-pointing angle
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                              // quotation mark, U+2039 ISO
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rsaquo  \"&#8250;\">" + // single right-pointing angle
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                              // quotation mark,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            // this section could be replaced with the following, if caching
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            // proves to be reasonable
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY fnof     \"&#402;\">" + // latin small letter f with hook
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Alpha    \"&#913;\">" + // greek capital letter alpha,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Beta     \"&#914;\">" + // greek capital letter beta,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Gamma    \"&#915;\">" + // greek capital letter gamma,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Delta    \"&#916;\">" + // greek capital letter delta,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Epsilon  \"&#917;\">" + // greek capital letter epsilon,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Zeta     \"&#918;\">" + // greek capital letter zeta,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Eta      \"&#919;\">" + // greek capital letter eta,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Theta    \"&#920;\">" + // greek capital letter theta,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Iota     \"&#921;\">" + // greek capital letter iota,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Kappa    \"&#922;\">" + // greek capital letter kappa,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Lambda   \"&#923;\">" + // greek capital letter lamda,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Mu       \"&#924;\">" + // greek capital letter mu, U+039C
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Nu       \"&#925;\">" + // greek capital letter nu, U+039D
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Xi       \"&#926;\">" + // greek capital letter xi, U+039E
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Omicron  \"&#927;\">" + // greek capital letter omicron,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Pi       \"&#928;\">" + // greek capital letter pi, U+03A0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Rho      \"&#929;\">" + // greek capital letter rho,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Sigma    \"&#931;\">" + // greek capital letter sigma,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Tau      \"&#932;\">" + // greek capital letter tau,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Upsilon  \"&#933;\">" + // greek capital letter upsilon,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Phi      \"&#934;\">" + // greek capital letter phi,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Chi      \"&#935;\">" + // greek capital letter chi,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Psi      \"&#936;\">" + // greek capital letter psi,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY Omega    \"&#937;\">" + // greek capital letter omega,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY alpha    \"&#945;\">" + // greek small letter alpha,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY beta     \"&#946;\">" + // greek small letter beta, U+03B2
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY gamma    \"&#947;\">" + // greek small letter gamma,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY delta    \"&#948;\">" + // greek small letter delta,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY epsilon  \"&#949;\">" + // greek small letter epsilon,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY zeta     \"&#950;\">" + // greek small letter zeta, U+03B6
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY eta      \"&#951;\">" + // greek small letter eta, U+03B7
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY theta    \"&#952;\">" + // greek small letter theta,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY iota     \"&#953;\">" + // greek small letter iota, U+03B9
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY kappa    \"&#954;\">" + // greek small letter kappa,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY lambda   \"&#955;\">" + // greek small letter lamda,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY mu       \"&#956;\">" + // greek small letter mu, U+03BC
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY nu       \"&#957;\">" + // greek small letter nu, U+03BD
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY xi       \"&#958;\">" + // greek small letter xi, U+03BE
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY omicron  \"&#959;\">" + // greek small letter omicron,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY pi       \"&#960;\">" + // greek small letter pi, U+03C0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rho      \"&#961;\">" + // greek small letter rho, U+03C1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY sigmaf   \"&#962;\">" + // greek small letter final sigma,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY sigma    \"&#963;\">" + // greek small letter sigma,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY tau      \"&#964;\">" + // greek small letter tau, U+03C4
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY upsilon  \"&#965;\">" + // greek small letter upsilon,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY phi      \"&#966;\">" + // greek small letter phi, U+03C6
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY chi      \"&#967;\">" + // greek small letter chi, U+03C7
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY psi      \"&#968;\">" + // greek small letter psi, U+03C8
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY omega    \"&#969;\">" + // greek small letter omega,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY thetasym \"&#977;\">" + // greek theta symbol, U+03D1 NEW
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY bull     \"&#8226;\">" + // bullet = black small circle,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY hellip   \"&#8230;\">" + // horizontal ellipsis = three
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // dot leader, U+2026 ISOpub
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY oline    \"&#8254;\">" + // overline = spacing overscore,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY frasl    \"&#8260;\">" + // fraction slash, U+2044 NEW
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY weierp   \"&#8472;\">" + // script capital P = power set =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // Weierstrass p, U+2118 ISOamso
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY image    \"&#8465;\">" + // black-letter capital I =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // imaginary part, U+2111 ISOamso
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY real     \"&#8476;\">" + // black-letter capital R = real
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // part symbol, U+211C ISOamso
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY trade    \"&#8482;\">" + // trade mark sign, U+2122 ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY alefsym  \"&#8501;\">" + // alef symbol = first
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // transfinite cardinal, U+2135
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY larr     \"&#8592;\">" + // leftwards arrow, U+2190 ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY uarr     \"&#8593;\">" + // upwards arrow, U+2191 ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rarr     \"&#8594;\">" + // rightwards arrow, U+2192
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY darr     \"&#8595;\">" + // downwards arrow, U+2193 ISOnum
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY harr     \"&#8596;\">" + // left right arrow, U+2194
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // ISOamsa
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY crarr    \"&#8629;\">" + // downwards arrow with corner
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // leftwards = carriage return,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY lArr     \"&#8656;\">" + // leftwards double arrow, U+21D0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY uArr     \"&#8657;\">" + // upwards double arrow, U+21D1
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // ISOamsa
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rArr     \"&#8658;\">" + // rightwards double arrow,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY dArr     \"&#8659;\">" + // downwards double arrow, U+21D3
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // ISOamsa
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY hArr     \"&#8660;\">" + // left right double arrow,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // U+21D4 ISOamsa
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY forall   \"&#8704;\">" + // for all, U+2200 ISOtech
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY part     \"&#8706;\">" + // partial differential, U+2202
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // ISOamso
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY nabla    \"&#8711;\">" + // nabla = backward difference,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY notin    \"&#8713;\">" + // not an element of, U+2209
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ni       \"&#8715;\">" + // contains as member, U+220B
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY prod     \"&#8719;\">" + // n-ary product = product sign,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // U+220F ISOamsb
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY sum      \"&#8721;\">" + // n-ary summation, U+2211
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // ISOamsb
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY lowast   \"&#8727;\">" + // asterisk operator, U+2217
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY radic    \"&#8730;\">" + // square root = radical sign,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY prop     \"&#8733;\">" + // proportional to, U+221D
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ang      \"&#8736;\">" + // angle, U+2220 ISOamso
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY and      \"&#8743;\">" + // logical and = wedge, U+2227
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY or       \"&#8744;\">" + // logical or = vee, U+2228
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY cap      \"&#8745;\">" + // intersection = cap, U+2229
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY int      \"&#8747;\">" + // integral, U+222B ISOtech
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY sim      \"&#8764;\">" + // tilde operator = varies with =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // similar to, U+223C ISOtech
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY cong     \"&#8773;\">" + // approximately equal to, U+2245
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY asymp    \"&#8776;\">" + // almost equal to = asymptotic
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // to, U+2248 ISOamsr
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ne       \"&#8800;\">" + // not equal to, U+2260 ISOtech
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY equiv    \"&#8801;\">" + // identical to, U+2261 ISOtech
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY le       \"&#8804;\">" + // less-than or equal to, U+2264
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY ge       \"&#8805;\">" + // greater-than or equal to,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY nsub     \"&#8836;\">" + // not a subset of, U+2284
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // ISOamsn
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY sube     \"&#8838;\">" + // subset of or equal to, U+2286
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY supe     \"&#8839;\">" + // superset of or equal to,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // U+2295 ISOamsb
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // product, U+2297 ISOamsb
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY perp     \"&#8869;\">" + // up tack = orthogonal to =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // perpendicular, U+22A5 ISOtech
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY sdot     \"&#8901;\">" + // dot operator, U+22C5 ISOamsb
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // U+2308 ISOamsc
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rceil    \"&#8969;\">" + // right ceiling, U+2309 ISOamsc
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // U+230A ISOamsc
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rfloor   \"&#8971;\">" + // right floor, U+230B ISOamsc
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY lang     \"&#9001;\">" + // left-pointing angle bracket =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:                                               // bra, U+2329 ISOtech
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY rang     \"&#9002;\">" + // right-pointing angle bracket =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY spades   \"&#9824;\">" + // black spade suit, U+2660
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY clubs    \"&#9827;\">" + // black club suit = shamrock,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY hearts   \"&#9829;\">" + // black heart suit = valentine,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            "<!ENTITY diams    \"&#9830;\">" + // black diamond suit, U+2666
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    private final Reader realReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    boolean finishedDtd = false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:     * @param in
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    protected HTMLReader(Reader in) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:        super(createDtdReader());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:        realReader = in;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    private static Reader createDtdReader() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:        return new StringReader(dtd);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    public int read() throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:        int ret = in.read();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            in = realReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            ret = in.read();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:    public int read(char cbuf[], int off, int len) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:        int ret = in.read(cbuf, off, len);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            in = realReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/HTMLReader.java:            ret = in.read(cbuf, off, len);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.impl.root.component.BaseComponentDefImpl.Builder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.impl.root.component.ComponentDefImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.service.InstanceService;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.throwable.RuueError;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:public class ComponentDefHandler extends BaseComponentDefHandler<ComponentDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:    public static final String TAG = "ruau:component";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:    public ComponentDefHandler() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:    public ComponentDefHandler(DefDescriptor<ComponentDef> componentDefDescriptor, Source<?> source,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:            XMLStreamReader xmlReader) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:        super(componentDefDescriptor, source, xmlReader);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:    protected Builder<ComponentDef> createBuilder() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:        super.handleChildTag();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:    public void writeElement(ComponentDef def, Appendable out) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:            Map<String, Object> attributes = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:            attributes.put("def", def);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:            InstanceService instanceService = Ruue.getInstanceService();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:            DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:            DefDescriptor<ComponentDef> tmplDesc = definitionService.getDefDescriptor("ruaudev:saveComponent",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:                    ComponentDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:            Component tmpl = instanceService.getInstance(tmplDesc, attributes);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:            Ruue.getRenderingService().render(tmpl, out);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:        } catch (QuickFixException x) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ComponentDefHandler.java:            throw new RuueError(x);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import org.ruauframework.def.DependencyDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import org.ruauframework.impl.root.DependencyDefImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:import com.google.common.collect.ImmutableSet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java: * ruau:dependency tags.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:public class DependencyDefHandler<P extends RootDefinition> extends ParentedTagHandler<DependencyDef, P> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    public static final String TAG = "ruau:dependency";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    private static final String ATTRIBUTE_RESOURCE = "resource";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    private static final String ATTRIBUTE_TYPE = "type";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_RESOURCE, ATTRIBUTE_TYPE);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    private DependencyDefImpl.Builder builder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    public DependencyDefHandler() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    public DependencyDefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) throws DefinitionNotFoundException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:        this.builder.setLocation(getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:        this.builder.setParentDescriptor(parentHandler.getDefDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    protected void readAttributes() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:        builder.setResource(getAttributeValue(ATTRIBUTE_RESOURCE));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:        builder.setType(getAttributeValue(ATTRIBUTE_TYPE));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    protected DependencyDef createDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    public void writeElement(DependencyDef def, Appendable out) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:        error("Dependency cannot have a child tag");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DependencyDefHandler.java:        error("Dependency cannot have child text");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import org.ruauframework.def.*;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import org.ruauframework.impl.documentation.ExampleDefImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:import com.google.common.collect.ImmutableSet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:public class ExampleDefHandler<P extends RootDefinition> extends ParentedTagHandler<ExampleDefImpl, P> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    public static final String TAG = "ruau:example";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    public static final String ATTRIBUTE_REF = "ref";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    public static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    public static final String ATTRIBUTE_LABEL = "label";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_REF, ATTRIBUTE_NAME,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    private final StringBuilder body = new StringBuilder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    private final ExampleDefImpl.Builder builder = new ExampleDefImpl.Builder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    public ExampleDefHandler(RootTagHandler<P> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:            builder.setOwnHash(source.getHash());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    protected void readAttributes() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        String ref = getAttributeValue(ATTRIBUTE_REF);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(ref)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        builder.setName(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        String label = getAttributeValue(ATTRIBUTE_LABEL);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(label)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        builder.setLabel(label);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        DefDescriptor<P> parentDesc = getParentHandler().getDefDescriptor();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        String exampleName = String.format("%s_%s", parentDesc.getDescriptorName(), name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        builder.setDescriptor(DefDescriptorImpl.getInstance(exampleName, ExampleDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    protected void handleChildTag() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        body.append(handleHTML());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    protected void handleChildText() throws XMLStreamException, QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:        body.append(handleHTMLText());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    public String getHandledTag() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    protected ExampleDefImpl createDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/ExampleDefHandler.java:    public void writeElement(ExampleDefImpl def, Appendable out) throws IOException {}
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:package org.ruauframework.impl.root.parser.handler;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import javax.xml.stream.XMLStreamException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import javax.xml.stream.XMLStreamReader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import org.ruauframework.def.DescriptionDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import org.ruauframework.def.DocumentationDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import org.ruauframework.impl.documentation.DescriptionDefImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:import com.google.common.collect.ImmutableSet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:public class DescriptionDefHandler<P> extends ParentedTagHandler<DescriptionDefImpl, DocumentationDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    public static final String TAG = "ruau:description";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    private static final String ATTRIBUTE_NAME = "name";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    private final static Set<String> ALLOWED_ATTRIBUTES = ImmutableSet.of(ATTRIBUTE_NAME);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    private final StringBuilder body = new StringBuilder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    private final DescriptionDefImpl.Builder builder = new DescriptionDefImpl.Builder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    public DescriptionDefHandler(RootTagHandler<DocumentationDef> parentHandler, XMLStreamReader xmlReader, Source<?> source) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:        super(parentHandler, xmlReader, source);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    protected void readAttributes() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    	String name = getAttributeValue(ATTRIBUTE_NAME);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    	if (name == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:    		name = ((DocumentationDefHandler) getParentHandler()).getNextId();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:        builder.setDescriptor(SubDefDescriptorImpl.getInstance(name, getParentHandler().defDescriptor, DescriptionDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:        builder.setName(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/root/parser/handler/DescriptionDefHandler.java:        builder.setLocation(getLocation());
