ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.service.LoggingService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.system.DefRegistry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.system.DependencyEntry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.throwable.NoAccessException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.util.text.GlobMatcher;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.util.text.Hash;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import com.google.common.base.Optional;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import com.google.common.collect.ImmutableSortedSet;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import edu.umd.cs.findbugs.annotations.CheckForNull;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import edu.umd.cs.findbugs.annotations.NonNull;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * Overall Master definition registry implementation, there be dragons here.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * This 'master' definition registry is actually a single threaded, per request registry that caches certain things in
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * what is effectively a thread local cache. This means that once something is pulled into the local thread, it will not
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * change.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:public class MasterDefRegistryImpl implements MasterDefRegistry {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private static final Logger logger = Logger.getLogger(MasterDefRegistryImpl.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private static final ImmutableSortedSet<String> cacheDependencyExceptions = ImmutableSortedSet.of(
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://array",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://ruau.component",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://blob",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://boolean",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://date",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://datetime",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://decimal",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://double",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://event",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://id",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://integer",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://list",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://long",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://map",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://object",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://set",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://string",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://sobject",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            "apex://time"
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final static int ACCESS_CHECK_CACHE_SIZE = 4096;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Lock rLock;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Lock wLock;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Cache<DefDescriptor<?>, Boolean> existsCache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Cache<DefDescriptor<?>, Optional<? extends Definition>> defsCache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Cache<String, DependencyEntry> depsCache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Cache<String, String> stringsCache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Cache<String, Set<DefDescriptor<?>>> descriptorFilterCache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Cache<String, String> accessCheckCache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * A local dependencies cache.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * We store both by descriptor and by uid. The descriptor keys must include the type, as the qualified name is not
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * sufficient to distinguish it. In the case of the UID, we presume that we are safe.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * The two keys stored in the local cache are:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>The UID, which should be sufficiently unique for a single request.</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>The type+qualified name of the descriptor. We store this to avoid construction in the case where we don't
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * have a UID. This is presumed safe because we assume that a single session will have a consistent set of
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Map<String, DependencyEntry> localDependencies;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final RegistryTrie delegateRegistries;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final Map<DefDescriptor<? extends Definition>, Definition> defs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private Set<DefDescriptor<? extends Definition>> localDescs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private CompileContext currentCC;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private final MasterDefRegistryImpl original;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private MasterDefRegistryImpl(RegistryTrie delegate, MasterDefRegistryImpl original) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        CachingService acs = Ruue.getCachingService();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.delegateRegistries = delegate;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.original = original;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.rLock = acs.getReadLock();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.wLock = acs.getWriteLock();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.existsCache = acs.getExistsCache();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.defsCache = acs.getDefsCache();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.depsCache = acs.getDepsCache();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.stringsCache = acs.getStringsCache();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.descriptorFilterCache = acs.getDescriptorFilterCache();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.accessCheckCache = acs.<String, String> getCacheBuilder()
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                .setInitialSize(ACCESS_CHECK_CACHE_SIZE)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                .setMaximumSize(ACCESS_CHECK_CACHE_SIZE)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                .setRecordStats(true)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                .setSoftValues(true)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.localDependencies = Maps.newHashMap();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.defs = Maps.newHashMap();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this.localDescs = null;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Build a system def registry that is meant to be used as a shadowing registry.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This builds a registry that will not add new defs to the def set, and will allow any access (the access checks
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * MUST have been done before this is instantiated). Note that none of the defs built off of this will be sent to
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * the client, so it should be safe to allow this access.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param original the registry that is the 'public' registry.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public MasterDefRegistryImpl(@NonNull MasterDefRegistryImpl original) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        this(original.delegateRegistries, original);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Build a master def registry with a set of registries.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This is the normal constructor for a master def registry.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param registries the registries to use in the mdr.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public MasterDefRegistryImpl(@NonNull DefRegistry<?>... registries) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private boolean isOkForDependencyCaching(DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // if compound, OK as these tests are also conducted on the compound's target
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (descriptor.getPrefix().equals("compound")) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // test cacheDependencyExceptions (like static types in Apex)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String descriptorName = descriptor.getQualifiedName().toLowerCase();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // truncate array markers
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (descriptorName.endsWith("[]")) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            descriptorName = descriptorName.substring(0, descriptorName.length() - 2);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (cacheDependencyExceptions.contains(descriptorName)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public Set<DefDescriptor<?>> find(@NonNull DescriptorFilter matcher) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        final String filterKey = matcher.toString();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        Set<DefRegistry<?>> registries = delegateRegistries.getRegistries(matcher);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        Set<DefDescriptor<?>> matched = Sets.newHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            boolean cacheable = shouldCache(matcher);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                // This could be a little dangerous, but unless we force all of our
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                // registries to implement find, this is necessary.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                if (reg.hasFind()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    if (cacheable && reg.isCacheable()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        // cache results per registry
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        String cacheKey = filterKey + "|" + reg.toString();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        registryResults = descriptorFilterCache.getIfPresent(cacheKey);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            registryResults = reg.find(matcher);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            descriptorFilterCache.put(cacheKey, registryResults);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        registryResults = reg.find(matcher);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    matched.addAll(registryResults);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (localDescs != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                for (DefDescriptor<? extends Definition> desc : localDescs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    if (matcher.matchDescriptor(desc)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        matched.add(desc);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return matched;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public <D extends Definition> Set<DefDescriptor<D>> find(@NonNull DefDescriptor<D> matcher) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        Set<DefDescriptor<D>> matched;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (matcher.getNamespace().equals("*")) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            matched = new LinkedHashSet<>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            String qualifiedNamePattern = null;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            switch (matcher.getDefType()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case CONTROLLER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case TESTSUITE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case MODEL:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case RENDERER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case HELPER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case STYLE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case TYPE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case RESOURCE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case PROVIDER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case THEME_PROVIDER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case INCLUDE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case THEME_MAP_PROVIDER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                qualifiedNamePattern = "%s://%s.%s";
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                break;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case ATTRIBUTE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case LAYOUT:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case LAYOUT_ITEM:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case TESTCASE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case APPLICATION:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case COMPONENT:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case INTERFACE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case EVENT:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case LIBRARY:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case DOCUMENTATION:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case LAYOUTS:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case NAMESPACE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case THEME:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case THEME_DEF_REF:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case VAR:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case DESIGN:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case ATTRIBUTE_DESIGN:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case DESIGN_TEMPLATE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case DESIGN_TEMPLATE_REGION:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case SVG:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                qualifiedNamePattern = "%s://%s:%s";
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                break;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case ACTION:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case DESCRIPTION:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case EXAMPLE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            case INCLUDE_REF:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                throw new RuueRuntimeException(String.format("Find on %s defs not supported.", matcher.getDefType()
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        .name()));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                for (String namespace : delegateRegistries.getAllNamespaces()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    String qualifiedName = String.format(qualifiedNamePattern,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            matcher.getPrefix() != null ? matcher.getPrefix() : "*", namespace,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            matcher.getName() != null ? matcher.getName() : "*");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    DefDescriptor<D> namespacedMatcher = (DefDescriptor<D>) DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            qualifiedName,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            matcher.getDefType().getPrimaryInterface());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    DefRegistry<D> registry = getRegistryFor(namespacedMatcher);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        matched.addAll(registry.find(namespacedMatcher));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                matched = getRegistryFor(matcher).find(matcher);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (localDescs != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            DescriptorFilter filter = new DescriptorFilter(matcher.getQualifiedName());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            for (DefDescriptor<? extends Definition> desc : localDescs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                if (filter.matchDescriptor(desc)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    DefDescriptor<D> localDesc = (DefDescriptor<D>) desc;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    matched.add(localDesc);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return matched;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This embodies a definition that is in the process of being compiled. It stores the descriptor, definition, and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * the registry to which it belongs to avoid repeated lookups.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private static class CompilingDef<T extends Definition> implements Comparable<CompilingDef<?>> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:         * The descriptor we are compiling.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:         * If this is true, we need to do the validation steps after finishing.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public boolean built = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:         * Is this def cacheable?
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public boolean cacheable = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:         * have we validated this def yet?
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public boolean validated = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            sb.append(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append("[");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append(def.getOwnHash());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append("]");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append("<");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append(level);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append(">");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append("[not-compiled]");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            sb.append(" : built=");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            sb.append(built);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            sb.append(", cacheable=");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            sb.append(cacheable);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public int compareTo(CompilingDef<?> o) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return this.descriptor.compareTo(o.descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This class holds the local information necessary for compilation.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private static class CompileContext {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public final RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public final LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public final Map<DefDescriptor<? extends Definition>, CompilingDef<?>> compiled = Maps.newHashMap();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public final List<ClientLibraryDef> clientLibs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public final DefDescriptor<? extends Definition> topLevel;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        /** Is this def's dependencies cacheable? */
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public boolean shouldCacheDependencies;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        public CompileContext(DefDescriptor<? extends Definition> topLevel, List<ClientLibraryDef> clientLibs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            this.shouldCacheDependencies = true;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            this.shouldCacheDependencies = true;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Check to see if we have a def locally.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private boolean hasLocalDef(DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return (original != null && original.defs.containsKey(descriptor)) || defs.containsKey(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private <D extends Definition> D getLocalDef(DefDescriptor<D> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (original != null && original.defs.containsKey(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            D origDef = (D) original.defs.get(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (defs.containsKey(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            D localDef = (D) defs.get(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return localDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Fill a compiling def for a descriptor.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This makes sure that we can get a registry for a given def, then tries to get the def from the global cache, if
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * that fails, it retrieves from the registry, and marks the def as locally built.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param compiling the current compiling def (if there is one).
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @throws QuickFixException if validateDefinition caused a quickfix.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private <D extends Definition> boolean fillCompilingDef(CompilingDef<D> compiling, RuueContext context)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        assert compiling.def == null;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // First, check our local cached defs to see if we have a fully compiled version.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // in this case, we don't care about caching, since we are done.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (hasLocalDef(compiling.descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            D localDef = getLocalDef(compiling.descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (localDef != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                compiling.def = localDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                compiling.built = !localDef.isValid();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    localDef.validateDefinition();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // If there is no local cache, we must first check to see if there is a registry, as we may not have
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // a registry (depending on configuration). In the case that we don't find one, we are done here.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // Now, check if we can cache the def later, as we won't have the registry to check at a later time.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // If we can cache, look it up in the cache. If we find it, we have a built definition.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // Currently, static registries are neither cached, nor do they affect dependency caching
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (!registry.isStatic()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (registry.isCacheable() && shouldCache(compiling.descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                compiling.cacheable = true;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                Optional<D> opt = (Optional<D>) defsCache.getIfPresent(compiling.descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    D cachedDef = opt.orNull();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    if (cachedDef != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        DefDescriptor<D> canonical = (DefDescriptor<D>) cachedDef.getDescriptor();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        compiling.def = cachedDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        compiling.descriptor = canonical;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        compiling.built = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                // if not a cacheable registry or not shouldCache, test other exceptions that might still
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                // allow dependency caching (if it's from static registry, it can't affect our decision on
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                // depsCaching) test for special cases: compounds and static apex types
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                boolean qualified = isOkForDependencyCaching(compiling.descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                currentCC.shouldCacheDependencies = qualified;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // The last case. This is our first compile or the def is uncacheable.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // In this case, we make sure that the initial validation is called, and put
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        DefDescriptor<D> canonical = (DefDescriptor<D>) compiling.def.getDescriptor();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        compiling.descriptor = canonical;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        context.pushCallingDescriptor(canonical);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            compiling.def.validateDefinition();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            context.popCallingDescriptor();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * A private helper routine to make the compiler code more sane.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param descriptor the descriptor that we are currently handling, must not be in the compiling defs.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param cc the compile context to allow us to accumulate information.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param stack the incoming stack (linked hash set, so order is preserved).
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param parent the direct parent of the definition we are looking up.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @throws QuickFixException if the definition is not found, or validateDefinition() throws one.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private <D extends Definition> D getHelper(@NonNull DefDescriptor<D> descriptor,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            @NonNull CompileContext cc, @NonNull Set<DefDescriptor<?>> stack,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            @CheckForNull Definition parent) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (stack.contains(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // System.out.println("cycle at "+stack+" "+descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                // System.out.println("recalculating at "+stack+" "+descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        stack.add(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // careful here. We don't just return with the non-null def because that breaks our levels.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // We need to walk the whole tree, which is unfortunate perf-wise.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    Location l = null;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    if (parent != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        l = parent.getLocation();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    stack.remove(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    throw new DefinitionNotFoundException(descriptor, l, stack.toString());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                if (cc.clientLibs != null && cd.def instanceof BaseComponentDef) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    BaseComponentDef baseComponent = (BaseComponentDef) cd.def;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    baseComponent.addClientLibs(cc.clientLibs);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            Set<DefDescriptor<?>> newDeps = Sets.newHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            cd.def.appendDependencies(newDeps);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                getHelper(dep, cc, stack, cd.def);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            stack.remove(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * finish up the validation of a set of compiling defs.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param context only needed to do setCurrentNamspace.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private void finishValidation() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        int iteration = 0;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // Validate our references. This part is uh, painful.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // Turns out that validating references can pull in things we didn't see, so we
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // loop infinitely... or at least a few times.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // This can be changed once we remove the ability to nest, as we will never allow
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // this. That way we won't have to copy our list so many times.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            compiling = Lists.newArrayList(currentCC.compiled.values());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                currentCC.context.pushCallingDescriptor(cd.descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    if (cd.built && !cd.validated) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        if (iteration != 0) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            logger.warn("Nested add of " + cd.descriptor + " during validation of "
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            // RuueRuntimeException("Nested add of "+cd.descriptor+" during validation of "+currentCC.topLevel);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        cd.def.validateReferences();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        cd.validated = true;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    currentCC.context.popCallingDescriptor();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            iteration += 1;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // And finally, mark everything as happily compiled.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                throw new RuueRuntimeException("Missing def for " + cd.descriptor + " during validation of "
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    if (cd.cacheable) { // false for non-privileged namespaces, or non-cacheable registries
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        defsCache.put(cd.descriptor, Optional.of(cd.def));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    cd.def.markValid();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Compile a single definition, finding all of the static dependencies.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This is the primary entry point for compiling a single definition. The basic guarantees enforced here are:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>Each definition has 'validateDefinition()' called on it exactly once.</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>No definition is marked as valid until all definitions in the dependency set have been validated</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>Each definition has 'validateReferences()' called on it exactly once, after the definitions have been put in
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * local cache</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>All definitions are marked valid by the DefRegistry after the validation is complete</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>No definition should be available to other threads until it is marked valid</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * In order to do all of this, we keep a set of 'compiling' definitions locally, and use that to calculate
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * dependencies and walk the tree. Circular dependencies are handled gracefully, and no other thread can interfere
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * because everything is local.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * FIXME: this should really cache invalid definitions and make sure that we don't bother re-compiling until there
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * is some change of state. However, that is rather more complex than it sounds.... and shouldn't really manifest
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * much in a released system.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param descriptor the descriptor that we wish to compile.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private <D extends Definition> D compileDef(@NonNull DefDescriptor<D> descriptor, @NonNull CompileContext cc)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        boolean nested = (cc == currentCC);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            throw new RuueRuntimeException("Unexpected nesting of contexts. This is not allowed");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            currentCC.loggingService.startTimer(LoggingService.TIMER_DEFINITION_CREATION);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            Set<DefDescriptor<?>> stack = Sets.newLinkedHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                def = getHelper(descriptor, currentCC, stack, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            } catch (DefinitionNotFoundException ndfe) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // ooh, nasty, we might be in a 'failure is ok state', in which case
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // we need to be sure that we don't mess up the finishValidation step
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // by leaving an empty entry around... If failure is _not_ ok, the next
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // level up will break.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    if (currentCC.compiled.containsKey(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                if (descriptor.equals(ndfe.getDescriptor())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // ignore a nonexistent def here.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                finishValidation();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Internal routine to compile and return a DependencyEntry.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This routine always compiles the definition, even if it is in the caches. If the incoming descriptor does not
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * correspond to a definition, it will return null, otherwise, on failure it will throw a QuickFixException.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Please look at {@link #localDependencies} if you are mucking in here.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>All definitions that were encountered during the compile will be put in the local def cache, even if a QFE is
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>A hash is compiled for the definition if it compiles</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>a dependency entry is cached locally in any case</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>a dependency entry is cached globally if the definition compiled</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param descriptor the incoming descriptor to compile
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @throws QuickFixException if the definition failed to compile.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // See localDependencies commentcurrentCC
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String key = makeLocalKey(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            throw new RuueRuntimeException("Ugh, nested compileDE/buildDE on " + currentCC.topLevel
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            List<ClientLibraryDef> clientLibs = Lists.newArrayList();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            List<CompilingDef<?>> compiled = Lists.newArrayList(cc.compiled.values());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            Set<DefDescriptor<? extends Definition>> deps = Sets.newLinkedHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // Now walk the sorted list, building up our dependencies, and uid
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            Hash.StringBuilder globalBuilder = new Hash.StringBuilder();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // actually, this should never happen.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                deps.add(cd.descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                // Now update our hash.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append(cd.descriptor.getQualifiedName().toLowerCase());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append("|");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                String hash = cd.def.getOwnHash();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                if (hash != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    sb.append(hash);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                sb.append(",");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                globalBuilder.addString(sb.toString());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            uid = globalBuilder.build().toString();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // Now try a re-lookup. This may catch existing cached
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // entries where uid was null.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            de = new DependencyEntry(uid, Collections.unmodifiableSet(deps), clientLibs);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (shouldCache(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                // put UID-qualified descriptor key for dependency
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                depsCache.put(makeGlobalKey(de.uid, descriptor), de);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                // put unqualified descriptor key for dependency
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                if (cc.shouldCacheDependencies) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    depsCache.put(makeNonUidGlobalKey(descriptor), de);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // See localDependencies comment
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            localDependencies.put(de.uid, de);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            localDependencies.put(key, de);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } catch (QuickFixException qfe) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // See localDependencies comment
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            localDependencies.put(key, new DependencyEntry(qfe));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Get a dependency entry for a given uid.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This is a convenience routine to check both the local and global cache for a value.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Please look at {@link #localDependencies} if you are mucking in here.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * <li>If a dependency is found in the global cache, it is populated into the local cache.</li>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param uid the uid may be null, if so, it only checks the local cache.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param descriptor the descriptor, used for both global and local cache lookups.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private DependencyEntry getDE(@CheckForNull String uid, @NonNull DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // See localDependencies comment
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String key = makeLocalKey(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            de = localDependencies.get(uid);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (shouldCache(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                de = depsCache.getIfPresent(makeGlobalKey(uid, descriptor));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // See localDependencies comment
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            de = localDependencies.get(key);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (shouldCache(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                de = depsCache.getIfPresent(makeNonUidGlobalKey(descriptor));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // See localDependencies comment
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            localDependencies.put(de.uid, de);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            localDependencies.put(key, de);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        DependencyEntry de = localDependencies.get(uid);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public List<ClientLibraryDef> getClientLibraries(String uid) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        DependencyEntry de = localDependencies.get(uid);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return de.clientLibraries;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Typesafe helper for getDef.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This adds new definitions (unvalidated) to the list passed in. Definitions that were previously built are simply
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * added to the local cache.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * The quick fix exception case is actually a race condition where we previously had a set of depenendencies, and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * something changed, making our set inconsistent. There are no guarantees that during a change all MDRs will have a
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param descriptor the descriptor for which we need a definition.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @throws QuickFixException if something has gone terribly wrong.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private <D extends Definition> void validateHelper(@NonNull DefDescriptor<D> descriptor) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Build a DE 'in place' with no tree traversal.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private <D extends Definition> void buildDE(@NonNull DependencyEntry de, @NonNull DefDescriptor<?> descriptor)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            throw new RuueRuntimeException("Ugh, nested compileDE/buildDE on " + currentCC.topLevel
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            validateHelper(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                validateHelper(dd);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            for (CompilingDef<?> compiling : currentCC.compiled.values()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            finishValidation();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Get a definition.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This does a scan of the loaded dependency entries to check if there is something to pull, otherwise, it just
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * compiles the entry. This should log a warning somewhere, as it is a dependency that was not noted.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param descriptor the descriptor to find.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @throws QuickFixException if there is a compile time error.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // Always check for a local def before locking.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (hasLocalDef(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return getLocalDef(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // If our current context is not null, we always want to recurse
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // in to properly include the defs. Note that in this case, we already
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // own the lock, so it can be outside the locking below.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (currentCC.compiled.containsKey(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // If we are nested, compileDef will do the right thing.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // This is a bit ugly though.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                for (DependencyEntry det : localDependencies.values()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    if (det.dependencies != null && det.dependencies.contains(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        break;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // found an entry.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // In this case, throw a QFE if we have one.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // Now we need to actually do the build..
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public <D extends Definition> void save(@NonNull D def) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            getRegistryFor((DefDescriptor<D>) def.getDescriptor()).save(def);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            invalidate(def.getDescriptor());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public <D extends Definition> boolean exists(DefDescriptor<D> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        boolean cacheable;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        boolean regExists;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (hasLocalDef(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return getLocalDef(descriptor) != null;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        cacheable = reg.isCacheable() && shouldCache(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (cacheable) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // Try our various caches.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            Boolean val = existsCache.getIfPresent(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (val != null && val.booleanValue()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (cacheable) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                Optional<?> opt = defsCache.getIfPresent(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // We cache here.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        existsCache.put(descriptor, Boolean.TRUE);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        existsCache.put(descriptor, Boolean.FALSE);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (cacheable) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                Boolean cacheVal = Boolean.valueOf(regExists);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                existsCache.put(descriptor, cacheVal);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (regExists == false) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // Cache negatives to avoid excessive lookups.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This figures out based on prefix what registry this component is for, it could return null if the prefix is not
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Note: The generic typing here is incorrect, as in not true.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private <T extends Definition> DefRegistry<T> getRegistryFor(@NonNull DefDescriptor<T> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        DefRegistry<T> reg = (DefRegistry<T>) delegateRegistries.getRegistryFor(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public <D extends Definition> void addLocalDef(D def) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (localDescs == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            localDescs = Sets.newHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        localDescs.add(desc);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public boolean namespaceExists(String ns) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return delegateRegistries.getAllNamespaces().contains(ns);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public <D extends Definition> void assertAccess(DefDescriptor<?> referencingDescriptor, D def)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        assertAccess(referencingDescriptor, def, accessCheckCache);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    <D extends Definition> void assertAccess(DefDescriptor<?> referencingDescriptor, D def,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            Cache<String, String> accessCheckCache) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String status = hasAccess(referencingDescriptor, def, accessCheckCache);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (status != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            String message = Ruue.getConfigAdapter().isProduction() ? DefinitionNotFoundException.getMessage(
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    descriptor.getDefType(), descriptor.getName()) : status;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            throw new NoAccessException(message);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public <D extends Definition> String hasAccess(DefDescriptor<?> referencingDescriptor, D def) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return hasAccess(referencingDescriptor, def, accessCheckCache);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    <D extends Definition> String hasAccess(DefDescriptor<?> referencingDescriptor, D def,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            Cache<String, String> accessCheckCache) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // If the def is access="global" or does not require authentication then anyone can see it
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        DefinitionAccess access = def.getAccess();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (access.isGlobal() || !access.requiresAuthentication()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        ConfigAdapter configAdapter = Ruue.getConfigAdapter();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String referencingNamespace = null;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (configAdapter.isUnsecuredPrefix(prefix)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            referencingNamespace = referencingDescriptor.getNamespace();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // The caller is in a system namespace let them through
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (configAdapter.isPrivilegedNamespace(referencingNamespace)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String namespace;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String target;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (def instanceof AttributeDef) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            AttributeDef attributeDef = (AttributeDef) def;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            DefDescriptor<? extends RootDefinition> parentDescriptor = attributeDef.getParentDescriptor();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            namespace = parentDescriptor.getNamespace();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            target = String.format("%s:%s.%s", namespace, parentDescriptor.getName(), desc.getName());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            namespace = desc.getNamespace();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            target = String.format("%s:%s", namespace, desc.getName());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        // Cache key is of the form "referencingNamespace>defNamespace:defName[.subDefName].defTypeOrdinal"
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String key = String.format("%s>%s.%d", referencingNamespace == null ? "" : referencingNamespace, target,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                defType.ordinal());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String status = accessCheckCache.getIfPresent(key);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (status == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            status = "";
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // Protect against re-entry
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            accessCheckCache.put(key, status);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // System.out.printf("** MDR.miss.assertAccess() cache miss for: %s\n", key);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (!configAdapter.isUnsecuredNamespace(namespace)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    && !configAdapter.isUnsecuredPrefix(descriptor.getPrefix())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                if (referencingNamespace == null || referencingNamespace.isEmpty()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    status = String
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            .format("Access to %s '%s' disallowed by MasterDefRegistry.assertAccess(): referencing namespace was empty or null",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                                    defType, target);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                } else if (!referencingNamespace.equals(namespace)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // The caller and the def are not in the same namespace
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    status = String
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                            .format("Access to %s '%s' from namespace '%s' in '%s(%s)' disallowed by MasterDefRegistry.assertAccess()",
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                                    defType.toString().toLowerCase(), target, referencingNamespace,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (!status.isEmpty()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                accessCheckCache.put(key, status);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            // System.out.printf("** MDR.hit.assertAccess() cache hit for: %s\n", key);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return status.isEmpty() ? null : status;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * only used by admin tools to view all registries
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return delegateRegistries.getAllRegistries();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Filter the entire set of current definitions by a set of preloads.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This filtering is very simple, it just looks for local definitions that are not included in the preload set.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public Map<DefDescriptor<? extends Definition>, Definition> filterRegistry(Set<DefDescriptor<?>> preloads) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        Map<DefDescriptor<? extends Definition>, Definition> filtered;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (preloads == null || preloads.isEmpty()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return Maps.newHashMap(defs);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        filtered = Maps.newHashMapWithExpectedSize(defs.size());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        for (Map.Entry<DefDescriptor<? extends Definition>, Definition> entry : defs.entrySet()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            if (!preloads.contains(entry.getKey())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                filtered.put(entry.getKey(), entry.getValue());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public <T extends Definition> boolean invalidate(DefDescriptor<T> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        defs.clear();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (localDescs != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            localDescs.clear();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        localDependencies.clear();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (shouldCache(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            depsCache.invalidateAll();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            defsCache.invalidateAll();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            existsCache.invalidateAll();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            descriptorFilterCache.invalidateAll();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private String getKey(DependencyEntry de, DefDescriptor<?> descriptor, String key) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return String.format("%s@%s@%s", de.uid, descriptor.getQualifiedName().toLowerCase(), key);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public String getCachedString(String uid, DefDescriptor<?> descriptor, String key) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (shouldCache(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            DependencyEntry de = localDependencies.get(uid);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                return stringsCache.getIfPresent(getKey(de, descriptor, key));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    public void putCachedString(String uid, DefDescriptor<?> descriptor, String key, String value) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (shouldCache(descriptor)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            DependencyEntry de = localDependencies.get(uid);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                stringsCache.put(getKey(de, descriptor, key), value);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * This uses some trickery to try to be efficient, including using a dual keyed local cache to avoid looking up
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * values more than once even in the absense of remembered context.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Note: there is no guarantee that the definitions have been fetched from cache here, so there is a very subtle
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * race condition.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Also note that this _MUST NOT_ be called inside of a compile, or things may get out of wack. We probably should
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * be asserting this somewhere.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param uid the uid for cache lookup (null means unknown).
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param descriptor the descriptor to fetch.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @throws QuickFixException if the definition cannot be compiled.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // If we can't find our descriptor, we just give back a null.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                } catch (QuickFixException qfe) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // try to pick it up from the cache.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                    // this should never happen.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                        throw new RuueRuntimeException("unexpected null on QFE");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    /** Creates a key for the localDependencies, using DefType and FQN. */
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private String makeLocalKey(@NonNull DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return descriptor.getDefType().toString() + ":" + descriptor.getQualifiedName().toLowerCase();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Creates a key for the global {@link #depsCache}, using UID, type, and FQN.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private String makeGlobalKey(String uid, @NonNull DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return uid + "/" + makeLocalKey(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Creates a key for the global {@link #depsCache}, using only descriptor (and Mode internally).
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * @param descriptor - the descriptor use for the key
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private String makeNonUidGlobalKey(@NonNull DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return makeLocalKey(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Return true if the namespace of the provided descriptor supports caching.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private boolean shouldCache(DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String namespace = descriptor.getNamespace();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return shouldCache(prefix, namespace);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Return true if the descriptor filter meets all requirements for the result of find to be cached
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private boolean shouldCache(DescriptorFilter filter) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        GlobMatcher p = filter.getPrefixMatch();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String prefix = ((p.isConstant()) ? p.toString() : null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        GlobMatcher ns = filter.getNamespaceMatch();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        String namespace = ((ns.isConstant()) ? ns.toString() : null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return (prefix != null || namespace != null) && shouldCache(prefix, namespace);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:     * Return true if the namespace supports cacheing
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    private boolean shouldCache(String prefix, String namespace) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        boolean cacheable = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        if (namespace == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                cacheable = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                ConfigAdapter configAdapter = Ruue.getConfigAdapter();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:                cacheable = configAdapter.isCacheablePrefix(prefix);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            ConfigAdapter configAdapter = Ruue.getConfigAdapter();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            cacheable = configAdapter.isPrivilegedNamespace(namespace);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            ConfigAdapter configAdapter = Ruue.getConfigAdapter();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:            cacheable = configAdapter.isCacheablePrefix(prefix) || configAdapter.isPrivilegedNamespace(namespace);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:        return cacheable;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // TODO - W-2105858 - re-enable with either the private implementation of the Cache used, or
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // a least-common-denominator implementation
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // public static Collection<Optional<? extends Definition>> getCachedDefs() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // return defsCache.asMap().values();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // public static CacheStats getDefsCacheStats() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // return defsCache.stats();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // public static CacheStats getExistsCacheStats() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // return existsCache.stats();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // public static CacheStats getStringsCacheStats() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // return stringsCache.stats();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // public static CacheStats getDescriptorFilterCacheStats() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:    // return descriptorFilterCache.stats();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import java.util.regex.Matcher;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import java.util.regex.Pattern;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.service.LoggingService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.throwable.RuueError;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java: * subdef impl, passes most stuff except for name through to the parent
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:public class SubDefDescriptorImpl<T extends Definition, P extends Definition> implements SubDefDescriptor<T, P> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    private static final long serialVersionUID = -4922652464026095847L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    protected final String name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    protected final String qualifiedName;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    protected final String descriptorName;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    protected final DefType defType;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    protected final DefDescriptor<P> parentDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    private final int hashCode;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:     * Pattern for subDefDescriptors: java://foo.bar.baz/ACTION$getUser Group 1
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:     * = parent name = java://foo.bar.baz Group 2 = defType = ACTION Group 3 =
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:     * name = getUser
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public static final Pattern SUBDEF_PATTERN = Pattern.compile("\\A((?:[\\w\\\\*]+://)?.*)/(\\w+)\\$(\\w+)\\z");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    protected SubDefDescriptorImpl(DefDescriptor<P> parentDescriptor, String subName, Class<T> defClass) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(subName)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            throw new RuueRuntimeException("Sub definition name cannot be null");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        loggingService.startTimer(LoggingService.TIMER_DEF_DESCRIPTOR_CREATION);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            this.parentDescriptor = parentDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            this.name = subName;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            this.defType = DefType.getDefType(defClass);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            this.qualifiedName = String.format("%s/%s$%s", parentDescriptor.getQualifiedName(), defType.toString(),
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:                    name);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            this.descriptorName = String.format("%s/%s$%s", parentDescriptor.getDescriptorName(), defType.toString(),
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:                    name);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            this.hashCode = this.qualifiedName.toLowerCase().hashCode();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public DefDescriptor<P> getParentDescriptor() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return parentDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public String getName() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public String getNamespace() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return parentDescriptor.getNamespace();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return parentDescriptor.getPrefix();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:     * @return Returns isParameterized.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public boolean isParameterized() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public String getNameParameters() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public String getQualifiedName() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return qualifiedName;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public String getDescriptorName() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return descriptorName;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        json.writeValue(qualifiedName);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return qualifiedName;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public boolean equals(Object o) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        if (o instanceof SubDefDescriptorImpl) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            return defType == e.defType && name.equals(e.name) && parentDescriptor.equals(e.parentDescriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public final int hashCode() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return hashCode;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public static <Sub extends Definition, Par extends Definition> SubDefDescriptor<Sub, Par> getInstance(String name,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            DefDescriptor<Par> pDesc, Class<Sub> defClass) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return new SubDefDescriptorImpl<Sub, Par>(pDesc, name, defClass);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public static <Sub extends Definition, Par extends Definition> SubDefDescriptor<Sub, Par> getInstance(
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            String qualifiedName, Class<Sub> defClass, Class<Par> parClass) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        Matcher matcher = SUBDEF_PATTERN.matcher(qualifiedName);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        if (matcher.matches()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            String parentName = matcher.group(1);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            String name = matcher.group(3);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            DefDescriptor<Par> parentDescriptor = DefDescriptorImpl.getInstance(parentName, parClass);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            return getInstance(name, parentDescriptor, defClass);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:            throw new RuueRuntimeException(String.format("Invalid Descriptor Format: %s", qualifiedName));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return getParentDescriptor().getDef().getSubDefinition(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public boolean exists() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        throw new RuueError("cannot check existence of a subdef as it requires compiling the parent def");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:     * Compares one {@link DefDescriptor} to another. Sorting uses (only) the
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:     * qualified name, case insensitively. Per {@link Comparable}'s spec, throws
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:     * {@link ClassCastException} if {@code arg} is not a {@code DefDescriptor}.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:    public int compareTo(DefDescriptor<?> other) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/SubDefDescriptorImpl.java:        return DefDescriptorImpl.compare(this, other);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:import org.ruauframework.system.DefFactory;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:public abstract class DefFactoryImpl<D extends Definition> implements DefFactory<D> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:    private static final Set<String> defaultNamespaces = Sets.newHashSet("*");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:    public boolean exists(DefDescriptor<D> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:    public boolean hasFind() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:    public Set<DefDescriptor<D>> find(DefDescriptor<D> matcher) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:    public Set<DefDescriptor<?>> find(DescriptorFilter matcher) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:    public void save(D def) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:    public Set<String> getNamespaces() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefFactoryImpl.java:        return defaultNamespaces;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:import org.ruauframework.system.DefFactory;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * Doesn't do any caching at all.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * This is a very thin wrapper around a factory, in fact, it is a little hard to
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java: * tell the difference. FIXME: collapse them.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:public class NonCachingDefRegistryImpl<T extends Definition> extends DefRegistryImpl<T> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    private static final long serialVersionUID = 5781588775451737960L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    private final DefFactory<T> factory;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    public NonCachingDefRegistryImpl(DefFactory<T> factory, Set<DefType> defTypes, Set<String> prefixes) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        this(factory, defTypes, prefixes, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    public NonCachingDefRegistryImpl(DefFactory<T> factory, Set<DefType> defTypes, Set<String> prefixes,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:            Set<String> namespace) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        super(defTypes, prefixes, namespace);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        this.factory = factory;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        return factory.getDef(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    public boolean hasFind() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        return factory.hasFind();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    public Set<DefDescriptor<T>> find(DefDescriptor<T> matcher) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        return factory.find(matcher);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    public Set<DefDescriptor<?>> find(DescriptorFilter matcher) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        return factory.find(matcher);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    public void save(T def) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        factory.save(def);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    public boolean exists(DefDescriptor<T> descriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        return factory.exists(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        return factory.getSource(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:    public boolean isCacheable() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/NonCachingDefRegistryImpl.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:import java.io.Serializable;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:import org.ruauframework.system.DefRegistry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:public abstract class DefRegistryImpl<T extends Definition> implements DefRegistry<T>, Serializable {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:    private static final long serialVersionUID = 1011408241457411660L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:    private final Set<DefType> defTypes;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:    private final Set<String> prefixes;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:    private final Set<String> namespaces;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:    public DefRegistryImpl(Set<DefType> defTypes, Set<String> prefixes, Set<String> namespaces) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:        if (namespaces == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:            this.namespaces = Sets.newHashSet("*");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:            this.namespaces = namespaces;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:    public Set<String> getNamespaces() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:        return namespaces;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:    public void clear() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:    public boolean isStatic() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/DefRegistryImpl.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import java.util.EnumMap;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import java.util.HashMap;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import java.util.HashSet;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import org.ruauframework.system.DefRegistry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:import org.ruauframework.throwable.RuueError;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java: * A specialized trie-ish structure for storing which registry gurgles which
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:public class RegistryTrie {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:    private final Set<String> allNamespaces = new HashSet<>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:    // a map of map of maps
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:    private final EnumMap<DefType, Map<String, PrefixNode>> root = new EnumMap<>(DefType.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:    private final DefRegistry<?>[] allRegistries;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        allRegistries = registries;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                Map<String, PrefixNode> dtn = this.root.get(defType);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                    dtn = new HashMap<>(8);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                    String prefix = p.toLowerCase();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                    for (String namespace : reg.getNamespaces()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                        allNamespaces.add(namespace);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                        pn.put(namespace, reg);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:    public Set<String> getAllNamespaces() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        return this.allNamespaces;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        return this.allRegistries;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:     * Match a set of registries to a matcher.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:     * Note that this ignores the type of the registry, and uses only the prefix
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:     * and namespace.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:    public Set<DefRegistry<?>> getRegistries(DescriptorFilter matcher) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        Set<DefRegistry<?>> matched = Sets.newHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        for (DefRegistry<?> reg : this.allRegistries) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:            boolean found = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                if (matcher.matchPrefix(prefix)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                    break;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                for (String namespace : reg.getNamespaces()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                    if ("*".equals(namespace) || matcher.matchNamespace(namespace)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                        matched.add(reg);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                        break;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        return matched;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        Map<String, PrefixNode> dt = this.root.get(descriptor.getDefType());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:            PrefixNode pn = dt.get(descriptor.getPrefix().toLowerCase());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                return pn.get(descriptor.getNamespace());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:     * special class for the final path, which has a default built in
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:    private static class PrefixNode {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        // the registry to use if there is no mapping for the specified
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        // namespace, can be null
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        private DefRegistry<?> catchAllRegistry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        // registries to use for specific namespaces
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        private final Map<String, DefRegistry<?>> registries = new HashMap<>(8);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        // the set of namespaces in this prefix.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        private final Set<String> prefixNamespaces = Sets.newHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        private void put(String namespace, DefRegistry<?> registry) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:            DefRegistry<?> r = registries.put(namespace.toLowerCase(), registry);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                throw new RuueError(String.format(
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                        "DefType/Prefix/Namespace combination %s claimed by 2 DefRegistries : %s and %s", namespace, r
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                                .getClass().getName(), registry.getClass().getName()));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:            if ("*".equals(namespace)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                this.catchAllRegistry = registry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                this.prefixNamespaces.add(namespace);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:        private DefRegistry<?> get(String ns) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:            DefRegistry<?> reg = this.registries.get(ns != null ? ns.toLowerCase() : "*");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/system/RegistryTrie.java:                reg = this.catchAllRegistry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.builder.ApplicationDefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.builder.CacheBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.builder.ComponentDefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.builder.ComponentDefRefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.builder.StyleDefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.builder.ThemeDefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.impl.cache.CacheImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.impl.css.style.StyleDefImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.impl.root.application.ApplicationDefImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.impl.root.component.ComponentDefImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.impl.root.component.ComponentDefRefImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.impl.root.theme.ThemeDefImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.service.BuilderService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:public class BuilderServiceImpl implements BuilderService {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:    private static final long serialVersionUID = 5092951086123399013L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:    public ApplicationDefBuilder getApplicationDefBuilder() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:        return new ApplicationDefImpl.Builder();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:	public <K, V> CacheBuilder<K, V> getCacheBuilder() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/BuilderServiceImpl.java:		return new CacheImpl.Builder<K, V>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:import org.ruauframework.adapter.LoggingAdapter;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:import org.ruauframework.service.LoggingService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:import org.ruauframework.system.LoggingContext;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:import org.ruauframework.system.LoggingContext.KeyValueLogger;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:public class LoggingServiceImpl implements LoggingService {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    private static final long serialVersionUID = -6025038810583975257L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public LoggingService establish() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:        RuueImpl.getLoggingAdapter().establish();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:        startTimer(LoggingService.TIMER_TOTAL);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:        startTimer(LoggingService.TIMER_AURA);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public void release() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:        RuueImpl.getLoggingAdapter().release();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public void startTimer(String name) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:            lc.startTimer(name);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public void startAction(String actionName) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:            lc.startAction(actionName);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public void stopAction(String actionName) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:            lc.stopAction(actionName);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public void stopTimer(String name) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:            lc.stopTimer(name);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public long getTime(String name) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:        return lc.getTime(name);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public void resetTimer(String name) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:            lc.resetTimer(name);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public Object getValue(String key) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:        return lc.getValue(key);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public void setValue(String key, Object value) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:            lc.setValue(key, value);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:            lc.logRequestValues();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:        LoggingAdapter la = RuueImpl.getLoggingAdapter();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:        if (la == null || !la.isEstablished()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:        return la.getLoggingContext();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public KeyValueLogger getKeyValueLogger(StringBuffer log) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:            return lc.getKeyValueLogger(log);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingServiceImpl.java:    public void logCSPReport(Map<String, Object> report) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.antlr.misc.MutableInteger;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.adapter.ContextAdapter;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.impl.context.RuueContextImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.impl.system.MasterDefRegistryImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:import org.ruauframework.util.json.JsonSerializationContext;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:public class ContextAdapterImpl implements ContextAdapter {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    private static ThreadLocal<RuueContext> currentContext = new ThreadLocal<RuueContext>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    private static ThreadLocal<RuueContext> systemContext = new ThreadLocal<RuueContext>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    private static ThreadLocal<MutableInteger> systemDepth = new ThreadLocal<MutableInteger>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    public RuueContext establish(Mode mode, MasterDefRegistry masterRegistry, Map<DefType, String> defaultPrefixes,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:            Format format, Authentication access, JsonSerializationContext jsonContext,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:            Map<ValueProviderType, GlobalValueProvider> globalProviders,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:            DefDescriptor<? extends BaseComponentDef> appDesc) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    	return establish(mode, masterRegistry, defaultPrefixes, format, access, jsonContext,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:                globalProviders, appDesc, false);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    public RuueContext establish(Mode mode, MasterDefRegistry masterRegistry,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:			Map<DefType, String> defaultPrefixes, Format format, Authentication access,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:			JsonSerializationContext jsonContext,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:			Map<ValueProviderType, GlobalValueProvider> globalProviders,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:			DefDescriptor<? extends BaseComponentDef> appDesc,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:			boolean isDebugToolEnabled) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    	RuueContext context = new RuueContextImpl(mode, masterRegistry, defaultPrefixes, format, access, jsonContext,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:                globalProviders, isDebugToolEnabled);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    	context.setApplicationDescriptor(appDesc);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    protected RuueContext buildSystemContext(RuueContext original) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        return new RuueContextImpl(original.getMode(),
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:                new MasterDefRegistryImpl((MasterDefRegistryImpl)original.getDefRegistry()),
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:                original.getDefaultPrefixes(), original.getFormat(), original.getAccess(),
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:                original.getJsonSerializationContext(), original.getGlobalProviders(), false);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    public RuueContext pushSystemContext() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        RuueContext context = systemContext.get();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        MutableInteger count = systemDepth.get();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:            count = new MutableInteger(1);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:            count.value += 1;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        MutableInteger count = systemDepth.get();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        if (count == null || count.value == 0) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:            throw new RuueRuntimeException("unmatched pop");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        count.value -= 1;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    public RuueContext getCurrentContext() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        MutableInteger count = systemDepth.get();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        if (count != null && count.value > 0) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    public boolean isEstablished() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:    public void release() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        MutableInteger count = systemDepth.get();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:        if (count != null && count.value != 0) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/ContextAdapterImpl.java:            throw new RuueRuntimeException("unmatched push");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import java.math.BigDecimal;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import java.text.ParseException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import java.util.Calendar;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import java.util.Date;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import java.util.Locale;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import java.util.TimeZone;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import org.ruauframework.service.LocalizationService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import org.ruauframework.util.date.DateService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import org.ruauframework.util.date.DateServiceImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import org.ruauframework.util.number.RuueNumberFormat;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import com.ibm.icu.text.DateFormat;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import com.ibm.icu.text.DecimalFormat;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:import com.ibm.icu.text.NumberFormat;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java: * Default implementation for the Localization Service
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:public class LocalizationServiceImpl implements LocalizationService {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    // make pluggable in the future?
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    private final DateService dateService = DateServiceImpl.get();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:     * Used for Serialization to ensure class consistency.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    private static final long serialVersionUID = 9203705220037034653L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDate(Date date) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDate(date, null, null, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDate(Date date, int dateStyle) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDate(date, null, null, dateStyle);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDate(Date date, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDate(date, locale, null, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDate(Date date, Locale locale, TimeZone timeZone) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDate(date, locale, timeZone, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDate(Date date, Locale locale, TimeZone timeZone, int dateStyle) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (date == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return dateService.getDateStyleConverter(locale, dateStyle).format(date, timeZone);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDate(Calendar cal) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDate(cal, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDate(Calendar cal, int dateStyle) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (cal == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDate(cal.getTime(), null, cal.getTimeZone(), dateStyle);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatTime(Date time) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatTime(time, null, null, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatTime(Date time, int timeStyle) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatTime(time, null, null, timeStyle);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatTime(Date time, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatTime(time, locale, null, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatTime(Date time, Locale locale, TimeZone timeZone) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatTime(time, locale, timeZone, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatTime(Date time, Locale locale, TimeZone timeZone, int timeStyle) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return dateService.getTimeStyleConverter(locale, timeStyle).format(time, timeZone);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatTime(Calendar cal) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatTime(cal, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatTime(Calendar cal, int timeStyle) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (cal == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatTime(cal.getTime(), null, cal.getTimeZone(), timeStyle);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDateTime(Date dateTime) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDateTime(dateTime, null, null, DateFormat.DEFAULT, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDateTime(Date dateTime, int dateStyle, int timeStyle) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDateTime(dateTime, null, null, dateStyle, timeStyle);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDateTime(Date dateTime, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDateTime(dateTime, locale, null, DateFormat.DEFAULT, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDateTime(Date dateTime, Locale locale, TimeZone timeZone) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDateTime(dateTime, locale, timeZone, DateFormat.DEFAULT, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDateTime(Date dateTime, Locale locale, TimeZone timeZone, int dateStyle, int timeStyle) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (dateTime == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return dateService.getDateTimeStyleConverter(locale, dateStyle, timeStyle).format(dateTime, timeZone);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDateTime(Date date, Locale locale, TimeZone timeZone, String format) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (date == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return dateService.getPatternConverter(locale, format).format(date, timeZone);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDateTime(Calendar cal) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDateTime(cal, DateFormat.DEFAULT, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatDateTime(Calendar cal, int dateStyle, int timeStyle) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (cal == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatDateTime(cal.getTime(), null, cal.getTimeZone(), dateStyle, timeStyle);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(int number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(long number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(double number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Integer number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Long number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Double number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Double number, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null, minFractionDigits, maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(int number, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getNumberInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(number);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(long number, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getNumberInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(number);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(double number, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getNumberInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(number);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Integer number, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number.intValue(), locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Long number, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number.longValue(), locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Double number, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number.doubleValue(), locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Double number, Locale locale, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getNumberInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        nf.setMinimumFractionDigits(minFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        nf.setMaximumFractionDigits(maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(number);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatPercent(double percent) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatPercent(percent, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatPercent(double percent, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatPercent(percent, null, minFractionDigits, maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatPercent(double percent, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getPercentInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(percent);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatPercent(double percent, Locale locale, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getPercentInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        nf.setMinimumFractionDigits(minFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        nf.setMaximumFractionDigits(maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(percent);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(double currency) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatCurrency(currency, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(double currency, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatCurrency(currency, null, minFractionDigits, maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(double currency, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        DecimalFormat df = (DecimalFormat) NumberFormat.getCurrencyInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return df.format(currency);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(double value, Locale locale, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatCurrency(value, locale, minFractionDigits, maxFractionDigits, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(double value, Locale locale, int minFractionDigits, int maxFractionDigits,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getCurrencyLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            currency = Currency.getInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        DecimalFormat df = (DecimalFormat) NumberFormat.getCurrencyInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        // setCurrency will set fraction digits based on locale so that statement needs to happen before if we
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        // want to set fraction digits ourselves
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        df.setMinimumFractionDigits(minFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        df.setMaximumFractionDigits(maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return df.format(value);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(BigDecimal currency) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatCurrency(currency, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(BigDecimal currency, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatCurrency(currency, null, minFractionDigits, maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(BigDecimal currency, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        DecimalFormat df = (DecimalFormat) NumberFormat.getCurrencyInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        df.setParseBigDecimal(true);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return df.format(currency);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(BigDecimal value, Locale locale, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatCurrency(value, locale, minFractionDigits, maxFractionDigits, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatCurrency(BigDecimal value, Locale locale, int minFractionDigits, int maxFractionDigits,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getCurrencyLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            currency = Currency.getInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        DecimalFormat df = (DecimalFormat) NumberFormat.getCurrencyInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        df.setParseBigDecimal(true);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        df.setMinimumFractionDigits(minFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        df.setMaximumFractionDigits(maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return df.format(value);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDate(String date) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseDate(date, null, null, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDate(String date, int dateStyle) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseDate(date, null, null, dateStyle);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDate(String date, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseDate(date, locale, null, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDate(String date, Locale locale, TimeZone timeZone) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseDate(date, locale, timeZone, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDate(String date, Locale locale, TimeZone timeZone, int dateStyle) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (date == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return dateService.getDateStyleConverter(locale, dateStyle).parse(date, timeZone);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Calendar parseDateToCalendar(String date, Locale locale, TimeZone timeZone, int dateStyle)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (date == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        Calendar c = Calendar.getInstance(timeZone, locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        c.setTime(parseDate(date, locale, timeZone, dateStyle));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseTime(String time) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseTime(time, null, null, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseTime(String time, int timeStyle) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseTime(time, null, null, timeStyle);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseTime(String time, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseTime(time, locale, null, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseTime(String time, Locale locale, TimeZone timeZone) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseTime(time, locale, timeZone, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseTime(String time, Locale locale, TimeZone timeZone, int timeStyle) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return dateService.getTimeStyleConverter(locale, timeStyle).parse(time, timeZone);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Calendar parseTimeToCalendar(String time, Locale locale, TimeZone timeZone, int timeStyle)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        Calendar c = Calendar.getInstance(timeZone, locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        c.setTime(parseTime(time, locale, timeZone, timeStyle));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDateTime(String dateTime) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseDateTime(dateTime, null, null, DateFormat.DEFAULT, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDateTime(String dateTime, int dateStyle, int timeStyle) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseDateTime(dateTime, null, null, dateStyle, timeStyle);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDateTime(String dateTime, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseDateTime(dateTime, locale, null, DateFormat.DEFAULT, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDateTime(String dateTime, Locale locale, TimeZone timeZone) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseDateTime(dateTime, locale, timeZone, DateFormat.DEFAULT, DateFormat.DEFAULT);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDateTime(String dateTime, Locale locale, TimeZone timeZone, int dateStyle, int timeStyle)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (dateTime == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return dateService.getDateTimeStyleConverter(locale, dateStyle, timeStyle).parse(dateTime, timeZone);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Date parseDateTime(String dateTime, Locale locale, TimeZone timeZone, String format) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (dateTime == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return dateService.getPatternConverter(locale, format).parse(dateTime, timeZone);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public Calendar parseDateTimeToCalendar(String dateTime, Locale locale, TimeZone timeZone, int dateStyle,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            int timeStyle) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (dateTime == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        RuueLocale loc = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = loc.getDateLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        Calendar c = Calendar.getInstance(timeZone, locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        c.setTime(parseDateTime(dateTime, locale, timeZone, dateStyle, timeStyle));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public int parseInt(String number) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseInt(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public long parseLong(String number) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseLong(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public float parseFloat(String number) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseFloat(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public double parseDouble(String number) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseDouble(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public int parseInt(String number, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            throw new ParseException("Parameter 'number' was null", 0);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return RuueNumberFormat.parseStrict(number, nf).intValue();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public long parseLong(String number, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            throw new ParseException("Parameter 'number' was null", 0);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return RuueNumberFormat.parseStrict(number, nf).longValue();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public float parseFloat(String number, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            throw new ParseException("Parameter 'number' was null", 0);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return RuueNumberFormat.parseStrict(number, nf).floatValue();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public double parseDouble(String number, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            throw new ParseException("Parameter 'number' was null", 0);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return RuueNumberFormat.parseStrict(number, nf).doubleValue();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public double parsePercent(String percent) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parsePercent(percent, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public double parsePercent(String percent, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            throw new ParseException("Parameter 'percent' was null", 0);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getPercentInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return RuueNumberFormat.parseStrict(percent, nf).doubleValue();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public BigDecimal parseCurrency(String currency) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseCurrency(currency, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public BigDecimal parseCurrency(String currency, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getCurrencyLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        DecimalFormat df = (DecimalFormat) NumberFormat.getCurrencyInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        df.setParseBigDecimal(true);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        // TODO: use parseStrict when ICU4J is updated >= 51.2
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return ((com.ibm.icu.math.BigDecimal) RuueNumberFormat.parse(currency, df, false)).toBigDecimal();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(BigDecimal number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(BigDecimal number, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null, minFractionDigits, maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(BigDecimal number, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getNumberInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(number);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(BigDecimal number, Locale locale, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getNumberInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        nf.setMinimumFractionDigits(minFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        nf.setMaximumFractionDigits(maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(number);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public BigDecimal parseBigDecimal(String number) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseBigDecimal(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public BigDecimal parseBigDecimal(String number, Locale locale) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return parseBigDecimal(number, locale, true);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public BigDecimal parseBigDecimal(String number, Locale locale, boolean strict) throws ParseException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        DecimalFormat df = (DecimalFormat) NumberFormat.getInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        df.setParseBigDecimal(true);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        // icu BigDecimal to java BigDecimal
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            return ((com.ibm.icu.math.BigDecimal) RuueNumberFormat.parseStrict(number, df)).toBigDecimal();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return ((com.ibm.icu.math.BigDecimal) RuueNumberFormat.parse(number, df, false)).toBigDecimal();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Number number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return formatNumber(number, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Number number, Locale locale) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getNumberInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(number);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:    public String formatNumber(Number number, Locale locale, int minFractionDigits, int maxFractionDigits) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        if (locale == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale().getNumberLocale();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        NumberFormat nf = NumberFormat.getNumberInstance(locale);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        nf.setMinimumFractionDigits(minFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        nf.setMaximumFractionDigits(maxFractionDigits);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LocalizationServiceImpl.java:        return nf.format(number);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:package org.ruauframework.impl.documentation;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import org.ruauframework.builder.ExampleDefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:public class ExampleDefImpl extends DefinitionImpl<ExampleDef> implements ExampleDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:	private static final long serialVersionUID = -4467201134487458023L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:    private DefDescriptor<ComponentDef> ref;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:    private String name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:    private String label;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:	protected ExampleDefImpl(Builder builder) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        this.name = builder.name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        this.label = builder.label;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:    public String getName() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        return name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:    public String getLabel() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        return label;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        dependencies.add(ref);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:            throw new InvalidDefinitionException("<ruau:example> must have attribute 'name'.", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(label)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:            throw new InvalidDefinitionException("<ruau:example> must have attribute 'label'.", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(description)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:            throw new InvalidDefinitionException("<ruau:example> must contain a description.", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:            throw new InvalidDefinitionException(String.format("<ruau:example> reference component %s does not exist.", ref.toString()), getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ExampleDef> implements ExampleDefBuilder {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        private DefDescriptor<ComponentDef> ref;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        private String name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        private String label;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:            super(ExampleDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:         * @see org.ruauframework.impl.system.DefinitionImpl.BuilderImpl#build()
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        public ExampleDefImpl build() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:            return new ExampleDefImpl(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        public ExampleDefBuilder setRef(String qualifiedName) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:            this.ref = DefDescriptorImpl.getInstance(qualifiedName, ComponentDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        public ExampleDefBuilder setName(String name) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:            this.name = name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        public ExampleDefBuilder setLabel(String label) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:            this.label = label;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/ExampleDefImpl.java:        // TODO Auto-generated method stub
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:package org.ruauframework.impl.documentation;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:import org.ruauframework.builder.DescriptionDefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:import org.ruauframework.def.DescriptionDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:public class DescriptionDefImpl extends DefinitionImpl<DescriptionDef> implements DescriptionDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:	private static final long serialVersionUID = 3677136390357266769L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:	private String name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:        this.name = builder.name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:    public String getName() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:        return name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(description)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:            throw new InvalidDefinitionException("<ruau:description> must contain a description.", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:        // TODO Auto-generated method stub
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<DescriptionDef> implements DescriptionDefBuilder {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:		private String name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:            super(DescriptionDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:         * @see org.ruauframework.impl.system.DefinitionImpl.BuilderImpl#build()
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:        public DescriptionDefBuilder setName(String name) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DescriptionDefImpl.java:            this.name = name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:package org.ruauframework.impl.documentation;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:import java.util.*;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:import org.ruauframework.builder.DocumentationDefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:import org.ruauframework.impl.root.RootDefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:public class DocumentationDefImpl extends RootDefinitionImpl<DocumentationDef> implements DocumentationDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    private static final long serialVersionUID = 7808842576422413967L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    private final LinkedHashMap<String, DescriptionDef> descriptionDefs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    private final LinkedHashMap<String, ExampleDef> exampleDefs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    protected DocumentationDefImpl(Builder builder) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        this.descriptionDefs = builder.descriptionMap;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        this.exampleDefs = builder.exampleMap;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    public Map<String, RegisterEventDef> getRegisterEventDefs() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    	throw new UnsupportedOperationException("DocumentationDef cannot contain RegisterEventDefs.");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    	throw new UnsupportedOperationException("DocumentationDef cannot contain AttributeDefs.");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        return Lists.newArrayList(descriptionDefs.values());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    public Map<String, DescriptionDef> getDescriptionDefsAsMap() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        ArrayList<String> ret = new ArrayList<String>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        for (DescriptionDef descDef : descriptionDefs.values()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:            ret.add(descDef.getDescription());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    public List<ExampleDef> getExampleDefs() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        return Lists.newArrayList(exampleDefs.values());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    public Map<String, ExampleDef> getExampleDefsAsMap() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        return exampleDefs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    public boolean isInstanceOf(DefDescriptor<? extends RootDefinition> other) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        return DefDescriptorImpl.compare(descriptor, other) == 0;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        // TODO Auto-generated method stub
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:            throw new InvalidDefinitionException("<ruau:documentation> must contain at least one <ruau:description>", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    public static class Builder extends RootDefinitionImpl.Builder<DocumentationDef> implements DocumentationDefBuilder {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:            super(DocumentationDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:    	private final LinkedHashMap<String, DescriptionDef> descriptionMap = new LinkedHashMap<String, DescriptionDef>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        private final LinkedHashMap<String, ExampleDef> exampleMap = new LinkedHashMap<String, ExampleDef>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:         * @see org.ruauframework.impl.system.DefinitionImpl.BuilderImpl#build()
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        public DocumentationDefImpl build() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:            return new DocumentationDefImpl(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        public DocumentationDefBuilder addDescription(String id, DescriptionDef description) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:            this.descriptionMap.put(id, description);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:        public DocumentationDefBuilder addExample(String id, ExampleDef example) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/documentation/DocumentationDefImpl.java:            this.exampleMap.put(id, example);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:package org.ruauframework.impl.clientlibrary;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.apache.commons.lang3.StringUtils;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.builder.ClientLibraryDefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.def.ResourceDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java: * Client Library Definition: Specifies name, url, type, and modes of client library
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:public final class ClientLibraryDefImpl extends DefinitionImpl<ClientLibraryDef> implements ClientLibraryDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    private static final long serialVersionUID = -1342087284192933971L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    private final DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    private final String name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    private final String url;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    private final Type type;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    private final Set<RuueContext.Mode> modes;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    private final boolean combine;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    private final int myHashCode;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    protected ClientLibraryDefImpl(Builder builder) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        this.parentDescriptor = builder.parentDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        this.name = builder.name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        int val = 0;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            val += url.hashCode();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        if (name != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            val += name.hashCode();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            for (RuueContext.Mode mode : modes) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                val += mode.hashCode();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        this.myHashCode = val;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public DefDescriptor<? extends RootDefinition> getParentDescriptor() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        return this.parentDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:     * Client library must have name, type, and parent descriptor.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        if (StringUtils.isBlank(this.name) && StringUtils.isBlank(this.url)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            throw new InvalidDefinitionException("Must have either a name or url", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            throw new InvalidDefinitionException("Missing required type", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        if (this.parentDescriptor == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            throw new InvalidDefinitionException("No parent for ClientLibraryDef", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        if (StringUtils.isNotBlank(this.url)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            if (StringUtils.startsWithIgnoreCase(this.url, DefDescriptor.CSS_PREFIX + "://") ||
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                StringUtils.startsWithIgnoreCase(this.url, DefDescriptor.JAVASCRIPT_PREFIX + "://")) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                if (!StringUtils.startsWithIgnoreCase(this.url, this.type.toString())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                    throw new InvalidDefinitionException("ResourceDef type must match library type", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                DefDescriptor<ResourceDef> resourceDesc = DefDescriptorImpl.getInstance(this.url, ResourceDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                    throw new InvalidDefinitionException("No resource named " + this.url + " found", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                // must have the same file extension as type
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                if (!StringUtils.endsWithIgnoreCase(this.url, "." + this.type.toString())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                    throw new InvalidDefinitionException("Url file extension must match type", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        super.validateReferences();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public String getLibraryName() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        return this.name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public Set<RuueContext.Mode> getModes() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public boolean shouldCombine() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        // combine only when it's a readable resource
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        return (StringUtils.startsWithIgnoreCase(this.url, DefDescriptor.CSS_PREFIX + "://") ||
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            StringUtils.startsWithIgnoreCase(this.url, DefDescriptor.JAVASCRIPT_PREFIX + "://")) ||
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            (StringUtils.isBlank(this.url) && this.combine) ;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:     * Determines whether client library should be included based on mode and type
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:     * @param mode ruau mode
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:     * @param type CSS or JS
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public boolean shouldInclude(RuueContext.Mode mode, Type type) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:     * Determines whether client library should be included based on mode
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:     * @param mode ruau mode
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public boolean shouldInclude(RuueContext.Mode mode) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        return (this.modes == null || (this.modes != null && (this.modes.isEmpty() || this.modes.contains(mode))));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        sb.append("type: ").append(this.type)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                .append(", name: ").append(this.name)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                .append(", url: ").append(this.url);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public boolean equalsIgnoreModes(ClientLibraryDef c) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        return ((StringUtils.isBlank(c.getUrl()) && StringUtils.isBlank(this.getUrl()) &&
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                c.getLibraryName().equals(this.getLibraryName())) ||
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                (StringUtils.isNotBlank(c.getUrl()) && StringUtils.isNotBlank(this.getUrl()) &&
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                c.getUrl().equals(this.getUrl()))) &&
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        if (obj instanceof ClientLibraryDef) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            ClientLibraryDef c = (ClientLibraryDef) obj;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            // equals if (same name and no url) or (same url and not blank url) and same type and same modes
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            return  equalsIgnoreModes(c) && (this.getModes().isEmpty() ||
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:                    this.getModes().containsAll(c.getModes()));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public int hashCode() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        return myHashCode;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ClientLibraryDef>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            implements ClientLibraryDefBuilder {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        private DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        private String name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        private String url;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        private Type type;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        private Set<RuueContext.Mode> modes;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        private boolean combine;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            super(ClientLibraryDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        public ClientLibraryDefBuilder setParentDescriptor(DefDescriptor<? extends RootDefinition> parentDescriptor) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            this.parentDescriptor = parentDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        public ClientLibraryDefBuilder setName(String name) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            this.name = name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        public ClientLibraryDefBuilder setUrl(String url) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        public ClientLibraryDefBuilder setType(Type type) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        public ClientLibraryDefBuilder setModes(Set<RuueContext.Mode> modes) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        public ClientLibraryDefBuilder setCombine(boolean combine) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:        public ClientLibraryDef build() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryDefImpl.java:            return new ClientLibraryDefImpl(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:package org.ruauframework.impl.clientlibrary;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:import java.util.HashMap;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:import org.apache.commons.lang3.StringUtils;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:import org.ruauframework.clientlibrary.ClientLibraryResolver;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:import org.ruauframework.clientlibrary.ClientLibraryResolverRegistry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:import org.ruauframework.impl.clientlibrary.resolver.RuueResourceResolver;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:public enum ClientLibraryResolverRegistryImpl implements ClientLibraryResolverRegistry {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:    private final Map<String, ClientLibraryResolver> resolvers;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:     * Load framework client libraries
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:    ClientLibraryResolverRegistryImpl() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:        this.resolvers = new HashMap<String, ClientLibraryResolver>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:        register(new RuueResourceResolver("UIPerfCSS", ClientLibraryDef.Type.CSS, "UIPerf/UIPerf.css", "UIPerf/UIPerf.css"));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:        register(new RuueResourceResolver("UIPerf", ClientLibraryDef.Type.JS, "UIPerf/UIPerf.js", "UIPerf/UIPerf.js"));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:        register(new RuueResourceResolver("UIPerfUi", ClientLibraryDef.Type.JS, "UIPerf/UIPerfUi.js", "UIPerf/UIPerfUi.js"));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:        register(new RuueResourceResolver("CkEditor", ClientLibraryDef.Type.JS, "ckeditor/ckeditor-4.x/rel/ckeditor.js", "ckeditor/ckeditor-4.x/rel/ckeditor.js"));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:     * Register url resolver and adds for cache
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:     * @param resolver url resolver
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:    public void register(ClientLibraryResolver resolver) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:            String name = resolver.getName();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:            ClientLibraryDef.Type type = resolver.getType();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:            if (StringUtils.isNotBlank(name) && type != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:                String key = makeKey(name, type);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:     * Returns resolver based on name and type
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:     * @param name library name
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:     * @param type library type
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:    public ClientLibraryResolver get(String name, ClientLibraryDef.Type type) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:        if (StringUtils.isBlank(name) || type == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:        return resolvers.get(makeKey(name, type));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:     * Generate key for resolver
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:     * @param name name of client library
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:     * @param type type of client library
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:    private String makeKey(String name, ClientLibraryDef.Type type) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryResolverRegistryImpl.java:        key.append(name).append(":").append(type);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:package org.ruauframework.impl.clientlibrary;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:import org.ruauframework.builder.ResourceDefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:import org.ruauframework.clientlibrary.Combinable;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:import org.ruauframework.def.ResourceDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:public class ResourceDefImpl extends DefinitionImpl<ResourceDef> implements ResourceDef, Combinable {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:    private static final long serialVersionUID = -840450408511942916L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:    private final String contents;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:    @Deprecated
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:        return Ruue.getDefinitionService().getDefRegistry().getSource(getDescriptor());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:        // no need to serialize
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:    public boolean canCombine() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ResourceDef> implements ResourceDefBuilder {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:        private Source<ResourceDef> source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ResourceDefImpl.java:            super(ResourceDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:package org.ruauframework.impl.clientlibrary.resolver;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:import org.apache.commons.lang3.StringUtils;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:import org.apache.commons.lang3.Validate;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:import org.ruauframework.clientlibrary.ClientLibraryResolver;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:import org.ruauframework.http.RuueFrameworkServlet;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java: * Common resolver. Concrete must either be combinable or not
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:public abstract class AbstractResourceResolver implements ClientLibraryResolver {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    private final String name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    private final ClientLibraryDef.Type type;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    private final String location;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    private final String minLocation;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    private final boolean combine;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    public AbstractResourceResolver(String name, ClientLibraryDef.Type type, String location, String minLocation,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:                                    boolean combine) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        Validate.notBlank(name, "Name cannot be blank");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        Validate.notNull(type, "Type cannot be null");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        Validate.notBlank(location, "Resource location cannot be blank");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        Validate.notBlank(minLocation, "Minified resource Location cannot be blank");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        this.location = location;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        this.minLocation = minLocation;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        this.name = name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    public String getName() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        return this.name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    public ClientLibraryDef.Type getType() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    public boolean canCombine() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:     * Returns either minified file location or regular depending on mode
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:     * @return resource location
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:    public String getLocation() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        RuueContext.Mode mode = Ruue.getContextService().getCurrentContext().getMode();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:            return this.location;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:            return this.minLocation;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:     * Returns url for resource in ruau-resources module
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:     * @return ruau resources url
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        String location = getLocation();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        if (StringUtils.isBlank(location)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        String nonce = Ruue.getContextService().getCurrentContext().getFrameworkUID();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        String contextPath = Ruue.getContextService().getCurrentContext().getContextPath();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/AbstractResourceResolver.java:        return String.format(RuueFrameworkServlet.RESOURCES_FORMAT, contextPath, nonce, location);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java:package org.ruauframework.impl.clientlibrary.resolver;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java:import org.ruauframework.clientlibrary.ClientLibraryResolver;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java: * Non combinable resource
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java:public class RuueResourceResolver extends AbstractResourceResolver implements ClientLibraryResolver {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java:    public RuueResourceResolver(String name, ClientLibraryDef.Type type, String location,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java:                                String minLocation) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueResourceResolver.java:        super(name, type, location, minLocation, false);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:package org.ruauframework.impl.clientlibrary.resolver;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:import java.io.InputStream;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:import java.io.InputStreamReader;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:import java.io.StringWriter;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:import org.ruauframework.clientlibrary.Combinable;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:import org.ruauframework.util.IOUtil;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:import org.ruauframework.util.resource.ResourceLoader;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java: * Shared client library combinable. Resources must be in
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:public class RuueCombinableResource extends AbstractResourceResolver implements Combinable {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:    public static final String RESOURCES_DIR = "/ruau/resources/";
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:    public RuueCombinableResource(String name, ClientLibraryDef.Type type, String location, String minLocation) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:        super(name, type, location, minLocation, true);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:        return getContents(RESOURCES_DIR + this.getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:     * Gets file resource and returns contents as String
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:     * @param file resource path given to ResourceLoader
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:    protected static String getContents(String file) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:        ResourceLoader loader = Ruue.getConfigAdapter().getResourceLoader();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:        if (loader.getResource(file) != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:            InputStream in = loader.getResourceAsStream(file);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/resolver/RuueCombinableResource.java:            IOUtil.copyStream(new InputStreamReader(in), sw); // closes in
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:package org.ruauframework.impl.clientlibrary;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import java.util.Collections;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import java.util.List;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.apache.commons.lang3.StringUtils;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.cache.Cache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.clientlibrary.ClientLibraryResolver;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.clientlibrary.ClientLibraryResolverRegistry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.clientlibrary.ClientLibraryService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.clientlibrary.Combinable;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.def.ResourceDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.system.SourceListener;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.throwable.NoContextException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.throwable.quickfix.ClientLibraryException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java://import com.google.common.cache.Cache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java://import com.google.common.cache.CacheBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java: * Service for including external client libraries (CSS or JS)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:public class ClientLibraryServiceImpl implements ClientLibraryService {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private final Cache<String, String>  outputCache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private final Cache<String, Set<String>>  urlsCache;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    public ClientLibraryServiceImpl() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    	outputCache = Ruue.getCachingService().getClientLibraryOutputCache();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        urlsCache = Ruue.getCachingService().getClientLibraryUrlsCache();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    public String getResolvedUrl(ClientLibraryDef clientLibrary) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        if (clientLibrary == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String url = clientLibrary.getUrl();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        if (StringUtils.isBlank(url)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            // Use resolver if url is blank
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            ClientLibraryResolver resolver = getResolver(clientLibrary);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * Checks whether client library can be combined.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param clientLibrary client library
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @return true if combinable
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    public boolean canCombine(ClientLibraryDef clientLibrary) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        if(clientLibrary == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        if (StringUtils.isBlank(clientLibrary.getUrl())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            // Use resolver if url is blank
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            ClientLibraryResolver resolver = getResolver(clientLibrary);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                return clientLibrary.shouldCombine() && resolver.canCombine();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                throw new ClientLibraryException("Client library must have resolver if url is blank: "
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                        + clientLibrary.getLibraryName(), clientLibrary.getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        return clientLibrary.shouldCombine();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param output output
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    public void writeCss(RuueContext context, Appendable output) throws IOException, QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        write(context, ClientLibraryDef.Type.CSS, output);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param output output
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    public void writeJs(RuueContext context, Appendable output) throws IOException, QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        write(context, ClientLibraryDef.Type.JS, output);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    public ClientLibraryResolverRegistry getResolverRegistry() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        return ClientLibraryResolverRegistryImpl.INSTANCE;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * Returns urls that should be requested. All combined client libraries are in resources.(css|js) while other has
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param type CSS or JS
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    public Set<String> getUrls(RuueContext context, ClientLibraryDef.Type type) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        RuueContext.Mode mode = context.getMode();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String uid = context.getUid(context.getApplicationDescriptor());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String contextPath = context.getContextPath();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String nonce = context.getFrameworkUID();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        // TODO: rethink this caching. It has an awful lot in the keys. Maybe we can prepend the
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        // 'prefix' string on output if it is a relative URL.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String key = new StringBuilder(uid).append(":").append(type).append(":").append(mode)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            .append(":").append(nonce).append(":").append(contextPath).toString();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        Set<String> urls = urlsCache.getIfPresent(key);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            List<ClientLibraryDef> clientLibs = getClientLibraries(context, type);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            urls = Sets.newLinkedHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            boolean hasCombines = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            for (ClientLibraryDef clientLib : clientLibs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                if (canCombine(clientLib)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                    hasCombines = true;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                    // add url to list when client library is not combined
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                if (StringUtils.isNotBlank(url)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                    urls.add(url);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            if (hasCombines) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                // all combinable resources are put into resources.css or resources.js
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                urls.add(getResourcesPath(context, type));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            urlsCache.put(key, urls);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * Writes resources css or js. Gets client libraries that should be combined and is written by their format adapter
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param type CSS or JS
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param output output
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private void write(RuueContext context, ClientLibraryDef.Type type, Appendable output) throws IOException, QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            throw new RuueRuntimeException("Output cannot be null");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        RuueContext.Mode mode = context.getMode();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String uid = context.getUid(context.getApplicationDescriptor());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String key = makeCacheKey(uid, mode, type);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String code = outputCache.getIfPresent(key);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            // no cache yet
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            List<ClientLibraryDef> clientLibs = getClientLibraries(context, type);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            Set<Combinable> combinables = Sets.newLinkedHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            for (ClientLibraryDef clientLib : clientLibs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                if (canCombine(clientLib)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                    Combinable combinable = getCombinable(clientLib);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                    if (combinable != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                        combinables.add(combinable);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            if (!combinables.isEmpty()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                // ClientLibraryCSSFormatAdapter or ClientLibraryJSFormatAdapter
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                Ruue.getSerializationService().writeCollection(combinables, Combinable.class, sb, type.toString());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            outputCache.put(key, code);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        output.append(code);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * Convenience wrapper to get corresponding resolver from registry
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param clientLibrary client library
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @return resolver for client library
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private ClientLibraryResolver getResolver(ClientLibraryDef clientLibrary) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        return getResolverRegistry().get(clientLibrary.getLibraryName(), clientLibrary.getType());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * Loops through all client library definitions of current application and filters by type and current mode
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param context current ruau context
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param type CSS or JS
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private static List<ClientLibraryDef> getClientLibraries(RuueContext context, ClientLibraryDef.Type type) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        RuueContext.Mode mode = context.getMode();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String uid = context.getUid(context.getApplicationDescriptor());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        // get all client libraries specified for current app (cmp).
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        List<ClientLibraryDef> clientLibs = context.getDefRegistry().getClientLibraries(uid);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        List<ClientLibraryDef> ret = Lists.newArrayList();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            for (ClientLibraryDef clientLib : clientLibs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                // check if client library should be added based on type and current mode
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                    // check for duplicate client library
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                    if (!ret.contains(clientLib)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                        ret.add(clientLib);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * Calculates resources css or js url ie /l/[context]/resources.css
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param type CSS or JS
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private static String getResourcesPath(RuueContext context, ClientLibraryDef.Type type) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String contextPath = context.getContextPath();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        StringBuilder path = new StringBuilder(contextPath).append("/l/");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            Ruue.getSerializationService().write(context, null, RuueContext.class, sb, "HTML");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        } catch (IOException e) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String contextJson = RuueTextUtil.urlencode(sb.toString());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        path.append(contextJson).append("/resources.").append(type.toString().toLowerCase());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        return path.toString();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * Creates cache key using the current uid, mode, and type. Caches uncompressed version for DEV or TEST modes,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param uid application uid
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param mode current ruau mode
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param type CSS or JS
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @return cache key
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private static String makeCacheKey(String uid, RuueContext.Mode mode, ClientLibraryDef.Type type) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        key.append(uid).append(":").append(type).append(":");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            key.append("DEV");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            key.append("MIN");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * Get Combinable to allow getting contents
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @param clientLibrary client library
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * @return combinable
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private Combinable getCombinable(ClientLibraryDef clientLibrary) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        String url = clientLibrary.getUrl();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        Combinable combinable = null;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        if (StringUtils.isBlank(url)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            ClientLibraryResolver resolver = getResolver(clientLibrary);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            if (resolver != null && resolver.canCombine()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                // combinable resolver
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                combinable = (Combinable) resolver;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        } else if (StringUtils.startsWithIgnoreCase(url, DefDescriptor.CSS_PREFIX + "://") ||
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                StringUtils.startsWithIgnoreCase(url, DefDescriptor.JAVASCRIPT_PREFIX + "://")) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            // if url is qualified name of DefDescriptor<ResourceDef>
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            DefDescriptor<ResourceDef> descriptor = DefDescriptorImpl.getInstance(url, ResourceDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:                    combinable = (Combinable) def;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        return combinable;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:     * Invalidate caches on source changes
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private static SourceNotifier sourceNotifier = new SourceNotifier();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    static {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        Ruue.getDefinitionService().subscribeToChangeNotification(sourceNotifier);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:    private static class SourceNotifier implements SourceListener {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:        public void onSourceChanged(DefDescriptor<?> source, SourceMonitorEvent event, String filePath) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            Ruue.getCachingService().getClientLibraryOutputCache().invalidateAll();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/ClientLibraryServiceImpl.java:            Ruue.getCachingService().getClientLibraryUrlsCache().invalidateAll();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:package org.ruauframework.impl.clientlibrary.handler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:import org.ruauframework.def.ResourceDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:import org.ruauframework.impl.clientlibrary.ResourceDefImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java: * ResourceDef handler.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:public class ResourceDefHandler<D extends Definition> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:    private ResourceDefImpl.Builder builder = new ResourceDefImpl.Builder();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:    public ResourceDefHandler(DefDescriptor<D> descriptor, Source<ResourceDef> source) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:        this.builder.setLocation(source.getSystemId(), source.getLastModified());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:        this.builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/clientlibrary/handler/ResourceDefHandler.java:    public ResourceDef createDefinition() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.impl.root.application.ApplicationImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.impl.root.component.ComponentImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.impl.root.event.EventImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.instance.Instance;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.service.InstanceService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:public class InstanceServiceImpl implements InstanceService {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    private static final long serialVersionUID = -2650728458106333787L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    public <T extends Instance<D>, D extends Definition> T getInstance(DefDescriptor<D> descriptor)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        return this.<T, D> getInstance(descriptor, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    public <T extends Instance<D>, D extends Definition> T getInstance(DefDescriptor<D> descriptor,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            Map<String, Object> attributes) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        case APPLICATION:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            return (T) new ApplicationImpl((DefDescriptor<ApplicationDef>) descriptor, attributes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        case COMPONENT:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            return (T) new ComponentImpl((DefDescriptor<ComponentDef>) descriptor, attributes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        case ACTION:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            context.pushCallingDescriptor(descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:                        .getParentDescriptor().getDef();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:                return (T) controllerDef.createAction(descriptor.getName(), attributes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:                context.popCallingDescriptor();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        case EVENT:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            return (T) new EventImpl((DefDescriptor<EventDef>) descriptor, attributes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        default:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            throw new RuueRuntimeException(String.format("Instances of %s cannot be created.", defType));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    public <T extends Instance<D>, D extends Definition> T getInstance(D definition) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        return this.<T, D> getInstance(definition, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    public <T extends Instance<D>, D extends Definition> T getInstance(D definition, Map<String, Object> attributes)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        case APPLICATION:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            return (T) new ApplicationImpl((ApplicationDef) definition, attributes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        default:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            return (T) getInstance(definition.getDescriptor(), attributes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    public <T extends Instance<D>, D extends Definition> T getInstance(String qualifiedName, Class<D> defClass)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        return this.<T, D> getInstance(qualifiedName, defClass, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    public <T extends Instance<D>, D extends Definition> T getInstance(String qualifiedName, Class<D> defClass,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:            Map<String, Object> attributes) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        return this.<T, D> getInstance(Ruue.getDefinitionService().getDefDescriptor(qualifiedName, defClass),
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:                attributes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    public Instance<?> getInstance(String qualifiedName, DefType... defTypes) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        return getInstance(qualifiedName, null, defTypes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:    public Instance<?> getInstance(String qualifiedName, Map<String, Object> attributes, DefType... defTypes)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Definition d = Ruue.getDefinitionService().getDefinition(qualifiedName, defTypes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/InstanceServiceImpl.java:        Instance<?> i = this.<Instance<Definition>, Definition> getInstance(d, attributes);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java:import org.ruauframework.adapter.LoggingAdapter;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java:import org.ruauframework.impl.context.LoggingContextImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java:import org.ruauframework.system.LoggingContext;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java: * Ruue LoggingAdapter impl.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java:public class LoggingAdapterImpl implements LoggingAdapter {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java:    private static ThreadLocal<LoggingContext> currentContext = new ThreadLocal<LoggingContext>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java:    public LoggingContext establish() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java:    public boolean isEstablished() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/LoggingAdapterImpl.java:    public void release() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:package org.ruauframework.impl.javascript.provider;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import java.util.Collection;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import static org.ruauframework.instance.ValueProviderType.LABEL;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.builder.ComponentDefRefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java: * A javascript provider.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:public class JavascriptProviderDef extends DefinitionImpl<ProviderDef> implements ProviderDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    private static final long serialVersionUID = -3839367107553671775L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    private final Set<PropertyReference> expressionRefs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    private final JsFunction provide;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    protected JavascriptProviderDef(Builder builder) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        super.validateDefinition();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:            throw new InvalidDefinitionException("No provide function was found", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        json.writeMapBegin();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        json.writeMapEntry("descriptor", descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        json.writeMapEntry("provide", provide);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        json.writeMapEnd();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    public void retrieveLabels() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        GlobalValueProvider labelProvider = Ruue.getContextService().getCurrentContext().getGlobalProviders()
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:            if (e.getRoot().equals(LABEL.getPrefix())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:                labelProvider.getValue(e.getStem());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ProviderDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        private JsFunction provide;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        private Set<PropertyReference> expressionRefs = Sets.newHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:            super(ProviderDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        public Builder addExpressionRefs(Collection<PropertyReference> refs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:            expressionRefs.addAll(refs);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        public JavascriptProviderDef build() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:            return new JavascriptProviderDef(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    public boolean isLocal() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:    public boolean supportsRefProvide() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/provider/JavascriptProviderDef.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java: * Copyright, 1999-2009, salesforce.com All Rights Reserved Company Confidential
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:package org.ruauframework.impl.javascript.renderer;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import static org.ruauframework.instance.ValueProviderType.LABEL;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import org.ruauframework.def.RendererDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:public class JavascriptRendererDef extends DefinitionImpl<RendererDef> implements RendererDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    private static final long serialVersionUID = -6937625695562864219L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    private final JsFunction render;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    private final JsFunction afterRender;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    private final JsFunction rerender;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    private final JsFunction unrender;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    // Code is only used by ruau-j. Would be nice if we could get rid of it.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    private final String code;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    private final Set<PropertyReference> expressionRefs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    protected JavascriptRendererDef(Builder builder) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        this.afterRender = builder.afterRender;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        retrieveLabels();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        json.writeMapBegin();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        json.writeMapEntry("descriptor", descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        json.writeMapEntry("render", render);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        json.writeMapEntry("afterRender", afterRender);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        json.writeMapEntry("rerender", rerender);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        json.writeMapEntry("unrender", unrender);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        json.writeMapEntry("code", code);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        json.writeMapEnd();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    public boolean isLocal() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    public void render(BaseComponent<?, ?> component, Appendable out) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    public void retrieveLabels() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        GlobalValueProvider labelProvider = Ruue.getContextService().getCurrentContext().getGlobalProviders()
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:            if (e.getRoot().equals(LABEL.getPrefix())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:                labelProvider.getValue(e.getStem());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<RendererDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:            super(RendererDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        public JsFunction afterRender;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        public Set<PropertyReference> expressionRefs = Sets.newHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:        public JavascriptRendererDef build() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/renderer/JavascriptRendererDef.java:            return new JavascriptRendererDef(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:package org.ruauframework.impl.javascript;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import java.io.File;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import java.util.EnumSet;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import org.ruauframework.impl.source.file.RuueFileMonitor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import org.ruauframework.impl.util.RuueImplFiles;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import org.ruauframework.system.SourceListener;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import org.ruauframework.util.javascript.directive.DirectiveBasedJavascriptGroup;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import org.ruauframework.util.javascript.directive.DirectiveTypes;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:import org.ruauframework.util.javascript.directive.JavascriptGeneratorMode;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java: * the ruau javascript. starts at Force.js
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:public class RuueJavascriptGroup extends DirectiveBasedJavascriptGroup implements SourceListener {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    public static final String GROUP_NAME = "ruau";
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    // file name of properties file that contains compiled version info
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    public static final String FILE_NAME = "ruaufwuid.properties";
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    public static final File ROOT_DIR = RuueImplFiles.RuueJavascriptSourceDirectory.asFile();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    private boolean isStale = true;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    public RuueJavascriptGroup() throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:        this(false);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    public RuueJavascriptGroup(boolean monitor) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:            Ruue.getDefinitionService().subscribeToChangeNotification(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:            RuueFileMonitor.addDirectory(ROOT_DIR.getPath());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:     * Alternate constructor for tests which might want to control the root
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    protected RuueJavascriptGroup(File rootDirectory) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:        super(GROUP_NAME, rootDirectory, "ruau/Ruue.js", DirectiveTypes.DEFAULT_TYPES, EnumSet.of(
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:                JavascriptGeneratorMode.DEVELOPMENT, JavascriptGeneratorMode.STATS, JavascriptGeneratorMode.TESTING,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:                JavascriptGeneratorMode.AUTOTESTING, JavascriptGeneratorMode.TESTINGDEBUG,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:                JavascriptGeneratorMode.AUTOTESTINGDEBUG, JavascriptGeneratorMode.PRODUCTION,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:                JavascriptGeneratorMode.PRODUCTIONDEBUG, JavascriptGeneratorMode.DOC,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:                JavascriptGeneratorMode.PTEST));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    public boolean isStale() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:        if (!isGroupHashKnown()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:        return isStale;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    public void generate(File destRoot, boolean doValidation) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:        isStale = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:        super.generate(destRoot, doValidation);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    public void regenerate(File destRoot) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:        isStale = false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:        super.regenerate(destRoot);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:    public void onSourceChanged(DefDescriptor<?> source, SourceMonitorEvent event, String filePath) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:        if (filePath != null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:            File updatedFile = new File(filePath);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:            if (filePath.startsWith(ROOT_DIR.getPath()) && JS_FILTER.accept(updatedFile)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/RuueJavascriptGroup.java:                isStale = true;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:package org.ruauframework.impl.javascript.model;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import java.math.BigDecimal;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import java.util.List;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import java.util.Map.Entry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.def.ModelDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.impl.java.model.JavaModel;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.instance.InstanceStack;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.instance.Model;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.service.LoggingService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:public class JavascriptModel implements Model {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    private Map<String, Object> bean = Maps.newHashMap();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    private final JavascriptModelDef modelDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    private final String path;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    public JavascriptModel(JavascriptModelDef modelDef) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        InstanceStack iStack = Ruue.getContextService().getCurrentContext().getInstanceStack();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        iStack.pushInstance(this, modelDef.getDescriptor());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        iStack.setAttributeName("m");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        this.path = iStack.getPath();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        for (JavascriptValueDef member : this.modelDef.getAllMembers()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            bean.put(member.getName(), clone(member.getDefaultValue()));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        iStack.clearAttributeName("m");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        iStack.popInstance(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    private Object clone(Object val) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        if (val == null) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        } else if (val instanceof Map) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            return clone((Map<String, Object>) val);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        } else if (val instanceof List) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            // Array
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            return clone((List<Object>) val);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        } else if (val instanceof String) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            return val;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        } else if (val instanceof Boolean) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            // Boolean
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            return ((Boolean) val).booleanValue();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        } else if (val instanceof Number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            return new BigDecimal(val.toString());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        throw new RuueRuntimeException("Unexpected type.");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    private Map<String, Object> clone(Map<String, Object> val) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        Map<String, Object> ret = Maps.newHashMap();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        for (Entry<String, Object> entry : val.entrySet()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            ret.put(entry.getKey(), clone(entry.getValue()));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    private List<Object> clone(List<Object> val) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        List<Object> ret = Lists.newArrayList();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        for (Object obj : val) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            ret.add(clone(obj));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    public Object getValue(PropertyReference key) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        return JavaModel.getValue(bean, key, this.modelDef);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        loggingService.startTimer("javascript");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            json.writeMap(bean);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            loggingService.stopTimer("javascript");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            loggingService.startTimer(LoggingService.TIMER_AURA);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:            loggingService.startTimer(LoggingService.TIMER_SERIALIZATION_AURA);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:    public String getPath() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModel.java:        return path;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:package org.ruauframework.impl.javascript.model;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import java.util.*;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.instance.Model;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:public class JavascriptModelDef extends DefinitionImpl<ModelDef> implements ModelDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:	private static final long serialVersionUID = -7806398631336437625L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:	private final Map<String, JavascriptValueDef> memberMap;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:    protected JavascriptModelDef(Builder builder) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        this.memberMap = RuueUtil.immutableMap(builder.memberMap);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        json.writeMapBegin();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        json.writeMapEntry("members", memberMap.values());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        json.writeMapEnd();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:    public ValueDef getMemberByName(String name) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        return memberMap.get(name);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:    protected Collection<JavascriptValueDef> getAllMembers() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        return memberMap.values();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:    public boolean hasMembers() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        return !memberMap.isEmpty();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:    public Model newInstance() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        return new JavascriptModel(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        return getMemberByName(s).getType();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ModelDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            super(ModelDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        private Map<String, JavascriptValueDef> memberMap = Maps.newHashMap();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        public void addProperty(String key, Object val, Location location) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            DefinitionService defService = Ruue.getDefinitionService();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            if (val == null || val instanceof Map) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:                type = defService.getDefDescriptor("ruau://Object", TypeDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            } else if (val instanceof List) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:                // Array
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:                type = defService.getDefDescriptor("ruau://List", TypeDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            } else if (val instanceof String) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:                type = defService.getDefDescriptor("ruau://String", TypeDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            } else if (val instanceof Boolean) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:                // Boolean
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:                type = defService.getDefDescriptor("ruau://Boolean", TypeDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            } else if (val instanceof Number) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:                type = defService.getDefDescriptor("ruau://Decimal", TypeDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:                throw new InvalidDefinitionException("Invalid value type in model definition.", getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            JavascriptValueDef value = new JavascriptValueDef(key, type, val, location);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            memberMap.put(key, value);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:        public JavascriptModelDef build() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptModelDef.java:            return new JavascriptModelDef(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:package org.ruauframework.impl.javascript.model;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:import org.ruauframework.def.*;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:public class JavascriptValueDef extends DefinitionImpl<ValueDef> implements ValueDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:	private static final long serialVersionUID = 2067396461975067980L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:	private final String name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:    private final DefDescriptor<TypeDef> typeDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:    private final Object defaultValue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:    protected JavascriptValueDef(String name, DefDescriptor<TypeDef> typeDescriptor, Object defaultValue,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:            Location location) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        super(null, location, null);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        this.name = name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        this.defaultValue = defaultValue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:    public Object getDefaultValue() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        return defaultValue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:    public String getName() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        return name;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        json.writeMapBegin();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        json.writeMapEntry("name", name);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        json.writeMapEntry("type", typeDescriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        json.writeMapEntry("defaultValue", defaultValue);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/model/JavascriptValueDef.java:        json.writeMapEnd();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:package org.ruauframework.impl.javascript.controller;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import java.util.ArrayList;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import java.util.List;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import org.ruauframework.impl.controller.ComponentController.RuueClientException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import org.ruauframework.instance.InstanceStack;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import org.ruauframework.system.LoggingContext.KeyValueLogger;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import org.ruauframework.throwable.RuueExecutionException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * This represents the Java bookkeeping idea of a Javascript action.  It is not
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * runnable server-side, but is used for example as the echo of a failed client
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java: * action when logging the failure to the server-hosted forensic log machinery.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:public class JavascriptPseudoAction implements Action {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    private final DefDescriptor<ActionDef> descriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    private String id;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    private List<Object> errorList;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public JavascriptPseudoAction(JavascriptActionDef actionDef) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        this.descriptor = actionDef.getDescriptor();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public String getPath() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        throw new UnsupportedOperationException("client-side Javascript actions do not have a path");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        throw new UnsupportedOperationException("client-side Javascript actions do not serialze back from the server");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public void run() throws RuueExecutionException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        throw new UnsupportedOperationException("client-side Javascript actions cannot be run server-side in Java");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public void add(List<Action> actions) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        throw new UnsupportedOperationException("client-side Javascript actions do not contain other actions server-side");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        throw new UnsupportedOperationException("client-side Javascript actions do not contain other actions server-side");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public Object getReturnValue() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        throw new UnsupportedOperationException("client-side Javascript actions do not have a server-side return value");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    /** If the server knows about a client-side action, it's because something went wrong with it. */
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public State getState() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        return State.ERROR;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public void addError(RuueClientException e) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:            errorList = new ArrayList<Object>();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        errorList.add(e);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public void logParams(KeyValueLogger logger) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        throw new UnsupportedOperationException("client-side Javascript actions do not have log params");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public boolean isStorable() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public void setStorable() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public Map<String, Object> getParams() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptPseudoAction.java:    public InstanceStack getInstanceStack() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:package org.ruauframework.impl.javascript.controller;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import java.util.Collections;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import java.util.List;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import org.ruauframework.def.ValueDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java: * javascript action. can't be instantiated server side
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:public class JavascriptActionDef extends DefinitionImpl<ActionDef> implements ActionDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:    private static final long serialVersionUID = 2121724820799466774L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:    private final JsFunction function;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:    protected JavascriptActionDef(Builder builder) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        function.setName(String.format("%s$%s_%s", desc.getParentDescriptor().getNamespace(), desc
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:                .getParentDescriptor().getName(), desc.getName()));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:    public List<ValueDef> getParameters() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        // if we do allow extra params, they must somehow be annotated as we
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        // have no way to infer the type from the code
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        // same as above. probably shouldn't have a return value
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        json.writeMapBegin();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        json.writeMapEntry("name", getName());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        json.writeMapEntry("code", function);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        json.writeMapEntry("actionType", getActionType());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        json.writeMapEnd();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ActionDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:            super(ActionDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:        public JavascriptActionDef build() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:            return new JavascriptActionDef(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptActionDef.java:    public List<String> getLoggableParams() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:package org.ruauframework.impl.javascript.controller;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import static org.ruauframework.instance.ValueProviderType.LABEL;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:public class JavascriptControllerDef extends DefinitionImpl<ControllerDef> implements ControllerDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    private static final long serialVersionUID = 133829572661899255L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    private final Map<String, JavascriptActionDef> actionMap;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    private final Set<PropertyReference> expressionRefs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    protected JavascriptControllerDef(Builder builder) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        this.actionMap = RuueUtil.immutableMap(builder.actionDefs);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    public JavascriptActionDef getSubDefinition(String name) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        return actionMap.get(name);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        json.writeMapBegin();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        json.writeMapEntry("descriptor", descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        json.writeMapEntry("actionDefs", actionMap.values());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        json.writeMapEnd();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    public Map<String, JavascriptActionDef> getActionDefs() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        return actionMap;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:     * We cannot sensibly <em>run</em> Javascript actions at the server, but the objects
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:     * are sometimes created for bookkeeping.  In particular, if a client-side action execution
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:     * fails, the failure is logged via ExceptionAdapter, which likes to have an action object,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:     * including the action instance identifier in case that helps debugging.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:     * @returns an Action for the given action name.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    public Action createAction(String actionName, Map<String, Object> paramValues) throws DefinitionNotFoundException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        JavascriptActionDef actionDef = actionMap.get(actionName);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        if(actionDef == null){
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:            DefDescriptor<ActionDef> desc = SubDefDescriptorImpl.getInstance(actionName, getDescriptor(), ActionDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        return new JavascriptPseudoAction(actionDef);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    public Object getValue(PropertyReference key) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    public void retrieveLabels() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        GlobalValueProvider labelProvider = Ruue.getContextService().getCurrentContext().getGlobalProviders()
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:            if (e.getRoot().equals(LABEL.getPrefix())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:                labelProvider.getValue(e.getStem());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ControllerDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:            super(ControllerDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        public Map<String, JavascriptActionDef> actionDefs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        public Set<PropertyReference> expressionRefs = Sets.newHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:        public JavascriptControllerDef build() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/controller/JavascriptControllerDef.java:            return new JavascriptControllerDef(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:package org.ruauframework.impl.javascript.helper;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import static org.ruauframework.instance.ValueProviderType.LABEL;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import org.ruauframework.def.HelperDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:public class JavascriptHelperDef extends DefinitionImpl<HelperDef> implements HelperDef {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:    private static final long serialVersionUID = 1967445547376133339L;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:    private final Set<PropertyReference> expressionRefs;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:    private final Map<String, Object> functions;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:    protected JavascriptHelperDef(Builder builder) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:    public boolean isLocal() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:        return false;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:    public void retrieveLabels() throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:        GlobalValueProvider labelProvider = Ruue.getContextService().getCurrentContext().getGlobalProviders()
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:            if (e.getRoot().equals(LABEL.getPrefix())) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:                labelProvider.getValue(e.getStem());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:        json.writeMapBegin();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:        json.writeMapEntry("descriptor", descriptor);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:        json.writeMapEntry("functions", functions);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:        json.writeMapEnd();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<HelperDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:        public Map<String, Object> functions;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:        public Set<PropertyReference> expressionRefs = Sets.newHashSet();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:            super(HelperDef.class);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:        public JavascriptHelperDef build() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/helper/JavascriptHelperDef.java:            return new JavascriptHelperDef(this);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:package org.ruauframework.impl.javascript.parser;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.HelperDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.IncludeDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.ModelDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.RendererDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.ResourceDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.impl.clientlibrary.handler.ResourceDefHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.impl.javascript.parser.handler.JavascriptControllerDefHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.impl.javascript.parser.handler.JavascriptHelperDefHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.impl.javascript.parser.handler.JavascriptIncludeDefHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.impl.javascript.parser.handler.JavascriptModelDefHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.impl.javascript.parser.handler.JavascriptProviderDefHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.impl.javascript.parser.handler.JavascriptRendererDefHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.impl.javascript.parser.handler.JavascriptTestSuiteDefHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.system.Parser;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:public class JavascriptParser implements Parser {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:    private static JavascriptParser instance = new JavascriptParser();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:    public static JavascriptParser getInstance() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        return instance;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:    public <D extends Definition> D parse(DefDescriptor<D> descriptor, Source<?> source) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        case CONTROLLER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:            return (D) new JavascriptControllerDefHandler((DefDescriptor<ControllerDef>) descriptor, source)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        case RENDERER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:            return (D) new JavascriptRendererDefHandler((DefDescriptor<RendererDef>) descriptor, source)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        case HELPER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:            return (D) new JavascriptHelperDefHandler((DefDescriptor<HelperDef>) descriptor, source).getDefinition();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        case TESTSUITE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:            return (D) new JavascriptTestSuiteDefHandler((DefDescriptor<TestSuiteDef>) descriptor, source)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        case PROVIDER:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:            return (D) new JavascriptProviderDefHandler((DefDescriptor<ProviderDef>) descriptor, source)
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        case MODEL:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:            return (D) new JavascriptModelDefHandler((DefDescriptor<ModelDef>) descriptor, source).getDefinition();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        case RESOURCE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:            return (D) new ResourceDefHandler<>((DefDescriptor<ResourceDef>) descriptor,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:                    (Source<ResourceDef>) source).createDefinition();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        case INCLUDE:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:            return (D) new JavascriptIncludeDefHandler((DefDescriptor<IncludeDef>) descriptor,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/JavascriptParser.java:        default:
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:package org.ruauframework.impl.javascript.parser.handler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:import org.ruauframework.impl.javascript.provider.JavascriptProviderDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * This is a basic handler for a javascript provider def.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * This does no particular validation other than parsing the file, if no provide function
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java: * is there, it will create the def, but the def will fail validation.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:public class JavascriptProviderDefHandler extends JavascriptHandler<ProviderDef, ProviderDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:    private final JavascriptProviderDef.Builder builder = new JavascriptProviderDef.Builder();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:    public JavascriptProviderDefHandler(DefDescriptor<ProviderDef> descriptor, Source<?> source) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:    protected ProviderDef createDefinition(Map<String, Object> map) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:        builder.setProvide((JsFunction) map.get("provide"));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:        builder.addExpressionRefs(propRefs);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:    protected ProviderDef createDefinition(Throwable error) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptProviderDefHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:package org.ruauframework.impl.javascript.parser.handler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.impl.javascript.controller.JavascriptActionDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.impl.javascript.controller.JavascriptControllerDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.impl.javascript.controller.JavascriptControllerDef.Builder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import org.ruauframework.util.json.JsonHandlerProvider;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java: * Javascript handler for controller defs
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:public class JavascriptControllerDefHandler extends JavascriptHandler<ControllerDef, ControllerDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:    private final Builder builder = new Builder();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:    public JavascriptControllerDefHandler(DefDescriptor<ControllerDef> descriptor, Source<?> source) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:    protected JsonHandlerProvider getHandlerProvider() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:        return new JavascriptControllerHandlerProvider();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:    protected JavascriptControllerDef createDefinition(Map<String, Object> map) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:        builder.actionDefs = Maps.newTreeMap();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:        for (Map.Entry<String, Object> e : map.entrySet()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:            JsFunction f = (JsFunction) e.getValue();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:            String name = e.getKey();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:            JavascriptActionDef action = createActionDef(name, f);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:            builder.actionDefs.put(name, action);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:    private JavascriptActionDef createActionDef(String name, JsFunction f) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:        JavascriptActionDef.Builder builder = new JavascriptActionDef.Builder();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:        builder.setDescriptor(SubDefDescriptorImpl.getInstance(name, getDescriptor(), ActionDef.class));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:        builder.setLocation(new Location(source.getSystemId(), f.getLine(), f.getCol(), source.getLastModified()));
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:        builder.expressionRefs.addAll(propRefs);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:    protected ControllerDef createDefinition(Throwable error) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerDefHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:package org.ruauframework.impl.javascript.parser.handler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:import java.util.Map.Entry;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:import org.ruauframework.def.HelperDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:import org.ruauframework.impl.javascript.helper.JavascriptHelperDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:public class JavascriptHelperDefHandler extends JavascriptHandler<HelperDef, HelperDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:    private final JavascriptHelperDef.Builder builder = new JavascriptHelperDef.Builder();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:    public JavascriptHelperDefHandler(DefDescriptor<HelperDef> descriptor, Source<?> source) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:    protected HelperDef createDefinition(Map<String, Object> map) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:        builder.functions = map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:        for (Entry<String, Object> entry : map.entrySet()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:            Object value = entry.getValue();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:            if (value != null && value instanceof JsFunction) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:                ((JsFunction) value).setName(entry.getKey());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:        builder.expressionRefs.addAll(propRefs);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:    protected HelperDef createDefinition(Throwable error) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHelperDefHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:package org.ruauframework.impl.javascript.parser.handler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:import org.ruauframework.util.json.JsonHandlerProviderImpl;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:import org.ruauframework.util.json.JsonObjectHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java: * handler provider for js controllers, only allows functions
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:public class JavascriptControllerHandlerProvider extends JsonHandlerProviderImpl {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:    public JsonObjectHandler getObjectHandler() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:        return new FunctionsOnlyHandler();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:    private static class FunctionsOnlyHandler extends JsonObjectHandler {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:        public void put(String key, Object value) throws JsonValidationException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:            if (!(value instanceof JsFunction)) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:                throw new JsonValidationException("Only functions are allowed in javascript controllers");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptControllerHandlerProvider.java:            super.put(key, value);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:package org.ruauframework.impl.javascript.parser.handler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:import org.ruauframework.def.ModelDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:import org.ruauframework.impl.javascript.model.JavascriptModelDef;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:import org.ruauframework.impl.javascript.model.JavascriptModelDef.Builder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:public class JavascriptModelDefHandler extends JavascriptHandler<ModelDef, ModelDef> {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:    private Builder builder = new Builder();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:    public JavascriptModelDefHandler(DefDescriptor<ModelDef> descriptor, Source<?> source) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:    protected JavascriptModelDef createDefinition(Map<String, Object> map) throws QuickFixException {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:        for (Map.Entry<String, Object> e : map.entrySet()) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:            builder.addProperty(e.getKey(), e.getValue(), getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:    protected ModelDef createDefinition(Throwable error) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptModelDefHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: * limitations under the License.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:package org.ruauframework.impl.javascript.parser.handler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import java.io.IOException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import java.io.StringReader;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import java.util.Map;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import java.util.Set;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.builder.DefBuilder;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.impl.root.parser.handler.ExpressionContainerHandler;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.impl.util.TextTokenizer;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.util.json.JsonConstant;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.util.json.JsonHandlerProvider;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.util.json.JsonStreamReader;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:import org.ruauframework.util.json.JsonStreamReader.JsonParseException;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java: * base class for javascripty source handling gnomes.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:public abstract class JavascriptHandler<D extends Definition, T extends Definition> implements ExpressionContainerHandler {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:    protected final Source<?> source;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:    protected final DefDescriptor<D> descriptor;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:    protected JavascriptHandler(DefDescriptor<D> descriptor, Source<?> source) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:    protected Location getLocation() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        return new Location(source.getSystemId(), source.getLastModified());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:     * override this method to provide your own handlers to validate the input
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:     * and such
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:    protected JsonHandlerProvider getHandlerProvider() {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        // null is for the default
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        builder.setOwnHash(source.getHash());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        JsonStreamReader in = null;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        Map<String, Object> map = null;
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:            in = new JsonStreamReader(new StringReader(contents), getHandlerProvider());
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:                JsonConstant token = in.next();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:                if (token == JsonConstant.FUNCTION_ARGS_START) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:                map = in.getObject();
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:            } finally {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:                } catch (IOException e) {
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:                    // We are in a very confusing state here, don't throw an exception.
ruau/ruau-impl/src/nAmE/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:                    // Either we've already had an exception, in which case we have
