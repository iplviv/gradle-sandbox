ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDateConverter.java:        return dateService.getGenericISO8601Converter().parse(value, locale.getTimeZone());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:package org.ruauframework.impl.java.type.converter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:import java.math.BigDecimal;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:import java.util.Locale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:import org.ruauframework.impl.java.type.LocalizedConverter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:import org.ruauframework.util.type.converter.BigDecimalToStringConverter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java: * Used by ruau.impl.java.type.JavaLocalizedTypeUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:public class LocalizedBigDecimalToStringConverter extends BigDecimalToStringConverter implements
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:        LocalizedConverter<BigDecimal, String> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:    public String convert(BigDecimal value, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:        if (value == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:        if (locale == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:            Locale loc = locale.getNumberLocale();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:            return Ruue.getLocalizationService().formatNumber(value, loc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:        } catch (Exception e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedBigDecimalToStringConverter.java:            return super.convert(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:package org.ruauframework.impl.java.type.converter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:import java.util.Locale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:import org.ruauframework.impl.java.type.LocalizedConverter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:import org.ruauframework.util.type.converter.StringToDoubleConverter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java: * Used by ruau.impl.java.type.JavaLocalizedTypeUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:public class LocalizedStringToDoubleConverter extends StringToDoubleConverter implements
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:        LocalizedConverter<String, Double> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:    public Double convert(String value, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:        if (value == null || value.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:        if (locale == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:            Locale loc = locale.getNumberLocale();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:            return new Double(Ruue.getLocalizationService().parseDouble(value, loc));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:        } catch (Exception e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToDoubleConverter.java:            return super.convert(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:package org.ruauframework.impl.java.type.converter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:import java.util.Locale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:import org.ruauframework.impl.java.type.LocalizedConverter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:import org.ruauframework.util.type.converter.IntegerToStringConverter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java: * Used by ruau.impl.java.type.JavaLocalizedTypeUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:public class LocalizedIntegerToStringConverter extends IntegerToStringConverter implements
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:        LocalizedConverter<Integer, String> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:    public String convert(Integer value, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:        if (value == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:        if (locale == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:            Locale loc = locale.getNumberLocale();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:            return Ruue.getLocalizationService().formatNumber(value, loc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:        } catch (Exception e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedIntegerToStringConverter.java:            return super.convert(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:package org.ruauframework.impl.java.type.converter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:import java.util.Locale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:import org.ruauframework.impl.java.type.LocalizedConverter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:import org.ruauframework.util.type.converter.StringToLongConverter;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java: * Used by ruau.impl.java.type.JavaLocalizedTypeUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:public class LocalizedStringToLongConverter extends StringToLongConverter implements LocalizedConverter<String, Long> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:    public Long convert(String value, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:        if (value == null || value.isEmpty()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:        if (locale == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:            Locale loc = locale.getNumberLocale();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:            return new Long(Ruue.getLocalizationService().parseLong(value, loc));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:        } catch (Exception e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/converter/LocalizedStringToLongConverter.java:            return super.convert(value);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:package org.ruauframework.impl.java.type;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import java.lang.reflect.Array;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import java.lang.reflect.GenericArrayType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import java.lang.reflect.ParameterizedType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import java.lang.reflect.Type;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import java.util.ArrayList;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:import org.ruauframework.util.type.TypeUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:public class JavaTypeDef extends DefinitionImpl<TypeDef> implements TypeDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    private static final long serialVersionUID = -1650260598462052988L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    private final Class<?> clazz;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    private final String simpleParamName;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    protected JavaTypeDef(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        this.clazz = builder.typeClass;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        simpleParamName = makeSimpleParamName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    private String makeSimpleParamName() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        if (descriptor.getNameParameters() == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        // remove angle brackets and namespace qualifiers
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        String tempParamName = descriptor.getNameParameters().replaceAll("[<>]", "");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        int pos = tempParamName.lastIndexOf('.');
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            tempParamName = tempParamName.substring(pos + 1);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        return tempParamName;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    private boolean hasCollectionConverters() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        if (!descriptor.isParameterized() || simpleParamName == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            return false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        return TypeUtil.hasConverter(ArrayList.class, clazz, simpleParamName);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        json.writeString(getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:     * @return The Java class wrapped by this Ruue TypeDef
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    public Object getExternalType(String prefix) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        prefix = prefix.toLowerCase();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        if (!prefix.equals("java")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            TypeDef typeDef = DefDescriptorImpl.getAssociateDescriptor(descriptor, TypeDef.class, prefix).getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:                return typeDef.getExternalType(prefix);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        return clazz;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        return descriptor.getQualifiedName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    public Object valueOf(Object value) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        if (hasCollectionConverters()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            return TypeUtil.convertNoTrim(value, clazz, simpleParamName);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        return JavaLocalizedTypeUtil.convertNoTrim(value, clazz);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    public Object wrap(Object o) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        return new JavaValueProvider(o);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    public Object initialize(Object config, BaseComponent<?, ?> valueProvider) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        if (config != null && config instanceof String && !clazz.isInstance(config)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            return valueOf(config);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    public void appendDependencies(Object instance, Set<DefDescriptor<?>> deps) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:     * Get the underlying class for a type, or null if the type is a variable
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:     * type. Code in part from Ian Roberton's June 23, 2007 blog post :
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:     * http://www.artima.com/weblogs/viewpost.jsp?thread=208860
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:     * @param type the type
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:     * @return the underlying class
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    public static Class<?> getClass(Type type) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        if (type instanceof Class) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            return (Class<?>) type;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        } else if (type instanceof ParameterizedType) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            return getClass(((ParameterizedType) type).getRawType());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        } else if (type instanceof GenericArrayType) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            Type componentType = ((GenericArrayType) type).getGenericComponentType();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            Class<?> componentClass = getClass(componentType);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            if (componentClass != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:                return Array.newInstance(componentClass, 0).getClass();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<TypeDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            super(TypeDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        private Class<?> typeClass;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        public Builder setTypeClass(Class<?> c) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            this.typeClass = c;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:        public JavaTypeDef build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDef.java:            return new JavaTypeDef(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:package org.ruauframework.impl.java.type;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import java.math.BigDecimal;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import java.util.ArrayList;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import java.util.Calendar;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import java.util.Date;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import java.util.HashMap;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import java.util.HashSet;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import org.ruauframework.builder.DefBuilder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import org.ruauframework.impl.java.BaseJavaDefFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import org.ruauframework.system.SourceLoader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java: * Loads Java types for Ruue components.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:public class JavaTypeDefFactory extends BaseJavaDefFactory<TypeDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:    public JavaTypeDefFactory() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:    public JavaTypeDefFactory(List<SourceLoader> sourceLoaders) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        super(sourceLoaders);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        JavaTypeDef.Builder builder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        Class<?> clazz = getClazz(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        if (clazz == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        builder = new JavaTypeDef.Builder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        builder.setLocation(clazz.getCanonicalName(), 0);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        builder.setTypeClass(clazz);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:     * Return base of class name, truncating Generic qualifier, if included.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:     * Can't instantiate a class with parameters using Class.forName().
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:     * @param className - the class name, with or without a < > clause
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:     * @return - the base class name minus generic parameters
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:    private String getRawClassName(String className) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        int genPos = className.indexOf('<');
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        String name = genPos == -1 ? className : className.substring(0, genPos);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        return name;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:    protected Class<?> getClazz(DefDescriptor<TypeDef> descriptor) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        Class<?> clazz = null;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        String className = descriptor.getName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        if (descriptor.getNamespace() == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            if (className.equals("List") || className.startsWith("List<") || className.endsWith("[]")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                clazz = ArrayList.class;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            } else if (className.equals("Map") || className.startsWith("Map<")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                clazz = HashMap.class;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            } else if (className.equals("Set") || className.startsWith("Set<")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                clazz = HashSet.class;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            } else if (className.equals("Decimal")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                clazz = BigDecimal.class;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            } else if (className.equals("Date")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                clazz = Date.class;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            } else if (className.equals("DateTime")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                clazz = Calendar.class;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            } else if (className.equals("int")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                clazz = Integer.class;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            } else if (className.equals("char")) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                clazz = Character.class;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                    clazz = Class.forName("java.lang." + RuueTextUtil.initCap(className));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                } catch (ClassNotFoundException e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            className = String.format("%s.%s", descriptor.getNamespace(), getRawClassName(className));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        if (clazz == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:                clazz = Class.forName(className);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:            } catch (ClassNotFoundException e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaTypeDefFactory.java:        return clazz;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:package org.ruauframework.impl.java.type;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * Used by {@link JavaLocalizedTypeUtil}
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * Defines a type converter that converts an object of type F to an object of
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * type T using the specified RuueLocale to help resolve the conversion.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * The implementations are located by naming convention in the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * {@link org.ruauframework.impl.java.type} package. For Array types, substitute
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * the [] in the type signature with the word "Array".
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * Similar to {@link Converter} but uses {@link RuueLocale} during conversion
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * If you're trying to convert from a String[] to an Integer[], you would create
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * an implementation called LocalizedStringArrayToIntegerArrayConverter then add
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * a static return method in {@link RuueImplConfig} that returns your new
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * {@link LocalizedConverter} class instance. Your converter can either
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * implement all the required methods listed here directly, or subclass a
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java: * non-localized version to pick some up for free.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:public interface LocalizedConverter<F, T> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * This was previously a child of Converter, but the Ruue service loader
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * loads by class type and precaches all the converters for performance. If
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * this extends Converter the classes that implement this will be put into
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * BOTH caches (that's bad). However the implementing classes can extend
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * classes that implement Converter and only get put into a single cache.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * Do the conversion from value to a T using the RuueLocale.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * @param value
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * @param locale a non-null RuueLocale
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * @return F converted into a T
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:    T convert(F value, RuueLocale locale);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * Returns the source class type.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * @return a class
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:    Class<F> getFrom();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * Returns the target class type.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * @return a class
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:    Class<T> getTo();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * Returns the parameters for converting to a group of a type, or null if
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:     * @return an array of Classes, or null if not needed
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/LocalizedConverter.java:    Class<?>[] getToParameters();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:package org.ruauframework.impl.java.type;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:import org.apache.commons.logging.Log;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:import org.apache.commons.logging.LogFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * Converts java Ruue values between types, using the Ruue Localization layer to
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java: * decipher formatting and handle parsing.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:public class JavaLocalizedTypeUtil {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    private static final Log log = LogFactory.getLog(JavaLocalizedTypeUtil.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    private static final JavaLocalizedTypeUtil instance = new JavaLocalizedTypeUtil();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    private static final JavaLocalizedTypeUtil get() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return instance;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    // cached converters
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    private final Map<String, Map<String, LocalizedConverter<?, ?>>> converters = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    private final Map<String, Map<String, Map<String, LocalizedConverter<?, ?>>>> parameterizedConverters = Maps
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:            .newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * Private constructor that populates a converter cache.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    private JavaLocalizedTypeUtil() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        for (LocalizedConverter<?, ?> converter : ServiceLocator.get().getAll(LocalizedConverter.class)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                String from = converter.getFrom().getName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                String to = converter.getTo().getName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                Class<?>[] toParams = converter.getToParameters();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                Map<String, LocalizedConverter<?, ?>> toMap = converters.get(from);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                if (toMap == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    toMap = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    converters.put(from, toMap);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                if (toParams == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    if (toMap.containsKey(to)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        log.warn("Duplicate LocalizedConverter not registered: " + converter);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        toMap.put(to, converter);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    Map<String, Map<String, LocalizedConverter<?, ?>>> paramToMap = parameterizedConverters.get(from);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    if (paramToMap == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        paramToMap = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        parameterizedConverters.put(from, paramToMap);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    StringBuilder toParamNamesBuilder = new StringBuilder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    for (Class<?> clz : toParams) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        if (toParamNamesBuilder.length() > 0) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                            toParamNamesBuilder.append(',');
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        toParamNamesBuilder.append(clz.getSimpleName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    String toParamNames = toParamNamesBuilder.toString();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    Map<String, LocalizedConverter<?, ?>> paramMap = paramToMap.get(to);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    if (paramMap == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        paramMap = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        paramToMap.put(to, paramMap);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    if (paramMap.containsKey(toParamNames)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        log.warn("Duplicate LocalizedConverter not registered: " + converter);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                        paramMap.put(toParamNames, converter);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:            } catch (Exception e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                log.error("Invalid LocalizedConverter not registered: " + converter, e);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * Ask if a given converter is available.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param from the conversion source data type
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param to the conversion target data type
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param of if not null, 'to' is a container of this type
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @return true if a converter is available
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static boolean hasConverter(Class<?> from, Class<?> to, String of) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * Ask if a given converter is available.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param from
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param to
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @return true if a converter is available
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static boolean hasConverter(Class<?> from, Class<?> to) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return hasConverter(from, to, null);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * Attempts to convert value to the type specified by 'to'. To add supported
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * Conversions, drop a new implementation of LocalizedConverter into the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * ruau.impl.java.type.converter directory and add a reference to it in
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * configuration.RuueImplConfig.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * If a Locale aware <code>LocalizedConverter</code> can't be found a
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * <code>ruau.util.type.Converter<code> will be used instead.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param <F>
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param <T>
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param value
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param to
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param of
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param trim
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @param locale
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * @return a converted T
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convert(F value, Class<T> to, String of, boolean trim, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        if (value == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        // if no localized version exists, use the standard convert utility
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        Class<F> from = (Class<F>) value.getClass();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        if (!hasConverter(from, to, of)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:            return org.ruauframework.util.type.TypeUtil.convert(value, to, of, trim);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        // otherwise try the localized steps
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        if (trim && value instanceof String) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:            value = (F) ((String) value).trim();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        if (to.isAssignableFrom(from)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:            return (T) value;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        if (locale == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:            locale = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return getConverter(from, to, of).convert(value, locale);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    // additional convert signatures that all just pass in the right args
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convertNoTrim(F value, Class<T> to) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, null, false, null);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convertNoTrim(F value, Class<T> to, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, null, false, locale);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convert(F value, Class<T> to) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, null, true, null);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convert(F value, Class<T> to, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, null, true, locale);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convert(F value, Class<T> to, boolean trim) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, null, trim, null);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convert(F value, Class<T> to, boolean trim, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, null, trim, locale);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convertNoTrim(F value, Class<T> to, String of) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, of, false, null);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convertNoTrim(F value, Class<T> to, String of, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, of, false, locale);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convert(F value, Class<T> to, String of) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, of, true, null);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convert(F value, Class<T> to, String of, RuueLocale locale) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, of, true, locale);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    public static <F, T> T convert(F value, Class<T> to, String of, boolean trim) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        return convert(value, to, of, trim, null);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * Returns a LocalizedConverter to go from F to T, or null if one is not
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:     * available. If 'of' is not null, it indicates that 'to' is a container of
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:    private static <F, T> LocalizedConverter<F, T> getConverter(Class<F> from, Class<T> to, String of) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        JavaLocalizedTypeUtil typeUtil = get();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:            Map<String, LocalizedConverter<?, ?>> map = typeUtil.converters.get(from.getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:            if (map != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                return (LocalizedConverter<F, T>) map.get(to.getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:            Map<String, Map<String, LocalizedConverter<?, ?>>> converters = typeUtil.parameterizedConverters.get(from
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    .getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                Map<String, LocalizedConverter<?, ?>> paramConverters = converters.get(to.getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                if (paramConverters != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:                    return (LocalizedConverter<F, T>) paramConverters.get(of);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        // Don't panic yet - if no LocalizedConverter is found, we can still use
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/type/JavaLocalizedTypeUtil.java:        // the non-localized version.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:package org.ruauframework.impl.java.controller;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import java.lang.reflect.Method;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import org.ruauframework.def.ValueDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java: * action in java, aka static method.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:public class JavaActionDef extends DefinitionImpl<ActionDef> implements ActionDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    private static final long serialVersionUID = -9179014361802437154L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    private final DefDescriptor<TypeDef> returnTypeDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    private final List<ValueDef> params;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    private final List<String> loggableParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    private final Class<?>[] javaParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    private final Method method;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    private final boolean background;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    private final boolean caboose;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    protected JavaActionDef(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        this.params = RuueUtil.immutableList(builder.params);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        this.loggableParams = builder.loggableParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        this.javaParams = builder.javaParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        this.background = builder.background;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        this.caboose = builder.caboose;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    public List<ValueDef> getParameters() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        return params;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    public List<String> getLoggableParams() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        return loggableParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    Class<?>[] getJavaParams() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        return this.javaParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:     * Gets the method for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    public boolean isBackground() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    	return background;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    public boolean isCaboose() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    	return caboose;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        json.writeMapEntry("name", getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        json.writeMapEntry("actionType", getActionType());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        json.writeMapEntry("returnType", getReturnType());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        json.writeMapEntry("background", isBackground());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        json.writeMapEntry("caboose", isCaboose());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        json.writeMapEntry("params", params);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ActionDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:            super(ActionDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        private DefDescriptor<TypeDef> returnTypeDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        private List<ValueDef> params;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        private List<String> loggableParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        private Class<?>[] javaParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        private Method method;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        private boolean background = false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        private boolean caboose = false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        public JavaActionDef build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:            return new JavaActionDef(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:         * Sets the returnTypeDescriptor for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:         * @param returnTypeDescriptor The returnTypeDescriptor.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:         * Sets the params for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:         * @param params The params.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        public void setParams(List<ValueDef> params) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:            this.params = params;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:         * Sets the loggable param names for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:         * @param params The loggableParams.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        public void setLoggableParams(List<String> loggableParams) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:            this.loggableParams = loggableParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:         * Sets the javaParams for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:         * @param javaParams The javaParams.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:        public void setJavaParams(Class<?>[] javaParams) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:            this.javaParams = javaParams;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:	public void setBackground(boolean background) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:	    this.background = background;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:	public void setCaboose(boolean caboose) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaActionDef.java:	    this.caboose = caboose;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:package org.ruauframework.impl.java.controller;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import java.lang.annotation.Annotation;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import java.lang.reflect.Method;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import java.lang.reflect.Modifier;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import java.lang.reflect.ParameterizedType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import java.lang.reflect.Type;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.builder.DefBuilder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.def.ValueDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.impl.java.BaseJavaDefFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.impl.java.model.JavaValueDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.impl.java.type.JavaTypeDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.system.Annotations.BackgroundAction;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.system.Annotations.CabooseAction;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.system.Annotations.Controller;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.system.Annotations.Key;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.system.DefFactory;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.system.Location;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.system.SourceLoader;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java: * A {@link DefFactory} for Java controllers.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:public class JavaControllerDefFactory extends BaseJavaDefFactory<ControllerDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:    public JavaControllerDefFactory() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:    public JavaControllerDefFactory(List<SourceLoader> sourceLoaders) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        super(sourceLoaders);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        JavaControllerDefImpl.Builder builder = new JavaControllerDefImpl.Builder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        Class<?> c = getClazz(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        builder.setControllerClass(c);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        // FIXME = "we need an md5";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        builder.setLocation(c.getCanonicalName(), -1);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        Controller ann = c.getAnnotation(Controller.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        if (ann == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    "@Controller annotation is required on all Controllers.  Not found on %s", descriptor),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    builder.getLocation());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        builder.setBean(ann.bean());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            builder.setActionMap(createActions(c, builder.getDescriptor(), ann.bean()));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        } catch (QuickFixException qfe) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            builder.setParseError(qfe);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:    private static String formatType(Type t) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        Class<?> clazz = JavaTypeDef.getClass(t);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        if (clazz != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            result = clazz.getName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        if (t instanceof ParameterizedType) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            ParameterizedType pt = (ParameterizedType) t;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            if (pt.getActualTypeArguments().length > 0) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                boolean first = true;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                for (Type tp : pt.getActualTypeArguments()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    first = false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                        result += formatType(tp); // recurse if nested parameterized
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * Add a single method as an action.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * @param method the method for which we want to create an action.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * @throws QuickFixException if the method is invalid for some reason.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:    private static JavaActionDef makeActionDef(Method method, Class<?> controllerClass,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        JavaActionDef.Builder actionBuilder = new JavaActionDef.Builder();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        String name = method.getName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        Class<?>[] paramTypes = method.getParameterTypes();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        List<ValueDef> params = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        List<String> loggableParams = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        Annotation[][] paramAnnotations = method.getParameterAnnotations();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        actionBuilder.setDescriptor(SubDefDescriptorImpl.getInstance(name, controllerDesc, ActionDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        actionBuilder.setMethod(method);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        actionBuilder.setReturnTypeDescriptor(DefDescriptorImpl.getInstance("java://"
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                + method.getReturnType().getName(), TypeDef.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        actionBuilder.setJavaParams(method.getParameterTypes());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        Type[] genParams = method.getGenericParameterTypes();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        for (int i = 0; i < paramTypes.length; i++) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            boolean found = false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            for (Annotation annotation : paramAnnotations[i]) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                if (annotation instanceof Key) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    String qn = "java://" + formatType(genParams[i]);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    DefDescriptor<TypeDef> typeDefDesc = DefDescriptorImpl.getInstance(qn, TypeDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    // FIXME = "we need an md5";
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    String paramName = ((Key) annotation).value();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    ValueDef valueDef = new JavaValueDef(paramName, typeDefDesc, new Location(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                            controllerClass.getName() + "." + name, 0));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    params.add(valueDef);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    if (((Key)annotation).loggable()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                        loggableParams.add(paramName);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                throw new InvalidDefinitionException("@Key annotation is required on all action parameters",
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                        new Location(controllerClass.getName() + "." + name, 0));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        actionBuilder.setParams(params);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        actionBuilder.setLoggableParams(loggableParams);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:    	actionBuilder.setBackground(method.isAnnotationPresent(BackgroundAction.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:    	actionBuilder.setCaboose(method.isAnnotationPresent(CabooseAction.class));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        return actionBuilder.build();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:    private static void throwControllerError(String message, Class<?> clazz, Method method) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        throw new InvalidDefinitionException(message + method.getName(),
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                new Location("java://"+clazz.getCanonicalName(), 0));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * Create actions for all ruau enabled actions on a class.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * Note that this function will not look at any method that is not public.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * If we want to check for @RuueEnabled methods that are marked non-public
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * we would need to walk every method in the heirarchy, checking for that
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * case. It would really just be for validation.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * @param controllerClass the class that contains our action functions.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:     * @param controllerDesc a descriptor for the class.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:    public static Map<String, JavaActionDef> createActions(Class<?> controllerClass,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            DefDescriptor<ControllerDef> controllerDesc, boolean bean) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        Map<String, JavaActionDef> actions = Maps.newTreeMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        for (Method method : controllerClass.getMethods()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:            if (method.isAnnotationPresent(RuueEnabled.class)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    throwControllerError("Invalid non-public action: ", controllerClass, method);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                if (bean) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    if (Modifier.isStatic(modifiers)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                        throwControllerError("Invalid static action in a bean: ", controllerClass, method);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    if (!Modifier.isStatic(modifiers)) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                        throwControllerError("Invalid non-static action in a controller: ", controllerClass, method);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                JavaActionDef action = makeActionDef(method, controllerClass, controllerDesc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                if (action != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    // this line disallows action overloading. dunno if we care.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    if (actions.containsKey(action.getName())) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                        throw new InvalidDefinitionException("Duplicate action " + action.getName(), new Location(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                                controllerClass.getName(), 0));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:                    actions.put(action.getName(), action);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefFactory.java:        return actions;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:package org.ruauframework.impl.java.controller;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.def.JavaControllerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java: * The default implementation for a java controller def.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:public class JavaControllerDefImpl extends DefinitionImpl<ControllerDef> implements JavaControllerDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    private static final long serialVersionUID = -8294844909051767366L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    private final Class<?> controllerClass;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    private final boolean bean;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    private final Map<String, JavaActionDef> actionMap;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    protected JavaControllerDefImpl(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        this.controllerClass = builder.controllerClass;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        this.actionMap = RuueUtil.immutableMap(builder.actionMap);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        this.bean = builder.bean;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        if (this.bean) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:            Ruue.getBeanAdapter().validateControllerBean(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        // FIXME: put all of our action dependencies in here...
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    public Class<?> getJavaType() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        return this.controllerClass;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:            return (D) getSubDefinition(sddesc.getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    public JavaActionDef getSubDefinition(String name) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        return actionMap.get(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        json.writeMapEntry("actionDefs", actionMap.values());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    public Map<String, JavaActionDef> getActionDefs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        return actionMap;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    public Action createAction(String actionName, Map<String, Object> paramValues) throws DefinitionNotFoundException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    	JavaActionDef actionDef = actionMap.get(actionName);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    	if(actionDef == null){
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:            DefDescriptor<ActionDef> desc = SubDefDescriptorImpl.getInstance(actionName, getDescriptor(), ActionDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        if (bean) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:            controller = Ruue.getBeanAdapter().getControllerBean(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        return new JavaAction(getDescriptor(), actionDef, controller, paramValues);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    public Object getValue(PropertyReference key) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ControllerDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:            super(ControllerDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        private Class<?> controllerClass;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        private Map<String, JavaActionDef> actionMap;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        private boolean bean;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        public JavaControllerDefImpl build() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:            return new JavaControllerDefImpl(this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:         * Sets the controllerClass for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        public void setControllerClass(Class<?> controllerClass) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:            this.controllerClass = controllerClass;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        public void setBean(boolean bean) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:            this.bean = bean;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:         * Sets the actionMap for this instance.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:        public void setActionMap(Map<String, JavaActionDef> actionMap) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaControllerDefImpl.java:            this.actionMap = actionMap;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:package org.ruauframework.impl.java.controller;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import java.lang.reflect.InvocationTargetException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import java.util.List;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.def.ValueDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.instance.AbstractActionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.service.LoggingService;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.system.Location;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.throwable.RuueExecutionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.throwable.RuueHandledException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.throwable.RuueUnhandledException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java: * A server side java based action.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:public class JavaAction extends AbstractActionImpl<JavaActionDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * The constructor for an action.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * Note that if the bean parameter is non-null, this action is invoked as an instance
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * method on the bean, otherwise, it must be static.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * @param controllerDescriptor the descriptor for the owning controller.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * @param actionDef the definition for this action.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * @param bean The controller bean, if there is one, otherwise null.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * @param paramValues the parameter values.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:    public JavaAction(DefDescriptor<ControllerDef> controllerDescriptor, JavaActionDef actionDef,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            Object bean, Map<String, Object> paramValues) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        super(controllerDescriptor, actionDef, paramValues);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        this.bean = bean;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:    private Object[] getArgs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        Class<?>[] javaParams = actionDef.getJavaParams();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        Object[] args = new Object[javaParams.length];
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        for (ValueDef valueDef : actionDef.getParameters()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            Object param = paramValues.get(valueDef.getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                param = valueDef.getType().valueOf(param);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            } catch (QuickFixException qfe) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                // This means that we have a broken definition.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                addException(new RuueUnhandledException("Invalid parameter " + valueDef, qfe), State.ERROR, true,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                        false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            } catch (IllegalArgumentException iae) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                addException(new RuueUnhandledException("Invalid value for " + valueDef, iae), State.ERROR, false,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                        false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            } catch (RuueHandledException lhe) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                addException(lhe, State.ERROR, false, false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            } catch (Exception e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                addException(new RuueUnhandledException("Error on parameter " + valueDef, e), State.ERROR, false,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                        false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            args[i++] = param;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        return args;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * Add an exception to our set of errors.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * @param t the throwable to add.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * @param newState the 'State' to set.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     * @param loggable should this exception be run through the 'exception
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:     *            adapter'.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:    private void addException(Throwable t, State newState, boolean loggable, boolean wrap) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        this.state = newState;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        if (t instanceof RuueHandledException) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            this.errors.add(t);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            Throwable ex = t;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            if (wrap) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                ex = new RuueExecutionException(ex, new Location(controllerDescriptor.toString(), 0));
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            if (loggable) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                ex = Ruue.getExceptionAdapter().handleException(ex, this);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            this.errors.add(ex);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        if (this.actionDef == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            addException(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                    new InvalidDefinitionException("No action found", new Location(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:                            this.controllerDescriptor.getQualifiedName(), 0)), State.ERROR, true, false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        this.state = State.RUNNING;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        Object[] args = getArgs();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        if (args == null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        loggingService.startTimer("java");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            loggingService.incrementNum("JavaCallCount");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            this.returnValue = this.actionDef.getMethod().invoke(bean, args);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            this.state = State.SUCCESS;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        } catch (InvocationTargetException e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            // something bad happened in the body of the action itself
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            // getCause() unwraps the InvocationTargetException, gives us the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            // real information.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            addException(e.getCause(), State.ERROR, true, true);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        } catch (Exception e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            // Several cases handled here, including
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            // * IllegalArgumentError: the conversion probably didn't work.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            // * IllegalAccessException: should not be possible.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            addException(e, State.ERROR, true, false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        } finally {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            loggingService.stopTimer("java");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:            loggingService.startTimer(LoggingService.TIMER_AURA);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:    public Object getReturnValue() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:        return returnValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:    private Object returnValue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:    private final List<Object> errors = Lists.newArrayList();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/java/controller/JavaAction.java:    private final Object bean;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:package org.ruauframework.impl.compound.controller;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.impl.compound.controller.CompoundControllerDef.Builder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.impl.system.DefFactoryImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:import com.google.common.collect.Maps;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:public class CompoundControllerDefFactory extends DefFactoryImpl<ControllerDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:        builder.setLocation(descriptor.getQualifiedName(), -1);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:        DefDescriptor<ComponentDef> compDesc = DefDescriptorImpl.getAssociateDescriptor(descriptor, ComponentDef.class,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:        BaseComponentDef componentDef = null;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:            DefDescriptor<ApplicationDef> appDesc = DefDescriptorImpl.getAssociateDescriptor(descriptor,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:                    ApplicationDef.class, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:            componentDef = appDesc.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:            DefDescriptor<ComponentDef> layoutDesc = DefDescriptorImpl.getAssociateDescriptor(descriptor,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:                    ComponentDef.class, "layout");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:            componentDef = layoutDesc.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:        Map<String, ActionDef> flattened = Maps.newHashMap();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:        for (DefDescriptor<ControllerDef> delegate : componentDef.getControllerDefDescriptors()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:            ControllerDef c = delegate.getDef();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:            for (Map.Entry<String, ? extends ActionDef> e : c.getActionDefs().entrySet()) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:                ActionDef a = flattened.get(e.getKey());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:                if (a != null) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:                    // TODO: server and client actions by same name, map needs
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:                    // key on action type
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:                    flattened.put(e.getKey(), e.getValue());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDefFactory.java:        builder.setActionDefs(flattened);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:package org.ruauframework.impl.compound.controller;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:import java.io.IOException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:import java.util.Map;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * Compound controllers are what components usually deal with, they handle
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java: * delegating actions of multiple controllers and exposing them as one flat map.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:public class CompoundControllerDef extends DefinitionImpl<ControllerDef> implements ControllerDef {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:    private static final long serialVersionUID = -902182692824281624L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:    private final Map<String, ActionDef> actionDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:    private CompoundControllerDef(Builder builder) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        this.actionDefs = builder.actionDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:    public ActionDef getSubDefinition(String name) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        return actionDefs.get(name);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:    public Map<String, ActionDef> getActionDefs() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        return actionDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        json.writeMapBegin();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        json.writeMapEntry("actionDefs", actionDefs.values());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        json.writeMapEnd();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:    public Action createAction(String actionName, Map<String, Object> paramValues) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        throw new UnsupportedOperationException("Can't create an action from a compound controller");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:    public Object getValue(PropertyReference key) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<ControllerDef> {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        private Map<String, ActionDef> actionDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:            super(ControllerDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:        public void setActionDefs(Map<String, ActionDef> actionDefs) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/compound/controller/CompoundControllerDef.java:            this.actionDefs = actionDefs;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:import org.ruauframework.impl.integration.IntegrationImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:import org.ruauframework.integration.Integration;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:import org.ruauframework.integration.IntegrationServiceObserver;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:import org.ruauframework.service.IntegrationService;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:public class IntegrationServiceImpl implements IntegrationService {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:    public Integration createIntegration(String contextPath, Mode mode, boolean initializeRuue, String userAgent, 
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:            String application, IntegrationServiceObserver observer) throws QuickFixException {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:        return new IntegrationImpl(contextPath, mode, initializeRuue, userAgent, application, observer);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/IntegrationServiceImpl.java:    private static final long serialVersionUID = -2650728458106333787L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java: * limitations under the License.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import java.lang.ref.WeakReference;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import java.util.Collection;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import java.util.Set;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import java.util.concurrent.TimeUnit;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import java.util.concurrent.locks.Lock;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import java.util.concurrent.locks.ReentrantReadWriteLock;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.apache.log4j.Logger;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.builder.CacheBuilder;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.cache.Cache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.impl.cache.CacheImpl;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.service.CachingService;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.system.DependencyEntry;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import org.ruauframework.system.SourceListener;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:import com.google.common.base.Optional;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:public class CachingServiceImpl implements CachingService {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private static final long serialVersionUID = -3311707270226573084L;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final static int DEFINITION_CACHE_SIZE = 4096;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final static int DEPENDENCY_CACHE_SIZE = 1024;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final static int FILTER_CACHE_SIZE = 1024;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final static int STRING_CACHE_SIZE = 100;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final static int CLIENT_LIB_CACHE_SIZE = 30;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final WriteLock wLock = rwLock.writeLock();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public <K, T> CacheBuilder<K, T> getCacheBuilder() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return new CacheImpl.Builder<>();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final Cache<DefDescriptor<?>, Boolean> existsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final Cache<DefDescriptor<?>, Optional<? extends Definition>> defsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final Cache<String, String> stringsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final Cache<String, Set<DefDescriptor<?>>> descriptorFilterCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final Cache<String, DependencyEntry> depsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final Cache<String, String> clientLibraryOutputCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final Cache<String, Set<String>> clientLibraryUrlsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private final Cache<DefDescriptor.DescriptorKey, DefDescriptor<? extends Definition>> defDescriptorByNameCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private static final Logger logger = Logger.getLogger(CachingServiceImpl.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public CachingServiceImpl() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        existsCache = this.<DefDescriptor<?>, Boolean> getCacheBuilder()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setInitialSize(DEFINITION_CACHE_SIZE)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setMaximumSize(DEFINITION_CACHE_SIZE).setRecordStats(true)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setName("existsCache")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setSoftValues(true).build();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        defsCache = this
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .<DefDescriptor<?>, Optional<? extends Definition>> getCacheBuilder()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setInitialSize(DEFINITION_CACHE_SIZE)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setMaximumSize(DEFINITION_CACHE_SIZE).setRecordStats(true)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setName("defsCache")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setSoftValues(true).build();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        stringsCache = this.<String, String> getCacheBuilder()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setInitialSize(STRING_CACHE_SIZE)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setMaximumSize(STRING_CACHE_SIZE).setRecordStats(true)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setName("stringsCache")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setSoftValues(true).build();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        descriptorFilterCache = this
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .<String, Set<DefDescriptor<?>>> getCacheBuilder()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setInitialSize(FILTER_CACHE_SIZE)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setMaximumSize(FILTER_CACHE_SIZE).setRecordStats(true)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setName("descriptorFilterCache")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setSoftValues(true).build();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        depsCache = this.<String, DependencyEntry> getCacheBuilder()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setInitialSize(DEPENDENCY_CACHE_SIZE)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setMaximumSize(DEPENDENCY_CACHE_SIZE).setRecordStats(true)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setName("depsCache")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setSoftValues(true).build();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        clientLibraryOutputCache = this.<String, String> getCacheBuilder()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setInitialSize(CLIENT_LIB_CACHE_SIZE)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setMaximumSize(CLIENT_LIB_CACHE_SIZE).setSoftValues(true)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setName("clientLibraryOutputCache")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setRecordStats(true).build();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        clientLibraryUrlsCache = this.<String, Set<String>> getCacheBuilder()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setInitialSize(CLIENT_LIB_CACHE_SIZE)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setMaximumSize(CLIENT_LIB_CACHE_SIZE).setSoftValues(true)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setName("clientLibraryUrlsCache")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                .setRecordStats(true).build();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        defDescriptorByNameCache =
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                this.<DefDescriptor.DescriptorKey, DefDescriptor<? extends Definition>> getCacheBuilder()
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                        .setInitialSize(512)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                        .setMaximumSize(1024 * 10)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                        .setName("defDescByNameCache")
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public final Cache<DefDescriptor<?>, Boolean> getExistsCache() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return existsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public final Cache<DefDescriptor<?>, Optional<? extends Definition>> getDefsCache() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return defsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public final Cache<String, String> getStringsCache() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return stringsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public final Cache<String, Set<DefDescriptor<?>>> getDescriptorFilterCache() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return descriptorFilterCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public final Cache<String, DependencyEntry> getDepsCache() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return depsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public final Cache<String, String> getClientLibraryOutputCache() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return clientLibraryOutputCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public final Cache<String, Set<String>> getClientLibraryUrlsCache() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return clientLibraryUrlsCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public final Cache<DefDescriptor.DescriptorKey, DefDescriptor<? extends Definition>> getDefDescriptorByNameCache() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return defDescriptorByNameCache;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public Lock getReadLock() {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        return rwLock.readLock();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:     * The driver for cache-consistency management in response to source changes. MDR drives the process, will notify
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:     * all registered listeners while write blocking, then invalidate it's own caches. If this routine can't acquire the
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:     * lock , it will log it as an non-fatal error, as it only results in staleness.
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:     * @param listeners - collections of listeners to notify of source changes
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:     * @param source - DefDescriptor that changed - for granular cache clear (currently not considered here, but other
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:     *            listeners may make use of it)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:     * @param event - what type of event triggered the change
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    public void notifyDependentSourceChange(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            Collection<WeakReference<SourceListener>> listeners,
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            String filePath) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        boolean haveLock = false;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            // We have now eliminated all known deadlocks, but for production
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            // safety, we never want to block forever
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            haveLock = wLock.tryLock(5, TimeUnit.SECONDS);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            // If this occurs, we have a new deadlock. But it only means
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            // temporary cache staleness, so it is not fatal
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            if (!haveLock) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                logger.error("Couldn't acquire cache clear lock in a reasonable time.  Cache may be stale until next clear.");
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            // successfully acquired the lock, start clearing caches
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            // notify provided listeners, presumably to clear caches
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            for (WeakReference<SourceListener> i : listeners) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                    sl.onSourceChanged(source, event, filePath);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            // lastly, clear MDR's static caches
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            invalidateSourceRelatedCaches(source);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        } catch (InterruptedException e) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        } finally {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            if (haveLock) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private void invalidateSourceRelatedCaches(DefDescriptor<?> descriptor) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        depsCache.invalidateAll();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        descriptorFilterCache.invalidateAll();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        stringsCache.invalidateAll();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            defsCache.invalidateAll();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            existsCache.invalidateAll();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            DefinitionService ds = Ruue.getDefinitionService();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                    "markup", ComponentDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            DefDescriptor<ApplicationDef> adesc = ds.getDefDescriptor(
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                    descriptor, "markup", ApplicationDef.class);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            defsCache.invalidate(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            existsCache.invalidate(descriptor);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            defsCache.invalidate(cdesc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            existsCache.invalidate(cdesc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            defsCache.invalidate(adesc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            existsCache.invalidate(adesc);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            case NAMESPACE:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                // invalidate all DDs with the same namespace if its a namespace DD
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                invalidateScope(descriptor, true, false);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            case LAYOUTS:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                invalidateScope(descriptor, true, true);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            case INCLUDE:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                invalidateSourceRelatedCaches(descriptor.getBundle());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                break;
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            default:
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:    private void invalidateScope(DefDescriptor<?> descriptor, boolean clearNamespace, boolean clearName) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        final Set<DefDescriptor<?>> defsKeySet = defsCache.getKeySet();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        final String namespace = descriptor.getNamespace();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:        final String name = descriptor.getName();
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            boolean sameNamespace = namespace.equals(dd.getNamespace());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            boolean sameName = name.equals(dd.getName());
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            boolean shouldClear = (clearNamespace && clearName) ? (clearNamespace && sameNamespace)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                    && (clearName && sameName)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                    : (clearNamespace && sameNamespace)
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                            || (clearName && sameName);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:            if (shouldClear) {
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                defsCache.invalidate(dd);
ruau/ruau-impl/SouRCeS/nAmE/java/org/ruauframework/impl/CachingServiceImpl.java:                existsCache.invalidate(dd);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js: * limitations under the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:Function.RegisterNamespace("Test.Ruue");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:Test.Ruue.RuueClientServiceTest = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:	// Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:	Mocks.GetMock(Object.Global(), "exp", function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		// #import ruau.RuueClientService
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:	var mockGlobal = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			assert : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				isArray : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mark : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:    function testCreateIntegrationErrorConfig() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        	// Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var errorMsg = "Test Error Message";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            	actual = target.createIntegrationErrorConfig(errorMsg);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        "descriptor" : "markup://ui:message"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    "attributes" : {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        "values" : {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                            "title" : "Ruue Integration Service Error",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                                        "descriptor" : "markup://ui:outputText"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                                    "attributes" : {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                                        "values" : {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                                            "value" : "mockedJson:"+errorMsg
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:	var MockAction = function(type) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.ruauType = "Action";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.setBackground = Stubs.GetMethod();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.isAbortable = Stubs.GetMethod(false);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.isCaboose = Stubs.GetMethod(false);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.isBackground = Stubs.GetMethod(false);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.runDeprecated = Stubs.GetMethod();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.addCallbackGroup = Stubs.GetMethod();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.getAbortableId = Stubs.GetMethod();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.setAbortableId = Stubs.GetMethod();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.abort = Stubs.GetMethod();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            isServerAction : Stubs.GetMethod(false)
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        var sdef = Stubs.GetMethod({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            isClientAction : Stubs.GetMethod(false),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        if (type === "clientbackground") {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            this.isBackground = Stubs.GetMethod(true);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        } else if (type === "serverbackground") {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            this.isBackground = Stubs.GetMethod(true);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        } else if (type === "serverabortable") {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            this.isAbortable = Stubs.GetMethod(true);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        } else if (type === "serverforceboxcar") {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            this.isCaboose = Stubs.GetMethod(true);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:    var MockActionQueue = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.nextBackgroundAction = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.xhr = false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        this.getNextBackgroundAction = function() { return this.nextBackgroundAction; };
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:	// FIXME: most of the enqueue action stuff should be removed, and
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:	// we should just ensure that they call ActionQueue.enqueue.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = new MockAction();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				new RuueClientService().enqueueAction(action);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(0, action.runDeprecated.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = new MockAction();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.priv.actionQueue.enqueue = Stubs.GetMethod("action", undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(action);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal([ {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					action : action
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				ReturnValue : undefined
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			} ], target.priv.actionQueue.enqueue.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = new MockAction("client");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.priv.actionQueue.enqueue = Stubs.GetMethod("action", undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(action);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal([ {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					action : action
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				ReturnValue : undefined
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			} ], target.priv.actionQueue.enqueue.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function AbortableActionsAreCleared() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			// Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var abortable = new MockAction("serverabortable");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var action = new MockAction("server");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.processActions = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.pushStack("AbortableActionsAreCleared.1");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(action, undefined, undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(abortable, undefined, undefined); // will be pruned
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(abortable, undefined, undefined); // will be pruned
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(action, undefined, undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.popStack("AbortableActionsAreCleared.1");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.pushStack("AbortableActionsAreCleared.2");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(action, undefined, undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(abortable, undefined, undefined); // will be kept
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(abortable, undefined, undefined); // will be kept
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.enqueueAction(action, undefined, undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.popStack("AbortableActionsAreCleared.2");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(6, target.priv.actionQueue.actions.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(2, abortable.abort.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(0, action.abort.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.False(target.priv.actionQueue.actions[0].isAbortable(), "First action should not be abortable");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.False(target.priv.actionQueue.actions[1].isAbortable(), "Second action should not be abortable");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.False(target.priv.actionQueue.actions[2].isAbortable(), "Third action should not be abortable");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.True(target.priv.actionQueue.actions[3].isAbortable(), "Fourth action should be abortable");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.True(target.priv.actionQueue.actions[4].isAbortable(), "Fifth action should be abortable");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.False(target.priv.actionQueue.actions[5].isAbortable(), "Sixth action should not be abortable");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var assertStub = Stubs.GetMethod("check", "message", undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var validateStub = Stubs.GetMethod(true);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				$A.assert = assertStub;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				$A.util.isUndefinedOrNull = validateStub;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				new RuueClientService().enqueueAction(new MockAction());
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(1, validateStub.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					check : false,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					message : "EnqueueAction() cannot be called on an undefined or null action."
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				ReturnValue : undefined
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			}, assertStub.Calls[0]);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function AssertsActionRuueTypeDefined() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var assertStub = Stubs.GetMethod("check", "message", undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var validateStub = Stubs.GetMethod(true);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				$A.assert = assertStub;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				$A.util.isUndefined = validateStub;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				new RuueClientService().enqueueAction(new MockAction());
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(1, validateStub.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					check : false,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					message : "Cannot call EnqueueAction() with a non Action parameter."
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				ReturnValue : undefined
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			}, assertStub.Calls[1]);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function AssertsActionRuueTypeIsAction() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var assertStub = Stubs.GetMethod("check", "message", undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = new MockAction();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			action.ruauType = "unexpected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				$A.assert = assertStub;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				new RuueClientService().enqueueAction(action);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					check : false,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					message : "Cannot call EnqueueAction() with a non Action parameter."
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				ReturnValue : undefined
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			}, assertStub.Calls[1]);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function SetBackgroundActionIfTruthy() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = new MockAction();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				new RuueClientService().enqueueAction(action, true);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(1, action.setBackground.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function DoesNotSetBackgroundActionIfUndefined() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = new MockAction();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				new RuueClientService().enqueueAction(action);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(0, action.setBackground.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function DoesNotSetBackgroundActionIfNull() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = new MockAction();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				new RuueClientService().enqueueAction(action, null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(0, action.setBackground.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function DoesNotSetBackgroundActionIfFalsy() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = new MockAction();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				new RuueClientService().enqueueAction(action, false);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal(0, action.setBackground.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function ReturnsFalseIfForegroundMax() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue = new MockActionQueue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue.serverActions = [ "action" ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue.xhr = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.foreground.started = target.priv.foreground.max;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				actual = target.processActions();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function ReturnsFalseIfBackgroundMax() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue = new MockActionQueue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue.nextBackgroundAction = "action";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.background.started = target.priv.background.max;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				actual = target.processActions();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function ReturnsFalseIfQueueEmpty() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue = new MockActionQueue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				actual = target.processActions();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function CallsRequestIfServerActionsAvailable() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = "server";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.request = Stubs.GetMethod("actions", "flightCounter", undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue = new MockActionQueue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.actionQueue.serverActions = [ action ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue.xhr = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target.processActions();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal([ {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					actions : [ action ],
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					flightCounter : target.priv.foreground
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				ReturnValue : undefined
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			} ], target.priv.request.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function DoesNotCallRequestIfXhrSetToFalse() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var action = "server";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue = new MockActionQueue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue.serverActions = [ action ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue.xhr = false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                actual = target.processActions();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = "server";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.request = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue = new MockActionQueue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.actionQueue.serverActions = [ action ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue.xhr = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				actual = target.processActions();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.True(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function CallsRequestIfBackgroundActionAvailable() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = "background";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.request = Stubs.GetMethod("actions", "flightCounter", undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue = new MockActionQueue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.actionQueue.nextBackgroundAction = action;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				actual = target.processActions();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal([ {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					actions : [ action ],
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					flightCounter : target.priv.background
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				ReturnValue : undefined
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			} ], target.priv.request.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function ReturnsTrueIfBackgroundActionSent() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var action = "background";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.request = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue = new MockActionQueue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.actionQueue.nextBackgroundAction = action;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				actual = target.processActions();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.True(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:		function CallsRequestForBothServerAndBackgroundActions() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var actionServer = "server";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var actionBackground = "background";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.request = Stubs.GetMethod("actions", "flightCounter", undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue = new MockActionQueue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			target.priv.actionQueue.serverActions = [ actionServer ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue.xhr = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            target.priv.actionQueue.nextBackgroundAction = actionBackground;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				actual = target.processActions();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			Assert.Equal([ {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					actions : [ actionServer ],
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					flightCounter : target.priv.foreground
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				ReturnValue : undefined
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					actions : [ actionBackground ],
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:					flightCounter : target.priv.background
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:				ReturnValue : undefined
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:			} ], target.priv.request.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:    function MakeActionGroup() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function AssertsActionsIsArray() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expectedArrayCheck = "checked";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var stubbedAssert = Stubs.GetMethod("condition", "msg", null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var stubbedIsArray = Stubs.GetMethod("param", expectedArrayCheck);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                $A.assert = stubbedAssert;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                $A.util.isArray = stubbedIsArray;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    target.makeActionGroup(expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                } catch (e) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    // We expect an exception because our version of assert
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal([ {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    param : expected
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                ReturnValue : expectedArrayCheck
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            } ], stubbedIsArray.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal([ {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    condition : expectedArrayCheck,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    msg : "makeActionGroup expects a list of actions, but instead got: expected"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                ReturnValue : null
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            } ], stubbedAssert.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function AssertsCallbackIsFunction() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expectedArrayCheck = "checked";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var action = new MockAction();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var stubbedAssert = Stubs.GetMethod("condition", "msg", null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var stubbedIsFunction = Stubs.GetMethod("param", expectedArrayCheck);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expected = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                return "expected callback";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    return false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                $A.assert = stubbedAssert;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.makeActionGroup([action], undefined, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal([ {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    param : expected
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                ReturnValue : expectedArrayCheck
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            } ], stubbedIsFunction.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    condition : expectedArrayCheck,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    msg : "makeActionGroup expects the callback to be a function, but instead got: " + expected
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                ReturnValue : null
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            }, stubbedAssert.Calls[1]);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function DoesNotAssertCallbackIsFunctionIfCallbackUndefined() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var stubbedAssert = Stubs.GetMethod("condition", "msg", null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var action = new MockAction();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                $A.assert = stubbedAssert;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.makeActionGroup([action], undefined, undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var i;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            for (i = 0; i < stubbedAssert.Calls.length; i++) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                Assert.NotEqual("makeActionGroup expects the callback to be a function, but instead got: " + undefined,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                                stubbedAssert.Calls[i].Arguments.msg);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function CallsMakeActionGroup() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expectedActions = ["action"];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expectedScope = "scope";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expectedCallback = "callback";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.makeActionGroup = Stubs.GetMethod("actions", "scope", "callback", null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.priv.actionQueue.enqueue = function(){};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.processActions = function(){};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.runActions(expectedActions, expectedScope, expectedCallback);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal([ {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    actions: expectedActions,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    callback: expectedCallback
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                ReturnValue : null
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            } ], target.makeActionGroup.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function CallsEnqueueOnEachAction() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var actions = ["action1", "action2"];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.makeActionGroup = function(){};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.priv.actionQueue.enqueue = Stubs.GetMethod("param", null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.processActions = function(){};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.runActions(actions);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal([{
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    param: actions[0]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                ReturnValue : null
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    param: actions[1]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                ReturnValue : null
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            ], target.priv.actionQueue.enqueue.Calls);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function CallsProcessActions() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expectedActions = ["action"];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expectedScope = "scope";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var expectedCallback = "callback";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.makeActionGroup = function(){};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.priv.actionQueue.enqueue = function(){};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.processActions = Stubs.GetMethod(null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target.runActions(expectedActions, expectedScope, expectedCallback);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal(1, target.processActions.Calls.length);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:    function actionServices() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        // Mock action storage returned by the mockAction service when getStorage("action") is invoked.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        // This object has a setup method which allows the test to assert what parameters should be passed into its
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        // get, put and remove functions.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        var mockActionStorage = new (function MockActionStorage() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            this.clear = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var that = this;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    delete that._stubs;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var that = this;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    if (that._stubs && that._stubs.get) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        var value = { value : that._stubs.get[key], isExpired : false };
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        success(value);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        throw "actionsStorage.get(..) called before it was stubbed out.";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            this.put = function(key, value) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var that = this;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    if (that._stubs && that._stubs.put) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        if (value === that._stubs.put[key]) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        throw "actionsStorage.put(..) called before it was stubbed out.";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var that = this;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    if (that._stubs && that._stubs.remove) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        if (key === that._stubs.remove){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        throw "actionsStorage.remove(..) called before it was stubbed out.";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        // Sets up the environment with a mock action storage:
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        var mockActionService = function(delegate) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    "storageService": {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        "getStorage": function(name) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                            Assert.Equal("actions", name, "action service should only access the 'actions' cache");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                            return mockActionStorage;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    assert : function() {},
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    mark : function() {},
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        isArray : function(obj) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                            return obj instanceof Array;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                            return typeof obj === "object" && obj !== null && !(obj instanceof Array);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                        map: function(array, transformer, that) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                            return array.map(transformer, that);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                window: Object.Global()
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // #import ruau.RuueClientService
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        		// #import ruau.controller.Action
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                mockActionStorage.clear()
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    .then(function() { delegate(new RuueClientService(), mockActionStorage); });
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function assertBool(bool, message) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                Assert[bool ? "True" : "False"](result, message);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function testIsInStorage() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockActionService(function(service, storage) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var descriptor = "DESCRIPTOR";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var params = {params: "PARAMS"};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var stored = "STORED";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var get = {};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                get[Action.getStorageKey(descriptor, params)] = stored;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                storage.setup({get: get});
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // don't worry about async, the mocks do everything synchronously.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // With descriptor and params, the action is indeed found:
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage(descriptor, params, Assert.True);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // With invalid descriptor/params the callback is invoked with false:
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage(descriptor, {}, assertBool(false, "Wrong params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage("", params, assertBool(false, "Wrong descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage(undefined, params, assertBool(false, "Undefined descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage(null, params, assertBool(false, "Null descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage(true, params, assertBool(false, "Boolean descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage([], params, assertBool(false, "Array descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage(descriptor, undefined, assertBool(false, "Undefined params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage(descriptor, null, assertBool(false, "Null params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage(descriptor, true, assertBool(false, "Boolean params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.isActionInStorage(descriptor, [], assertBool(false, "Array params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function testRevalidateAction() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockActionService(function(service, storage) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var descriptor = "DESCRIPTOR";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var params = {params: "PARAMS"};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var stored = "STORED";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var access = {};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                access[Action.getStorageKey(descriptor, params)] = stored;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                storage.setup({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    get: access,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    put: access
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // don't worry about async, the mocks do everything synchronously.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // With descriptor and params, the action is revalidated:
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction(descriptor, params, Assert.True);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // With invalid descriptor/params the callback is invoked with false:
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction(descriptor, {}, assertBool(false, "Wrong params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction("", params, assertBool(false, "Wrong descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction(undefined, params, assertBool(false, "Undefined descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction(null, params, assertBool(false, "Null descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction(true, params, assertBool(false, "Boolean descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction([], params, assertBool(false, "Array descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction(descriptor, undefined, assertBool(false, "Undefined params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction(descriptor, null, assertBool(false, "Null params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction(descriptor, true, assertBool(false, "Boolean params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.revalidateAction(descriptor, [], assertBool(false, "Array params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function testInvalidateAction() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockActionService(function(service, storage) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var descriptor = "DESCRIPTOR";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var params = {params: "PARAMS"};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                var stored = "STORED";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                storage.setup({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    remove: Action.getStorageKey(descriptor, params)
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // don't worry about async, the mocks do everything synchronously.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // With descriptor and params, the action is re-validated:
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(descriptor, params, Assert.True);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // When the actions are non-existent, remove is still called on them regardless of whether or not
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // they are currently stored (test to ensure that the mockActionStorage is called with action keys it's
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // not rigged to except by ensuring it throws the appropriate exceptions):
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    assertBool(false, "Wrong params."),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    function(err) { Assert.Equal("remove stub not found for key: DESCRIPTOR:<<{}>>", err); }
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    params,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    assertBool(false, "Wrong descriptor."),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                    function(err) { Assert.Equal("remove stub not found for key: :<<{\"params\":\"PARAMS\"}>>", err); }
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                // With invalid descriptor/params the callback is invoked with false:
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(undefined, params, assertBool(false, "Undefined descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(null, params, assertBool(false, "Null descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(true, params, assertBool(false, "Boolean descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction([], params, assertBool(false, "Array descriptor."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(descriptor, undefined, assertBool(false, "Undefined params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(descriptor, null, assertBool(false, "Null params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(descriptor, true, assertBool(false, "Boolean params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                service.invalidateAction(descriptor, [], assertBool(false, "Array params."));
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var mockUserAgent = Mocks.GetMock(Object.Global(), "navigator", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/10.0.9.2372 Mobile Safari/537.10+"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                actual = target.priv.isBB10();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal(true, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:        function ReturnsFalseForNonBB10Blackberry() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            mockGlobal(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                target = new RuueClientService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var mockUserAgent = Mocks.GetMock(Object.Global(), "navigator", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                userAgent: "Mozilla/5.0 (BlackBerry; U; BlackBerry 9900; en-US) AppleWebKit/534.11+ (KHTML, like Gecko) Version/7.0.0 Mobile Safari/534.11+"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:                actual = target.priv.isBB10();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueClientServiceTest.js:            Assert.Equal(false, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js: * limitations under the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:Function.RegisterNamespace("Test.Ruue.Component");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:Test.Ruue.Component.ComponentTest=function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:	// Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:    Mocks.GetMock(Object.Global(), "exp", function(){})(function()
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        {Mocks.GetMock(Object.Global(), "$A", function(){})(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            // #import ruau.component.Component
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:	    // #import ruau.component.InvalidComponent
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:    	//this cover when component is invalid
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:    	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:    	function ReturnsNullForInvalidComponent() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:    		//Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMock(Object.Global(), "ComponentPriv" , function(){this.getEventDispatcher=function(){return null}});
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.isValid = function() {return false};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual = target.deIndex(null,null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Null(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual=null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var localid = "testLocalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid = "testGlobalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMock(Object.Global(), "ComponentPriv" , function(){this.getEventDispatcher=function(){return null}});
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.isValid = function(){return true};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            actual = target.deIndex(localid,globalid);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Null(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        //this cover when passing in globalid, and priv.index[localid]=globalid, note index[localid] here is not an array
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        function RemoveLocalIdFromIndexWhenPassingInGlobalId() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var localid = "testLocalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid = "testGlobalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual=null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                        isArray : function() {return false;}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                "ComponentPriv" : function(){this.getEventDispatcher=function(){return null}}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.isValid = function(){return true};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index = [];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index[localid] = globalid;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.deIndex(localid,globalid);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                actual = target.priv.index[localid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Undefined(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        //This cover when remove only item index[localid] has
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:    	function RemoveLocalIdArrayWhenPassingOnlyItemItHas() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:    		//Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var localid = "testLocalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid = "testGlobalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual=null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                        isArray : function() {return true;}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                "ComponentPriv" : function(){this.getEventDispatcher=function(){return null}}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.isValid = function(){return true};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index = [];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index[localid] = [globalid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.deIndex(localid,globalid);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                actual = target.priv.index[localid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Undefined(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        //this cover basic index array with only two global ids, we remove one of them
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        function ReturnsLocalIdArrayWithGlobalIdPassingInSimple() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var localid = "testLocalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid1 = "testGlobalId1";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid2 = "testGlobalId2";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual= null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var expected= [globalid2];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                        isArray : function() {return true;}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                "ComponentPriv" : function(){this.getEventDispatcher=function(){return null}}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.isValid = function(){return true};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index = [];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index[localid] = [globalid1,globalid2];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.deIndex(localid,globalid1);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                actual = target.priv.index[localid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        //this cover complex situation when there are duplications in index array.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        function ReturnsLocalIdArrayWithGlobalIdPassingInComplex() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var localid = "testLocalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid1 = "testGlobalId1";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid2 = "testGlobalId2";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var expected=[globalid2];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                        isArray : function() {return true;}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                "ComponentPriv" : function(){this.getEventDispatcher=function(){return null}}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.isValid = function(){return true};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index = [];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index[localid] = [globalid1,globalid1,globalid2,globalid1,globalid1];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.deIndex(localid,globalid1);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                actual = target.priv.index[localid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        //this cover when NOT passing in globalid, priv.index exist, what priv.index[localid] has doesn't matter
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        function RemoveLocalIdFromIndexWhenNotPassingInGlobalId() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var localid = "testLocalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual=null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var expected=null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                "ComponentPriv" : function(){this.getEventDispatcher=function(){return null}}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.isValid = function(){return true};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index = [];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index[localid] = "something";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.deIndex(localid);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                actual = target.priv.index[localid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Undefined(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:    	//this cover when component is invalid
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        function ReturnsNullForInvalidComponent() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMock(Object.Global(), "ComponentPriv" , function(){this.getEventDispatcher=function(){return null}});
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.assertValid = function(){return false};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual = target.index(null,null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Null(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        //this cover when index[locaid] does not exist
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        function InitLocalIdWithGlobalId() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var localid = "testLocalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid = "testGlobalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var expected = globalid;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual=null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMock(Object.Global(), "ComponentPriv" , function(){this.getEventDispatcher=function(){return null}});
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.assertValid = function(){return true};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            target.index(localid,globalid);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            actual = target.priv.index[localid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        //this cover when index[locaid] exist but not an array
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        function AppendLocalIdWithGlobalId() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var localid = "testLocalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid = "testGlobalId2";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var original_globalid = "testGlobalId1";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var expected = [original_globalid,globalid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual=null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                        isArray : function() {return false;}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                "ComponentPriv" : function(){this.getEventDispatcher=function(){return null}}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.assertValid = function(){return true};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index = [];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index[localid] = original_globalid;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.index(localid,globalid);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                actual = target.priv.index[localid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        //this cover when index[locaid] is already an array
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:        function AppendLocalIdArrayWithGlobalId() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var localid = "testLocalId";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var globalid = "testGlobalId2";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var original_globalid_array = ["testGlobalId1"];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var expected = ["testGlobalId1",globalid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var actual=null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            var mockPriv = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                        isArray : function() {return true;}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                "ComponentPriv" : function(){this.getEventDispatcher=function(){return null}}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.assertValid = function(){return true};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index = [];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                target.priv.index[localid] = original_globalid_array;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            target.index(localid,globalid);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            actual = target.priv.index[localid];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:		function ReturnsNullForInvalidComponent() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			// Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			var renderingServiceMock = Mocks.GetMock(Object.Global(), "$A",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                            normalize:function(target){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                                return target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:							apply : function(baseObject, members) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:									baseObject[prop] = members[prop];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			var mockPriv = Mocks.GetMock(Object.Global(), "ComponentPriv",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                        this.getEventDispatcher=function(){return null};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                        this.getValueProvider=function(){return null};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:					ComponentPriv.prototype.getEventDispatcher = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:					target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:					target.destroy(false);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			var actual = target.getDef();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			Assert.Null(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:		[ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			// Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			var expected = "Expected ComponentDef";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			var target = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			var mockPriv = Mocks.GetMock(Object.Global(), "ComponentPriv",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:                        this.getEventDispatcher=function(){return null}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:				target = new Component();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:				target.priv.componentDef = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			var actual = target.getDef();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js: * limitations under the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:Function.RegisterNamespace("Test.Ruue.Component");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:Test.Ruue.Component.ComponentDefRegistryTest = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:    Mocks.GetMock(Object.Global(), "window", {})(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:            // #import ruau.component.ComponentDefRegistry
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:    var makeDefDescriptor = function(name) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:            "toString" : function() { return name; },
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:            "getNamespace" : function() { return "namespace:"+name; }
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:    function RuueType() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function HasCorrectRuueType() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = "ComponentDefRegistry";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual = target.ruauType;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function HasCorrectCacheName() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = "componetDefRegistry.catalog";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual = target.cacheName;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:    function isLocalStorageAvailable() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function MockLocalStorageSetRemove(during) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    return Mocks.GetMock(Object.Global(), "window", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		localStorage : {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		// Since the actual file was already imported once, only specify
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		Import("ruau.component.ComponentDefRegistry")
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ShouldReturnTrueIfLocalStorageSupported() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    MockLocalStorageSetRemove(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual = target.isLocalStorageAvailable;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.True(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    return Mocks.GetMock(Object.Global(), "window", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		localStorage : {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		// Since the actual file was already imported once, only specify
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		[ Import("ruau.component.ComponentDefRegistry") ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ShouldReturnFalseIfTestWriteToCacheFails() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = target.isLocalStorageAvailable;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ShouldReturnFalseIfLocalStorageIsNotSupportedByWindow() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    actual = target.isLocalStorageAvailable;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    warning : function(message, error){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    assert : function(condition, message){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			var error = new Error(message);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:            mark: function () {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:            endMark: function () {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:        var mockComponentDef = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                                return makeDefDescriptor(config["descriptor"]);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                warning : function(message, error){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                assert : function(condition, message){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                            var error = new Error(message);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                    mark: function () {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                    endMark: function () {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ThrowsIfConfigParamUndefined() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = "ComponentDef Config required for registration";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = Record.Exception(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    target.getDef(undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = "ComponentDef";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var descriptor = "markup://foo:bar";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.componentDefs[descriptor] = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = target.getDef(descriptor);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function SupportsShortHandFormatOfDescriptor() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = "ComponentDef";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var descriptor = "markup://foo:bar";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.componentDefs[descriptor] = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = target.getDef("foo:bar");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function SupportsDescriptorInMapFormat() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = "ComponentDef";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var descriptor = "markup://foo:bar";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.componentDefs[descriptor] = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = target.getDef({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    "descriptor" : "foo:bar"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var newConfig = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		"descriptor" : "markup://foo:bar",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var registeredDef;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actualDef;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                registeredDef = target.getDef(newConfig);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var registeredConfig = registeredDef["config"];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(newConfig, registeredConfig);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function GetDefFromCacheIfExist() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var newConfig = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		"descriptor" : "markup://foo:bar",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var registeredDef;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actualDef;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                registeredDef = target.getDef(newConfig);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actualDef = target.getDef("markup://foo:bar");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(registeredDef, actualDef);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function WritesConfigToLocalStorageIfNotCached() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:            var descriptor = "layout://foo:bar";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.useLocalCache = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.getConfigFromLocalCache = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.writeToCache = function(desc, config) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = {"descriptor" : desc, "config":config};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var newConfig = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                target.getDef(newConfig);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function FetchConfigFromLocalStorageIfCached() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    //Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var cachedConfig = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			"descriptor" : "layout://foo:bar",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			"controllerDef" : {"Manf":"M**indra"}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.useLocalCache = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.getConfigFromLocalCache = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		return cachedConfig;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.writeToCache = function(descriptor, config) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = undefined;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var newConfig = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		"descriptor" : "layout://foo:bar",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                actualDef = target.getDef(newConfig);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(cachedConfig, actualDef["config"]);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:    function UseLocalCache() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    warning : function(message, error){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ShouldReturnFalseIfLocalStorageNotSupported() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    actual = target.useLocalCache("layout://foo:bar");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ShouldReturnTrueIfLocalStorageAvailableAndLayoutDescriptor() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = target.useLocalCache("layout://foo:bar");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.True(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ShouldReturnFalseIfLocalStorageAvailableAndNonLayoutDescriptor() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = target.useLocalCache("markup://foo:bar");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ShouldReturnFalseOnEmptyArgument() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = target.useLocalCache();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:    function GetLocalCacheCatalog() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ReturnsNullIfLocalStorageNotSupported() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    actual = target.getLocalCacheCatalog();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Null(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ReturnsNewEmptyObjectIfLocalStorageEmpty() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var mockLocalStorage = Mocks.GetMock(Object.Global(),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    "localStorage", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockLocalStorage(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = target.getLocalCacheCatalog();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Empty(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ReturnsJsonDecodedCatalogIfLocalStoragePrimed() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = "Stored Catalog";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var mockLocalStorage = Mocks
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			    Object.Global(),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			    "localStorage",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:				    // Return a good answer only if cache name
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:				    return (!!obj && obj === "componetDefRegistry.catalog") ? expected
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                warning : function(message, error){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		mockLocalStorage(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    actual = target.getLocalCacheCatalog();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:    function GetConfigFromLocalCache() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ReturnsNullIfLocalStorageNotSupported() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    actual = target.getConfigFromLocalCache();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Null(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ReturnsNullIfDefNotInLocalStorageEmpty() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var mockLocalStorage = Mocks.GetMock(Object.Global(),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    "localStorage", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockLocalStorage(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		actual = target.getConfigFromLocalCache();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Null(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function ReturnsJsonDecodedDefIfLocalStoragePrimed() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = "Stored def";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var descriptor = "layout://foo:bar";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var mockLocalStorage = Mocks
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			    Object.Global(),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			    "localStorage",
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:				    // Return a good answer only if descriptor
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:				    return (!!obj && obj === ("componetDefRegistry.catalog"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                warning : function(message, error){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		mockLocalStorage(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    actual = target.getConfigFromLocalCache(descriptor);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:    function WriteToCache() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function NoOpIfLocalStorageIsNotSupported() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual = Record.Exception(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		target.writeToCache("layout://", {});
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Null(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function UpdatesLocalStorageWithJsonEncodedDefIfAvailable() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var storage = {};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:        var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:            warning: function (message, error) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                endMark: function () {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var mockLocalStorage = Mocks.GetMock(Object.Global(),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    "localStorage", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			setItem : function(key, value) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			    storage[key] = value;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.cacheName = "componetDefRegistry.catalog"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.getLocalCacheCatalog = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var descriptor = "layout://foo:bar";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var config = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		mockLocalStorage(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    target.writeToCache(descriptor, config);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    Assert.Equal(config, storage[target.cacheName + "." + descriptor]);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	[Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	function UpdatesLocalStorageWithCatalogIfAvailable() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var storage = {};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:        var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:            warning: function (message, error) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:                endMark: function () {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var mockLocalStorage = Mocks.GetMock(Object.Global(),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    "localStorage", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			setItem : function(key, value) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:			    storage[key] = value;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var target = new ComponentDefRegistry();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.isLocalStorageAvailable = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.cacheName = "componetDefRegistry.catalog"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    target.getLocalCacheCatalog = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var descriptor = "layout://foo:bar";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var config = {};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    mockRuueUtil(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		mockLocalStorage(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:		    target.writeToCache(descriptor, config);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/component/ComponentDefRegistryTest.js:	    var expected = storage[target.cacheName][descriptor];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js: * limitations under the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:Function.RegisterNamespace("Test.Ruue");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:Test.Ruue.RuueComponentServiceTest = function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:    var $A = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            "LibraryDefRegistry": function(){}
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:        assert: function(condition, message) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:                var error = new Error(message);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:                return false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:    //Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:    Mocks.GetMocks(Object.Global(), { "exp": function(){}, "$A":$A})(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:        // #import ruau.RuueComponentService
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:    // Mocks necessary to create a new RuueComponentService Object
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:    var mockOnLoadUtil = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            var expected = "config is required in ComponentService.newComponentAsync(config)";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            mockOnLoadUtil(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:                target = new $A.ns.RuueComponentService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            mockOnLoadUtil(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:                actual = Record.Exception(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:                    target.newComponentAsync(null, function(){}, undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:        function AssertsCallbackIsPresent(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            var expected = "newComponentAsync requires a function as the callback parameter";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            mockOnLoadUtil(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:                target = new $A.ns.RuueComponentService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            mockOnLoadUtil(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:                actual = Record.Exception(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:                    target.newComponentAsync(null, undefined, {});
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueComponentServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js: * limitations under the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:Function.RegisterNamespace("Test.Ruue");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:Test.Ruue.RuueHistoryServiceTest = function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:    var $A = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:    //Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:    Mocks.GetMocks(Object.Global(), { "exp": function(){}, "$A":$A})(function(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        // #import ruau.RuueHistoryService
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:    var mockIsIOSWebViewTrue = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:    var mockIsIOSWebViewFalse = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                return false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function UsePushStatePushesUrlWithToken(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            // if history.pushState is supported, call it setting the url to #<token>
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var token = "theToken";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var expected = "#" + token;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var mockPushState = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                        pushState: function(state, title, url){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                            actual = url;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            historyService.usePushState = function() { return true; };
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            historyService.changeHandler = function() {};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            mockPushState(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function NonPushStateSetsLocationHash(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            // if history.pushState is not supported, set window.location hash to #<token>
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var token = "theToken";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var expected = "#" + token;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var windowMock = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                location: {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    hash: "initial"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var mockLocationHash = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            historyService.usePushState = function() { return false; };
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            mockLocationHash(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                mockIsIOSWebViewFalse(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    actual = windowMock.location.hash;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function iOS7WebViewPushesTokenToHistoryArray(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            // if on iOS WebView, track token manually via history array
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var token = "theToken";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var expectedHash = "#" + token;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var windowMock = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                location: {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    hash: "initial"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var mockLocationHash = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            historyService.usePushState = function() { return false; };
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actualHash;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyEntry;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            mockLocationHash(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                actualHash = windowMock.location.hash;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(token, historyEntry); // verify token is pushed to history array
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(expectedHash, actualHash); // verify location hash set
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:    function usePushState(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        var mockUserAgentNativeAndroid = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                navigator: {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    userAgent: "Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    pushState: true
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        var mockUserAgentChromeAndroid = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                navigator: {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    userAgent: "Mozilla/5.0 (Linux; Android 4.2.2; Galaxy Nexus Build/IMM76B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.72 Mobile Safari/537.36"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    pushState: true
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function ReturnsFalseIfIOS7WebView() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual; 
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    actual = historyService.usePushState();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function ReturnsFalseIfNativeAndroid() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual; 
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            mockUserAgentNativeAndroid(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                mockIsIOSWebViewFalse(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    actual = historyService.usePushState();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual; 
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                mockIsIOSWebViewFalse(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    actual = historyService.usePushState();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.True(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:    function forward(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function NonIOSWebViewCallsHistoryGo(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            // Non iOS WebView should call window.history.go function
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual = "initial";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var expected = 1;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var mockHistory = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                        go: function(param){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                            actual = param;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                mockIsIOSWebViewFalse(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    historyService.forward();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function IOSWebViewSetsLocationHash(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            // iOS WebView will set the window.location hash
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var token = "theToken";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var expected = "#" + token;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var windowMock = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                location: {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    hash: "initial"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var mockLocationHash = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            mockLocationHash(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    historyService.forward();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    actual = windowMock.location.hash;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:    function back(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function NonIOSWebViewCallsHistoryGo(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            // Non iOS WebView should call window.history.go function
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual = "initial";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var expected = -1;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var mockHistory = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                        go: function(param){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                            actual = param;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                mockIsIOSWebViewFalse(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    historyService.back();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function IOSWebViewSetsLocationHash(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            // iOS WebView will set the window.location hash
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var token = "theToken";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var expected = "#" + token;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var windowMock = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                location: {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    hash: "initial"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var mockLocationHash = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            mockLocationHash(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    historyService.back();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    actual = windowMock.location.hash;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:        function IOSWebViewResetsIfAtStart(){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            // iOS WebView will call reset and set window.location hash to "" if at start
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var expected = "";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var expectedHistory = [];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var windowMock = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                location: {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    hash: "initial"
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var mockLocationHash = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            var historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            mockLocationHash(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    historyService.back();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:                    actual = windowMock.location.hash;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueHistoryServiceTest.js:            Assert.Equal(expectedHistory, historyService.history); // verify history array is reset
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js: * limitations under the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:Function.RegisterNamespace("Test.Ruue.Storage.Adapters");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:Test.Ruue.Storage.Adapters.SizeEstimatorTest = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:    var ruauMock=function(delegate){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        Mocks.GetMocks(Object.Global(),{
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            window: Object.Global(),
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            document: { createDocumentFragment: function() {} },
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            Transport: function() {},
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            NumberFormat: {},
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:                    isArray: function(value) { return Array.isArray(value); },
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            navigator: { userAgent:'' }
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            // #import ruau.storage.adapters.SizeEstimator
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            delegate();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:    var checkEstimateSize = function(value, expectedSize) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        var result;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        ruauMock(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var target = new SizeEstimator();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            result = target.estimateSize(value);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        Assert.Equal(expectedSize, result);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:    function estimateSize() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateBoolean() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 4;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateInteger() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = 1;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 8;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateFloat() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = 1e8;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 8;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateNull() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 0;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateUndefined() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = undefined;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 0;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateString6() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = "123456";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 12;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateString10() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = "1234567890";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 20;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateArray2() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = [ 1, 3 ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 5;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateArray4() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = [ 1, "a", "b", 3 ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 13;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateArrayCycle() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = [ 1, 3 ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            value.push(value);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 0; // cycle is size 0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateArrayCycleSneakyCheater() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = [ 1, 3 ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            value.push(value);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 0;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var result;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            ruauMock(function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:                var target = new SizeEstimator();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:                result = target.estimateSize(value, [ value ]);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            Assert.Equal(expected, result);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateSimpleObject() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = { "a":"a" };
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 9;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateSimpleCycle() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = { "a":"a" };
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            value["b"] = value;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 0; // cycle is size 0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateComplexCycle() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = { "a":"a" };
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var array = [ value ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value2 = { "a":"a", "b":array };
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var array2 = [ value2 ];
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            value["b"] = array2;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 0; // cycle is size 0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        [Fact]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:        function estimateFunction() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var value = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            var expected = 8;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/storage/adapters/SizeEstimatorTest.js:            checkEstimateSize(value, expected);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js: * limitations under the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js:Function.RegisterNamespace("Test.Ruue");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js:Test.Ruue.RuueTest = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js:	Mocks.GetMock(Object.Global(), "exp", function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js:		// #import ruau.RuueEventService
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js:	function getStubMethod(args, returnValue){
ruau/ruau-impl/SouRCeS/test/javascript/ruau/RuueEventServiceTest.js:		return Stubs.GetMethod(args, returnValue);	
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js: * limitations under the License.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:Function.RegisterNamespace("Test.Ruue.Controller");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:Test.Ruue.Controller.ActionTest = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    // Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    Mocks.GetMock(Object.Global(), "exp", function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        // #import ruau.controller.Action
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    var targetNextActionId = 123;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    var mockActionId = Mocks.GetMock(Action.prototype, "nextActionId", targetNextActionId);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function SetsStateToNew() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "NEW";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.state;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = targetNextActionId;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.actionId;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = targetNextActionId + 1;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                actual = Action.prototype.nextActionId;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        var targetContextNum = "expectedContextNum";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        var mockContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        return targetContextNum;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.id = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getId();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = String.Format("{0};{1}", targetNextActionId, targetContextNum);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    actual = new Action(null, targetContextNum).getId();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = String.Format("{0};{1}", targetNextActionId, targetContextNum);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    target = new Action(null, targetContextNum);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    target.getId();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.id;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function GetNextGlobalId() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = 1;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getNextGlobalId();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ReturnsNextGlobalIdWhenSet() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = 123;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.nextGlobalId = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getNextGlobalId();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = 100;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.nextGlobalId = 99;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.getNextGlobalId();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.nextGlobalId;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.def = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getDef();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function SetParams() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function MapsKeyInParamDefsToConfig() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var paramDefs = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action(null, null, null, paramDefs);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var config = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.setParams(config);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            }, target.params);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ClearsPreviouslySetParamsIfMissingFromConfig() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var paramDefs = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var config = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action(null, null, null, paramDefs);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.params["key1"] = "existing";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.setParams(config);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            }, target.params);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function DoesNotSetParamsWithoutDefs() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var paramDefs = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var config = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action(null, null, null, paramDefs);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.setParams(config);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            }, target.params);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function GetParam() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ReturnsValueFromParamsIfKeyFound() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var paramsKey = "key";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.params[paramsKey] = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getParam(paramsKey);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var paramsKey = "key";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.params = {};
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getParam(paramsKey);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Undefined(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function GetParams() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ReturnsParamsObject() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.params = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getParams();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.cmp = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getComponent();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function SetCallback() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        var mockContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function SetsCallbackWhenNameSet() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedScope = "expectedScope";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedCallback = "expectedCallback";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var name = "SUCCESS";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.setCallback(expectedScope, expectedCallback, name);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    fn : expectedCallback
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            }, target.callbacks);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ThrowsErrorWhenNameIsInvalid() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var stubbedError = Stubs.GetMethod("msg", null);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var name = "someInvalidName";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.setCallback(null, null, name);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal("Illegal name " + name, stubbedError.Calls[0].Arguments.msg);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function SetsAllCallbacksAndScopeWhenNameUndefined() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedScope = "expectedScope";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedCallback = "expectedCallback";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                fn : expectedCallback
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.setCallback(expectedScope, expectedCallback);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            }, target.callbacks);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function SetsAllCallbacksAndScopeWhenNameAll() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedScope = "expectedScope";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedCallback = "expectedCallback";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                fn : expectedCallback
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.setCallback(expectedScope, expectedCallback, "ALL");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal({
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            }, target.callbacks);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ThrowsErrorIfCallbackNotAFunction() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "Action callback should be a function";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var mockContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    actual = msg;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        return false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.setCallback();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function SetAllAboardCallback() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        var mockContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        var mockErrorContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    return false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ConstructorClearsCallback() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Undefined(target.allAboardCallback);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function SetsCallback() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedScope = "expectedScope";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedCallback = "expectedCallback";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.setAllAboardCallback(expectedScope, expectedCallback);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Assert (we can't tell exactly what it is, so just look for set).
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.False(target.allAboardCallback === undefined);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function WrapCallback() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function SetsCallbackToCurrentCallbackThenNewCallback() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedScope = "expectedScope";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var outerCallbackFlag = false; // Set when function passed in as param is called
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var outerCallback = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                outerCallbackFlag = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.getState = function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.callbacks = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    "fn" : function(scope, callback) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        if (outerCallbackFlag) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                            Assert.Fail("New callback called before current callback");
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.setCallback = function(scope, func) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                func.call(scope); // Call what the new callback is set as to test logic inside
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.wrapCallback(null, outerCallback);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.True(outerCallbackFlag);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function RunDeprecated() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                assert : function(param) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    actual = param;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var def = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var cmp = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var meth = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                call : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.def = def;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.meth = meth;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.cmp = cmp;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.runDeprecated();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function LogsFailMessageOnException() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedName = "expectedName";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedQualifiedName = "expectedQN";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "Action failed: " + expectedQualifiedName + " -> " + expectedName;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var sentToServer = false;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                assert : function(param) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                warning : function(msg) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    actual = msg;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                get : function(actDesc) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        setStorable : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        setAbortable : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        setParams : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        setCallback : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var cmp = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                                getQualifiedName : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                                    return expectedQualifiedName;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.cmp = cmp;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.def = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        getQualifiedName : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                            return expectedQualifiedName;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                getName : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                    return expectedName;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.runDeprecated();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(true, sentToServer);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // FIXME: re-enable after client side creation fixed.
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function SetsStateToSuccess() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedState = "SUCCESS";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                assert : function(param) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var def = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var cmp = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var meth = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                call : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.def = def;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.meth = meth;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.cmp = cmp;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.runDeprecated();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expectedState, target.state);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function SetsStateToFailureOnException() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedState = "FAILURE";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // We also use this test to check that reportFailure failures are NOT re-sent
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var sentToServer = 0;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                assert : function(param) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                warning : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                get : function(actDesc) {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        setStorable : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        setAbortable : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        setParams : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        setCallback : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var cmp = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                                getQualifiedName : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.cmp = cmp;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.def = {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                        getQualifiedName : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                            return "ruau://ComponentController.reportFailedAction";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                getName : function() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:                target.runDeprecated();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expectedState, target.state);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(1, sentToServer);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function GetState() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ReturnsState() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.state = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getState();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function GetReturnValue() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ReturnsReturnValue() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.returnValue = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getReturnValue();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.error = expected;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.getError();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function IsBackground() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ReturnsTrueIfBackgroundSet() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.background = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.isBackground();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.True(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseIfBackgroundNotSet() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.isBackground();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseIfBackgroundNotTrue() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.background = "true";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.isBackground();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.False(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:    function SetBackground() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function SetsBackgroundToTrue() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.setBackground();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.background;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.True(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        function CannotSetBackgroundToFalse() {
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.background = true;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            target.setBackground(false);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var actual = target.background;
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            Assert.True(actual);
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/SouRCeS/test/javascript/ruau/controller/ActionTest.js:            var expectedReturn = "expectedReturn";
