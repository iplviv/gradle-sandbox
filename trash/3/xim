ruau/xlog.full:  js_ui.pagerNextPrevious$testWithoutPassingAttributesValues(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.pagerNextPrevious$testCalculatedFieldsForLastPage(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.carousel$testCarouselNavTop(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.pagerNextPrevious$testMiddlePage(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.pagerNextPrevious$testCalculatedFieldsForFirstPage(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testInvalidTimeZoneUsingValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.pagerNextPrevious$testLastPage(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testInvalidLangLocale(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.pagerNextPrevious$testFilterListWithJustOnePage(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testTimeInGMT(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.pagerNextPrevious$testDefaultPageSize(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testMillisecondInFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testEmptyStringLangLocale(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testInvalidFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testEmptyFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testInvalidValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testTimeInLA(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testLanguage(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testDefaultLangLocale(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testEmptyStringValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testTimeInNewYork(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputEmail$testLabel(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputEmail$testValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputDateTime$testInitialValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputEmail$testLabelEmpty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputEmail$testValueInvalidWithClass(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputEmail$testValueInvalid(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.tabItem$testClosable(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.tabItem$testTitle(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputEmail$testValueEmptyString(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testUpdateFormatNoChange(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testUnassignedFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testPositiveValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testUpdateValueNoChange(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testUpdateFormatWithSame(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testPrecision(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testScaleNegative(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testUpdateFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testUpdateValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testRounding(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testInvalidFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testUpdateValueWithSame(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testScalePositive(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputPercent$testNegativeValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCheckbox$testDisabled(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCheckbox$testName(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCheckbox$testType(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCheckbox$testRerender(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCheckbox$testNotDisabled(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCheckbox$testSelectedValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCheckbox$testUnselectedValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testValueScaleWithFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testUpdateValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCheckbox$testSelecting(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testValueScale(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testUpdateFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testPercentDisplayed(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testPositiveValueWithFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testNegativeValueWithFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testInvalidFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testPrecision(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputTextArea$testNotReadonly(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputTextArea$testValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputPercent$testRounding(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputTextArea$testNotDisabled(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputTextArea$testDisabled(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputTextArea$testRows(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputTextArea$testCols(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.panelDialog$testModalDetailOnly(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputTextArea$testResizable(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputTextArea$testReadonly(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.panelDialog$testModalSpecialCharecter(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.panelDialog$testModalTitleAndDetailOnly(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.panelDialog$testModalTitleOnly(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.panelDialog$testNonModalAllAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.panelDialog$testModalNoScroller(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.panelDialog$testModalAllAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testSmallValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testStep(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputMultiSelect$testSingleEntry(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputMultiSelect$testEmptyValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testDefaultDecimalPrecision(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testZeroValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testDisabled(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testUpdateFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testRoundingLotsOfNinesAndZeroPadding(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testMin(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testLargeValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testNegativeValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testAppendingZeroToMatchFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testNumberFormatUnrecognizedFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testNumberFormatInvalidFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testDecimalValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testNumberFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testIntValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testNegativeValueWithNegativeFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testEmptyValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testUpdateValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testRoundingLotsOfNines(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testUnassigned(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testFormat2DecimalPlaces_RoundDown(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testNumberFormatEmptyString(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testFormat2DecimalPlaces_RoundUp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testFormatDoesNotRestrictIntegerValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testMax(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputCheckbox$testRerenderChecked(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputCheckbox$testChecked(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputNumber$testBigDecimal(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.spinner$testHideIndicator(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputCheckbox$testRerenderUnchecked(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputCheckbox$testUnchecked(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRichText$testToolbarTypeBasic(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.spinner$testInitializeHidden(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.spinner$testShowIndicator(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRichText$testRichTextContent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRichText$testRichTextInvalidDimensions(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRichText$testToolbarTypeFull(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRichText$testToolbarTypeStandard(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRichText$testToolbarLocationInvalid(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRichText$testToolbarLocationBottom(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRadio$testClick(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRichText$testToolbarTypeEmail(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRichText$testDisableRichText(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testTitle(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRadio$testNotDisabled(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputRadio$testDisabled(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testValueOnlyParams(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testDir(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testDisabled(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testLabel(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testLabelMissing(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testNoLabelNoAlt(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testLabelDirty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testIconClassMissing(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testValueOnlyFragment(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testIconClassDirty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testValueEmpty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testDisabledDirty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testTitleDirty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testTitleMissing(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testValueFragmentDirty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testLabelAndIgnorePassedInAlt(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testNoLabelWithAlt(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testIconClass(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testDirMissing(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testValueDirty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testIconClassEmpty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testValueMailto(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testLabelEmpty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testTitleEmpty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testDirDirty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCurrency$testUpdateValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCurrency$testCurrency(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testInvalidLangLocale(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testEmptyStringForFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testDefaultFormatWithBefore1970(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputURL$testDisabledMissing(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCurrency$testCurrencyWithFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.inputCurrency$testUpdateFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testEmptyStringValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testAllPossibleFormats(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testEmptyLangLocale(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testInvalidFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testLangLocale(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testDefaultLangLocale(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testDefaultFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testUndefinedValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testInvalidValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ui.outputDate$testChangeLangLocale(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_renderingTest.test$testRenderingComponentArrayInFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_renderingTest.testEventHandlerChain$testRerenderingThroughActionChaining(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_renderingTest.arrayValueRerendering$testRerenderOrdering(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_renderingTest.html$testCleanUpOfCommentTags(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.newLabels$testLabelAsExpressionComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_renderingTest.test$testRenderingComponentArrayInMyBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_renderingTest.test$testRenderRerenderOfExpressions(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.labelProvider$testGetWithNonFunctionCallback(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.labelProvider$testGetWithCallback(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.newLabels$testLabelAsAttribute(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_renderingTest.html$testRenderingHtmlMarkupWithoutBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.labelProvider$testNonExistingLabel(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.labelProvider$testPartialLabelExpressions(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.labelProvider$testNonGVP(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.labelProvider$testInvalidGVPExpressions(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.labelProvider$testNonExistingSection(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.labelProvider$testGVPCallback(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.dynamicLabels$testFetchLabelAndLoadComponentWithLabel(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.dynamicLabels$testNewLabelsInDynamicComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.labelProvider$testAsyncLabelProvider(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.withPersistentStorage$testGvpsPersistInStorage(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.loadFromStorage$testMockAdapterSelected(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.loadFromStorage$testRuueInitWaitsForGetItem(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.parseLabels$testLabelsInProviderAreParsed(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.parseLabels$testLabelsInHelperAreParsed(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.parseLabels$testLabelsInRendererAreParsed(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.browserProvider$testNonExistingBrowserInfo(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.browserProvider$testDesktopBrowser(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_gvpTest.parseLabels$testLabelsInControllerAreParsed(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.multipleHandlersForEvent$testApplication(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.eventScope$testComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.eventScope$testApplication(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.fireFromServer$testAttachingSameEventWithDifferentAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.fireFromServer$testEventHandlerChaining(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.multipleHandlersForEvent$testComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.cHandlesEventFromAandB$testAIsCorrectCmp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.fireFromServer$testAttachingSingleEventInServerAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.fireFromServer$testAttachingMultipleEventsInServerAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.cHandlesEventFromAandB$testIsBCorrectCmp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.cHandlesEventFromAandB$testIsBCorrectCmpEvtB(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.cHandlesEventFromAandB$testIsCCorrectCmpEvtB(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.bHandlesEventFromA$testIsBCorrectCmp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.bHandlesEventFromA$testIsBCorrectCmpEvtB(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.bHandlesEventFromA$testAIsCorrectCmp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.undefined$testEvaluations(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.null$testEvaluations(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_handleEventTest.aHandlesEventFromA$testIsCorrectCmp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.arrayValue$testLengthInnerCmp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.arrayValue$testInsert(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.arrayValue$testRemove(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.arrayValue$testSetArrayValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.arrayValue$testLength(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.arrayValue$testSetArrayToUndefined(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.bodyAttribute$testClearSimpleCmpBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.arrayValue$testSetArrayToNull(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.bodyAttribute$testSettingCustomCmpBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.bodyAttribute$testAddingCustomCmpBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testMapServerAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.bodyAttribute$testSettingSimpleCmpBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testSetNewSubmap(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.bodyAttribute$testAddingSimpleCmpBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.bodyAttribute$testClearCustomCmpBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testMapSubkeyHandler(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testSetMapToUndefined(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testSetNewSubarray(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testSetMapValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testMapHandler(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testSetMapToNull(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testGetWithPropertyReference(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.mapValue$testMapModel(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.simpleValue$testCreateSimpleValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.simpleValue$testGetSetSimpleValues(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.functions$testEvaluations(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.serializeToContainer$testSerializeTo(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.customAttributeType$testCustomAttributeThroughURL(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.newCmpFromServerWDefaultAttrValues$testNewComponentFromServerWithDefaultValues(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.simpleValue$testMakeDirtyIndirectly(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_expressionTest.arrays$testEvaluations(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.simpleValue$testSimpleValueIsValid(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.simpleValue$testSimpleValueSetInValid(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.simpleValue$testSimpleValueProperties(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.customAttributeType$testCustomAttributeType(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.serializeTo$testSerializeTo(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.caseInsensitiveChild$testCaseSensitivityWhenSettingParentAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.simpleValue$testErrorFunctionsOnSimpleValueObject(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingListToFacet_DeleteItemFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingMapToFacet_DeleteItemOuter(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingMapToFacet_ModifyFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingListToFacet_ModifyFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingListToFacet_ModifyOuter(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingListToFacet_DeleteItemOuter(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingMapToFacet_ModifyOuter(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingListToFacet_AppendOuter(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingMapToFacet_AppendOuter(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingIntToFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testFacetDestroy(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testNestedListValuesMarkedDirty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testNestedMapValuesMarkedDirty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingMapToFacet_DeleteItemFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingMapToFacet_AppendFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testClientSideComponentCreation(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testObjectDataTypeAndDefaultValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testMapDataTypeAndDefaultValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.passByReference$testPassingListToFacet_AppendFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testNewComponentDefaultValueBasicDataTypes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testCaseSensitivity(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testListDataTypeAndDefaultValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testChangingAttributesWithDefalutValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testNewComponentChangingDefaultValues(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testBasicDataTypeAndDefaultValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testDefaultValueType(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testNewComponentDefaultValueObjectDataType(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.stubWithClientProvider$testSimpleComponentProvided(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testNewComponentDefaultValueListDataType(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.stubWithClientProvider$testExtendedComponentHasItsOwnAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testDefaultValueComponentArrayIsArrayOfComponents(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_attributesTest.defaultValue$testNewComponentDefaultValueMapDataType(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedProviderConfig(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedPrefixedDescriptor(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedDescriptorNotPreloadedError(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedDescriptor(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedConfig(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedConfigWithPrefixedDescriptor(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedServerDependent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedProvider(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedUndefinedDescriptor(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_whitespaceBehaviorTest.preserveWhitespace$testPreserveWhitespace(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedUnknownDescriptor(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_whitespaceBehaviorTest.optimizeWhitespace$testOptimizeWhitespace(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testGroupedAbortsThenMixedGroup(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedNullDescriptor(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_provider.newComponent$testClientProvidedDescriptorNotPreloaded(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testAbortThenMixedGroup(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testMixedGroupStartingWithAbortThenAbort(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testGroupedAbortsThenNothing(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testMixedGroupEndingWithAbortThenAbort(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testGroupedAbortsThenNot(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testAbortThenNot(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testGroupedAbortsThenAbort(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testAbortThenAbort(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testMixedGroupThenMixedGroup(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testAbortOnEnqueueIfParentEffectivelyAborted(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testGroupedAbortsThenGroupedAborts(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.runActions$testNoAborts(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testAbortOnEnqueueIfParentAborted(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testMaxNumForegroundServerAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testAbortInFlightAbortable(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testAbortAfterEnqueueIfParentAborted(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testAbortQueuedAbortable(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testPollBatchedForegroundAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testNoAbortIfParentOf(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testRunActionsForcesQueue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testStorableRefresh(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testPollSingleBackgroundAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testMultipleCabooseActions(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testCabooseAllAboardCallbackSetsParam(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testAbortStorable(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testBackgroundClientActionNotQueued(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testMaxNumBackgroundServerAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testRunActionsQueued(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testBackgroundCabooseAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testAbortIfNotParentOf(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testEnqueueClientAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testMultipleAllAboardCallbacks(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testCabooseWithClientAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testRunActionsWithoutBypass(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testConnection(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testParallelStorable(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.enqueueAction$testAbortInFlightStorable(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testSetConnectedFalse(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testConnectionResumedForLayout(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testSetConnectedTrueAfterDisconnect(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testConnectionLostForLayout(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testConnectionResumed(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testSetConnectedTrueWhenConnected(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testConnectionLost(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testSetConnectedFalseThenDisconnect(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testSetConnectedTrueAfterReconnect(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.connectivity$testSetConnectedFalseAfterDisconnect(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.actionStorage$testErrorHandlerHook(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.actionStorage$testInvalidate(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.actionStorage$testRevalidate(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.assertTest$testAssertFail(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.assertTest$testAssertPass(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientServiceTest.actionStorage$testIsInStorage(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.arrayIndexOf$testArrayIndexOnEmptyArray(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.removeElement$testRemoveParentedText(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.arrayIndexOf$testArrayIndex(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.removeElement$testRemoveParentedDiv(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.arrayIndexOf$testArrayIndexOnArrayFromComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.removeElement$testRemoveUnparentedText(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.removeElement$testRemoveElementTrashesOnce(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.arrayIndexOf$testArrayIndexOnNullArray(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testEmptyErrorObjectAsMessageParam(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testErrorObjectAsMessageParam(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testStringForErrorParam(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.removeElement$testRemoveUnparentedDiv(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testMapAsMessageParam(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testSimpleString(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testDuplicateErrorMsgAllExpected(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testStackTracePresent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testEscapedHtml(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testHtmlMarkup(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.eventBinding$testMultipleEventHandlersOnHtmlElement(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.eventBinding$testEventsBubbleUpDom(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.errorTest$testMessageAndError(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.timeoutCallback$testPeriodReset(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.cssStyleTest$testNewDepStylesAppendedToHead(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.cssStyleTest$testCssClassNames(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.ruauWarningTest$testExpectedWarning(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.timeoutCallback$testBasicWait(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.timeoutCallback$testRepeatedInvoke(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.jsonMethodExposure$testJsonEncodeMethodIsExposed(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.jsonMethodExposure$testArrayWithToJSON(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.utilTests$testValidComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.jsonMethodExposure$testJsonDecodeMethodIsNotExposed(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.ruauWarningTest$testNoFailOnWarning(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.utilTests$testRemoveDataAttribute(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.utilTests$testIsComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.jsonMethodExposure$testArrayWithoutToJSON(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.componentBodyWithChanges$testAAWithDefaultList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.utilTests$testDataAttributeInvalidNodeType(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.componentBodyWithChanges$testABWithDefaultList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_clientApiTest.utilTests$testGetAndSetDataAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.simpleExtends$testAttributeResolves(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.componentBodyWithChanges$testMixAndMatch(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.componentBodyWithChanges$testAIWithDefaultList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testNested(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testIfTrue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testDefaultLayoutItem(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testMultipleIteration(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testRoot(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testAddMultipleClientCmp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testAddClientCmp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testAddMultipleIterations(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testChangeLayoutItem(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testActionLayoutItem(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testAddAdditionalIteration(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testIfFalse(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testAddServerCmp(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testAddInitialIteration(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.destroy$testDestroyOnParentAwareFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testIfChangedToTrue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testIfChangedToFalse(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.destroy$testIsValidSynchronousDestroy(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.destroy$testIsValidAsynchronousDestroy(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.creationPath$testSingleIteration(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.findWithDefRefs$testFindWithComponentDefRefs(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.renderNestedComponents$testSettingOuterThenInner(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.destroy$testDestroyOnChainedFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.clientComponent$testAddOutputNumber(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.associateElement$testComponentEchoingBody(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.findUsingInstanceOf$testFindByQualifiedName(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_forEachDefTest.forEachDefParent$testIterationOfStringList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_forEachDefTest.forEachDefParent$testIterationOfBooleanList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_forEachDefTest.emptyLists$testEmptyLists(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_componentTest.clientComponent$testAddOutputCurrency(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_forEachDefTest.basicDataType$testIterationOfNumberList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_forEachDefTest.basicDataType$testIterationOfStringList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_forEachDefTest.singleComponentAttribute$testForEach(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_forEachDefTest.forEachDefParent$testIterationOfNumberList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testStringConfigAsNotFullyQualifiedName(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testAlternateConfigFormat(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_forEachDefTest.basicDataType$testIterationOfBooleanList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreationOfKitchenSink(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testFetchNewDefFromServer(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreatePreloadedDefWithServerDependencies(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateNonExistingComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testNoConfig(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateComponentWithSimpleAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateAbstractComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateMultipleLevelServerDef(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testVerifyActionsOnNewComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testNotFullyQualifiedNameInConfig(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateComponentWithLazyFacet(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateComponentExclusively(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateSameComponentMultipleTimes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateBadServerComponent(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testPreloadedDef(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testNullCallbackScope(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateDependencyDef(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateComponentWithComplexAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testSetLocalId(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testCreateCmpNoDescriptor(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.loadSimpleAttributes$testUndefinedValues(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.lazyLoadInRenderIf$testRenderIf(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.createNewCmp$testSetLocalIdServerDependencies(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.newCmpWithValueProvider$testMapValueProviderForDefFetchedFromServer(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.lazyLoadForEach$testLazyLoadingSimpleComponentInforEach(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.loadSimpleAttributes$testInitialValues(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.newCmpWithValueProvider$testNewComponentWithoutDependenceOnAVP(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.newCmpWithValueProvider$testValueProviderForDefFetchedFromServer(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.newCmpWithValueProvider$testPassThroughValueAsValueProvider(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.loadLevel$testNestedLazy(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.loadLevel$testExclusive(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.loadLevel$testMissingRequiredAttribute(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.newCmpWithValueProvider$testValueProviderForPreloadedDef(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.lazyLoadBasicTypes$testLazyLoadingRuueLabel(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.lazyLoadBasicTypes$testLazyLoadingRuueText(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.loadLevel$testLazy(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfServer$testEmpty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfServer$testTrue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfServer$testFalse(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_loadLevelTest.lazyLoadBasicTypes$testHtmlExpressionAreNotLazilyLoaded(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfNested$testOuterTrue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfServer$testLiterals(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testRenderIfNested$testInitialStateTF(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfServer$testUndefined(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testRenderIfNested$testInitialStateDefault(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testRenderIfNested$testInitialStateTT(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfNested$testOuterFalse(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfElse$testTrue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testRenderIfNested$testInitialStateFF(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testRenderIfNested$testInitialStateFT(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIf$testTrue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIf$testEmpty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfElse$testFalse(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfElse$testUndefined(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfElse$testEmptyString(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIf$testFalse(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIf$testLiterals(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIf$testUndefined(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfWithIterationInside$testRREE(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfWithIterationInside$testRERE(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ifTest.testIfWithIterationInside$testEERR(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.parent$testSettingValueOfInheritedSimpleAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.cmpTotestAbstractCmp$testSettingAttributeValueInheritedFromAbstractComponents(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.abstractCmpExtension$testSettingValueOfAbstractParentsSimpleAttributes(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.typeCoercion$testAttributeSetFromTest(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.typeCoercion$testAttributeSetFromTestArrayAttribute(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.typeCoercion$testProgrammaticCreateFromConfig(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.grandparent$testComponentAsAttributeValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.grandparent$testSimpleAttributeValue(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.typeCoercion$testSetBodyAsNonArray(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_cmpQueryLanguage.query$testQueryDynamicallyAddedComponents(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_cmpQueryLanguage.query$testGroupBy(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_setAttributesTest.attributesChild$testAttributeSetByChildDefault(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_cmpQueryLanguage.query$testFields(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_cmpQueryLanguage.query$testDerivedFields(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_cmpQueryLanguage.query$testQueryOnCustomViews(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_cmpQueryLanguage.query$testWhere(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_utilTest.defaultUtils$testKeys(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_utilTest.defaultUtils$testForEach(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_cmpQueryLanguage.query$testDefaultViewAndDefaultFields(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_cmpQueryLanguage.query$testMultipleFields(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_utilTest.defaultUtils$testSome(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_utilTest.defaultUtils$testFilter(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_utilTest.defaultUtils$testReduce(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_utilTest.defaultUtils$testBind(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_utilTest.defaultUtils$testEvery(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_utilTest.defaultUtils$testMap(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_valueChange.simpleValueChange$testString(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_valueChange.simpleValueChange$testMap(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_utilTest.defaultUtils$testMerge(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_valueChange.componentInit$testNewComponentFiresInit(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_valueChange.simpleValueChange$testSingleChain(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_valueChange.simpleValueChange$testList(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_valueChange.componentInit$testInitEventNotFiredForAttributeValues(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_valueChange.componentInit$testInitEventFired(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_valueChange.componentInit$testInitEventOnFacetInitialization(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_docstest.searchFilterTreeTest$testMultipleRoots(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_docstest.searchFilterTreeTest$testMultipleMatch(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_docstest.searchFilterTreeTest$testSingleModelNode(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ruau.label$testValueEmpty(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ruau.label$testValueOfTokenOnly(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_updateTest.updateHandling$testOutdatedServerAction(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ruau.label$testValueString(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_ruau.label$testValueWithTokens(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_docstest.searchFilterTreeTest$testAllAndNothing(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testServerErrorUsingOnError(org.ruauframework.components.ui.inputError.InputErrorUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_docstest.searchFilterTreeTest$testOneLevelSearch(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPopupCloseOnClickInsideAndOutside(org.ruauframework.components.ui.popup.PopupUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testErrorWithoutSettingErrorMessage(org.ruauframework.components.ui.inputError.InputErrorUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_appCache.appCacheEvents$testAppCacheEvents(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPopupCloseOnTriggerClickOnly(org.ruauframework.components.ui.popup.PopupUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPopupCloseOnClickOutside(org.ruauframework.components.ui.popup.PopupUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPopupWithExtendedTarget(org.ruauframework.components.ui.popup.PopupUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPopupCloseOnClickInside(org.ruauframework.components.ui.popup.PopupUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPopupWithCurtain(org.ruauframework.components.ui.popup.PopupUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMovingPastLastPage(org.ruauframework.components.ui.carousel.CarouselUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPopupCustomTrigger(org.ruauframework.components.ui.popup.PopupUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testTabOutOfCarousel(org.ruauframework.components.ui.carousel.CarouselUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGoToNextPage(org.ruauframework.components.ui.carousel.CarouselUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPopupWithLabelTarget(org.ruauframework.components.ui.popup.PopupUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPopupManualPosition(org.ruauframework.components.ui.popup.PopupUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testUpArrow(org.ruauframework.components.ui.carousel.CarouselUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGoToPreviousPage(org.ruauframework.components.ui.carousel.CarouselUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testShiftTabOutOfCarousel(org.ruauframework.components.ui.carousel.CarouselUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMovingBeforeFirstPage(org.ruauframework.components.ui.carousel.CarouselUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDownArrow(org.ruauframework.components.ui.carousel.CarouselUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testTabIntoCarouselPage(org.ruauframework.components.ui.carousel.CarouselUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testResourceTimingAPI(org.ruauframework.test.perf.MiscPerfFrameworkTest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNestedIteration(org.ruauframework.components.ruau.iteration.IterationUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testSimpleIteration(org.ruauframework.components.ruau.iteration.IterationUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testUsedJSHeapSize(org.ruauframework.test.perf.MiscPerfFrameworkTest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMultipleRunsReuseWebDriver(org.ruauframework.test.perf.MiscPerfFrameworkTest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMultipleRunsNewWebDriver(org.ruauframework.test.perf.MiscPerfFrameworkTest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testLabel(org.ruauframework.test.perf.MeasuringPerfMetricsTest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testButton(org.ruauframework.test.perf.MeasuringPerfMetricsTest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testOnClickIsCaseSensitive(org.ruauframework.components.ui.html.onclickCaseSensitiveUITest.onclickCaseSensitiveUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testProfile(org.ruauframework.test.perf.MiscPerfFrameworkTest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testTabOutOfListSorter(org.ruauframework.components.ui.listSorter.ListSorterUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testInputSelectSingle(org.ruauframework.components.ui.inputMultiSelect.InputMultiSelectNestedOptionsUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testRichTextTabbing(org.ruauframework.components.ui.inputRichText.InputRichTextUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDummyPerf(org.ruauframework.test.perf.MeasuringPerfMetricsTest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testListSpecifiedColumns(org.ruauframework.components.ui.listView.ListViewUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDatepickerOpensToCorrectValue(org.ruauframework.component.ui.datePickerManager.DatePickerManagerUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testEscOfListSorter(org.ruauframework.components.ui.listSorter.ListSorterUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testEmptyListGeneratedColumns(org.ruauframework.components.ui.listView.ListViewUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testListGeneratedColumns(org.ruauframework.components.ui.listView.ListViewUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testEmptyListSpecifiedColumns(org.ruauframework.components.ui.listView.ListViewUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteKeyDownEventSupport(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCellClickEvent(org.ruauframework.components.ui.listView.ListViewUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testHeaderClickEvent(org.ruauframework.components.ui.listView.ListViewUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteSingleMatch(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteWithBlurAndFocusEvent(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteComponentInitialRender(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteArrowKeys(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteToggle(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteTabing(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteEmptyListContentOnMatch(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteCustomTemplateComponentRenderOnMatch(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteMatchFunc(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteSingleMatchUsingCustomTemplate(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteWithUpdateOnAttributeSet(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDialogNonModalEscapeButton(org.ruauframework.components.ui.dialogUITest.DialogUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteCustomOptionComponentRenderOnMatch(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAutoCompleteComponentRenderOnMatch(org.ruauframework.components.ui.autocomplete.AutocompleteUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDialogNonModalShiftTab(org.ruauframework.components.ui.dialogUITest.DialogUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDialogNonModalDefaultSubmit(org.ruauframework.components.ui.dialogUITest.DialogUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testErrorMessageDisplayAndClose(org.ruauframework.throwable.ErrorMessageGITUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDialogNonModalFocusOnExit(org.ruauframework.components.ui.dialogUITest.DialogUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDialogNonModalTab(org.ruauframework.components.ui.dialogUITest.DialogUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testButtunUIWithPageObject(org.ruauframework.test.page.SampleUIWithPageObjectTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDialogModalWorksWithoutButtonsAttribSet(org.ruauframework.components.ui.dialogUITest.DialogUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testForegroundActionMark(org.ruauframework.perfTest.ActionXHRMarksUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMultipleForegroundActionsMark(org.ruauframework.perfTest.ActionXHRMarksUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDialogModalFocusOnDialogBox(org.ruauframework.components.ui.dialogUITest.DialogUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDialogNonModalCheckBoxes(org.ruauframework.components.ui.dialogUITest.DialogUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPressEscButtonOnModalOverlayDialog(org.ruauframework.components.ui.modalOverlay.PanelModalOverlayUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPressEscKeyOnModalOverlayDialog(org.ruauframework.components.ui.modalOverlay.PanelModalOverlayUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testBackgroundActionMark(org.ruauframework.perfTest.ActionXHRMarksUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testClickEscButtonClosesAllNonModalOverlays(org.ruauframework.components.ui.modalOverlay.PanelModalOverlayUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testClickEscButtonClosesAllModalOverlays(org.ruauframework.components.ui.modalOverlay.PanelModalOverlayUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPressEscKeyOnNonModalDialog(org.ruauframework.components.ui.modalOverlay.PanelModalOverlayUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPressEscButtonOnNonModalDialog(org.ruauframework.components.ui.modalOverlay.PanelModalOverlayUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testClearSelection(org.ruauframework.components.ui.inputSearch.InputSearchUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testModalOverlayDialogDoesFocusTrapping(org.ruauframework.components.ui.modalOverlay.PanelModalOverlayUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNonModalOverlayDialogDoesNotDoFocusTrapping(org.ruauframework.components.ui.modalOverlay.PanelModalOverlayUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testButton(org.ruauframework.test.perf.PerfUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testLabel(org.ruauframework.test.perf.PerfUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testSearch(org.ruauframework.components.ui.inputSearch.InputSearchUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCmpProviderThrowsDuringProvide(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCmpRendererThrowsDuringRender(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testClientOutOfSyncDefaultHandler(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testControllerThrowsWithFileName(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAppThrowsWithFileName(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCmpRendererThrowsDuringInstantiation(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCmpModelThrowsDuringInstantiation(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCmpProviderThrowsDuringInstantiation(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDateComponents(org.ruauframework.localization.LocalizationAppUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testLocalizedInputNumber(org.ruauframework.components.ui.inputNumber.InputNumberUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testInputNumber(org.ruauframework.components.ui.inputNumber.InputNumberUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAppProviderThrowsDuringInstantiation(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPercentComponents(org.ruauframework.localization.LocalizationAppUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCurrencyComponents(org.ruauframework.localization.LocalizationAppUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDateTimeComponents(org.ruauframework.localization.LocalizationAppUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testModelSerializationException(org.ruauframework.components.ruau.model.RuueModelExceptionUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testRerenderMarksHaveAllComponentNames(org.ruauframework.perfTest.RerenderMarksUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testRerenderMarksHaveComponentName(org.ruauframework.perfTest.RerenderMarksUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testForEachNull(org.ruauframework.components.ruau.forEach.ForEachUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testForEachEmpty(org.ruauframework.components.ruau.forEach.ForEachUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testForEachApp(org.ruauframework.components.ruau.forEach.ForEachUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testRendererException(org.ruauframework.components.ruau.model.RuueModelExceptionUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testForEachStringList(org.ruauframework.components.ruau.forEach.ForEachUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testForEachAppServer(org.ruauframework.components.ruau.forEach.ForEachUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testJsStringBangMinusMinus(org.ruauframework.util.JsonSerializationUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testJsStringStarSlash(org.ruauframework.util.JsonSerializationUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNavigationWhenLayoutHasMultipleLayoutItems(org.ruauframework.impl.layouts.LayoutItemsUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testDuplicateNamedStorageInTemplate(org.ruauframework.component.ruauStorage.NamedRuueStorageUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNoHandlerForLocationChange(org.ruauframework.impl.root.event.locationchange.BrowserHistoryManagementUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testBrowserHistoryInteractionInSimpleComponent(org.ruauframework.impl.root.event.locationchange.BrowserHistoryManagementUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testRefreshDuringLocationChange(org.ruauframework.impl.RuueClientServiceUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNativeJsonUsageInControllerDef(org.ruauframework.impl.json.NativeJsonSanityCheckUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNativeJsonUsageInJSRendererDef(org.ruauframework.impl.json.NativeJsonSanityCheckUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testBrowserHistoryInteractionInComplexComponent(org.ruauframework.impl.root.event.locationchange.BrowserHistoryManagementUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNavigation(org.ruauframework.impl.root.event.locationchange.BrowserHistoryManagementUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testModeDependentResources(org.ruauframework.impl.clientlibrary.ClientLibraryTagUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNonCombinableResources(org.ruauframework.impl.clientlibrary.ClientLibraryTagUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNativeJsonUsageInJSHelperDef(org.ruauframework.impl.json.NativeJsonSanityCheckUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterJsControllerChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterJsControllerChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterLibraryChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterJsHelperChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCombinableResources(org.ruauframework.impl.clientlibrary.ClientLibraryTagUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterJsProviderChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetServerRenderingAfterInterfaceChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterInterfaceChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterLibraryChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterIncludeChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterDependencyChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterEventChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterDependencyChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterJsProviderChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterEventChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterJsRendererChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetServerRenderingAfterMarkupChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterJsRendererChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterJsHelperChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterMarkupChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testExtendedAppWithRegisteredEventsAsync(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMissingPlaceholder(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterIncludeChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMissingPlaceholderAsync(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testSimpleComponentWithExtension(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testComponentWithRegisteredEvents(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testSimpleComponentWithModelAndController(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testSimpleComponentWithModelAndControllerAsync(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMissingLocalId(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMissingLocalIdAsync(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testExceptionDuringComponentInitialization(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testHistoryServiceAPIs(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testExceptionDuringComponentInitializationAsync(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testComponentWithRegisteredEventsAsync(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testSimpleComponentWithExtensionAsync(org.ruauframework.impl.IntegrationServiceImplUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testProgressbarNotVisibleInPRODMode(org.ruauframework.impl.appCache.AppCacheProgressBarUITest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNoUpdateBySimulatingEvents(org.ruauframework.impl.appCache.AppCacheProgressBarUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testProgressBarBySimulatingProgressEvents(org.ruauframework.impl.appCache.AppCacheProgressBarUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testQueryLanguageAvailableInNonprodMode(org.ruauframework.impl.coql.ComponentQueryLanguageUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testThemeOverride(org.ruauframework.impl.root.theme.ThemingSanityUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testThemeVariablesInCSS(org.ruauframework.impl.root.theme.ThemingSanityUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMockModelList(org.ruauframework.test.mock.MockingUtilTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMockServerProvider(org.ruauframework.test.mock.MockingUtilTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testRerenderingsQuery(org.ruauframework.impl.coql.ComponentQueryLanguageUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMockServerAction(org.ruauframework.test.mock.MockingUtilTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMockModelString(org.ruauframework.test.mock.MockingUtilTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMockModelSanity(org.ruauframework.test.mock.MockingUtilTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testServerSideRenderingOfBasicComponents(org.ruauframework.impl.root.component.rendering.ComponentRenderingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMockModelChain(org.ruauframework.test.mock.MockingUtilTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testFullServerRenderedPage(org.ruauframework.impl.root.component.rendering.ComponentRenderingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMockServerActionSanity(org.ruauframework.test.mock.MockingUtilTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testErrorMessageFromAssert(org.ruauframework.impl.error.AssertErrorUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testRemoveOn(org.ruauframework.client.UtilUiTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testForcingServerRenderingOfInteractiveComponents(org.ruauframework.impl.root.component.rendering.ComponentRenderingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCmpWithJavaRendererButRenderEqualsClient(org.ruauframework.impl.root.component.rendering.ComponentRenderingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testEmptyNameType(org.ruauframework.throwable.quickfix.CreateAttributeQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testInvalidAttributeType(org.ruauframework.throwable.quickfix.CreateAttributeQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testReportServerRenderedCSS(org.ruauframework.http.CSPReportLoggingTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testReportXHRConnectWhitelistedUrl(org.ruauframework.http.CSPReportLoggingTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testAllowFontSrc(org.ruauframework.http.CSPReportLoggingTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testReportClientRenderedCSS(org.ruauframework.http.CSPReportLoggingTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testReportJavaScript(org.ruauframework.http.CSPReportLoggingTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testReportXHRConnect(org.ruauframework.http.CSPReportLoggingTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testReportClientRenderedIframe(org.ruauframework.http.CSPReportLoggingTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCacheErrorWithEmptyCache(org.ruauframework.http.AppCacheResourcesUITest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testInvalidAttributeName(org.ruauframework.throwable.quickfix.CreateAttributeQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCreationQuickFix(org.ruauframework.throwable.quickfix.CreateAttributeQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testReportServerRenderedIframe(org.ruauframework.http.CSPReportLoggingTest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCacheError(org.ruauframework.http.AppCacheResourcesUITest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testManifestRequestLimitExceeded(org.ruauframework.http.AppCacheResourcesUITest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCreateInnerCmp(org.ruauframework.throwable.quickfix.ComponentQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testNoChanges(org.ruauframework.http.AppCacheResourcesUITest): class java.lang.Error: Failed to get a new RemoteWebDriver after 3 tries(..)
ruau/xlog.full:  js_iterationTest.withLazyComponents$testLazyLoadingWithAttributeValues(org.ruauframework.test.ComponentJSTestSuiteTest$ComponentTestCase): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMultipleDescriptors(org.ruauframework.throwable.quickfix.ComponentQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCreationQuickFix(org.ruauframework.throwable.quickfix.ComponentQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testBadDescriptorFormat(org.ruauframework.throwable.quickfix.ComponentQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testMultipleDescriptors(org.ruauframework.throwable.quickfix.ApplicationQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCreateInnerCmpBadNamespace(org.ruauframework.throwable.quickfix.ComponentQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testBadDescriptorFormat(org.ruauframework.throwable.quickfix.ApplicationQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCreationQuickFixNonexistentNamespace(org.ruauframework.throwable.quickfix.ComponentQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testHtmlContentEscaped(org.ruauframework.components.ui.inputRichText.InputRichTextUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCreationQuickFix(org.ruauframework.throwable.quickfix.ApplicationQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testProdCmpProviderThrowsDuringProvide(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testProdCmpProviderThrowsDuringInstantiation(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCreateInnerCmp(org.ruauframework.throwable.quickfix.ApplicationQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCreateInnerCmpBadNamespace(org.ruauframework.throwable.quickfix.ApplicationQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testCreationQuickFixNonexistentNamespace(org.ruauframework.throwable.quickfix.ApplicationQuickFixUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testProdCmpRendererThrowsDuringRender(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testProdAppProviderThrowsDuringInstantiation(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterThemeChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testProdCmpModelThrowsDuringInstantiation(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterLayoutChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testProdCmpRendererThrowsDuringInstantiation(org.ruauframework.http.ExceptionHandlingUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testEfficientActionRequests(org.ruauframework.component.ruau.LabelValueProviderUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testQueryLanguageNotAvailableInprodMode(org.ruauframework.impl.coql.ComponentQueryLanguageUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testGetClientRenderingAfterStyleChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterThemeChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:  testPostAfterStyleChange(org.ruauframework.impl.ClientOutOfSyncUITest): class java.lang.Error: Failed to get a new PooledRemoteWebDriver after 3 tries(..)
ruau/xlog.full:Tests run: 1834, Failures: 0, Errors: 1725, Skipped: 0
ruau/xlog.full:[WARNING] File encoding has not been set, using platform encoding ISO-8859-1, i.e. build is platform dependent!
ruau/xlog.full:[INFO] --- exec-maven-plugin:1.2.1:exec (x-stop) @ ruau-integration-test ---
ruau/xlog.full:[INFO] Total time: 1:45:27.357s
ruau/xlog.full:[INFO] Finished at: Mon Dec 15 20:28:59 UTC 2014
ruau/xlog.full:[INFO] Final Memory: 11M/211M
ruau/ruau/.settings/org.eclipse.jdt.core.prefs:encoding/src/test/java=UTF-8
ruau/ruau/.settings/org.eclipse.jdt.core.prefs:org.eclipse.jdt.core.compiler.compliance=1.7
ruau/ruau/.settings/org.eclipse.jdt.core.prefs:encoding/src/main/http/WEB-INF=UTF-8
ruau/ruau/.settings/org.eclipse.jdt.core.prefs:encoding/src/main/resources=UTF-8
ruau/ruau/.settings/org.eclipse.jdt.core.prefs:org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
ruau/ruau/.settings/org.eclipse.jdt.core.prefs:encoding/src/main/java=UTF-8
ruau/ruau/.classpath:<classpath>
ruau/ruau/.classpath:  <classpathentry kind="src" path="src/test/java" output="target/test-classes" including="**/*.java"/>
ruau/ruau/.classpath:  <classpathentry kind="src" path="src/test" output="target/test-classes" including="results/**/*|testdata/**/*" excluding="**/*.java"/>
ruau/ruau/.classpath:  <classpathentry kind="src" path="src/main/java" including="**/*.java"/>
ruau/ruau/.classpath:  <classpathentry kind="src" path="target/generated-sources/enum/java" including="**/*.java"/>
ruau/ruau/.classpath:  <classpathentry kind="src" path="src/resources/META-INF" excluding="**/*.java"/>
ruau/ruau/.classpath:  <classpathentry kind="src" path="src/main/http/WEB-INF" excluding="**/*.java"/>
ruau/ruau/.classpath:  <classpathentry kind="src" path="src/main/resources" including="**/version.prop" excluding="**/*.java"/>
ruau/ruau/.classpath:  <classpathentry kind="output" path="target/classes"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/javax/servlet/javax.servlet-api/3.0.1/javax.servlet-api-3.0.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
ruau/ruau/.classpath:  <classpathentry kind="src" path="/ruau-util"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/httpcomponents/httpclient/4.3.1/httpclient-4.3.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/httpcomponents/httpcore/4.3.1/httpcore-4.3.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/commons-codec/commons-codec/1.5/commons-codec-1.5.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/guava/guava/14.0.1/guava-14.0.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/javascript/closure-compiler/v20130411/closure-compiler-v20130411.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/args4j/args4j/2.0.28/args4j-2.0.28.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/protobuf/protobuf-java/2.4.1/protobuf-java-2.4.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/json/json/20080701/json-20080701.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/maven/maven-plugin-api/2.0/maven-plugin-api-2.0.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/joda-time/joda-time/2.1/joda-time-2.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/com/ibm/icu/icu4j/4.6.1/icu4j-4.6.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/net/sourceforge/findbugs/annotations/1.2.0/annotations-1.2.0.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/reflections/reflections/0.9.8/reflections-0.9.8.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/javassist/javassist/3.12.1.GA/javassist-3.12.1.GA.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/seleniumhq/selenium/selenium-support/2.42.2/selenium-support-2.42.2.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/seleniumhq/selenium/selenium-api/2.42.2/selenium-api-2.42.2.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/seleniumhq/selenium/selenium-chrome-driver/2.42.2/selenium-chrome-driver-2.42.2.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/seleniumhq/selenium/selenium-remote-driver/2.42.2/selenium-remote-driver-2.42.2.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/cglib/cglib-nodep/2.1_3/cglib-nodep-2.1_3.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-exec/1.1/commons-exec-1.1.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/net/java/dev/jna/jna/3.4.0/jna-3.4.0.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/net/java/dev/jna/platform/3.4.0/platform-3.4.0.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/seleniumhq/selenium/selenium-firefox-driver/2.42.2/selenium-firefox-driver-2.42.2.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/commons-io/commons-io/2.2/commons-io-2.2.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/uiautomation/ios-client/0.6.5/ios-client-0.6.5.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/uiautomation/ios-common/0.6.5/ios-common-0.6.5.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/webbitserver/webbit/0.4.14/webbit-0.4.14.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/io/netty/netty/3.5.2.Final/netty-3.5.2.Final.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-servlet/7.2.0.v20101020/jetty-servlet-7.2.0.v20101020.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-security/7.2.0.v20101020/jetty-security-7.2.0.v20101020.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-server/7.2.0.v20101020/jetty-server-7.2.0.v20101020.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-continuation/7.2.0.v20101020/jetty-continuation-7.2.0.v20101020.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-http/7.2.0.v20101020/jetty-http-7.2.0.v20101020.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-io/7.2.0.v20101020/jetty-io-7.2.0.v20101020.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-util/7.2.0.v20101020/jetty-util-7.2.0.v20101020.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/com/salesforce/omakase/0.2.2/omakase-0.2.2.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/junit/junit/4.11/junit-4.11.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
ruau/ruau/.classpath:  <classpathentry kind="var" path="M2_REPO/org/mockito/mockito-all/1.9.5/mockito-all-1.9.5.jar"/>
ruau/ruau/.classpath:</classpath>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:<launchConfiguration type="org.eclipse.ant.AntBuilderLaunchConfigurationType">
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <stringAttribute key="org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS" value="full,incremental,auto,clean"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <booleanAttribute key="org.eclipse.debug.core.appendEnvironmentVariables" value="true"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="ruau"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="true"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${build_project}/maven-eclipse.xml"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${build_project}"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${project}"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <booleanAttribute key="org.eclipse.debug.core.capture_output" value="false"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <stringAttribute key="org.eclipse.ui.externaltools.ATTR_BUILD_SCOPE" value="${working_set:&lt;?xml version=&apos;1.0&apos;?&gt;&lt;launchConfigurationWorkingSet editPageId=&apos;org.eclipse.ui.resourceWorkingSetPage&apos; factoryID=&apos;org.eclipse.ui.internal.WorkingSetFactory&apos; label=&apos;workingSet&apos; name=&apos;workingSet&apos;&gt;&lt;item factoryID=&apos;org.eclipse.ui.internal.model.ResourceFactory&apos; path=&apos;ruau&apos; type=&apos;4&apos;/&gt;&lt;/launchConfigurationWorkingSet&gt;}"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <booleanAttribute key="org.eclipse.debug.ui.ATTR_CONSOLE_OUTPUT_ON" value="false"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <booleanAttribute key="org.eclipse.ant.ui.ATTR_TARGETS_UPDATED" value="true"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:  <stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:    <listEntry value="1"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:    <listEntry value="/ruau/maven-eclipse.xml"/>
ruau/ruau/.externalToolBuilders/Maven_Ant_Builder.launch:</launchConfiguration>
ruau/ruau/pom.xml:<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
ruau/ruau/pom.xml:    <artifactId>ruau</artifactId>
ruau/ruau/pom.xml:    <parent>
ruau/ruau/pom.xml:        <groupId>org.ruauframework</groupId>
ruau/ruau/pom.xml:        <artifactId>ruau-framework</artifactId>
ruau/ruau/pom.xml:        <relativePath>../pom.xml</relativePath>
ruau/ruau/pom.xml:    </parent>
ruau/ruau/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau/pom.xml:            <artifactId>ruau-util</artifactId>
ruau/ruau/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau/pom.xml:            <artifactId>ruau-util</artifactId>
ruau/ruau/pom.xml:            <type>test-jar</type>
ruau/ruau/pom.xml:            <groupId>org.apache.httpcomponents</groupId>
ruau/ruau/pom.xml:            <artifactId>httpclient</artifactId>
ruau/ruau/pom.xml:            <artifactId>commons-logging</artifactId>
ruau/ruau/pom.xml:            <groupId>javax.servlet</groupId>
ruau/ruau/pom.xml:            <artifactId>javax.servlet-api</artifactId>
ruau/ruau/pom.xml:            <artifactId>selenium-support</artifactId>
ruau/ruau/pom.xml:            <artifactId>selenium-api</artifactId>
ruau/ruau/pom.xml:            <artifactId>selenium-chrome-driver</artifactId>
ruau/ruau/pom.xml:            <artifactId>selenium-remote-driver</artifactId>
ruau/ruau/pom.xml:            <artifactId>selenium-firefox-driver</artifactId>
ruau/ruau/pom.xml:            <groupId>org.uiautomation</groupId>
ruau/ruau/pom.xml:            <artifactId>ios-client</artifactId>
ruau/ruau/pom.xml:            <groupId>org.apache.httpcomponents</groupId>
ruau/ruau/pom.xml:            <artifactId>httpcore</artifactId>
ruau/ruau/pom.xml:            <groupId>com.salesforce</groupId>
ruau/ruau/pom.xml:            <artifactId>omakase</artifactId>
ruau/ruau/pom.xml:        <ruau.home>${basedir}/..</ruau.home>
ruau/ruau/pom.xml:        <timestamp>${maven.build.timestamp}</timestamp>
ruau/ruau/pom.xml:                <targetPath>META-INF</targetPath>
ruau/ruau/pom.xml:                <directory>src/main/http/WEB-INF</directory>
ruau/ruau/pom.xml:                <targetPath>ruau/http/WEB-INF</targetPath>
ruau/ruau/pom.xml:                <directory>src/main/resources</directory>
ruau/ruau/pom.xml:                <groupId>org.apache.maven.plugins</groupId>
ruau/ruau/pom.xml:                <artifactId>maven-compiler-plugin</artifactId>
ruau/ruau/pom.xml:                <configuration>
ruau/ruau/pom.xml:                    <target>1.7</target>
ruau/ruau/pom.xml:                </configuration>
ruau/ruau/pom.xml:                <groupId>org.codehaus.mojo</groupId>
ruau/ruau/pom.xml:                <artifactId>build-helper-maven-plugin</artifactId>
ruau/ruau/pom.xml:                        <phase>generate-sources</phase>
ruau/ruau/pom.xml:                        <goals>
ruau/ruau/pom.xml:                            <goal>add-source</goal>
ruau/ruau/pom.xml:                        </goals>
ruau/ruau/pom.xml:                        <configuration>
ruau/ruau/pom.xml:                                <source>target/generated-sources/enum/java</source>
ruau/ruau/pom.xml:                        </configuration>
ruau/ruau/pom.xml:                <artifactId>maven-resources-plugin</artifactId>
ruau/ruau/pom.xml:                        <phase>process-test-resources</phase>
ruau/ruau/pom.xml:                        <configuration>
ruau/ruau/pom.xml:                            <outputDirectory>target/test-classes/components_ruau</outputDirectory>
ruau/ruau/pom.xml:                        </configuration>
ruau/ruau/pom.xml:                <artifactId>maven-antrun-plugin</artifactId>
ruau/ruau/pom.xml:                        <phase>generate-test-resources</phase>
ruau/ruau/pom.xml:                <groupId>org.ruauframework</groupId>
ruau/ruau/pom.xml:                <artifactId>ruau-util</artifactId>
ruau/ruau/pom.xml:                        <goals><goal>enum</goal></goals>
ruau/ruau/pom.xml:                        <id>generate-enums</id>
ruau/ruau/pom.xml:                        <phase>generate-sources</phase>
ruau/ruau/pom.xml:                        <configuration>
ruau/ruau/pom.xml:                            <baseScanDirectory>.</baseScanDirectory>
ruau/ruau/pom.xml:                            <scanDirectoryList>
ruau/ruau/pom.xml:                                <param>../ruau/src/main</param>
ruau/ruau/pom.xml:                                <param>../ruau-components/src/main</param>
ruau/ruau/pom.xml:                            </scanDirectoryList>
ruau/ruau/pom.xml:                            <outputPackageName>org.ruauframework.id</outputPackageName>
ruau/ruau/pom.xml:                            <outputClassName>RuueId</outputClassName>
ruau/ruau/pom.xml:                            <outputFile>./target/generated-sources/enum/java/org/ruauframework/id/RuueId.java</outputFile>
ruau/ruau/pom.xml:                        </configuration>
ruau/ruau/pom.xml:                <artifactId>lifecycle-mapping</artifactId>
ruau/ruau/pom.xml:                <configuration>
ruau/ruau/pom.xml:                    <lifecycleMappingMetadata>
ruau/ruau/pom.xml:                                    <groupId>org.ruauframework</groupId>
ruau/ruau/pom.xml:                                    <artifactId>ruau-util</artifactId>
ruau/ruau/pom.xml:                                    <goals>
ruau/ruau/pom.xml:                                        <goal>enum</goal>
ruau/ruau/pom.xml:                                    </goals>
ruau/ruau/pom.xml:                                <action>
ruau/ruau/pom.xml:                                </action>
ruau/ruau/pom.xml:                    </lifecycleMappingMetadata>
ruau/ruau/pom.xml:                </configuration>
ruau/ruau/.project:  <name>ruau</name>
ruau/ruau/.project:  <comment>NO_M2ECLIPSE_SUPPORT: Project files created with the maven-eclipse-plugin are not supported in M2Eclipse.</comment>
ruau/ruau/.project:    <project>ruau-util</project>
ruau/ruau/.project:    <buildCommand>
ruau/ruau/.project:      <name>org.eclipse.jdt.core.javabuilder</name>
ruau/ruau/.project:    </buildCommand>
ruau/ruau/.project:    <buildCommand>
ruau/ruau/.project:      <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
ruau/ruau/.project:      <arguments>
ruau/ruau/.project:        <dictionary>
ruau/ruau/.project:          <key>LaunchConfigHandle</key>
ruau/ruau/.project:          <value>&lt;project&gt;/.externalToolBuilders/Maven_Ant_Builder.launch</value>
ruau/ruau/.project:        </dictionary>
ruau/ruau/.project:      </arguments>
ruau/ruau/.project:    </buildCommand>
ruau/ruau/.project:  <natures>
ruau/ruau/.project:    <nature>org.eclipse.jdt.core.javanature</nature>
ruau/ruau/.project:  </natures>
ruau/ruau/build.gradle:  compile project(':ruau-util')
ruau/ruau/build.gradle:    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
ruau/ruau/build.gradle:    compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
ruau/ruau/build.gradle:    compile group: 'org.apache.httpcomponents', name: 'httpcore', version:'4.3.1'
ruau/ruau/build.gradle:    compile group: 'com.salesforce', name: 'omakase', version:'0.2.2'
ruau/ruau/build.gradle:  testCompile project(':ruau-util')
ruau/ruau/build.gradle:    testCompile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.3.1'
ruau/ruau/build.gradle:    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-support', version:'2.42.2'
ruau/ruau/build.gradle:    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-api', version:'2.42.2'
ruau/ruau/build.gradle:    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version:'2.42.2'
ruau/ruau/build.gradle:    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version:'2.42.2'
ruau/ruau/build.gradle:    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version:'2.42.2'
ruau/ruau/build.gradle:    testCompile group: 'org.uiautomation', name: 'ios-client', version:'0.6.5'
ruau/ruau/maven-eclipse.xml:<project default="copy-resources">
ruau/ruau/maven-eclipse.xml:  <target name="init"/>
ruau/ruau/maven-eclipse.xml:  <target name="copy-resources" depends="init">
ruau/ruau/maven-eclipse.xml:    <copy todir="target/classes/META-INF" filtering="false">
ruau/ruau/maven-eclipse.xml:      <fileset dir="src/resources/META-INF" includes="" excludes="**/*.java"/>
ruau/ruau/maven-eclipse.xml:    <copy todir="target/classes/ruau/http/WEB-INF" filtering="false">
ruau/ruau/maven-eclipse.xml:      <fileset dir="src/main/http/WEB-INF" includes="" excludes="**/*.java"/>
ruau/ruau/maven-eclipse.xml:  </target>
ruau/ruau/config/build/jenkins/auto-test:PRE=${BASE}/auto-pre
ruau/ruau/config/build/jenkins/auto-test:POST=${BASE}/auto-post
ruau/ruau/config/build/jenkins/auto-test:auto_integrate() {
ruau/ruau/config/build/jenkins/auto-test:    cat README
ruau/ruau/config/build/jenkins/auto-test:# Create a basic setup.
ruau/ruau/config/build/jenkins/auto-test:git add README
ruau/ruau/config/build/jenkins/auto-test:git commit -m initial
ruau/ruau/config/build/jenkins/auto-test:git clone --bare ${TDIR} ${ORIG}
ruau/ruau/config/build/jenkins/auto-test:# Create the basic branches.
ruau/ruau/config/build/jenkins/auto-test:git push origin HEAD:alpha
ruau/ruau/config/build/jenkins/auto-test:git push origin HEAD:beta
ruau/ruau/config/build/jenkins/auto-test:git push origin HEAD:gamma
ruau/ruau/config/build/jenkins/auto-test:git checkout alpha
ruau/ruau/config/build/jenkins/auto-test:cat > README <<EOF
ruau/ruau/config/build/jenkins/auto-test:git add README
ruau/ruau/config/build/jenkins/auto-test:cat README
ruau/ruau/config/build/jenkins/auto-test:git commit -m "edit readme 1:1"
ruau/ruau/config/build/jenkins/auto-test:git push origin HEAD:alpha-branch/e1/e1
ruau/ruau/config/build/jenkins/auto-test:# Now do an auto-integrate
ruau/ruau/config/build/jenkins/auto-test:auto_integrate "origin/alpha-branch/e1/e1"
ruau/ruau/config/build/jenkins/auto-test:# Now do a second checkout
ruau/ruau/config/build/jenkins/auto-test:git checkout alpha
ruau/ruau/config/build/jenkins/auto-test:git pull origin alpha
ruau/ruau/config/build/jenkins/auto-test:cat >>README <<EOF
ruau/ruau/config/build/jenkins/auto-test:cat README
ruau/ruau/config/build/jenkins/auto-test:git add README
ruau/ruau/config/build/jenkins/auto-test:git commit -m "edit readme 2:1"
ruau/ruau/config/build/jenkins/auto-test:git push origin HEAD:alpha-branch/e2/e1
ruau/ruau/config/build/jenkins/auto-test:# Now do an auto-integrate
ruau/ruau/config/build/jenkins/auto-test:auto_integrate "origin/alpha-branch/e2/e1"
ruau/ruau/config/build/jenkins/auto-test:# Now we want to create conflict...
ruau/ruau/config/build/jenkins/auto-test:# Edit readme in two separate branches.
ruau/ruau/config/build/jenkins/auto-test:git checkout alpha
ruau/ruau/config/build/jenkins/auto-test:git pull origin alpha
ruau/ruau/config/build/jenkins/auto-test:cat >> README <<EOF
ruau/ruau/config/build/jenkins/auto-test:cat README
ruau/ruau/config/build/jenkins/auto-test:git add README
ruau/ruau/config/build/jenkins/auto-test:git commit -m "edit readme 1:2"
ruau/ruau/config/build/jenkins/auto-test:git push origin HEAD:alpha-branch/e1/e2
ruau/ruau/config/build/jenkins/auto-test:git checkout alpha
ruau/ruau/config/build/jenkins/auto-test:git pull origin alpha
ruau/ruau/config/build/jenkins/auto-test:# To reproduce the git bug, replace the next three lines with the following
ruau/ruau/config/build/jenkins/auto-test:cat >> README <<EOF
ruau/ruau/config/build/jenkins/auto-test:line 3 take 2
ruau/ruau/config/build/jenkins/auto-test:#cat >> README <<EOF
ruau/ruau/config/build/jenkins/auto-test:cat README
ruau/ruau/config/build/jenkins/auto-test:git add README
ruau/ruau/config/build/jenkins/auto-test:git commit -m "edit readme 2:2"
ruau/ruau/config/build/jenkins/auto-test:git push origin HEAD:alpha-branch/e2/e2
ruau/ruau/config/build/jenkins/auto-test:auto_integrate "origin/alpha-branch/e1/e2"
ruau/ruau/config/build/jenkins/auto-test:if env GIT_BRANCH="origin/alpha-branch/e2/e2" ${PRE}; then
ruau/ruau/config/build/jenkins/auto-test:    env GIT_BRANCH="origin/alpha-branch/e2/e2" ${POST}
ruau/ruau/config/build/jenkins/auto-test:    echo "PRE failed"
ruau/ruau/config/build/jenkins/auto-pre:# Auto-Integrate Jenkins 'pre' script.
ruau/ruau/config/build/jenkins/auto-pre:# Note that this is used in conjuction with auto-post
ruau/ruau/config/build/jenkins/auto-pre:# to do a full merge-test-commit cycle. if you don't
ruau/ruau/config/build/jenkins/auto-pre:# want the test, all of this can be collapsed in a
ruau/ruau/config/build/jenkins/auto-pre:# Start by doing exit on fail.
ruau/ruau/config/build/jenkins/auto-pre:# Some basic variables:
ruau/ruau/config/build/jenkins/auto-pre:#  GIT: The full path to git (only needed if git can't be found)
ruau/ruau/config/build/jenkins/auto-pre:#  INTEGRATE: the branch to which we will integrate
ruau/ruau/config/build/jenkins/auto-pre:#  COPY_TO: a set of branches to which we will copy this branch
ruau/ruau/config/build/jenkins/auto-pre:INTEGRATE=alpha
ruau/ruau/config/build/jenkins/auto-pre:# Local Variables
ruau/ruau/config/build/jenkins/auto-pre:# Now, the real stuff.
ruau/ruau/config/build/jenkins/auto-pre:#  - Checkout our branch, and merge to the integration
ruau/ruau/config/build/jenkins/auto-pre:#  - The remaining stuff will occur in post.
ruau/ruau/config/build/jenkins/auto-pre:${GIT} rebase ${INTEGRATE} 
ruau/ruau/config/build/jenkins/auto-post:# Auto-Integrate Jenkins 'post' script.
ruau/ruau/config/build/jenkins/auto-post:# See auto-pre for more documentation.
ruau/ruau/config/build/jenkins/auto-post:# Start by doing exit on fail.
ruau/ruau/config/build/jenkins/auto-post:# Some basic variables:
ruau/ruau/config/build/jenkins/auto-post:#  GIT: The full path to git (only needed if git can't be found)
ruau/ruau/config/build/jenkins/auto-post:#  INTEGRATE: the branch to which we will integrate
ruau/ruau/config/build/jenkins/auto-post:#  COPY_TO: a set of branches to which we will copy this branch
ruau/ruau/config/build/jenkins/auto-post:INTEGRATE=alpha
ruau/ruau/config/build/jenkins/auto-post:COPY_TO="beta-branch gamma-branch"
ruau/ruau/config/build/jenkins/auto-post:# Local variables.
ruau/ruau/config/build/jenkins/auto-post:# Now, make sure that we are up to date (there is some risk here,
ruau/ruau/config/build/jenkins/auto-post:# and if we fail, someone will have to fix it the hard way).
ruau/ruau/config/build/jenkins/auto-post:    ${GIT} rebase ${INTEGRATE};
ruau/ruau/config/build/jenkins/auto-post:    # These should not really fail, but there is some chance.
ruau/ruau/config/build/jenkins/auto-post:    # If so, someone will have to manually do the right thing.
ruau/ruau/config/build/jenkins/auto-post:        ${GIT} push origin HEAD:${cb}/integrate/${LCL_POST_PREFIX}
ruau/ruau/config/build/jenkins/auto-post:# Finally erase the remote branch.
ruau/ruau/config/build/jenkins/duplicate-git-bug:PRE=${BASE}/auto-pre
ruau/ruau/config/build/jenkins/duplicate-git-bug:POST=${BASE}/auto-post
ruau/ruau/config/build/jenkins/duplicate-git-bug:auto_integrate() {
ruau/ruau/config/build/jenkins/duplicate-git-bug:    cat README
ruau/ruau/config/build/jenkins/duplicate-git-bug:# Create a basic setup.
ruau/ruau/config/build/jenkins/duplicate-git-bug:git add README
ruau/ruau/config/build/jenkins/duplicate-git-bug:git commit -m initial
ruau/ruau/config/build/jenkins/duplicate-git-bug:git clone --bare ${TDIR} ${ORIG}
ruau/ruau/config/build/jenkins/duplicate-git-bug:# Create the basic branches.
ruau/ruau/config/build/jenkins/duplicate-git-bug:git push origin HEAD:alpha
ruau/ruau/config/build/jenkins/duplicate-git-bug:git push origin HEAD:beta
ruau/ruau/config/build/jenkins/duplicate-git-bug:git push origin HEAD:gamma
ruau/ruau/config/build/jenkins/duplicate-git-bug:git checkout alpha
ruau/ruau/config/build/jenkins/duplicate-git-bug:cat > README <<EOF
ruau/ruau/config/build/jenkins/duplicate-git-bug:git add README
ruau/ruau/config/build/jenkins/duplicate-git-bug:cat README
ruau/ruau/config/build/jenkins/duplicate-git-bug:git commit -m "edit readme 1:1"
ruau/ruau/config/build/jenkins/duplicate-git-bug:git push origin HEAD:alpha-branch/e1/e1
ruau/ruau/config/build/jenkins/duplicate-git-bug:# Now do an auto-integrate
ruau/ruau/config/build/jenkins/duplicate-git-bug:auto_integrate "origin/alpha-branch/e1/e1"
ruau/ruau/config/build/jenkins/duplicate-git-bug:# Now do a second checkout
ruau/ruau/config/build/jenkins/duplicate-git-bug:git checkout alpha
ruau/ruau/config/build/jenkins/duplicate-git-bug:git pull origin alpha
ruau/ruau/config/build/jenkins/duplicate-git-bug:cat >>README <<EOF
ruau/ruau/config/build/jenkins/duplicate-git-bug:cat README
ruau/ruau/config/build/jenkins/duplicate-git-bug:git add README
ruau/ruau/config/build/jenkins/duplicate-git-bug:git commit -m "edit readme 2:1"
ruau/ruau/config/build/jenkins/duplicate-git-bug:git push origin HEAD:alpha-branch/e2/e1
ruau/ruau/config/build/jenkins/duplicate-git-bug:# Now do an auto-integrate
ruau/ruau/config/build/jenkins/duplicate-git-bug:auto_integrate "origin/alpha-branch/e2/e1"
ruau/ruau/config/build/jenkins/duplicate-git-bug:# Now we want to create conflict...
ruau/ruau/config/build/jenkins/duplicate-git-bug:# Edit readme in two separate branches.
ruau/ruau/config/build/jenkins/duplicate-git-bug:git checkout alpha
ruau/ruau/config/build/jenkins/duplicate-git-bug:git pull origin alpha
ruau/ruau/config/build/jenkins/duplicate-git-bug:cat >> README <<EOF
ruau/ruau/config/build/jenkins/duplicate-git-bug:cat README
ruau/ruau/config/build/jenkins/duplicate-git-bug:git add README
ruau/ruau/config/build/jenkins/duplicate-git-bug:git commit -m "edit readme 1:2"
ruau/ruau/config/build/jenkins/duplicate-git-bug:git push origin HEAD:alpha-branch/e1/e2
ruau/ruau/config/build/jenkins/duplicate-git-bug:git checkout alpha
ruau/ruau/config/build/jenkins/duplicate-git-bug:git pull origin alpha
ruau/ruau/config/build/jenkins/duplicate-git-bug:# To reproduce the git bug, replace the next three lines with the following
ruau/ruau/config/build/jenkins/duplicate-git-bug:#cat >> README <<EOF
ruau/ruau/config/build/jenkins/duplicate-git-bug:#line 3 take 2
ruau/ruau/config/build/jenkins/duplicate-git-bug:cat >> README <<EOF
ruau/ruau/config/build/jenkins/duplicate-git-bug:cat README
ruau/ruau/config/build/jenkins/duplicate-git-bug:git add README
ruau/ruau/config/build/jenkins/duplicate-git-bug:git commit -m "edit readme 2:2"
ruau/ruau/config/build/jenkins/duplicate-git-bug:git push origin HEAD:alpha-branch/e2/e2
ruau/ruau/config/build/jenkins/duplicate-git-bug:auto_integrate "origin/alpha-branch/e1/e2"
ruau/ruau/config/build/jenkins/duplicate-git-bug:# The following should say 'PRE failed' but doesn't
ruau/ruau/config/build/jenkins/duplicate-git-bug:if env GIT_BRANCH="origin/alpha-branch/e2/e2" ${PRE}; then
ruau/ruau/config/build/jenkins/duplicate-git-bug:    env GIT_BRANCH="origin/alpha-branch/e2/e2" ${POST}
ruau/ruau/config/build/jenkins/duplicate-git-bug:    echo "PRE failed"
ruau/ruau/config/build/jenkins/README:This directory contains the two scripts needed to do a Jenkins
ruau/ruau/config/build/jenkins/README:auto-integrate build, along with a test script, and duplication
ruau/ruau/config/build/jenkins/README:for a current bug in git.
ruau/ruau/config/build/jenkins/README:To use this, set up an auto-build in Jenkins, with the follwoing
ruau/ruau/config/build/jenkins/README: * a branch spec something like '**/dev-branch/**'
ruau/ruau/config/build/jenkins/README: * "Build when a change is pushed to GitHub"
ruau/ruau/config/build/jenkins/README: * Pre step: paste contents of auto-pre here. (add 'mkdir -p ${WORKSPACE}/tmp' for ruau)
ruau/ruau/config/build/jenkins/README: * Post step (only if build succeeds): paste contents of auto-post here.
ruau/ruau/config/build/jenkins/README:The parameters are in shell variables in the auto-pre and auto-post:
ruau/ruau/config/build/jenkins/README: * GIT: the path to the git command
ruau/ruau/config/build/jenkins/README: * INTEGRATE: the integration branch
ruau/ruau/config/build/jenkins/README: * COPY_TO: a list of integration 'branch' prefixes
ruau/ruau/config/build/jenkins/README:   (e.g. touch-dev-branch would use "dev-branch")
ruau/ruau/src/resources/META-INF/mime.types:# JDK 6 defaults
ruau/ruau/src/resources/META-INF/mime.types:text/plain		txt text TXT TEXT
ruau/ruau/src/resources/META-INF/mime.types:image/gif		gif GIF
ruau/ruau/src/resources/META-INF/mime.types:image/ief		ief
ruau/ruau/src/resources/META-INF/mime.types:image/jpeg		jpeg jpg jpe JPG
ruau/ruau/src/resources/META-INF/mime.types:image/tiff		tiff tif
ruau/ruau/src/resources/META-INF/mime.types:image/x-xwindowdump	xwd
ruau/ruau/src/resources/META-INF/mime.types:application/postscript	ai eps ps
ruau/ruau/src/resources/META-INF/mime.types:application/rtf		rtf
ruau/ruau/src/resources/META-INF/mime.types:application/x-tex	tex
ruau/ruau/src/resources/META-INF/mime.types:application/x-texinfo	texinfo texi
ruau/ruau/src/resources/META-INF/mime.types:application/x-troff	t tr roff
ruau/ruau/src/resources/META-INF/mime.types:audio/basic		au
ruau/ruau/src/resources/META-INF/mime.types:audio/midi		midi mid
ruau/ruau/src/resources/META-INF/mime.types:audio/x-aifc		aifc
ruau/ruau/src/resources/META-INF/mime.types:audio/x-aiff            aif aiff
ruau/ruau/src/resources/META-INF/mime.types:audio/x-mpeg		mpeg mpg
ruau/ruau/src/resources/META-INF/mime.types:audio/x-wav             wav
ruau/ruau/src/resources/META-INF/mime.types:video/x-msvideo		avi
ruau/ruau/src/resources/META-INF/mime.types:# ruau added
ruau/ruau/src/resources/META-INF/mime.types:text/javascript		js
ruau/ruau/src/resources/META-INF/mime.types:audio/mpeg		mpeg3 mp3
ruau/ruau/src/resources/META-INF/mime.types:image/png		png
ruau/ruau/src/main/http/WEB-INF/commons-logging.properties:org.apache.commons.logging.Log = org.apache.commons.logging.impl.SimpleLog
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- This file contains the default descriptor for web applications.       -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- configuration for all webapps.   If a context has a webdefault.xml    -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- descriptor, it is applied before the contexts own web.xml file        -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- A context may be assigned a default descriptor by:                    -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--  + Calling WebApplicationContext.setDefaultsDescriptor                -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--  + Passed an arg to addWebApplications                                -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- This file is used both as the resource within the jetty.jar (which is -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- used as the default if no explicit defaults descriptor is set) and it -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- is copied to the etc directory of the Jetty distro and explicitly     -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:<web-app
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  xmlns="http://java.sun.com/xml/ns/javaee"
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  metadata-complete="true"
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    Default web.xml file.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    This file is applied to a Web application before it's own WEB_INF/web.xml file
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- Context params to control Session Cookies                            -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    UNCOMMENT TO ACTIVATE <context-param> <param-name>org.eclipse.jetty.servlet.SessionDomain</param-name> <param-value>100.0.0.1</param-value> </context-param> <context-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <param-name>org.eclipse.jetty.servlet.SessionPath</param-name> <param-value>/</param-value> </context-param> <context-param> <param-name>org.eclipse.jetty.servlet.MaxAge</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <param-value>-1</param-value> </context-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- The default servlet.                                                 -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- This servlet, normally mapped to /, provides the handling for static -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- content, OPTIONS and TRACE methods for the context.                  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- The following initParameters are supported:                          -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  acceptRanges      If true, range requests and responses are
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  dirAllowed        If true, directory listings are returned if no
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  welcomeServlets   If true, attempt to dispatch to welcome files
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    that are servlets, but only after no matching static
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    resources could be found. If false, then a welcome
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    file must exist on disk. If "exact", then exact
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    servlet matches are supported without an existing file.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    Default is true.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    This must be false if you want directory listings,
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    but have index.jsp in your welcome file list.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  redirectWelcome   If true, welcome files are redirected rather than
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    forwarded to.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  gzip              If set to true, then static content will be served as
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    gzip content encoded if a matching resource is
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  resourceBase      Set to replace the context resource base
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  resourceCache     If set, this is a context attribute name, which the servlet
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    will use to look for a shared ResourceCache instance.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  relativeResourceBase
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    Set with a pathname relative to the base of the
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    servlet context root. Useful for only serving static content out
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  aliases           If True, aliases of resources are allowed (eg. symbolic
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    links and caps variations). May bypass security constraints.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  maxCacheSize      The maximum total size of the cache or 0 for no cache.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  maxCachedFileSize The maximum size of a file to cache
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  maxCachedFiles    The maximum number of files to cache
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  useFileMappedBuffer
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    If set to true, it will use mapped file buffer to serve static content
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    when using NIO connector. Setting this value to false means that
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    a direct buffer will be used instead of a mapped file buffer.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    By default, this is set to true.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *  cacheControl      If set, all static content will have this value set as the cache-control
ruau/ruau/src/main/http/WEB-INF/webdefault.xml: *                    header.
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <servlet-name>default</servlet-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <servlet-class>org.eclipse.jetty.servlet.DefaultServlet</servlet-class>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>aliases</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>false</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>acceptRanges</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>true</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>dirAllowed</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>false</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>welcomeServlets</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>false</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>redirectWelcome</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>false</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>maxCacheSize</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>256000000</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>maxCachedFileSize</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>200000000</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>maxCachedFiles</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>2048</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>gzip</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>true</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>useFileMappedBuffer</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>true</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>resourceCache</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>resourceCache</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>cacheControl</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>max-age=3600,public</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <load-on-startup>0</load-on-startup>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <servlet-name>default</servlet-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>/*</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  </servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- This is the jasper JSP servlet from the jakarta project              -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- The JSP page compiler and execution servlet, which is the mechanism  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- used by Glassfish to support JSP pages.  Traditionally, this servlet -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- is mapped to URL patterh "*.jsp".  This servlet supports the         -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- following initialization parameters (default values are in square    -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- brackets):                                                           -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   checkInterval       If development is false and reloading is true, -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       background compiles are enabled. checkInterval -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       if a JSP page needs to be recompiled. [300]    -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       pages.  See the Ant documenation for more      -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       information. [javac]                           -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   classdebuginfo      Should the class file be compiled with         -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       debugging information?  [true]                 -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   classpath           What class path should I use while compiling   -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       generated servlets?  [Created dynamically      -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       based on the current web application]          -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       Set to ? to make the container explicitly set  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       this parameter.                                -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   development         Is Jasper used in development mode (will check -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       for JSP modification on every access)?  [true] -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   enablePooling       Determines whether tag handler pooling is      -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       enabled  [true]                                -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   fork                Tell Ant to fork compiles of JSP pages so that -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       a separate JVM is used for JSP page compiles   -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       from the one Tomcat is running in. [true]      -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   ieClassId           The class-id value to be sent to Internet      -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       Explorer when using <jsp:plugin> tags.         -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   javaEncoding        Java file encoding to use for generating java  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   keepgenerated       Should we keep the generated Java source code  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       for each page instead of deleting it? [true]   -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   logVerbosityLevel   The level of detailed messages to be produced  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       by this servlet.  Increasing levels cause the  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       generation of more messages.  Valid values are -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       FATAL, ERROR, WARNING, INFORMATION, and DEBUG. -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   mappedfile          Should we generate static content with one     -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       print statement per input line, to ease        -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       debugging?  [false]                            -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   reloading           Should Jasper check for modified JSPs?  [true] -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   suppressSmap        Should the generation of SMAP info for JSR45   -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       debugging be suppressed?  [false]              -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   dumpSmap            Should the SMAP info for JSR45 debugging be    -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       dumped to a file? [false]                      -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       False if suppressSmap is true                  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   scratchdir          What scratch directory should we use when      -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       compiling JSP pages?  [default work directory  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       for the current web application]               -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   tagpoolMaxSize      The maximum tag handler pool size  [5]         -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                       header is added by generated servlet  [false]  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- If you wish to use Jikes to compile JSP pages:                       -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   Set the init parameter "compiler" to "jikes".  Define              -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   the property "-Dbuild.compiler.emacs=true" when starting Jetty     -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   to cause Jikes to emit error messages in a format compatible with  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   Jasper.                                                            -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   If you get an error reporting that jikes can't use UTF-8 encoding, -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--   try setting the init parameter "javaEncoding" to "ISO-8859-1".     -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <servlet-name>jsp</servlet-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>logVerbosityLevel</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>DEBUG</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>fork</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>false</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-name>xpoweredBy</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <param-value>false</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:        <param-name>classpath</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:        <param-value>?</param-value>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <load-on-startup>0</load-on-startup>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <servlet-name>jsp</servlet-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>*.jsp</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>*.jspf</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>*.jspx</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>*.xsp</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>*.JSP</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>*.JSPF</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>*.JSPX</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>*.XSP</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  </servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- Dynamic Servlet Invoker.                                             -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- This servlet invokes anonymous servlets that have not been defined   -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- in the web.xml or by other means. The first element of the pathInfo  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- of a request passed to the envoker is treated as a servlet name for  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- an existing servlet, or as a class name of a new servlet.            -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- This servlet is normally mapped to /servlet/*                        -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- This servlet support the following initParams:                       -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--  nonContextServlets       If false, the invoker can only load        -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                           servlets from the contexts classloader.    -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                           This is false by default and setting this  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                           to true may have security implications.    -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--  verbose                  If true, log dynamic loads                 -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--  *                        All other parameters are copied to the     -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!--                           each dynamic servlet as init parameters    -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    Uncomment for dynamic invocation <servlet> <servlet-name>invoker</servlet-name> <servlet-class>org.eclipse.jetty.servlet.Invoker</servlet-class> <init-param> <param-name>verbose</param-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <param-value>false</param-value> </init-param> <init-param> <param-name>nonContextServlets</param-name> <param-value>false</param-value> </init-param> <init-param>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <param-name>dynamicParam</param-name> <param-value>anyValue</param-value> </init-param> <load-on-startup>0</load-on-startup> </servlet> <servlet-mapping> <servlet-name>invoker</servlet-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <url-pattern>/servlet/*</url-pattern> </servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- Default MIME mappings                                                -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- The default MIME mappings are provided by the mime.properties        -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- resource in the org.eclipse.jetty.server.jar file.  Additional or modified  -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <!-- mappings may be specified here                                       -->
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <mime-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  </mime-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <locale-encoding-mapping-list>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>ar</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>be</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>bg</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>ca</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>cs</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>da</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>de</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>el</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>en</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>es</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>et</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>fi</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>fr</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>hr</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>hu</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>is</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>it</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>iw</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>ja</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>ko</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>lt</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>lv</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>mk</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>nl</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>no</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>pl</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>pt</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>ro</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>ru</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>sh</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>sk</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>sl</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>sq</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>sr</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>sv</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>tr</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>uk</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>zh</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <locale>zh_TW</locale>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    </locale-encoding-mapping>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  </locale-encoding-mapping-list>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  <security-constraint>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <web-resource-name>Disable TRACE</web-resource-name>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:      <url-pattern>/</url-pattern>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:    <auth-constraint/>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:  </security-constraint>
ruau/ruau/src/main/http/WEB-INF/webdefault.xml:</web-app>
ruau/ruau/src/main/http/WEB-INF/web.xml:<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
ruau/ruau/src/main/http/WEB-INF/web.xml:    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
ruau/ruau/src/main/http/WEB-INF/web.xml:    metadata-complete="true"
ruau/ruau/src/main/http/WEB-INF/web.xml:    <display-name>Ruue</display-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>RuueContextFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-class>org.ruauframework.http.RuueContextFilter</filter-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <!-- Begin Ruue Servlet -->
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>RuueContextFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/ruau</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>REQUEST</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>INCLUDE</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>RuueContextFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>*.cmp</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>REQUEST</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>FORWARD</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>INCLUDE</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>RuueContextFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>*.app</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>REQUEST</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>FORWARD</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>INCLUDE</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>RuueRewriteFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-class>org.ruauframework.http.RuueRewriteFilter</filter-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    	<filter-name>RuueRewriteFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>*.cmp</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    	<filter-name>RuueRewriteFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>*.app</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-name>RuueServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-class>org.ruauframework.http.RuueServlet</servlet-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <load-on-startup>0</load-on-startup>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-name>RuueServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/ruau</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <!-- Begin rewrite for docs.app mountpoint.  Force loading to prod mode.  After context -->
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>RuueDocsRewriteFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-class>org.ruauframework.http.RuueDocsRewriteFilter</filter-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>RuueContextFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/ruaudocs</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>REQUEST</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>FORWARD</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>INCLUDE</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    	<filter-name>RuueDocsRewriteFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/ruaudocs</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <!-- End rewrite for docs.app -->
ruau/ruau/src/main/http/WEB-INF/web.xml:    <!-- Begin Ruue ResourceServlet -->
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>RuueResourceRewriteFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-class>org.ruauframework.http.RuueResourceRewriteFilter</filter-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    	<filter-name>RuueResourceRewriteFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/l/*</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-name>RuueResourceServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-class>org.ruauframework.http.RuueResourceServlet</servlet-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <load-on-startup>0</load-on-startup>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>RuueContextFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/ruauResource</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>REQUEST</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>FORWARD</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <dispatcher>INCLUDE</dispatcher>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-name>RuueResourceServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/ruauResource</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <!-- Begin Ruue Framework Servlet -->
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-name>RuueFrameworkServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-class>org.ruauframework.http.RuueFrameworkServlet</servlet-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <load-on-startup>0</load-on-startup>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>CompressingFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-class>com.planetj.servlet.filter.compression.CompressingFilter</filter-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <filter-name>CompressingFilter</filter-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/*</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </filter-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-name>RuueFrameworkServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/ruauFW/*</url-pattern>
ruau/ruau/src/main/http/WEB-INF/web.xml:    </servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:   	<!-- Begin Ruue Content Security Policy Report Servlet -->
ruau/ruau/src/main/http/WEB-INF/web.xml:    	<servlet-name>CSPReporterServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:    	<servlet-class>org.ruauframework.http.CSPReporterServlet</servlet-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <!--  Begin Ruue Validation Servlet -->
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-name>RuueValidationServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-class>org.ruauframework.impl.validation.RuueValidationServlet</servlet-class>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-name>RuueValidationServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/qa/ruauValidation/*</url-pattern> <!-- same pattern as SFDC servlet -->
ruau/ruau/src/main/http/WEB-INF/web.xml:    </servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:    <servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <servlet-name>CSPReporterServlet</servlet-name>
ruau/ruau/src/main/http/WEB-INF/web.xml:        <url-pattern>/_/csp</url-pattern> <!-- keep in sync with CSPReporterServlet.URL -->
ruau/ruau/src/main/http/WEB-INF/web.xml:    </servlet-mapping>
ruau/ruau/src/main/http/WEB-INF/web.xml:</web-app>
ruau/ruau/src/main/resources/version.prop:ruau.build.version=${project.parent.version}
ruau/ruau/src/main/resources/version.prop:ruau.build.timestamp=${timestamp}
ruau/ruau/src/main/resources/version.prop:ruau.build.timestamp.format=${maven.build.timestamp.format}
ruau/ruau/src/main/java/configuration/RuueConfig.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/configuration/RuueConfig.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/configuration/RuueConfig.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/configuration/RuueConfig.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/configuration/RuueConfig.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/configuration/RuueConfig.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/configuration/RuueConfig.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/configuration/RuueConfig.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/configuration/RuueConfig.java: * limitations under the License.
ruau/ruau/src/main/java/configuration/RuueConfig.java:package configuration;
ruau/ruau/src/main/java/configuration/RuueConfig.java:import org.ruauframework.util.ServiceLoaderImpl.RuueConfiguration;
ruau/ruau/src/main/java/configuration/RuueConfig.java:@RuueConfiguration
ruau/ruau/src/main/java/configuration/RuueConfig.java:public class RuueConfig {
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:import org.ruauframework.instance.Action;
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * An adapter for handling exceptions at the servlet level.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * This adapter should be implemented by Ruue users when exceptions need to be
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * handled or surfaced differently than the default Ruue Behavior. The default
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * implementation of this interface simply logs the exception.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * FIXME: there should be an ExceptionAdapterBaseImpl that implements standard
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java: * stuff and is in the ruau package so that it can be overridden.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:public interface ExceptionAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * Get the root cause of the exception.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * This will be deprecated. Kill it now!
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:    public Throwable getRootCause(Throwable th);
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * Handle an exception that is not a part of an action.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * This routine is used to handle most exceptions at the servlet level. It
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * is called for all non quick-fix exceptions and can modify the exception.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * Note however, that sometimes the exception returned is ignored,
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * especially in cases where the Servlet is already handling an exception.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * In cases where the Throwable will be used, it will be serialized onto the
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * client connection for the client libraries to handle. Note that many
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * exceptions will simply be reported as 'Server Error' instead of a detail
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * message.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * @param th the throwable to log/replace
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:    public Throwable handleException(Throwable th);
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * Handle an exception that is part of an action.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * This routine is identical to
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * {@link #handleException(java.lang.Throwable)} except that it is used in
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * the case of an action. In this case, the throwable will always be
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * attached to the action, and reported as an error to the client.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * @param th the throwable to process
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:     * @param action the action whose processing caused the exception.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExceptionAdapter.java:    public Throwable handleException(Throwable th, Action action);
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/CacheAdapter.java:public interface CacheAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java:import java.util.Map;
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java:import org.ruauframework.util.json.JsonSerializer;
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java: * adapts json serializers that ruau should use
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java:public interface JsonSerializerAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java:    Map<String, JsonSerializer<?>> lookupSerializers();
ruau/ruau/src/main/java/org/ruauframework/adapter/JsonSerializerAdapter.java:    Map<Class<?>, JsonSerializer<?>> instanceofSerializers();
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:import java.util.ArrayList;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:import java.util.Collection;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:import java.util.List;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:import org.ruauframework.http.CSP;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:import org.ruauframework.http.CSPReporterServlet;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java: * A default, fairly strict security policy, allowing no framing and only same-origin
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:public class DefaultContentSecurityPolicy implements ContentSecurityPolicy {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    private static final String[] ARRAY_NONE = { CSP.NONE };
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    private static final String[] ARRAY_ANY = {CSP.ALL };
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    private static final String[] ARRAY_SELF_ONLY = { CSP.SELF };
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    private static String inlineHeader = null;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    private static String defaultHeader = null;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    private static List<String> sameOrigin = null;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    private boolean inlineStyle;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:     * Creates a default policy.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:     * @param inline whether to allow inline script and style.  It's better not to, but legacy is what
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:     *     legacy is.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    public DefaultContentSecurityPolicy(boolean inline) {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:     * We don't like framing, by default.  Not even same-origin.  Except that our
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:     * tests require same-origin framing, so we'll allow that anyway.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    public Collection<String> getFrameAncestors() {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        return getSameOrigin();
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:     * Default to allow same-origin child framing.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    public Collection<String> getFrameSources() {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        return getSameOrigin();
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    /** We allow script from same origin and chrome extensions.  And sometimes, sadly, inline and eval. */
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        List<String> list = new ArrayList<String>(inlineStyle ? 4 : 2);
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        list.add(null);  // Same origin allowed
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        list.add("chrome-extension:");
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:            list.add(CSP.UNSAFE_EVAL);
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:            list.add(CSP.UNSAFE_INLINE);
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    /** We allow style from same origin and chrome extensions.  And sometimes, sadly, inline. */
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        List<String> list = new ArrayList<String>(inlineStyle ? 3 : 2);
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        list.add(null);  // Same origin allowed
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        list.add("chrome-extension:");
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:            list.add(CSP.UNSAFE_INLINE);
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    /** Gets default-src terms, initially same-origin. */
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    public Collection<String> getDefaultSources() {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        return getSameOrigin();
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    public Collection<String> getImageSources() {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        return getSameOrigin();
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    public Collection<String> getMediaSources() {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    /** We can connect only to the same origin.  Which should be default by the browser anyway. */
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        return getSameOrigin();
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    /** Creates a shared, immutable list for same-origin-only */
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    private List<String> getSameOrigin() {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        if (sameOrigin == null) {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:            sameOrigin = new ArrayList<String>(1);
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:            sameOrigin.add(null);
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        return sameOrigin;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    public String getCspHeaderValue() {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        String header = inlineStyle ? inlineHeader : defaultHeader;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        if (header == null) {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:            header = buildHeaderNormally(this);
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:                inlineHeader = header;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:                defaultHeader= header;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        return header;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    public static final String buildHeaderNormally(ContentSecurityPolicy csp) {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        builder.frame_ancestor(getTerms(csp.getFrameAncestors()));
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        builder.frame_src(getTerms(csp.getFrameSources()));
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        builder.default_src(getTerms(csp.getDefaultSources()));
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        builder.img_src(getTerms(csp.getImageSources()));
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        builder.media_src(getTerms(csp.getMediaSources()));
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:    private static String[] getTerms(Collection<String> terms) {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefaultContentSecurityPolicy.java:        } else if (terms.size() == 1 && terms.contains(null)) {
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java:import java.util.Map;
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java:public interface PrefixDefaultsAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/PrefixDefaultsAdapter.java:    Map<DefType, String> getPrefixDefaults(Mode mode);
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:import java.util.List;
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:import java.util.Set;
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java: * factory that creates global value providers. each module can have one.
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:public interface GlobalValueProviderAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:     * @return set of all the keys of providers this factory creates
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:    Set<ValueProviderType> getKeys();
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:     * instantiates global value providers for the current context to use
ruau/ruau/src/main/java/org/ruauframework/adapter/GlobalValueProviderAdapter.java:    List<GlobalValueProvider> createValueProviders();
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:import org.ruauframework.def.JavaControllerDef;
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:import org.ruauframework.def.JavaModelDef;
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * An interface to create bean versions of objects used by ruau.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * This interface should be implemented when the method for creating
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * beans is different than the default ruau method (class instantiation).
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * For example, if you are using Spring, you would override this to use
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java: * spring to instantiate and inject dependencies.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:public interface BeanAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * Validate a bean for a model.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * This should validate the model and throw an exception if there is a problem with it.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * @param def the definition to validate
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * @throws QuickFixException if there is an error in the validation.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:    void validateModelBean(JavaModelDef def) throws QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * Get a bean for a model.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * This method should return a different bean for each call, as it
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * will be called on instantiation of the model, and by definition,
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * @param def the definition for the model (including the expected class)
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * @return a bean representing the model.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:    Object getModelBean(JavaModelDef def);
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * Validate a bean for a controller.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * @param def the definition to validate
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * @throws QuickFixException if there is an error in the validation.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:    void validateControllerBean(JavaControllerDef def) throws QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * Get a bean for a controller.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * This method can return the same bean for all calls within a single context
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * (i.e. request). Controllers cannot assume that each action is called on
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * a new bean, but rather should assume that the use context is the same. If
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * this is not the case, a static controller (with no state) should be used
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * to enforce the contract.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * @param def the controller def for which we need a bean
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:     * @return a bean that is tied to the current context.
ruau/ruau/src/main/java/org/ruauframework/adapter/BeanAdapter.java:    Object getControllerBean(JavaControllerDef def);
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java:import org.ruauframework.expression.Expression;
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java:import org.ruauframework.system.Location;
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java:import org.ruauframework.throwable.quickfix.RuueValidationException;
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * adapt a parser that takes in strings and returns {@link Expression} objects
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java: * default implementation is in the ruau-impl-expression module
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java:public interface ExpressionAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java:     * parses the given string from the given location into Expressions
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java:     * @throws RuueValidationException when the expression is not valid
ruau/ruau/src/main/java/org/ruauframework/adapter/ExpressionAdapter.java:    Expression buildExpression(String s, Location start) throws RuueValidationException;
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java:import java.util.Set;
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java:import org.ruauframework.system.DefRegistry;
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java:import org.ruauframework.system.SourceLoader;
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java:public interface RegistryAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/RegistryAdapter.java:    DefRegistry<?>[] getRegistries(Mode mode, Authentication access, Set<SourceLoader> extraLoaders);
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java:import org.ruauframework.system.LoggingContext;
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java:public interface LoggingAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java:    LoggingContext establish();
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java:    boolean isEstablished();
ruau/ruau/src/main/java/org/ruauframework/adapter/LoggingAdapter.java:    void release();
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:import java.io.IOException;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:import java.io.OutputStream;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:import java.io.Reader;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:import java.util.Collection;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:import java.util.Map;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * Note: Ruue reuses a single instance of FormatAdapter implementations. It is
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * necessary to make sure all implementations of FormatAdapter are thread safe.
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * All implementations should be annotated as
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * {@link javax.annotation.concurrent.ThreadSafe ThreadSafe} to make sure future
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java: * modifications are aware of this requirement.
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:public interface FormatAdapter<T> extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:    String getFormatName();
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:    Class<?> getType();
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:    T read(Reader in) throws IOException, QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:    Collection<T> readCollection(Reader in) throws IOException, QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:    void write(Object value, Map<String, Object> attributes, Appendable out) throws IOException, QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:    void writeBinary(Object value, Map<String, Object> attributes, OutputStream out) throws IOException,
ruau/ruau/src/main/java/org/ruauframework/adapter/FormatAdapter.java:    void writeCollection(Collection<? extends T> values, Appendable out) throws IOException, QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:import java.io.File;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:import java.util.Set;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:import org.ruauframework.system.SourceLoader;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:public interface ComponentLocationAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:    File getJavaGeneratedSourceDir();
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:    String getComponentSourcePackage();
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:    Set<SourceLoader> getSourceLoaders();
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:    public static class Impl implements ComponentLocationAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        private final File componentSourceDir;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        private final File javaGeneratedSourceDir;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        private final String componentSourcePackage;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        private final Set<SourceLoader> loaders = Sets.<SourceLoader> newHashSet();
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        public Impl(File componentSourceDir, File javaGeneratedSourceDir) {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            this(componentSourceDir, javaGeneratedSourceDir, null);
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        public Impl(File componentSourceDir, File javaGeneratedSourceDir, String componentSourcePackage) {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            if (componentSourceDir.exists() || componentSourcePackage == null) {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                this.javaGeneratedSourceDir = javaGeneratedSourceDir;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                this.componentSourcePackage = null;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                this.componentSourcePackage = componentSourcePackage;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                this.javaGeneratedSourceDir = null;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        public Impl(SourceLoader loader) {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            if (loader != null) {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                loaders.add(loader);
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            this.javaGeneratedSourceDir = null;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            this.componentSourcePackage = null;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        public Impl(String componentSourcePackage) {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            if (componentSourcePackage != null && !componentSourcePackage.isEmpty()) {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                this.componentSourcePackage = componentSourcePackage;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                this.javaGeneratedSourceDir = null;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                throw new IllegalArgumentException("componentSourcePackage is null or empty: " + componentSourcePackage);
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        public File getJavaGeneratedSourceDir() {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            return this.javaGeneratedSourceDir;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        public String getComponentSourcePackage() {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            return componentSourcePackage;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:        public Set<SourceLoader> getSourceLoaders() {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            return loaders;
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            sb.append("ComponentLocationAdapter(CSD=");
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                sb.append(componentSourceDir.getPath());
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                sb.append("null");
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            sb.append(", JGSD=");
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            if (javaGeneratedSourceDir != null) {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                sb.append(javaGeneratedSourceDir.getPath());
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                sb.append("null");
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            sb.append(", CSP=");
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            if (componentSourcePackage != null) {
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                sb.append(componentSourcePackage);
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:                sb.append("null");
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            sb.append(", Loaders=");
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            sb.append(loaders.toString());
ruau/ruau/src/main/java/org/ruauframework/adapter/ComponentLocationAdapter.java:            sb.append(")");
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:import java.util.List;
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:import java.util.Set;
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:import javax.servlet.http.HttpServletRequest;
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:import org.ruauframework.util.resource.ResourceLoader;
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:public interface ConfigAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    boolean isProduction();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    boolean isSysAdmin();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    Set<Mode> getAvailableModes();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    Mode getDefaultMode();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    String getRuueJSURL();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    /** Returns a string to identify this unique version of the Ruue framework. */
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    String getRuueFrameworkNonce();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    void validateCSRFToken(String token);
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    ResourceLoader getResourceLoader();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    void regenerateRuueJS();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    boolean isClientAppcacheEnabled();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    long getRuueJSLastMod();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    long getBuildTimestamp();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    String getRuueVersion();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    boolean isRuueJSStatic();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    boolean validateCss();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    String getFastClickJSURL();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    List<String> getWalltimeJSURLs();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    boolean isPrivilegedNamespace(String namespace);
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:    String getDefaultNamespace();
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	boolean isUnsecuredPrefix(String prefix);
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	@Deprecated
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	boolean isUnsecuredNamespace(String namespace);
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	void addPrivilegedNamespace(String namespace);
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	void removePrivilegedNamespace(String namespace);
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	boolean isDocumentedNamespace(String namespace);
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	boolean isCacheablePrefix(String prefix);
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	 * Gets the Content-Security-Policy and X-FRAME-OPTION whitelist for a
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	 * given app.  The returned object describes most of what could go into
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	 * a Content-Security-Policy header, although at time of writing only
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	 * {@code frame-src} is used.
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	 * @param app the fully-qualified descriptor string for the app
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	 * @param request the HTTP request, for checking URI, authenticated user, etc.
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	 * @return {@code null} to avoid using Content-Security-Policy and X-FRAME-OPTIONS
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	 *    headers entirely.  Or a {@link ContentSecurityPolicy} object describing the
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	 *    actual policy desired.
ruau/ruau/src/main/java/org/ruauframework/adapter/ConfigAdapter.java:	ContentSecurityPolicy getContentSecurityPolicy(String app, HttpServletRequest request);
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:import java.util.List;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:import org.ruauframework.css.ThemeList;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:import org.ruauframework.css.ThemeValueProvider;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:import org.ruauframework.def.StyleDef;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:import org.ruauframework.def.ThemeDef;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:import com.salesforce.omakase.plugin.Plugin;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java: * Adapter for CSS/Style stuff.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:public interface StyleAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * Gets a {@link ThemeValueProvider} using whatever theme overrides are set on the current {@link RuueContext}. This
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * is usually the method you want.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * @param descriptor The {@link StyleDef} descriptor of the CSS file being parsed. This is used to determine which
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     *            namespace-default {@link ThemeDef} to use, as well as which component-bundle {@link ThemeDef} to use.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:    ThemeValueProvider getThemeValueProvider(DefDescriptor<StyleDef> descriptor) throws QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * Gets a {@link ThemeValueProvider} using the given overrides.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * @param descriptor The {@link StyleDef} descriptor of the CSS file being parsed. This is used to determine which
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     *            namespace-default {@link ThemeDef} to use, as well as which component-bundle {@link ThemeDef} to use.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * @param overrideThemes The {@link ThemeList} containing the override themes.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:    ThemeValueProvider getThemeValueProvider(DefDescriptor<StyleDef> descriptor, ThemeList overrideThemes)
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * Gets a {@link ThemeValueProvider} that doesn't use any override theme (even if one is set on the current
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * {@link RuueContext}).
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * @param descriptor The {@link StyleDef} descriptor of the CSS file being parsed. This is used to determine which
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     *            namespace-default {@link ThemeDef} to use, as well as which component-bundle {@link ThemeDef} to use.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:    ThemeValueProvider getThemeValueProviderNoOverrides(DefDescriptor<StyleDef> descriptor) throws QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * Gets <em>additional</em> CSS {@link Plugin}s to run during the initial preprocessing phase of {@link StyleDef}s.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * Any plugins specified here will run only when a {@link StyleDef} is initially parsed. This is the ideal phase to
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * specify an additional plugin as it is more efficient.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * A plugin is appropriate to return here if it only needs to run the first time the CSS source code is parsed.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * Validating plugins may be good candidates. However note that if your plugin is reworking or validating syntax
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * units that may encountered as a result of theme token substitutions, {@link #getRuntimePlugins()} is usually the
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * better method to return your plugin from. That is, if a theme token substitution results in changes that your
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * plugin may be interested in, your plugin will only have access to this information when executed during the
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * runtime phase.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * All plugins specified here will run <em>after</em> any of the default compilation-only plugins specified by Ruue,
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * but <em>before</em> any of the default compilation+runtime plugins specified by Ruue or any plugins returned from
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * You should include the default plugins returned from super (if you are extending the default impl) unless you
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * intend to prevent them from running. However the default list that is returned may be immutable, so you should
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * rather add them to your own list at the appropriate time (usually first).
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:    List<Plugin> getCompilationPlugins();
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * Gets <em>additional</em> CSS {@link Plugin}s to run during both the initial preprocessing phase of
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * {@link StyleDef} and also during every runtime parsing phase.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * <b>Note:</b> These plugins will be executed during the compilation phase as well.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * During the runtime parsing phase, only explicitly refined syntax units will be delivered to subscription methods.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * You may choose to explicitly refine a syntax unit yourself, but <b>only if you guard against unnecessarily
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * refining anything inapplicable to what you are doing.</b> It is perfectly fine, and usually what you want, to not
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * refine anything at all but to simply deal with whatever other plugins (such as theme token substitution) have
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * This method is called once per parsing of a single {@link StyleDef}, thus any plugins specified here will not
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * have insight into the entire set of CSS to be combined and served together. This is usually fine for most
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * plugins, but for plugins validating in the aggregate (or any plugins collecting aggregate data) you should look
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * into {@link #getContextualRuntimePlugins()} instead.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * All plugins specified here will run <em>after</em> any of the default compilation-only plugins specified by Ruue
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * or by {@link #getCompilationPlugins()}, but <em>before</em> any plugins specified in
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * {@link #getContextualRuntimePlugins()}.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * You should include the default plugins returned from super (if you are extending the default impl) unless you
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * intend to prevent them from running. However the default list that is returned may be immutable, so you should
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * rather add them to your own list at the appropriate time (usually first).
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * Gets <em> additional</em> CSS {@link Plugin}s to run during the runtime parsing phase <b>only</b>.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * During the runtime parsing phase, only explicitly refined syntax units will be delivered to subscription methods.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * You may choose to explicitly refine a syntax unit yourself, but <b>only if you guard against unnecessarily
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * refining anything inapplicable to what you are doing.</b> It is perfectly fine, and usually what you want, to not
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * refine anything at all but to simply deal with whatever other plugins (such as theme token substitution) have
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * The same instance of each plugin returned here will be used for each {@link StyleDef}, which gives the plugin
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * insight into the entire set of CSS to be combined and served together (e.g., in app.css). This may be important
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * for plugins validating in the aggregate or plugins collecting aggregate data. If this is not the case for your
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * plugin, prefer to return the plugin from {@link #getRuntimePlugins()} instead. Plugins returned from this method
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * will not run during {@link StyleDef} compilation.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * These plugins run <em>after</em> any of the default plugins specified by Ruue or by {@link #getRuntimePlugins()}.
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * You should include the default plugins returned from super (if you are extending the default impl) unless you
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * intend to prevent them from running. However the default list that is returned may be immutable, so you should
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:     * rather add them to your own list at the appropriate time (usually first).
ruau/ruau/src/main/java/org/ruauframework/adapter/StyleAdapter.java:    List<Plugin> getContextualRuntimePlugins();
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import java.util.Map;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:import org.ruauframework.util.json.JsonSerializationContext;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java: * context adapter for ruau
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:public interface ContextAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * Release a context.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:    void release();
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * Establish a new context.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param mode the mode for the context.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param masterRegistry the master def registry.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param defaultPrefixes
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param format the format expected as a result.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param access the access mode for the context.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param jsonContext a serialization context for serializing data.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param globalProviders global value providers.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param appDesc the controlling application descriptor.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:    RuueContext establish(Mode mode, MasterDefRegistry masterRegistry, Map<DefType, String> defaultPrefixes,
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:            Format format, Authentication access, JsonSerializationContext jsonContext,
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:            Map<ValueProviderType, GlobalValueProvider> globalProviders,
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:            DefDescriptor<? extends BaseComponentDef> appDesc);
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * Establish a new context.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param mode the mode for the context.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param masterRegistry the master def registry.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param defaultPrefixes
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param format the format expected as a result.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param access the access mode for the context.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param jsonContext a serialization context for serializing data.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param globalProviders global value providers.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param appDesc the controlling application descriptor.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @param isDebugToolEnabled a broken parameter that should not be here.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:    RuueContext establish(Mode mode, MasterDefRegistry masterRegistry, Map<DefType, String> defaultPrefixes,
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:            Format format, Authentication access, JsonSerializationContext jsonContext,
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:            Map<ValueProviderType, GlobalValueProvider> globalProviders,
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:            DefDescriptor<? extends BaseComponentDef> appDesc,
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:            boolean isDebugToolEnabled);
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * is a context established in this thread?.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * @return true if a context has been established.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:    boolean isEstablished();
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * Push a system context.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * This function is used to create a system only context to hide internal operations from
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:    RuueContext pushSystemContext();
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * Pop a system context previously pushed.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:     * Get the current ruau context.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContextAdapter.java:    RuueContext getCurrentContext();
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/RuueAdapter.java:public interface RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java:import org.ruauframework.def.DefinitionAccess;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java:import org.ruauframework.throwable.quickfix.InvalidAccessValueException;
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java:public interface DefinitionParserAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java:    /* parse the value of the ACCESS attribute */
ruau/ruau/src/main/java/org/ruauframework/adapter/DefinitionParserAdapter.java:    DefinitionAccess parseAccess(String namespace, String access) throws InvalidAccessValueException;
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * Copyright, 1999-2011, salesforce.com All Rights Reserved Company Confidential
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:import java.util.Locale;
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:import java.util.TimeZone;
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:import org.ruauframework.util.RuueLocale;
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java: * Provides access to RuueLocale instances and enables a custom label adapter implementation.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:public interface LocalizationAdapter extends RuueAdapter {
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * Returns the specified label. 
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param section 
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      The section in the label definition file where the label is defined. 
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      This assumes your label name has two parts (section.name). 
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      This parameter can be <code>null</code> depending on your label system implementation.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param name
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      The label name.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param params
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      A list of parameter values for substitution on the server. 
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      This parameter can be <code>null</code> if parameter substitution is done on the client.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:    String getLabel(String section, String name, Object... params);
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * Indicates whether the specified label is defined or not.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param section
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      The section in the label definition file where the label is defined. 
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      This assumes your label name has two parts (section.name). 
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      This parameter can be <code>null</code> depending on your label system implementation.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param name
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *      The label name.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @return True if the specified label is defined; otherwise, false.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:    boolean labelExists(String section, String name);
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * Gets a default RuueLocale instance for this context.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @return a RuueLocale
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:    RuueLocale getRuueLocale();
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * Gets an instance of RuueLocale based on the given defaultLocale for this
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param defaultLocal a Locale
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @return a RuueLocale based on the defaultLocale value
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:    RuueLocale getRuueLocale(Locale defaultLocal);
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * Gets an instance of RuueLocale based on the given parameters for this
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param defaultLocale a Locale
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param timeZone a TimeZone
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @return a RuueLocale based on the defaultLocale and timeZone values
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:    RuueLocale getRuueLocale(Locale defaultLocale, TimeZone timeZone);
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * Gets an instance of RuueLocale based on the given parameters for this
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * context. Locales can be specified for each type of localization. If null
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * is given for any argument, an appropriate default value may be calculated
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * and used as needed.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param defaultLocale a Locale to use by default. If null is given a
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *            default may be assumed.
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param currencyLocale a Locale to use for currency amounts if different
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *            than the default
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param dateLocale a Locale to use for dates and times if different than
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *            the default
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param languageLocale a Locale to use for Strings if different than the
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *            default
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param numberLocale a Locale to use for numbers including percentages, if
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     *            different than the default
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param systemLocale the Locale to use as the system default
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @param timeZone a TimeZone to use
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:     * @return a RuueLocale based on the given values
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:    RuueLocale getRuueLocale(Locale defaultLocale, Locale currencyLocale, Locale dateLocale, Locale languageLocale,
ruau/ruau/src/main/java/org/ruauframework/adapter/LocalizationAdapter.java:            Locale numberLocale, Locale systemLocale, TimeZone timeZone);
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:package org.ruauframework.adapter;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:import java.util.Collection;
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * This class describes a security policy for a particular application, by either
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * Concrete implementations of this class likely want to extend
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java: * {@link org.ruauframework.impl.adapter.DefaultContentSecurityProvider}.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:public interface ContentSecurityPolicy {
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Converts this object into a Content-Security-Policy header string.  This is a
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * part of the interface primarily to allow the computed string to be memoized by
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * the instance (or not, if it will never be reused).
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:    String getCspHeaderValue();
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Gets the sources allowed to frame this application.  It may be {@code null}
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * to allow any framing at all; it may be empty to disallow any framing from any
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * site; it may contain {@code null} to allow same-origin framing, and/or it may
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * enumerate allowed framing URLs.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @see {@link #getFrameSources()} for the inverse sources for child frames.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:    Collection<String> getFrameAncestors();
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Gets the sources allowed to be framed by this application.  It may be {@code null}
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * to allow any framing at all; it may be empty to disallow any framing from any
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * site; it may contain {@code null} to allow same-origin framing, and/or it may
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * enumerate allowed framing URLs.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @see {@link #getFrameAncestors()} for the inverse sources for parenting frames.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:    Collection<String> getFrameSources();
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Gets the sources allowed to supply script for this application.  It may be
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * {@code null} to allow script loading from anywhere, or may be empty to disallow
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * loading script all all; more commonly, it may contain {@code null} to allow same-origin
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * framing, and/or it may enumerate allowed framing hosts or URLs.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Gets sources allowed to supply style..
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Gets sources allowed to supply external fonts..
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Gets addresses allowed for connections from this page.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Gets source addresses for "other stuff," corresponding to CSP default-src.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:    Collection<String> getDefaultSources();
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Image sources, as the other methods.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:    Collection<String> getImageSources();
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Object sources, as the other methods.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above. 
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * Media sources, as the others.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     * @return {@code null}, empty collection, or a collection perhaps containing
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:     *     {@code null} to indicate same-origin, as described above.
ruau/ruau/src/main/java/org/ruauframework/adapter/ContentSecurityPolicy.java:    Collection<String> getMediaSources();
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:package org.ruauframework.http;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:import javax.servlet.http.HttpServletRequest;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:public abstract class RequestParam<T> {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    protected final String name;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    protected final boolean required;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    protected RequestParam(String name, boolean required) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        this.name = name;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    protected String getRawValue(HttpServletRequest request) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        String ret = request.getParameter(name);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            throw new MissingParamException(name);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    public abstract T get(HttpServletRequest request);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    public abstract T get(HttpServletRequest request, T theDefault);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    public static class InvalidParamException extends RuueRuntimeException {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        private static final long serialVersionUID = -4184060092142799781L;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        private static final String message = "Invalid parameter value for %s";
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public InvalidParamException(String name) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            super(String.format(message, name));
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    public static class MissingParamException extends RuueRuntimeException {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        private static final long serialVersionUID = -1357285133277767121L;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        private static final String message = "Missing parameter value for %s";
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public MissingParamException(String name) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            super(String.format(message, name));
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    public static class StringParam extends RequestParam<String> {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        private final int length;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public StringParam(String name, int length, boolean required) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            super(name, required);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            String ret = getRawValue(request);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:                throw new InvalidParamException(name);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public String get(HttpServletRequest request, String theDefault) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            return ret == null ? theDefault : ret;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    public static class BooleanParam extends RequestParam<Boolean> {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public BooleanParam(String name, boolean required) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            super(name, required);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public Boolean get(HttpServletRequest request) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            String ret = getRawValue(request);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:                return false;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            return "1".equals(ret) || "true".equalsIgnoreCase(ret) || "yes".equalsIgnoreCase(ret);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public Boolean get(HttpServletRequest request, Boolean theDefault) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            Boolean ret = get(request);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            return ret == null ? theDefault : ret;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    public static class LongParam extends RequestParam<Long> {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public LongParam(String name, boolean required) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            super(name, required);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            String ret = getRawValue(request);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            return ret == null ? null : Long.valueOf(ret);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public Long get(HttpServletRequest request, Long theDefault) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            return ret == null ? theDefault : ret;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    public static class IntegerParam extends RequestParam<Integer> {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public IntegerParam(String name, boolean required) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            super(name, required);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            String ret = getRawValue(request);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            return ret == null ? null : Integer.valueOf(ret);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public Integer get(HttpServletRequest request, Integer theDefault) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            return ret == null ? theDefault : ret;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:    public static class EnumParam<E extends Enum<E>> extends RequestParam<E> {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        private final Class<E> clz;
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public EnumParam(String name, boolean required, Class<E> clz) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            super(name, required);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            String ret = getRawValue(request);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            ret = ret.toUpperCase();
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:                return Enum.valueOf(clz, ret);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            } catch (Throwable e) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:                throw new InvalidParamException(name);
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:        public E get(HttpServletRequest request, E theDefault) {
ruau/ruau/src/main/java/org/ruauframework/http/RequestParam.java:            return ret == null ? theDefault : ret;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:package org.ruauframework.http;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import java.io.IOException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import java.io.PrintWriter;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import java.util.ArrayList;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import java.util.Collection;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import java.util.List;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import java.util.Set;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import javax.activation.MimetypesFileTypeMap;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import javax.servlet.ServletConfig;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import javax.servlet.ServletException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import javax.servlet.http.Cookie;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import javax.servlet.http.HttpServlet;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import javax.servlet.http.HttpServletRequest;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import javax.servlet.http.HttpServletResponse;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.apache.http.HttpHeaders;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.Ruue;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.adapter.ConfigAdapter;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.adapter.ContentSecurityPolicy;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.adapter.ExceptionAdapter;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.http.RequestParam.StringParam;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.throwable.RuueError;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.throwable.RuueUnhandledException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.throwable.NoAccessException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:import org.ruauframework.util.json.Json;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:@SuppressWarnings("serial")
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:public abstract class RuueBaseServlet extends HttpServlet {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String AURA_PREFIX = "ruau.";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String CSRF_PROTECT = "while(1);\n";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * "Short" pages (such as manifest cookies and RuueFrameworkServlet pages) expire in 1 day.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final long SHORT_EXPIRE_SECONDS = 24L * 60 * 60;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final long SHORT_EXPIRE = SHORT_EXPIRE_SECONDS * 1000;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * "Long" pages (such as resources and cached HTML templates) expire in 45 days. We also use this to "pre-expire"
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * no-cache pages, setting their expiration a month and a half into the past for user agents that don't understand
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Cache-Control: no-cache.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final long LONG_EXPIRE = 45 * SHORT_EXPIRE;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String UTF_ENCODING = "UTF-8";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String HTML_CONTENT_TYPE = "text/html";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String JAVASCRIPT_CONTENT_TYPE = "text/javascript";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String MANIFEST_CONTENT_TYPE = "text/cache-manifest";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String CSS_CONTENT_TYPE = "text/css";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String SVG_CONTENT_TYPE = "image/svg+xml";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    /** Clickjack protection HTTP header */
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String HDR_FRAME_OPTIONS = "X-FRAME-OPTIONS";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    /** Baseline clickjack protection level for HDR_FRAME_OPTIONS header */
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String HDR_FRAME_SAMEORIGIN = "SAMEORIGIN";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    /** No-framing-at-all clickjack protection level for HDR_FRAME_OPTIONS header */
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String HDR_FRAME_DENY = "DENY";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    /** Limited access for HDR_FRAME_OPTIONS */
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String HDR_FRAME_ALLOWFROM = "ALLOW-FROM ";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Semi-standard HDR_FRAME_OPTIONS to have no restrictions.  Used because no
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * header at all is taken as an invitation for filters to add their own ideas.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String HDR_FRAME_ALLOWALL = "ALLOWALL";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    protected static MimetypesFileTypeMap mimeTypesMap = new MimetypesFileTypeMap();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static final String OUTDATED_MESSAGE = "OUTDATED";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    protected final static StringParam csrfToken = new StringParam(AURA_PREFIX + "token", 0, true);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    protected static void addCookie(HttpServletResponse response, String name, String value, long expiry) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        if (name != null) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            Cookie cookie = new Cookie(name, value);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            cookie.setPath("/");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            cookie.setMaxAge((int) expiry);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            response.addCookie(cookie);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static String getToken() {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        return Ruue.getConfigAdapter().getCSRFToken();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static void validateCSRF(String token) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        Ruue.getConfigAdapter().validateCSRFToken(token);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Tell the browser to not cache.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * This sets several headers to try to ensure that the page will not be cached. Not sure if last modified matters
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param response the HTTP response to which we will add headers.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static void setNoCache(HttpServletResponse response) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        long past = System.currentTimeMillis() - LONG_EXPIRE;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setHeader(HttpHeaders.CACHE_CONTROL, "no-cache, no-store");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setHeader(HttpHeaders.PRAGMA, "no-cache");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setDateHeader(HttpHeaders.EXPIRES, past);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setDateHeader(HttpHeaders.LAST_MODIFIED, past);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Set a long cache timeout.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * This sets several headers to try to ensure that the page will be cached for a reasonable length of time. Of note
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * is the last-modified header, which is set to a day ago so that browsers consider it to be safe.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param response the HTTP response to which we will add headers.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static void setLongCache(HttpServletResponse response) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setHeader(HttpHeaders.VARY, "Accept-Encoding");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setHeader(HttpHeaders.CACHE_CONTROL, String.format("max-age=%s, public", LONG_EXPIRE / 1000));
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setDateHeader(HttpHeaders.EXPIRES, now + LONG_EXPIRE);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setDateHeader(HttpHeaders.LAST_MODIFIED, now - SHORT_EXPIRE);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Set a 'short' cache timeout.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * This sets several headers to try to ensure that the page will be cached for a shortish length of time. Of note is
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * the last-modified header, which is set to a day ago so that browsers consider it to be safe.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param response the HTTP response to which we will add headers.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static void setShortCache(HttpServletResponse response) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setHeader(HttpHeaders.VARY, "Accept-Encoding");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setHeader(HttpHeaders.CACHE_CONTROL, String.format("max-age=%s, public", SHORT_EXPIRE / 1000));
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setDateHeader(HttpHeaders.EXPIRES, now + SHORT_EXPIRE);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setDateHeader(HttpHeaders.LAST_MODIFIED, now - SHORT_EXPIRE);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static String addCacheBuster(String url) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        // This method should be moved to HttpUtil class in the future
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        int hashLoc = uri.indexOf('#');
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        String hash = "";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        if (hashLoc >= 0) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            hash = uri.substring(hashLoc);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            uri = uri.substring(0, hashLoc);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        sb.append((uri.contains("?")) ? "&" : "?");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        sb.append("ruau.cb=");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        sb.append(Ruue.getConfigAdapter().getBuildTimestamp());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        return sb.toString() + hash;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public RuueBaseServlet() {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        response.setStatus(HttpServletResponse.SC_NOT_FOUND);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                + "<!-- Extra text so IE will display our custom 404 page -->"
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        Ruue.getContextService().endContext();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Check to see if we are in production mode.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    protected boolean isProductionMode(Mode mode) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        return mode == Mode.PROD || Ruue.getConfigAdapter().isProduction();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Handle an exception in the servlet.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * This routine shold be called whenever an exception has surfaced to the top level of the servlet. It should not be
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * overridden unless Ruue is entirely subsumed. Most special cases can be handled by the Ruue user by implementing
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * {@link ExceptionAdapter ExceptionAdapter}.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param t the throwable to write out.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param quickfix is this exception a valid quick-fix
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param context the ruau context.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param request the request.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param response the response.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param written true if we have started writing to the output stream.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @throws IOException if the output stream does.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @throws ServletException if send404 does (should not generally happen).
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    protected void handleServletException(Throwable t, boolean quickfix, RuueContext context,
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            boolean written) throws IOException, ServletException {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            Throwable mappedEx = t;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            boolean map = !quickfix;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            Format format = context.getFormat();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            // This seems to fail, though the documentation implies that you can do
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            // written = false;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                setNoCache(response);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            if (mappedEx instanceof IOException) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                throw (IOException) mappedEx;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            } else if (mappedEx instanceof NoAccessException) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                Throwable cause = mappedEx.getCause();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                String denyMessage = mappedEx.getMessage();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                map = false;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                if (cause != null) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    // Note that the exception handler can remap the cause here.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    cause = Ruue.getExceptionAdapter().handleException(cause);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    denyMessage += ": cause = " + cause.getMessage();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                if (format != Format.JSON) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        // Preserve new lines and tabs in the stacktrace since this is directly being written on to the
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        // page
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        denyMessage = "<pre>" + denyMessage + "</pre>";
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        response.getWriter().println(denyMessage);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            } else if (mappedEx instanceof QuickFixException) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    map = false;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    // In production environments, we want wrap the quick-fix. But be a little careful here.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    // We should never mark the top level as a quick-fix, because that means that we gack
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    // on every mis-spelled app. In this case we simply send a 404 and bolt.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    if (mappedEx instanceof DefinitionNotFoundException) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        DefinitionNotFoundException dnfe = (DefinitionNotFoundException) mappedEx;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                                && dnfe.getDescriptor().equals(context.getApplicationDescriptor())) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    map = true;
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    mappedEx = new RuueUnhandledException("404 Not Found (Application Error)", mappedEx);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            if (map) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                mappedEx = Ruue.getExceptionAdapter().handleException(mappedEx);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            // If we have written out data, We are kinda toast in this case.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            // We really want to roll it all back, but we can't, so we opt
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            // for the best we can do. For HTML we can do nothing at all.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            if (format == Format.JSON) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // If an exception happened while we were emitting JSON, we want the
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // client to ignore the now-corrupt data structure. 404s and 500s
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // cause the client to prepend /*, so we can effectively erase the
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // bad data by appending a */ here and then serializing the exception
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // Unfortunately we can't do the following now. It might be possible
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // in some cases, but we don't want to go there unless we have to.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            if (format == Format.JSON || format == Format.HTML || format == Format.JS || format == Format.CSS) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // Start out by cleaning out some settings to ensure we don't
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // check too many things, leading to a circular failure. Note
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // that this is still a bit dangerous, as we seem to have a lot
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // of magic in the serializer.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                Ruue.getSerializationService().write(mappedEx, null, out);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                if (format == Format.JSON) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        } catch (IOException ioe) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        } catch (Throwable death) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            // Catch any other exception and log it. This is actually kinda bad, because something has
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            // gone horribly wrong. We should write out some sort of generic page other than a 404,
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            // but at this point, it is unclear what we can do, as stuff is breaking right and left.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                Ruue.getExceptionAdapter().handleException(death);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    response.getWriter().println(death.getMessage());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            } catch (IOException ioe) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            } catch (Throwable doubleDeath) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // we are totally hosed.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    response.getWriter().println(doubleDeath.getMessage());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static boolean shouldCacheHTMLTemplate(HttpServletRequest request) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            DefDescriptor<? extends BaseComponentDef> appDefDesc = context.getLoadingApplicationDescriptor();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            if (appDefDesc != null && appDefDesc.getDefType().equals(DefType.APPLICATION)) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                Boolean isOnePageApp = ((ApplicationDef) appDefDesc.getDef()).isOnePageApp();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                if (isOnePageApp != null) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    return isOnePageApp.booleanValue();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        } catch (QuickFixException e) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            throw new RuueRuntimeException(e);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        return !ManifestUtil.isManifestEnabled(request);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public String getContentType(RuueContext.Format format) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        switch (format) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        case MANIFEST:
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            return (RuueBaseServlet.MANIFEST_CONTENT_TYPE);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        case CSS:
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            return (RuueBaseServlet.CSS_CONTENT_TYPE);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        case JS:
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            return (RuueBaseServlet.JAVASCRIPT_CONTENT_TYPE);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        case JSON:
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        case HTML:
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            return (RuueBaseServlet.HTML_CONTENT_TYPE);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        case SVG:
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            return (RuueBaseServlet.SVG_CONTENT_TYPE);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        return ("text/plain");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Gets the UID for the application descriptor of the current context, or {@code null} if there is no application
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * (probably because of a compile error).
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static String getContextAppUid() {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        DefDescriptor<? extends BaseComponentDef> app = context.getApplicationDescriptor();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        if (app != null) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                return definitionService.getDefRegistry().getUid(null, app);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            } catch (QuickFixException e) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // This is perfectly possible, but the error is handled in more
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // contextually-sensible places. For here, we know there's no
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // meaningful uid, so we fall through and return null.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    protected DefDescriptor<?> setupQuickFix(RuueContext context) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        DefinitionService ds = Ruue.getDefinitionService();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        MasterDefRegistry mdr = context.getDefRegistry();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            DefDescriptor<ComponentDef> qfdesc = ds.getDefDescriptor("ruaudev:quickFixException", ComponentDef.class);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            context.setPreloadedDefinitions(mdr.getDependencies(uid));
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        } catch (QuickFixException death) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            // This should _never_ happen, but if you muck up basic ruau stuff, it might.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            throw new RuueError(death);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static List<String> getScripts() throws QuickFixException {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        List<String> ret = Lists.newArrayList();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.addAll(getBaseScripts(context));
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.addAll(getNamespacesScripts(context));
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static List<String> getStyles() throws QuickFixException {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        String contextPath = context.getContextPath();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        Set<String> ret = Sets.newLinkedHashSet();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        // add css client libraries
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.addAll(getClientLibraryUrls(context, ClientLibraryDef.Type.CSS));
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        StringBuilder defs = new StringBuilder(contextPath).append("/l/");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        // add app theme to the context. we do this here so that when the context is serialized below it includes the
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        // app themes. This ensures ALL applicable themes are part of the url, making client-side caching more
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        // predictable
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        context.addAppThemeDescriptors();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        boolean originalSerializeThemes = context.getSerializeThemes();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        context.setSerializeThemes(true);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            Ruue.getSerializationService().write(context, null, RuueContext.class, sb, "HTML");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        } catch (IOException e) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            throw new RuueRuntimeException(e);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        context.setSerializeThemes(originalSerializeThemes);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        String contextJson = RuueTextUtil.urlencode(sb.toString());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        defs.append(contextJson);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        defs.append("/app.css");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.add(defs.toString());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        return new ArrayList<String>(ret);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Gets all client libraries specified. Uses client library service to resolve any urls that weren't specified.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Returns list of non empty client library urls.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param context ruau context
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @param type CSS or JS
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * @return list of urls for client libraries
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    private static Set<String> getClientLibraryUrls(RuueContext context, ClientLibraryDef.Type type)
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        return Ruue.getClientLibraryService().getUrls(context, type);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static List<String> getBaseScripts(RuueContext context) throws QuickFixException {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ConfigAdapter config = Ruue.getConfigAdapter();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        Set<String> ret = Sets.newLinkedHashSet();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            ret.add(html5ShivURL);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.add(config.getMomentJSURL());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.add(config.getFastClickJSURL());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.addAll(config.getWalltimeJSURLs());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.add(config.getEs6PromiseJSURL());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.addAll(getClientLibraryUrls(context, ClientLibraryDef.Type.JS));
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        // framework js should be after other client libraries
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.add(config.getRuueJSURL());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        return new ArrayList<String>(ret);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    public static List<String> getNamespacesScripts(RuueContext context) throws QuickFixException {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        String contextPath = context.getContextPath();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        List<String> ret = Lists.newArrayList();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        StringBuilder defs = new StringBuilder(contextPath).append("/l/");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            Ruue.getSerializationService().write(context, null, RuueContext.class, sb, "HTML");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        } catch (IOException e) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            throw new RuueRuntimeException(e);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        String contextJson = RuueTextUtil.urlencode(sb.toString());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        defs.append(contextJson);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        defs.append("/app.js");
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ret.add(defs.toString());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:     * Sets mandatory headers, notably for anti-clickjacking.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:    protected void setBasicHeaders(DefDescriptor top, HttpServletRequest req, HttpServletResponse rsp) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:        ContentSecurityPolicy csp = Ruue.getConfigAdapter().getContentSecurityPolicy(
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                top == null ? null : top.getQualifiedName(), req);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            rsp.setHeader(CSP.Header.SECURE, csp.getCspHeaderValue());
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:            Collection<String> terms = csp.getFrameAncestors();
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                // not open to the world; figure whether we can express an X-FRAME-OPTIONS header:
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    // closed to any framing at all
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                    rsp.setHeader(HDR_FRAME_OPTIONS, HDR_FRAME_DENY);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        // With one ancestor term, we're either SAMEORIGIN or ALLOWFROM
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                                // Add same-origin headers and policy terms
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                                rsp.addHeader(HDR_FRAME_OPTIONS, HDR_FRAME_SAMEORIGIN);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                            } else if (!site.contains("*") && !site.matches("^[a-z]+:$")) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                                // XFO can't express wildcards or protocol-only, so set only for a specific site:
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                                rsp.addHeader(HDR_FRAME_OPTIONS, HDR_FRAME_ALLOWFROM + site);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                                // When XFO can't express it, still set an ALLOWALL so filters don't jump in
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                                rsp.addHeader(HDR_FRAME_OPTIONS, HDR_FRAME_ALLOWALL);
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        // If we have multiple allowed framers, serve an ALLOWALL.  That's not quite
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        // standard, but it prevents other filters from thinking they should jump
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        // in with, say, SAMEORIGIN just because the header wasn't set.
ruau/ruau/src/main/java/org/ruauframework/http/RuueBaseServlet.java:                        rsp.addHeader(HDR_FRAME_OPTIONS, HDR_FRAME_ALLOWALL);
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:package org.ruauframework.http;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:import java.io.IOException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:import java.util.Set;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:import javax.servlet.*;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:import javax.servlet.http.HttpServletRequest;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:import javax.servlet.http.HttpServletResponse;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:import org.ruauframework.http.CSP.PolicyBuilder;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:import org.ruauframework.util.javascript.directive.JavascriptGeneratorMode;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:import com.google.common.collect.ImmutableSet;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * Servlet filter for adding Content Security Policy headers,
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * per the <a href="http://www.w3.org/TR/CSP/">W3C Content Security
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java: * Policy 1.0 spec</a>.
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:public class RuueCSPFilter implements Filter {
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:    /* TODO: try and get rid of these--see comments on doesUrlAllowInline() */
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:    private static final String APPLICATION = ".*\\.app";
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:    private static final String COMPONENT   = ".*\\.cmp";
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:    private static final String FRAMEWORK_JS= ".*/ruau_" + getFrameworkJsSuffixRegex() + "\\.js";
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:    private static final Set<String> INLINE_ALLOWED_URLS = ImmutableSet.of(APPLICATION, COMPONENT, FRAMEWORK_JS);
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:    protected static final String CHROME_EXTENSION = "chrome-extension:";
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        // set the policy to only report--not disallow--violations
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        if (response.getHeader(CSP.Header.REPORT_ONLY) == null) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:             * only set header if not already set--important because Ruue request URIs get rewritten
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:             * and run through here multiple times, and we must use the client's (first) version of the URI
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:            response.setHeader(CSP.Header.REPORT_ONLY, getPolicy(request.getRequestURI()));
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        chain.doFilter(req, res);
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:            .default_src(CSP.SELF)
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        // note that chrome-extensions can cause violations, and we don't generally care.
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:     * This is a (hopefully) temporary solution.
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:     * As the names imply, CSP strongly discourages use of unsafe-eval and unsafe-inline,
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:     * but parts of the Ruue client depend on inlining, in particular the initial page template,
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:     * and fixing this the last week of feature development is scary.
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:     * NOTE: this should be fixed sooner rather than later, because the initial template *is*
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:     * configurable by consumers, and is therefore a vector for attack.
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:    protected final boolean doesUrlAllowInline(String url) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        for (String pattern : INLINE_ALLOWED_URLS) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:            if (url.matches(pattern)) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        return false;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:    private static String getFrameworkJsSuffixRegex() {
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        sb.append("(");
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        boolean first = true;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        for (String suffix : JavascriptGeneratorMode.getSuffixes()) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:                sb.append("|");
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:            sb.append(suffix);
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:            first = false;
ruau/ruau/src/main/java/org/ruauframework/http/RuueCSPFilter.java:        sb.append(")");
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:package org.ruauframework.http;
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:import java.util.EnumMap;
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:import java.util.Iterator;
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:import java.util.List;
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * This class provides functionality for building Content Security Policy 1.0
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * (CSP) HTTP response headers as described in <a href="http://www.w3.org/TR/CSP/">
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * the W3C Content Security Policy 1.0 spec</a>.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * Use PolicyBuilder to build a header value to attach to an HTTP response.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * Example Usage:
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * To set a header that <em>only reports</em> all resource loading:
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:   .default_src(CSP.NONE)
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:   response.setHeader(CSP.Header.REPORT_ONLY, p.build());
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * To set a header that <em>disallows</em> loading of scripts <em>except</em>
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java: * from social network widgets:
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:       "https://apis.google.com",
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:       "https://platform.twitter.com")
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:   .frame_src(
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:       "https://facebook.com",
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:       "https://platform.twitter.com");
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:   response.setHeader(CSP.Header.SECURE, p.build());
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:public class CSP {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:    public static final class Header {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        public static final String SECURE = "Content-Security-Policy";
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        public static final String REPORT_ONLY = "Content-Security-Policy-Report-Only";
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:    public static enum Directive {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        DEFAULT("default-src"),
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        MEDIA("media-src"),
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        FRAME_ANCESTOR("frame-ancestors"),  // Sites allowed to frame this page
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        FRAME_SRC("frame-src"),  // Sites this page is allowed to frame
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        SANDBOX("sandbox"),
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        private String directive;
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        private Directive(String directive) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:     * Special value for allowing a resource type from the same domain as
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:     * served the initial response.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:    public static final String SELF = "'self'";
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:     * Special value for disallowing a resource type from any domain.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:    public static final String NONE = "'none'";
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:     * Special value for allowing a resource type from any domain.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:    public static final String ALL = "*";
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:     * Special value for allowing inline resource inclusion (such as
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:    public static final String UNSAFE_INLINE = "'unsafe-inline'";
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:     * Special value for allowing <code>eval()</code> of JavaScript.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:    public static final String UNSAFE_EVAL = "'unsafe-eval'";
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:     * Fluent interface for building Content Security Policy headers.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:     * See {@link CSP} for example usage.
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:    public static class PolicyBuilder {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        private EnumMap<Directive, List<String>> directives = new EnumMap<Directive, List<String>>(Directive.class);
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        public PolicyBuilder default_src(String... sources) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        public PolicyBuilder media_src(String... sources) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        public PolicyBuilder frame_src(String... sources) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        public PolicyBuilder frame_ancestor(String... sources) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        public PolicyBuilder sandbox(String... flags) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:            directives.put(Directive.SANDBOX, Lists.newArrayList(flags));
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:            directives.put(Directive.REPORT_URI, Lists.newArrayList(uris));
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:        private PolicyBuilder extend(Directive directive, String... sources) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:                directives.put(directive, Lists.newArrayList(sources));
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:                    list.add(src);
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:            Iterator<Directive> keys = directives.keySet().iterator();
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:            while(keys.hasNext()) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:                List<String> values = directives.get(dir);
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:                if (!values.isEmpty()) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:                        sb.append("; ");
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:                    sb.append(dir);
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:                    for (String value : values) {
ruau/ruau/src/main/java/org/ruauframework/http/CSP.java:                        sb.append(" ").append(value);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:package org.ruauframework.http;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import java.io.IOException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import java.util.regex.Matcher;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import java.util.regex.Pattern;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import javax.servlet.Filter;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import javax.servlet.FilterChain;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import javax.servlet.FilterConfig;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import javax.servlet.RequestDispatcher;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import javax.servlet.ServletContext;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import javax.servlet.ServletException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import javax.servlet.ServletRequest;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import javax.servlet.ServletResponse;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import javax.servlet.http.HttpServletRequest;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:public class RuueRewriteFilter implements Filter {
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:    private ServletContext servletContext;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:    private static final String uriPattern = "/ruau?ruau.tag=%s:%s&ruau.format=HTML&ruau.deftype=%s&ruau.access=%s";
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:    private static final Pattern publicPattern = Pattern.compile("^/public/([^/]*)/([^/]*).app");
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:    private static final Pattern appPattern = Pattern.compile("^/([^/]*)/([^/]*).app");
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:    private static final Pattern cmpPattern = Pattern.compile("^/([^/]*)/([^/]*).cmp");
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:    private static String createURI(String namespace, String name, String defType, String access, String qs) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:        String ret = String.format(uriPattern, namespace, name, defType, access);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            ret = String.format("%s&%s", ret, qs);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws ServletException,
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:        String path = request.getRequestURI().substring(request.getContextPath().length());
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:        Matcher pubMatcher = publicPattern.matcher(path);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:        if (pubMatcher.matches()) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            newUri = createURI(pubMatcher.group(1), pubMatcher.group(2), DefType.APPLICATION.name(),
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                    Authentication.UNAUTHENTICATED.name(), qs);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            Mode mode = RuueContextFilter.mode.get(request, Mode.PROD);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            String name;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            Matcher matcher = null;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            Matcher appMatcher = appPattern.matcher(path);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            if (appMatcher.matches()) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                matcher = appMatcher;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                type = DefType.APPLICATION.name();
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                Matcher cmpMatcher = cmpPattern.matcher(path);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                if (cmpMatcher.matches()) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                    matcher = cmpMatcher;
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                    type = DefType.COMPONENT.name();
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            if (matcher != null) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                    qs = String.format("descriptor=%s:%s&defType=%s", matcher.group(1), matcher.group(2), type);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                    ns = "ruaujstest";
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                    name = "jstest";
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                    type = DefType.APPLICATION.name();
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                    ns = matcher.group(1);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                    name = matcher.group(2);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                newUri = createURI(ns, name, type, Authentication.AUTHENTICATED.name(), qs);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            RequestDispatcher dispatcher = servletContext.getRequestDispatcher(newUri);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:            if (dispatcher != null) {
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:                dispatcher.forward(req, res);
ruau/ruau/src/main/java/org/ruauframework/http/RuueRewriteFilter.java:        chain.doFilter(req, res);
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java: * You may obtain a copy of the License at
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java: * See the License for the specific language governing permissions and
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java: * limitations under the License.
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:package org.ruauframework.http;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import java.io.IOException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import java.util.Collections;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import java.util.List;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import java.util.Map;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import java.util.Set;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import javax.servlet.Filter;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import javax.servlet.FilterChain;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import javax.servlet.FilterConfig;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import javax.servlet.ServletException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import javax.servlet.ServletRequest;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import javax.servlet.ServletResponse;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import javax.servlet.http.HttpServletRequest;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import javax.servlet.http.HttpServletResponse;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.apache.commons.logging.Log;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.apache.commons.logging.LogFactory;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.apache.http.HttpHeaders;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.Ruue;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.adapter.ConfigAdapter;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.def.Definition;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.def.ThemeDef;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.http.RequestParam.BooleanParam;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.http.RequestParam.EnumParam;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.http.RequestParam.InvalidParamException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.http.RequestParam.StringParam;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.service.DefinitionService;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.service.LoggingService;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.system.RuueContext;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.system.Client;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.test.Resettable;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.test.TestContext;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.test.TestContextAdapter;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:import com.google.common.collect.Maps;
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:public class RuueContextFilter implements Filter {
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:    private static final boolean isProduction = Ruue.getConfigAdapter().isProduction();
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:    public static final EnumParam<RuueContext.Mode> mode = new EnumParam<RuueContext.Mode>(RuueServlet.AURA_PREFIX
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:            + "mode", false, RuueContext.Mode.class);
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:    public static final BooleanParam isDebugToolEnabled = new BooleanParam(RuueServlet.AURA_PREFIX
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:            + "debugtool", false);
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:    private static final EnumParam<Format> format = new EnumParam<Format>(RuueServlet.AURA_PREFIX + "format", false,
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:            Format.class);
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:    private static final EnumParam<Authentication> access = new EnumParam<Authentication>(RuueServlet.AURA_PREFIX
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:            + "access", false,
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:            Authentication.class);
ruau/ruau/src/main/java/org/ruauframework/http/RuueContextFilter.java:    private static final StringParam app = new StringParam(RuueServlet.AURA_PREFIX + "app", 0, false);
