ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/TestSuiteDefJSONFormatAdapter.java:        return TestSuiteDef.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/TestSuiteDefJSONFormatAdapter.java:    public void write(Object value, Map<String, Object> attributes, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/TestSuiteDefJSONFormatAdapter.java:        RuueContext c = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/TestSuiteDefJSONFormatAdapter.java:        Json.serialize(value, out, c.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:public class ThrowableJSONFormatAdapter extends JSONFormatAdapter<Throwable> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:    public Class<Throwable> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:        return Throwable.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:    public void write(Object value, Map<String, Object> attributes, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ThrowableJSONFormatAdapter.java:        Json.serialize(value, out, Ruue.getContextService().getCurrentContext().getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:import org.ruauframework.throwable.ClientSideEventException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:import org.ruauframework.util.json.JsonSerializationContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:@ThreadSafe
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:public class ClientSideEventExceptionJSONFormatAdapter extends JSONFormatAdapter<ClientSideEventException> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:    public Class<ClientSideEventException> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:        return ClientSideEventException.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:    public void write(Object value, Map<String, Object> attributes, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:        ClientSideEventException e = (ClientSideEventException) value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:        JsonSerializationContext jsonCxt = Ruue.getContextService().getCurrentContext().getJsonSerializationContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:        Map<String, Object> serialized = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:        serialized.put("exceptionEvent", Boolean.TRUE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:        serialized.put("event", e.getEvent());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:        if (jsonCxt != null && jsonCxt.format()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:            serialized.put("defaultHandler", e.getDefaultHandler());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:            serialized.put("defaultHandler", e.getDefaultHandler() == null ? null : e.getDefaultHandler().toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ClientSideEventExceptionJSONFormatAdapter.java:        Json.serialize(serialized, out, jsonCxt);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:@ThreadSafe
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:public class ComponentDefJSONFormatAdapter extends JSONFormatAdapter<BaseComponentDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:    public Class<BaseComponentDef> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:        return BaseComponentDef.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:    public void writeCollection(Collection<? extends BaseComponentDef> values, Appendable out) throws IOException,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefJSONFormatAdapter.java:        Json.serialize(values, out, context.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java: * Event JSON format adapter.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:@ThreadSafe
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:public class EventDefJSONFormatAdapter extends JSONFormatAdapter<EventDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:    public Class<EventDef> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:        return EventDef.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:    public void writeCollection(Collection<? extends EventDef> values, Appendable out) throws IOException,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/EventDefJSONFormatAdapter.java:        Json.serialize(values, out, context.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java:import org.ruauframework.impl.adapter.format.BaseFormatAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java:public abstract class JSONFormatAdapter<T> extends BaseFormatAdapter<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java:    protected static final String name = "JSON";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java:    public String getFormatName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/JSONFormatAdapter.java:        return name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:public class LibraryDefJSONFormatAdapter extends JSONFormatAdapter<LibraryDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:    public Class<LibraryDef> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:        return LibraryDef.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:    public void writeCollection(Collection<? extends LibraryDef> values, Appendable out) throws IOException,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/LibraryDefJSONFormatAdapter.java:        Json.serialize(values, out, context.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java: * Controller JSON format adapter.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:@ThreadSafe
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:public class ControllerDefJSONFormatAdapter extends JSONFormatAdapter<ControllerDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:    public Class<ControllerDef> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:        return ControllerDef.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:    public void writeCollection(Collection<? extends ControllerDef> values, Appendable out) throws IOException,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ControllerDefJSONFormatAdapter.java:        Json.serialize(values, out, context.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:import org.ruauframework.util.json.JsonSerializationContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:public class RuueContextJSONFormatAdapter extends JSONFormatAdapter<RuueContext> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:    public Class<RuueContext> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:        return RuueContext.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:    public void write(Object value, Map<String, Object> attributes, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:        RuueContext ctx = (RuueContext) value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:        JsonSerializationContext s = ctx.getJsonSerializationContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/RuueContextJSONFormatAdapter.java:        Json.serialize(ctx, out, s);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:import java.util.LinkedHashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:@ThreadSafe
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:public class ComponentJSONFormatAdapter extends JSONFormatAdapter<Component> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:    public Class<Component> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:        return Component.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:    public void write(Object value, Map<String, Object> attributes, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:        RuueContext c = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:        Json.serialize(value, out, c.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:    public void writeCollection(Collection<? extends Component> values, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:        RuueContext c = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:        Map<String, Object> m = new LinkedHashMap<String, Object>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:        m.put("components", values);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentJSONFormatAdapter.java:        Json.serialize(m, out, c.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:import java.io.Reader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:import org.ruauframework.impl.root.component.ComponentDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:public class ComponentDefRefJSONFormatAdapter extends JSONFormatAdapter<ComponentDefRef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:    public Class<ComponentDefRef> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:        return ComponentDefRef.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:    @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:    public Collection<ComponentDefRef> readCollection(Reader in) throws IOException, DefinitionNotFoundException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:        List<?> cdrs = (List<?>) new JsonReader().read(in);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:        List<ComponentDefRef> ret = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:            Map<?, ?> map = (Map<?, ?>) cmp;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:            Map<?, ?> componentDef = (Map<?, ?>) map.get("componentDef");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:            Map<?, ?> attributes = (Map<?, ?>) map.get("attributes");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:            if (attributes != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:                Map<String, Object> attributeValues = (Map<String, Object>) attributes.get("values");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:                if (attributeValues != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:                    for (Map.Entry<String, Object> entry : attributeValues.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:                        Object v = entry.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:                        if (v instanceof Map<?, ?> && ((Map<?, ?>) v).get("descriptor") != null
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:                                && ((Map<?, ?>) v).get("value") != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:                            builder.setAttribute(entry.getKey(), ((Map<?, ?>) v).get("value"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ComponentDefRefJSONFormatAdapter.java:            ret.add(builder.build());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import java.io.Reader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import java.util.HashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import org.ruauframework.system.Message;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:@ThreadSafe
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:public class MessageJSONFormatAdapter extends JSONFormatAdapter<Message> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:    public Class<Message> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        return Message.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:    @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:    public Message read(Reader in) throws IOException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        Map<?, ?> message = (Map<?, ?>) new JsonReader().read(in);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        List<?> actions = (List<?>) message.get("actions");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        List<Action> actionList = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        if (actions != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:            for (Object action : actions) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:                Map<?, ?> map = (Map<?, ?>) action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:                // FIXME: ints are getting translated into BigDecimals here.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:                Map<String, Object> params = (Map<String, Object>) map.get("params");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:                Action instance = (Action) Ruue.getInstanceService().getInstance((String) map.get("descriptor"),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:                        ActionDef.class, params);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:                instance.setId((String) map.get("id"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:                actionList.add(instance);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        return new Message(actionList);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:    public void write(Object value, Map<String, Object> attributes, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        Message message = (Message) value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        RuueContext c = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        Map<String, Object> m = new HashMap<String, Object>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        if (attributes != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:            m.putAll(attributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        m.put("actions", message.getActions());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/MessageJSONFormatAdapter.java:        Json.serialize(m, out, c.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:package org.ruauframework.impl.adapter.format.json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import java.io.Reader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import java.util.HashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:import org.ruauframework.util.json.JsonReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:public class ActionJSONFormatAdapter extends JSONFormatAdapter<Action> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:    public Class<Action> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        return Action.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:    public Collection<Action> readCollection(Reader in) throws IOException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        Map<?, ?> message = (Map<?, ?>) new JsonReader().read(in);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        List<?> actions = (List<?>) message.get("actions");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        List<Action> ret = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        for (Object action : actions) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:            Map<?, ?> map = (Map<?, ?>) action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:            // FIXME: ints are getting translated into BigDecimals here.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:            @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:            Map<String, Object> params = (Map<String, Object>) map.get("params");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:            Action instance = (Action) Ruue.getInstanceService().getInstance((String) map.get("descriptor"),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:                    ActionDef.class, params);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:            instance.setId((String) map.get("id"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:            ret.add(instance);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:    public Action read(Reader in) throws IOException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        Map<?, ?> map = (Map<?, ?>) new JsonReader().read(in);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        Map<String, Object> params = (Map<String, Object>) map.get("params");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        return (Action) Ruue.getInstanceService().getInstance((String) map.get("descriptor"), ActionDef.class, params);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:    public void writeCollection(Collection<? extends Action> values, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        RuueContext c = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        Map<String, Object> m = new HashMap<String, Object>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        m.put("actions", values);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/json/ActionJSONFormatAdapter.java:        Json.serialize(m, out, c.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:package org.ruauframework.impl.adapter.format.svg;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:import org.ruauframework.def.SVGDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:import org.ruauframework.impl.adapter.format.BaseFormatAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:@ThreadSafe
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:public class SVGFormatAdapter extends BaseFormatAdapter<SVGDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:    protected static final String name = "SVG";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:    public String getFormatName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:        return name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:    public Class<?> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:        return SVGDef.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:    public void write(Object value, Map<String, Object> attributes, Appendable out) throws IOException,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:        SVGDef def = (SVGDef) value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/svg/SVGFormatAdapter.java:            out.append(def.getSource().getContents());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:package org.ruauframework.impl.adapter.format.css;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:import org.ruauframework.clientlibrary.Combinable;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java: * Formats client library css. Minifies (removes spaces) if not DEV or TEST modes
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:@ThreadSafe
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:public class ClientLibraryCSSFormatAdapter extends CSSFormatAdapter<Combinable> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:     * Handles Combinable
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:     * @return Combinable
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:    public Class<?> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:        return Combinable.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:     * Loops through combinables and gets their contents.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:     * @param values combinables
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:     * @param out appendable
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:    public void writeCollection(Collection<? extends Combinable> values, Appendable out)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:        for (Combinable c : values) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ClientLibraryCSSFormatAdapter.java:                out.append(c.getContents());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java:package org.ruauframework.impl.adapter.format.css;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java:import org.ruauframework.impl.adapter.format.BaseFormatAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java:public abstract class CSSFormatAdapter<T> extends BaseFormatAdapter<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java:    protected static final String name = "CSS";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java:    public String getFormatName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/CSSFormatAdapter.java:        return name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:package org.ruauframework.impl.adapter.format.css;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:import javax.annotation.concurrent.ThreadSafe;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:import org.ruauframework.def.StyleDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:import com.salesforce.omakase.plugin.Plugin;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:@ThreadSafe
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:public class StyleDefCSSFormatAdapter extends CSSFormatAdapter<StyleDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:    public Class<StyleDef> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:        return StyleDef.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:    public void writeCollection(Collection<? extends StyleDef> values, Appendable out)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:        // get the list of plugins that should be run contextually, e.g., where the plugins have access to the full set
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:        // of StyleDefs to be combined together. This is important for plugins that need to make decisions based on the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:        // aggregate, e.g., a validator that allows at most one occurrence of a particular thing.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:        List<Plugin> contextualPlugins = Ruue.getStyleAdapter().getContextualRuntimePlugins();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:        for (StyleDef def : values) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/StyleDefCSSFormatAdapter.java:                out.append(def.getCode(contextualPlugins));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:package org.ruauframework.impl.adapter.format.css;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:import org.ruauframework.throwable.RuueExceptionUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:public class ThrowableCSSFormatAdapter extends CSSFormatAdapter<Throwable> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:    public Class<Throwable> getType() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        return Throwable.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:    public void write(Object value, Map<String, Object> attributes, Appendable out) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        Throwable t = (Throwable) value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        out.append("/** \nAN EXCEPTION OCCURRED WHILE PROCESSING CSS\n");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        Mode mode = Ruue.getContextService().getCurrentContext().getMode();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        if (mode != Mode.PROD && mode != Mode.PRODDEBUG && !Ruue.getConfigAdapter().isProduction()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:            out.append(RuueExceptionUtil.getStackTrace(t));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        String message = "\\A\\A" + t.getMessage().replaceAll("\n", "\\\\A");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        out.append("\n**/\n");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        out.append(".ruauErrorBox,.ruauMsgMask{display:block;}\n");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        out.append("#ruauErrorMessage {background-color:gainsboro; margin:0 10px 10px; padding:10px; color:#333;");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        out.append("min-height:200px; max-height:300px; overflow:auto; font-family:monospace;");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        out.append("box-shadow:inset 0 0 10px rgba(0,0,0,.4); border:1px solid #666}\n");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/format/css/ThrowableCSSFormatAdapter.java:        out.append(String.format("#ruauErrorMessage:after{white-space: PrE; content:\"%s\";}\n", message));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:package org.ruauframework.impl.adapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import java.text.DateFormat;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import java.text.DateFormatSymbols;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import java.text.SimpleDateFormat;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import java.util.ArrayList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import java.util.Locale;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.exPrEssion.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.throwable.quickfix.InvalidExPrEssionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import com.google.common.collect.ImmutableMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import com.google.common.collect.ImmutableMap.Builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import com.ibm.icu.text.DecimalFormat;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:import com.ibm.icu.text.DecimalFormatSymbols;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:public class LocaleValueProvider implements GlobalValueProvider {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String USER_LOCALE_LANGUAGE = "userLocaleLang";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String USER_LOCALE_COUNTRY = "userLocaleCountry";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String LANGUAGE = "language";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String COUNTRY = "country";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String VARIANT = "variant";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String LANGUAGE_LOCALE = "langLocale";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String MONTH_NAME = "nameOfMonths";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String TODAY_LABEL = "labelForToday";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String WEEKDAY_NAME = "nameOfWeekdays";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String NUMBER_FORMAT = "numberFormat";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String PERCENT_FORMAT = "percentFormat";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String CURRENCY_FORMAT = "currencyFormat";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String DATE_FORMAT = "dateFormat";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String DATETIME_FORMAT = "datetimeFormat";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String TIME_FORMAT = "timeFormat";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String TIME_ZONE = "timezone";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String TIME_ZONE_FILE_NAME = "timezoneFileName";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String CURRENCY_CODE = "currencyCode";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String DECIMAL = "decimal";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String GROUPING = "grouping";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String CURRENCY = "currency";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String ZERO_DIGIT = "zero";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String DEFAULT_DATE_FORMAT = "yyyy-MM-dd";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String DEFAULT_DATETIME_FORMAT = "yyyy-MM-dd HH:mm";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String DEFAULT_TIME_FORMAT = "HH:mm";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static String IS_EASTERN_NAME_STYLE = "isEasternNameStyle";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    private final Map<String, Object> data;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public LocaleValueProvider() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        Builder<String, Object> builder = ImmutableMap.builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        RuueLocale al = Ruue.getLocalizationAdapter().getRuueLocale();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        Locale userLocale = al.getLocale();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        Locale lang = al.getLanguageLocale();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        Locale dateLocale = al.getDateLocale();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(USER_LOCALE_LANGUAGE, userLocale.getLanguage());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(USER_LOCALE_COUNTRY, userLocale.getCountry());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(LANGUAGE, lang.getLanguage());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(COUNTRY, lang.getCountry());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(VARIANT, lang.getVariant());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(LANGUAGE_LOCALE, lang.toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            builder.put(MONTH_NAME, this.getNameOfMonths(al));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            builder.put(WEEKDAY_NAME, this.getNameOfWeekdays(al));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            builder.put(TODAY_LABEL, this.getLabelForToday());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        } catch (QuickFixException qfe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        // using java DateFormat because the year pattern "MMM d, y" (although valid) isn't understood by moment.js
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.DEFAULT, dateLocale);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        DateFormat datetimeFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, dateLocale);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        DateFormat timeFormat = DateFormat.getTimeInstance(DateFormat.DEFAULT, dateLocale);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            SimpleDateFormat sdf = (SimpleDateFormat) dateFormat;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            builder.put(DATE_FORMAT, sdf.toPattern());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            SimpleDateFormat sdtf = (SimpleDateFormat) datetimeFormat;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            builder.put(DATETIME_FORMAT, sdtf.toPattern());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            SimpleDateFormat stf = (SimpleDateFormat) timeFormat;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            builder.put(TIME_FORMAT, stf.toPattern());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        } catch (ClassCastException cce) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(TIME_ZONE, al.getTimeZone().getID());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(TIME_ZONE_FILE_NAME, al.getTimeZone().getID().replace("/", "-"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(IS_EASTERN_NAME_STYLE, al.isEasternNameStyle());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        // DecimalFormat is expected
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        DecimalFormat df = (DecimalFormat) DecimalFormat.getNumberInstance(al.getNumberLocale());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(NUMBER_FORMAT, df.toLocalizedPattern());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        DecimalFormatSymbols dfs = df.getDecimalFormatSymbols();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(DECIMAL, dfs.getDecimalSeparator());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(GROUPING, dfs.getGroupingSeparator());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        df = (DecimalFormat) DecimalFormat.getPercentInstance(al.getNumberLocale());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(PERCENT_FORMAT, df.toLocalizedPattern());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        df = (DecimalFormat) DecimalFormat.getCurrencyInstance(al.getCurrencyLocale());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        builder.put(CURRENCY_FORMAT, df.toLocalizedPattern());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        DecimalFormatSymbols cdfs = df.getDecimalFormatSymbols();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        data = builder.build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public Object getValue(PropertyReference expr) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        return getData().get(expr.getRoot());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public ValueProviderType getValueProviderKey() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        return ValueProviderType.LOCALE;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        return DefDescriptorImpl.getInstance("String", TypeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public void validate(PropertyReference expr) throws InvalidExPrEssionException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        if (expr.size() != 1 || !getData().containsKey(expr.getRoot())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            throw new InvalidExPrEssionException("No property on $Locale for key: " + expr, expr.getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public boolean isEmpty() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public Map<String, ?> getData() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        return data;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    private List<LocalizedLabel> getNameOfMonths(RuueLocale locale) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        DateFormatSymbols monthSymbols = DateFormatSymbols.getInstance(locale.getLanguageLocale());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        ArrayList<LocalizedLabel> monthList = new ArrayList<LocalizedLabel>(12);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            monthList.add(new LocalizedLabel(months[i], shortMonths[i]));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    private String getLabelForToday() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        String today = Ruue.getLocalizationAdapter().getLabel("Related_Lists", "task_mode_today");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        if (today == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            return "Today";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        return today;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    private List<LocalizedLabel> getNameOfWeekdays(RuueLocale locale) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        DateFormatSymbols weekdaySymbols = DateFormatSymbols.getInstance(locale.getLanguageLocale());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        String[] weekdays = weekdaySymbols.getWeekdays();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        String[] shortWeekdays = weekdaySymbols.getShortWeekdays();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        ArrayList<LocalizedLabel> weekdayList = new ArrayList<LocalizedLabel>(7);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        for (int i = 1; i < weekdays.length; i++) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            weekdayList.add(new LocalizedLabel(weekdays[i], shortWeekdays[i].toUpperCase(locale.getLanguageLocale())));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        return weekdayList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:    public static class LocalizedLabel implements JsonSerializable {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        /** Full name of month */
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        private String fullName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        /** Short name of month */
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        private String shortName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        public LocalizedLabel(String fullName, String shortName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            this.fullName = fullName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            this.shortName = shortName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        public String getFullName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            return this.fullName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        public String getShortName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            return this.shortName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:        public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            json.writeMapKey("fullName");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            json.writeValue(this.getFullName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            json.writeMapKey("shortName");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            json.writeValue(this.getShortName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LocaleValueProvider.java:            json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:package org.ruauframework.impl.adapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.exPrEssion.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.impl.util.BrowserInfo;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.throwable.quickfix.InvalidExPrEssionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java: * $Browser global value provider, backed by data from BrowserInfo
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:public class BrowserValueProvider implements GlobalValueProvider {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_TABLET = "isTablet";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_PHONE = "isPhone";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_ANDROID = "isAndroid";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String FORM_FACTOR = "formFactor";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_IPHONE = "isIPhone";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_IPAD = "isIPad";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_IOS = "isIOS";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_WINDOWS_PHONE = "isWindowsPhone";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_WEBKIT = "isWEBKIT";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_FIREFOX = "isFIREFOX";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_IE6 = "isIE6";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_IE7 = "isIE7";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_IE8 = "isIE8";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_IE9 = "isIE9";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_IE10 = "isIE10";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public static final String IS_IE11 = "isIE11";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    private Map<String, Object> browserDetails;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    protected Map<String, Object> parse() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        Map<String, Object> m = Maps.newHashMapWithExpectedSize(32);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        String ua = context != null ? context.getClient().getUserAgent() : null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        BrowserInfo b = new BrowserInfo(ua);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        m.put(IS_TABLET, b.isTablet());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        m.put(FORM_FACTOR, b.getFormFactor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        m.put(IS_IPAD, b.isIPad());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public BrowserValueProvider() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        browserDetails = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public Object getValue(PropertyReference key) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        return getData().get(key.getRoot());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public ValueProviderType getValueProviderKey() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        return ValueProviderType.BROWSER;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public void validate(PropertyReference expr) throws InvalidExPrEssionException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        if (expr.size() != 1 || !getData().containsKey(expr.getRoot())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:            throw new InvalidExPrEssionException("No property on $Browser for key: " + expr, expr.getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public boolean isEmpty() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:    public Map<String, ?> getData() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        if (browserDetails == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:            browserDetails = RuueUtil.immutableMap(parse());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/BrowserValueProvider.java:        return browserDetails;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:package org.ruauframework.impl.adapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import java.math.BigDecimal;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.adapter.JsonSerializerAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.impl.context.RuueContextImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.impl.java.controller.JavaAction;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.instance.ActionWithKeyOverride;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.throwable.RuueExceptionUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.util.json.JsonSerializer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.util.json.JsonSerializer.NoneSerializer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import org.ruauframework.util.json.JsonSerializers;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java: * the basics
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:public class JsonSerializerAdapterImpl implements JsonSerializerAdapter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:    public Map<String, JsonSerializer<?>> lookupSerializers() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        Map<String, JsonSerializer<?>> m = Maps.newLinkedHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        m.putAll(JsonSerializers.MAPPY_FASTY);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        m.put(RuueContextImpl.class.getName(), RuueContextImpl.FULL_SERIALIZER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        m.put(JavaAction.class.getName(), Action.SERIALIZER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        m.put(ActionWithKeyOverride.class.getName(), Action.SERIALIZER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        m.put(BigDecimal.class.getName(), JsonSerializers.BIGDECIMAL);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:    public Map<Class<?>, JsonSerializer<?>> instanceofSerializers() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        Map<Class<?>, JsonSerializer<?>> m = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        m.putAll(JsonSerializers.MAPPY_SLOWY);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        m.put(Throwable.class, THROWABLE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        m.put(Location.class, LOCATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        m.put(RuueLocale.class, LOCALE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:    public static final ThrowableSerializer THROWABLE = new ThrowableSerializer();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:    public static class ThrowableSerializer extends NoneSerializer<Throwable> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        public void serialize(Json json, Throwable value) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:            if (value instanceof JsonSerializable) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:                ((JsonSerializable) value).serialize(json);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:                json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:                json.writeMapEntry("message", value.getMessage());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:                if (Ruue.getContextService().isEstablished()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:                    Mode mode = Ruue.getContextService().getCurrentContext().getMode();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:                        json.writeMapEntry("stack", RuueExceptionUtil.getStackTrace(value));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:                json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:    public static final LocationSerializer LOCATION = new LocationSerializer();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:    public static class LocationSerializer extends NoneSerializer<Location> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        public void serialize(Json json, Location value) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:            json.writeString(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:    public static final LocaleSerializer LOCALE = new LocaleSerializer();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:    public static class LocaleSerializer extends NoneSerializer<RuueLocale> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:        public void serialize(Json json, RuueLocale value) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/JsonSerializerAdapterImpl.java:            json.writeString(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:package org.ruauframework.impl.adapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import java.util.HashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import org.ruauframework.exPrEssion.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import org.ruauframework.throwable.quickfix.InvalidExPrEssionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java: * Value provider for $Label
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:public class LabelValueProvider implements GlobalValueProvider {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:    // MapValueProvider...
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:    private final Map<String, Map<String, String>> labels;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:    public LabelValueProvider() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        labels = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:    public Object getValue(PropertyReference expr) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        List<String> parts = expr.getList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        String section = parts.get(0);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        String param = parts.get(1);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        Map<String, String> m = labels.get(section);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:            m = new HashMap<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:            labels.put(section, m);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        String ret = m.get(param);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:            String label = Ruue.getLocalizationAdapter().getLabel(section, param);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:            // people escape stuff like &copy; in the labels, ruau doesn't need
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:            // that.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:            ret = RuueTextUtil.unescapeOutput(label, false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:            m.put(param, ret);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:    public ValueProviderType getValueProviderKey() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        return ValueProviderType.LABEL;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        return DefDescriptorImpl.getInstance("String", TypeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:    public void validate(PropertyReference expr) throws InvalidExPrEssionException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:            throw new InvalidExPrEssionException("Labels should have a section and a name: " + expr, expr.getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        List<String> parts = expr.getList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        String section = parts.get(0);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        String param = parts.get(1);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        if (!Ruue.getLocalizationAdapter().labelExists(section, param)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:            throw new InvalidExPrEssionException("No label found for " + expr, expr.getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:    public boolean isEmpty() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        return labels.isEmpty();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:    public Map<String, ?> getData() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/adapter/LabelValueProvider.java:        return labels;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import java.util.concurrent.ExecutionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.RuueAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.ComponentLocationAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.ContextAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.ExPrEssionAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.FormatAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.GlobalValueProviderAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.JsonSerializerAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.LocalizationAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.LoggingAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.PrefixDefaultsAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.adapter.RegistryAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.throwable.RuueError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import org.slf4j.LoggerFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import com.google.common.cache.CacheBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import com.google.common.cache.CacheLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import com.google.common.cache.LoadingCache;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:public class RuueImpl {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    private static final Logger _log;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    private static final Map<IndexKey, FormatAdapter<?>> formatAdapters;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    private static final LoadingCache<IndexKey, FormatAdapter<?>> formatAdapterCache;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    static {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        Map<IndexKey, FormatAdapter<?>> t_formatAdapters = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        LoadingCache<IndexKey, FormatAdapter<?>> t_formatAdapterCache = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        _log = LoggerFactory.getLogger(RuueImpl.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            t_formatAdapterCache = CacheBuilder.newBuilder().build(new Loader());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            t_formatAdapters = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            for (FormatAdapter<?> adapter : getFormatAdapters()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:                t_formatAdapters.put(new IndexKey(adapter.getFormatName(), adapter.getType()), adapter);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        } catch (Throwable t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            _log.error("Unable to initialize RuueImpl", t);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        formatAdapterCache = t_formatAdapterCache;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        formatAdapters = t_formatAdapters;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static Collection<ComponentLocationAdapter> getComponentLocationAdapters() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return RuueImpl.getCollection(ComponentLocationAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static ContextAdapter getContextAdapter() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return RuueImpl.get(ContextAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    @SupPrEssWarnings("rawtypes")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static Collection<FormatAdapter> getFormatAdapters() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return getCollection(FormatAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static <T> FormatAdapter<T> getFormatAdapter(String format, Class<T> type) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        FormatAdapter<T> ret = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            ret = (FormatAdapter<T>) formatAdapterCache.get(new IndexKey(format, type));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        } catch (ExecutionException ee) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            throw new RuueRuntimeException(ee);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static Collection<GlobalValueProviderAdapter> getGlobalValueProviderAdapters() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return RuueImpl.getCollection(GlobalValueProviderAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static PrefixDefaultsAdapter getPrefixDefaultsAdapter() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return RuueImpl.get(PrefixDefaultsAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static Collection<RegistryAdapter> getRegistryAdapters() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return RuueImpl.getCollection(RegistryAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static Collection<JsonSerializerAdapter> getJsonSerializerAdapters() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return RuueImpl.getCollection(JsonSerializerAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static ExPrEssionAdapter getExpressionAdapter() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return RuueImpl.get(ExPrEssionAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static LoggingAdapter getLoggingAdapter() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return RuueImpl.get(LoggingAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static LocalizationAdapter getLocalizationAdapter() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return RuueImpl.get(LocalizationAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    public static <T extends RuueAdapter> T get(Class<T> type) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return ServiceLocator.get().get(type);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    private static <T extends RuueAdapter> Collection<T> getCollection(Class<T> type) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        return ServiceLocator.get().getAll(type);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    private static class IndexKey {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        private final String format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        private final Class<?> type;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        private IndexKey(String format, Class<?> type) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            this.format = format.toUpperCase();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            this.hashCode = RuueUtil.hashCode(this.format, type);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        public int hashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            return hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        public boolean equals(Object obj) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            if (obj instanceof IndexKey) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:                return k.format.equals(format) && k.type == this.type;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            return String.format("%s://[%s]", format, type);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:    private static class Loader extends CacheLoader<IndexKey, FormatAdapter<?>> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:        public FormatAdapter<?> load(IndexKey key) throws Exception {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            FormatAdapter<?> ret = formatAdapters.get(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            Class<?> cur = key.type;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:            while (ret == null && cur != null && cur != Object.class) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:                // walk up the class hierarchy until you find an appropriate
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:                // adapter or you run out of superclasses
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:                cur = cur.getSuperclass();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:                ret = formatAdapters.get(new IndexKey(key.format, cur));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/RuueImpl.java:                throw new RuueError("No FormatAdapter found for IndexKey " + key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import java.io.PrintWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import java.io.StringWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import org.apache.commons.logging.Log;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import org.apache.commons.logging.LogFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import org.ruauframework.adapter.ExceptionAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import org.ruauframework.throwable.RuueExceptionInfo;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import org.ruauframework.throwable.RuueHandledException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import org.ruauframework.throwable.RuueUnhandledException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:public class ExceptionAdapterImpl implements ExceptionAdapter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:    private static final Log log = LogFactory.getLog(ExceptionAdapterImpl.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:    public Throwable getRootCause(Throwable th) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:    public Throwable handleException(Throwable th) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        return handleException(th, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:    public Throwable handleException(Throwable th, Action action) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        Throwable loggable = th;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        Throwable mapped = th;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        boolean error = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        boolean logging;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        if (th instanceof RuueHandledException) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:            // If we have a ruau handled exception, we really only want to gack
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:            // cause (if there is one).
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:            loggable = th.getCause();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:            error = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        	String message = "Unable to process your request";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        	//If non-production setup, add more information to exception message
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        	if(!Ruue.getConfigAdapter().isProduction()){
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                th.printStackTrace(p);                
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                message = message + "\n\n" + sw.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        	mapped = new RuueUnhandledException(message);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:            logging = log.isErrorEnabled();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:            logging = log.isInfoEnabled();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        if (loggable != null && logging) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:            if (action != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                    // try serializing the entire action.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                    extended.append(Json.serialize(action));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                } catch (Throwable t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                    // totally ignore errors, and just put the action name on.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                    extended.append(action);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                extended.append("\n");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:            if (th instanceof RuueExceptionInfo) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                RuueExceptionInfo info = (RuueExceptionInfo) th;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                String loc = (info.getLocation() == null ? null : info.getLocation().toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                String addl = info.getExtraMessage();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                if (addl != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                    extended.append(addl);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                    logString = String.format("Unhandled Exception '%s' at %s", th.getMessage(), loc);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                    // nothing, handled below
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                logString = String.format("Unhandled Exception '%s'", th.getMessage());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:                logString = String.format("%s: %s", logString, extended.toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ExceptionAdapterImpl.java:        return mapped;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:package org.ruauframework.impl.integration;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.integration.Integration;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.integration.IntegrationServiceObserver;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.integration.UnsupportedUserAgentException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.service.ContextService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.system.Client;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.system.Client.Type;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.system.Message;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.throwable.ClientOutOfSyncException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:public class IntegrationImpl implements Integration {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private static final String COMPONENT_DEF_TEMPLATE =
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        "{'componentDef': 'markup://%s', 'attributes': { 'values' : %s }, 'localId': '%s'}";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private static final String ASYNC_INJECTION_TEMPLATE =
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    public IntegrationImpl(String contextPath, Mode mode, boolean initializeRuue, String userAgent,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                           String application, IntegrationServiceObserver observer) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        this.contextPath = contextPath;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        this.initializeRuue = initializeRuue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        this.application = application != null ? application : DEFAULT_APPLICATION;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    public void injectComponent(String tag, Map<String, Object> attributes, String localId, String locatorDomId,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                                Appendable out) throws UnsupportedUserAgentException, IOException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        this.injectComponent(tag, attributes, localId, locatorDomId, out, false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    public void injectComponent(String tag, Map<String, Object> attributes, String localId, String locatorDomId,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                                Appendable out, boolean useAsync)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        if (initializeRuue && !hasApplicationBeenWritten) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            // load ruau resources
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            // specifies async so component configs are not printed to HTML
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            writeApplication(out);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            hasApplicationBeenWritten = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        RuueContext context = getContext("is");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            DefDescriptor<ComponentDef> descriptor = definitionService.getDefDescriptor(tag,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            Map<String, Object> actionAttributes = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            Map<String, String> actionEventHandlers = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            if(attributes!=null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:	            for (Map.Entry<String, Object> entry : attributes.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:	                AttributeDef attributeDef = componentDef.getAttributeDef(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:	                if (attributeDef != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:	                    String name = attributeDef.getName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:	                    actionAttributes.put(name, entry.getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:	                        // Emit component.addHandler() wired to special global scope value provider
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:	                        String name = eventDef.getAttributeName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:	                        actionEventHandlers.put(name, (String) entry.getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:	                        throw new RuueRuntimeException(String.format("Unknown attribute or event %s - %s", tag, key));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                StringBuilder jsonEventHandlers = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                if (!actionEventHandlers.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    // serialize registered event handlers into js object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    jsonEventHandlers = new StringBuilder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    Json.serialize(actionEventHandlers, jsonEventHandlers);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    // uses newComponentAsync to create component
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    Json.serialize(actionAttributes, jsonAttributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    // set event handlers to either js "undefined" or object of event and handler names
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    String eventHandlers = jsonEventHandlers != null ? jsonEventHandlers.toString() : "undefined";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    String def = String.format(COMPONENT_DEF_TEMPLATE, tag, jsonAttributes.toString(), localId);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    String newComponentScript = String.format(ASYNC_INJECTION_TEMPLATE, def, locatorDomId, eventHandlers);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    init.append(newComponentScript);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    // config printed onto HTML page
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    // mark injectee component as loaded
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    // only when not using async because component defs will be printed onto HTML
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    definitionService.updateLoaded(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    ControllerDef componentControllerDef = definitionService.getDefDescriptor("ruau://ComponentController",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                            ControllerDef.class).getDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    Map<String, Object> paramValues = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    paramValues.put("name", descriptor.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    paramValues.put("attributes", actionAttributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    Action action = componentControllerDef.createAction("getComponent", paramValues);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    action.setId("ais");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    Action PrEvious = context.setCurrentAction(action);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                        action.run();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    Message message = new Message(Lists.newArrayList(action));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    init.append("var config = ");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    Ruue.getSerializationService().write(message, null, Message.class, init);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    init.append(";\n");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    if (!actionEventHandlers.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                        init.append("config.actionEventHandlers = ");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                        init.append(jsonEventHandlers);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                        init.append(";\n");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    init.append(String.format("$A.run(function() { $A.clientService.injectComponent(config, \"%s\", \"%s\"); });", locatorDomId, localId));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                out.append("<script>").append(init).append("</script>");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            } catch (Throwable t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                // DCHASMAN TODO W-1498425 Refine this approach - we currently have 2 conflicting exception handling mechanisms kicking in that need to be
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                out.append("<script>").append("$A.log(\"failed to create component: " + t.toString() + "\")")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                        .append("</script>");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            releaseContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private void releaseContext() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            Ruue.getContextService().endContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private RuueContext getContext(String num) throws ClientOutOfSyncException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        if (contextService.isEstablished()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        DefDescriptor<ApplicationDef> applicationDescriptor = getApplicationDescriptor(application);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        RuueContext context;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            context = contextService.startContext(mode, Format.JSON, Authentication.AUTHENTICATED, applicationDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        String cuid = context.getLoaded().get(applicationDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        String uid = context.getDefRegistry().getUid(cuid, applicationDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        context.addLoaded(applicationDescriptor, uid);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        context.setPreloadedDefinitions(context.getDefRegistry().getDependencies(uid));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        if (!DEFAULT_APPLICATION.equals(application)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            // Check to insure that the app extends ruau:integrationServiceApp
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            ApplicationDef def = applicationDescriptor.getDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            if (!def.isInstanceOf(getApplicationDescriptor(DEFAULT_APPLICATION))) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                throw new RuueRuntimeException("Application must extend ruau:integrationServiceApp.");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        context.setContextPath(contextPath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        context.setFrameworkUID(Ruue.getConfigAdapter().getRuueFrameworkNonce());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            observer.contextEstablished(this, context);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private void writeApplication(Appendable out) throws IOException, RuueRuntimeException, QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            // ensure that we have a context.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            RuueContext context = getContext(null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                ApplicationDef appDef = getApplicationDescriptor(application).getDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                    observer.beforeApplicationWritten(this, context, appDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                Ruue.getSerializationService().write(appDef, null,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                        appDef.getDescriptor().getDefType().getPrimaryInterface(), out, "EMBEDDED_HTML");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            } catch (QuickFixException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:            } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:                releaseContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private static boolean isSupportedClient(Client client) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private DefDescriptor<ApplicationDef> getApplicationDescriptor(String application) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:        return definitionService.getDefDescriptor(application, ApplicationDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private static final String DEFAULT_APPLICATION = "ruau:integrationServiceApp";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private final String contextPath;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private final Mode mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private final boolean initializeRuue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private final Client client;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private final String application;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private final IntegrationServiceObserver observer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private boolean hasApplicationBeenWritten = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/integration/IntegrationImpl.java:    private int contextDepthCount = 0;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import java.io.StringWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import java.io.Writer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.css.ThemeList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.def.EventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.def.SVGDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.def.StyleDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.instance.Event;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.service.LoggingService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.service.ServerService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.system.LoggingContext.KeyValueLogger;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.system.Message;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.throwable.RuueExecutionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.util.javascript.JavascriptProcessingError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.util.javascript.JavascriptWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:import com.google.common.base.Optional;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:public class ServerServiceImpl implements ServerService {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:    private static final long serialVersionUID = -2779745160285710414L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:    public void run(Message message, RuueContext context, Writer out, Map<?, ?> extras) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        if (message == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        List<Action> actions = message.getActions();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        Json json = Json.createJsonStream(out, context.getJsonSerializationContext());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            if (extras != null && extras.size() > 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                for (Map.Entry<?, ?> entry : extras.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    json.writeMapEntry(entry.getKey(), entry.getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            json.writeMapKey("actions");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            json.writeArrayBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            run(actions, json);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            json.writeArrayEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            loggingService.startTimer(LoggingService.TIMER_SERIALIZATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            loggingService.startTimer(LoggingService.TIMER_SERIALIZATION_AURA);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                json.writeMapEntry("context", context);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                List<Event> clientEvents = Ruue.getContextService().getCurrentContext().getClientEvents();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    json.writeMapEntry("events", clientEvents);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:    private void run(List<Action> actions, Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        for (Action action : actions) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            StringBuffer actionAndParams = new StringBuffer(action.getDescriptor().getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            KeyValueLogger logger = loggingService.getKeyValueLogger(actionAndParams);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                action.logParams(logger);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            String aap = actionAndParams.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            loggingService.startAction(aap);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Action oldAction = context.setCurrentAction(action);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                // We clear out action centric references here.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                json.clearReferences();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                // DCHASMAN TODO Look into a common base for Action
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                // implementations that we can move the call to
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                action.run();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            } catch (RuueExecutionException x) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                Ruue.getExceptionAdapter().handleException(x, action);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                loggingService.stopAction(aap);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            loggingService.startTimer(LoggingService.TIMER_SERIALIZATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            loggingService.startTimer(LoggingService.TIMER_SERIALIZATION_AURA);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                json.writeArrayEntry(action);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            List<Action> additionalActions = action.getActions();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // Recursively process any additional actions created by the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // action
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            if (additionalActions != null && !additionalActions.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                run(additionalActions, json);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // build cache key
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final StringBuilder keyBuilder = new StringBuilder(64);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        keyBuilder.append("CSS:");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        keyBuilder.append(context.getClient().getType());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        keyBuilder.append("$");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final boolean minify = !(mode.isTestMode() || mode.isDevMode());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        keyBuilder.append(minify ? "MIN:" : "DEV:");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // app uid
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        DefDescriptor<?> appDesc = context.getLoadingApplicationDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final String uid = context.getUid(appDesc);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        keyBuilder.append(uid);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // themes uid (themes specified directly to the context (not on the app) need to be considered)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final ThemeList themeList = context.getThemeList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        Optional<String> themesUid = themeList.getThemeDescriptorsUid();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            keyBuilder.append(":").append(themesUid.get());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // 2) TODONM: If a theme uses a map-provider it will affect the css key too. Current idea is to cache a
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // version of the CSS (but still ordered and concatenated). Until this is addressed map-providers shouldn't be
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // used. Another idea is to defer cache to fileforce, etc... once a map-provider is involved. (actually right
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // we are skipping the cache, but when we stop doing that then this needs to be addressed
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final String key = keyBuilder.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        context.setPreloading(true);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        String cached = context.getDefRegistry().getCachedString(uid, appDesc, key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        boolean skipCache = themeList.hasDynamicVars(); // for now, skip caching css with dynamic var overrides
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        if (cached == null || skipCache) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Collection<StyleDef> orderedStyleDefs = filterAndLoad(StyleDef.class, dependencies, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Ruue.getSerializationService().writeCollection(orderedStyleDefs, StyleDef.class, sb, "CSS");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            cached = sb.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            if (!skipCache) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                context.getDefRegistry().putCachedString(uid, appDesc, key, cached);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            out.append(cached);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // build cache key
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final StringBuilder keyBuilder = new StringBuilder(64);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        keyBuilder.append("SVG:");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        keyBuilder.append(context.getClient().getType());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        keyBuilder.append("$");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        DefDescriptor<? extends BaseComponentDef> appDesc = context.getLoadingApplicationDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // verify the app has access to the svg
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        context.getDefRegistry().assertAccess(appDesc, svgDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final String uid = context.getDefRegistry().getUid(null, svg);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        keyBuilder.append(uid);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final String key = keyBuilder.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        context.setPreloading(true);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        String cached = context.getDefRegistry().getCachedString(uid, svg, key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        if (cached == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Ruue.getSerializationService().write(svgDef, null, SVGDef.class, sb, Format.SVG.name());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            cached = sb.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            context.getDefRegistry().putCachedString(uid, svg, key, cached);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        out.append(cached);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final boolean minify = !mode.PrEttyPrint();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final String mKey = minify ? "MIN:" : "DEV:";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // create a temp buffer in case anything bad happens while we're processing this.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // don't want to end up with a half a JS init function
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // TODO: get rid of this buffering by adding functionality to Json.serialize that will help us
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // make sure serialized JS is valid, non-error-producing syntax if an exception happens in the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        // middle of serialization.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        context.setPreloading(true);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        DefDescriptor<?> applicationDescriptor = context.getLoadingApplicationDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final String uid = context.getUid(applicationDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        final String key = "JS:" + mKey + uid;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        String cached = context.getDefRegistry().getCachedString(uid, applicationDescriptor, key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        if (cached == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            sb.append("$A.clientService.initDefs({");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // append component definitions
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            sb.append("componentDefs:");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Collection<BaseComponentDef> defs = filterAndLoad(BaseComponentDef.class, dependencies, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Ruue.getSerializationService().writeCollection(defs, BaseComponentDef.class, sb, "JSON");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            sb.append(",");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // append event definitions
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            sb.append("eventDefs:");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Collection<EventDef> events = filterAndLoad(EventDef.class, dependencies, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Ruue.getSerializationService().writeCollection(events, EventDef.class, sb, "JSON");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            sb.append(",");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // append library definitions
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            sb.append("libraryDefs:");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Collection<LibraryDef> libraries = filterAndLoad(LibraryDef.class, dependencies, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Ruue.getSerializationService().writeCollection(libraries, LibraryDef.class, sb, "JSON");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            sb.append(",");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // append controller definitions
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // Dunno how this got to be this way. The code in the Format adaptor was twisted and stupid,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // as it walked the namespaces looking up the same descriptor, with a string.format that had
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // the namespace but did not use it. This ends up just getting a single controller.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            sb.append("controllerDefs:");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Collection<ControllerDef> controllers = filterAndLoad(ControllerDef.class, dependencies, ACF);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Ruue.getSerializationService().writeCollection(controllers, ControllerDef.class, sb, "JSON");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            sb.append("});");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            cached = sb.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                List<JavascriptProcessingError> errors = JavascriptWriter.CLOSURE_SIMPLE.comPrEss(cached, sw, key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    // For now, just use the non-comPrEssed version if we can't get
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    cached = sw.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    // if unable to comPrEss, add error comments to the end.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    // ONLY if not production instance
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    if (!Ruue.getConfigAdapter().isProduction()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                        sb.append(commentedJavascriptErrors(errors));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    cached = sb.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            context.getDefRegistry().putCachedString(uid, applicationDescriptor, key, cached);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            out.append(cached);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        context.setPreloading(true);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        Ruue.getSerializationService().writeCollection(filterAndLoad(BaseComponentDef.class, dependencies, null),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                BaseComponentDef.class, out);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:     * Provide a better way of distinguishing templates from styles..
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:     * This is used to apply the style definition filter for 'templates', but is getting rather further embedded in
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:    private static interface TempFilter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        public boolean apply(DefDescriptor<?> descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:    private static class RuueControllerFilter implements TempFilter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        public boolean apply(DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            return descriptor.getPrefix().equalsIgnoreCase("ruau") && descriptor.getDefType() == DefType.CONTROLLER;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:    private static final RuueControllerFilter ACF = new RuueControllerFilter();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:    private <P extends Definition, D extends P> Set<D> filterAndLoad(Class<D> defType,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            Set<DefDescriptor<?>> dependencies, TempFilter extraFilter) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        Set<D> out = Sets.newLinkedHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        MasterDefRegistry mdr = Ruue.getContextService().getCurrentContext().getDefRegistry();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                if (defType.isAssignableFrom(descriptor.getDefType().getPrimaryInterface())
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                        && (extraFilter == null || extraFilter.apply(descriptor))) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    out.add(mdr.getDef(dd));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:        } catch (QuickFixException qfe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // This should never happen here, by the time we are filtering our set, all dependencies
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            // MUST be loaded. If not, we have a serious bug that must be addressed.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            throw new IllegalStateException("Illegal state, QFE during write", qfe);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:     * Loops through list of javascript errors and return commented text to display
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:     * @param errors list of javascript syntax errors
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:    private StringBuilder commentedJavascriptErrors(List<JavascriptProcessingError> errors) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    .append("/**")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    .append(System.lineSeparator())
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    .append("There are errors PrEventing this file from being minimized! ")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    .append("Start from the first error as they cascade and produce additional errors.")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                    .append(System.lineSeparator());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            for (JavascriptProcessingError err : errors) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:                errorMsgs.append(err);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/ServerServiceImpl.java:            errorMsgs.append("**/");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:package org.ruauframework.impl.context;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.io.File;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.io.FileInputStream;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.io.InputStream;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.io.ObjectInputStream;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.util.Arrays;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.util.EnumSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import java.util.concurrent.ConcurrentHashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.apache.log4j.Logger;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.adapter.ComponentLocationAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.adapter.RegistryAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.HelperDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.IncludeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.ModelDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.RendererDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.ResourceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.compound.controller.CompoundControllerDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.controller.RuueStaticControllerDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.css.style.StyleDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.java.controller.JavaControllerDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.java.model.JavaModelDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.java.provider.JavaProviderDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.java.provider.JavaThemeDescriptorProviderDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.java.provider.JavaThemeMapProviderDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.java.renderer.JavaRendererDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.java.type.JavaTypeDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.root.RootDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.source.SourceFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.source.file.FileSourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.source.resource.ResourceSourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.system.CacheableDefFactoryImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.system.CachingDefRegistryImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.system.NonCachingDefRegistryImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.system.StaticDefRegistryImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.impl.type.RuueStaticTypeDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.system.CacheableDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.system.DefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.system.DefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.system.SourceListener;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.system.SourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:import com.google.common.collect.ImmutableSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:public class RuueRegistryProviderImpl implements RegistryAdapter, SourceListener {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private static final Logger _log = Logger.getLogger(RegistryAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:     * FIXME: (goliver) I am not convinced that this caching is correct in any way shape or form.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private volatile DefRegistry<?>[] registries;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private static final Set<String> rootPrefixes = ImmutableSet.of(DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private static final Set<DefType> rootDefTypes = EnumSet.of(DefType.APPLICATION, DefType.COMPONENT,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private static class SourceLocationInfo {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        public final List<DefRegistry<?>> staticLocationRegistries;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        public final List<SourceLoader> markupSourceLoaders;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        public final List<SourceLoader> javaSourceLoaders;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        public final String baseDir;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        private boolean changed;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        public SourceLocationInfo(DefRegistry<?>[] staticLocationRegistries, String baseDir,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                List<SourceLoader> markupSourceLoaders,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                List<SourceLoader> javaSourceLoaders) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            if (staticLocationRegistries != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                slr_list = Arrays.asList(staticLocationRegistries);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            this.staticLocationRegistries = slr_list;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            this.markupSourceLoaders = markupSourceLoaders;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            this.javaSourceLoaders = javaSourceLoaders;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            this.baseDir = baseDir;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            this.changed = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        public synchronized boolean isChanged() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            return changed;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        public synchronized void setChanged(boolean changed) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            this.changed = changed;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    public RuueRegistryProviderImpl() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        Ruue.getDefinitionService().subscribeToChangeNotification(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:     * Get an input stream from a file name.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:     * @param path the path to open.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private InputStream getFileInputStream(String path) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        File file = new File(path);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        FileInputStream fis = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            fis = new FileInputStream(file);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        } catch (Throwable t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            // This can occur because the file is unreadable, or doesn't exist. We only
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            // log an error if the file exists.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                _log.error("Unable to open registries file", t);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private DefRegistry<?>[] getStaticRegistries(ComponentLocationAdapter location) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        InputStream ris = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        String pkg = location.getComponentSourcePackage();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            ris = location.getClass().getResourceAsStream(pkg + "/.registries");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            File compSource = location.getComponentSourceDir();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            if (compSource != null && compSource.canRead()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                ris = getFileInputStream(compSource + "/.registries");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            ObjectInputStream ois = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                ois = new ObjectInputStream(ris);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                Object o = ois.readObject();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                if (o instanceof List) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    return l.toArray(new DefRegistry<?> [l.size()]);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                return (DefRegistry[]) ois.readObject();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            } catch (Exception e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                // Do not fail here, just act as if we don't have a registries file.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                // You'd have to create a bad registries file...
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                _log.error("Unable to read registries file", e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                        throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private SourceLocationInfo createSourceLocationInfo(ComponentLocationAdapter location) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        DefRegistry<?>[] staticRegs = getStaticRegistries(location);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        String pkg = location.getComponentSourcePackage();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        String canonical = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        List<SourceLoader> markupLoaders = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        List<SourceLoader> javaLoaders = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            ResourceSourceLoader rsl = new ResourceSourceLoader(pkg);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            markupLoaders.add(rsl);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            javaLoaders.add(rsl);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        } else if (location.getComponentSourceDir() != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            File components = location.getComponentSourceDir();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            if (!components.canRead() || !components.canExecute() || !components.isDirectory()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                _log.error("Unable to find " + components + ", ignored.");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                markupLoaders.add(new FileSourceLoader(components));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                File javaBase = new File(components.getParent(), "java");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                if (javaBase.exists()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    javaLoaders.add(new FileSourceLoader(javaBase));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                File generatedJavaBase = location.getJavaGeneratedSourceDir();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                if (generatedJavaBase != null && generatedJavaBase.exists()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    FileSourceLoader fsl = new FileSourceLoader(generatedJavaBase);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    markupLoaders.add(fsl);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    javaLoaders.add(fsl);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    canonical = components.getCanonicalPath();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                } catch (IOException ioe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    // doh! ignore, not sure what we can do.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    throw new RuueRuntimeException("unable to get canonical path", ioe);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            Set<SourceLoader> loaders = location.getSourceLoaders();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            if (!loaders.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                markupLoaders.addAll(loaders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        if (staticRegs != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            // Ooh, now _this_ is ugly. Because privileged namespaces are tracked by the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            // SourceFactory constructor, we'd best build a source factory for every loader.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            // This ensures that we do in the case of static registries. Note that it also
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            // allows us to see source on static registries.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            SourceFactory sf = new SourceFactory(markupLoaders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            for (DefRegistry<?> reg : staticRegs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                if (reg instanceof StaticDefRegistryImpl) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    ((StaticDefRegistryImpl<?>)reg).setSourceFactory(sf);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        return new SourceLocationInfo(staticRegs, canonical, markupLoaders, javaLoaders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private ConcurrentHashMap<ComponentLocationAdapter, SourceLocationInfo> locationMap = new ConcurrentHashMap<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private SourceLocationInfo getSourceLocationInfo(ComponentLocationAdapter location) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        SourceLocationInfo sli = locationMap.get(location);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        sli = createSourceLocationInfo(location);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        locationMap.putIfAbsent(location, sli);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    public DefRegistry<?>[] getRegistries(Mode mode, Authentication access, Set<SourceLoader> extraLoaders) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        if (mode.isTestMode() || ret == null || (extraLoaders != null && !extraLoaders.isEmpty())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            Collection<ComponentLocationAdapter> markupLocations = getAllComponentLocationAdapters();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            List<SourceLoader> markupLoaders = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            List<SourceLoader> javaLoaders = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            List<DefRegistry<?>> regBuild = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            regBuild.add(RuueStaticTypeDefRegistry.INSTANCE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            regBuild.add(RuueStaticControllerDefRegistry.INSTANCE);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            for (ComponentLocationAdapter location : markupLocations) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                if (location != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    SourceLocationInfo sli = getSourceLocationInfo(location);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    if (!sli.isChanged() && sli.staticLocationRegistries != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                        regBuild.addAll(sli.staticLocationRegistries);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                        markupLoaders.addAll(sli.markupSourceLoaders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                        javaLoaders.addAll(sli.javaSourceLoaders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            if (extraLoaders != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                markupLoaders.addAll(extraLoaders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                javaLoaders.addAll(extraLoaders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            if (markupLoaders.size() > 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                SourceFactory markupSourceFactory = new SourceFactory(markupLoaders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(createDefRegistry(new RootDefFactory(markupSourceFactory), rootDefTypes, rootPrefixes));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<ControllerDef> createJavascriptRegistry(markupSourceFactory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<TestSuiteDef> createJavascriptRegistry(markupSourceFactory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<RendererDef> createJavascriptRegistry(markupSourceFactory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<HelperDef> createJavascriptRegistry(markupSourceFactory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<ProviderDef> createJavascriptRegistry(markupSourceFactory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<ModelDef> createJavascriptRegistry(markupSourceFactory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<ResourceDef> createJavascriptRegistry(markupSourceFactory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<IncludeDef> createJavascriptRegistry(markupSourceFactory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(createDefRegistry(new StyleDefFactory(markupSourceFactory),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                        Sets.newHashSet(DefType.STYLE, DefType.RESOURCE),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                        Sets.newHashSet(DefDescriptor.CSS_PREFIX, DefDescriptor.TEMPLATE_CSS_PREFIX)));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            regBuild.add(RuueRegistryProviderImpl.<ControllerDef>createDefRegistry(new CompoundControllerDefFactory(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            if (javaLoaders.size() > 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<ControllerDef>createDefRegistry(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                        new JavaControllerDefFactory(javaLoaders), DefType.CONTROLLER, DefDescriptor.JAVA_PREFIX));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(RuueRegistryProviderImpl.<RendererDef>createDefRegistry(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                        new JavaRendererDefFactory(javaLoaders), DefType.RENDERER, DefDescriptor.JAVA_PREFIX));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(createDefRegistry(new JavaTypeDefFactory(javaLoaders),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(createDefRegistry(new JavaModelDefFactory(javaLoaders),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(createDefRegistry(new JavaProviderDefFactory(javaLoaders), DefType.PROVIDER,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(createDefRegistry(new JavaThemeDescriptorProviderDefFactory(javaLoaders),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                regBuild.add(createDefRegistry(new JavaThemeMapProviderDefFactory(javaLoaders),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            ret = regBuild.toArray(new DefRegistry<?>[regBuild.size()]);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    protected Collection<ComponentLocationAdapter> getAllComponentLocationAdapters() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        Collection<ComponentLocationAdapter> ret = ServiceLocator.get().getAll(ComponentLocationAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        String prop = System.getProperty("ruau.componentDir");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            ret = Lists.newArrayList(ret);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            ret.add(new ComponentLocationAdapter.Impl(new File(prop)));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    private static <T extends Definition> DefRegistry<T> createJavascriptRegistry(SourceFactory sourceFactory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        CacheableDefFactoryImpl<T> factory = new CacheableDefFactoryImpl<>(sourceFactory);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        return createDefRegistry(factory, dt, DefDescriptor.JAVASCRIPT_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    protected static <T extends Definition> DefRegistry<T> createDefRegistry(DefFactory<T> factory, DefType defType,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        return createDefRegistry(factory, EnumSet.of(defType), Sets.newHashSet(PrEfix));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    protected static <T extends Definition> DefRegistry<T> createDefRegistry(DefFactory<T> factory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:        if (factory instanceof CacheableDefFactory) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            return new CachingDefRegistryImpl<>((CacheableDefFactory<T>) factory, defTypes, PrEfixes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            return new NonCachingDefRegistryImpl<>(factory, defTypes, PrEfixes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:    public void onSourceChanged(DefDescriptor<?> source, SourceMonitorEvent event, String filePath) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:            if (filePath != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                File file = new File(filePath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    String canonical = file.getCanonicalPath();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                    for (SourceLocationInfo sli : locationMap.values()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                        if (sli.baseDir != null && canonical.startsWith(sli.baseDir)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                            sli.setChanged(true);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueRegistryProviderImpl.java:                } catch (IOException ioe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:package org.ruauframework.impl.context;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:import org.apache.log4j.Logger;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:import org.ruauframework.service.LoggingService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:import org.ruauframework.system.LoggingContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:public class LoggingContextImpl implements LoggingContext {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    protected static final Logger logger = Logger.getLogger("LoggingContextImpl");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    private final Map<String, Object> loggingValues = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    private final Map<String, Timer> timers = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    private final Map<String, Counter> counters = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    private final Map<String, Object> values = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    private final Map<String, Map<String, Long>> actionStats = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public void startAction(String actionName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        Map<String, Long> actionStatMap = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        actionStats.put(actionName, actionStatMap);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        for (Map.Entry<String, Timer> timerEntry : timers.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            Timer timer = timerEntry.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            timer.mark(actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        for (Map.Entry<String, Counter> counterEntry : counters.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            Counter counter = counterEntry.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            counter.mark(actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        startActionTimer(actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    protected void startActionTimer(String actionName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        startTimer(LoggingService.TIMER_ACTION + actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public void stopAction(String actionName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        stopActionTimer(actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        Map<String, Long> actionStatsMap = actionStats.get(actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        if (actionStatsMap != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            Timer actionTimer = timers.get(LoggingService.TIMER_ACTION + actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            if (actionTimer != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                actionStatsMap.put(LoggingService.TIMER_ACTION, actionTimer.getTime());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            for (Map.Entry<String, Timer> timerEntry : timers.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                Long timeSinceMark = timerEntry.getValue().getTimeSince(actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                if (timeSinceMark != null && timeSinceMark > 0L) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                    actionStatsMap.put(timerEntry.getKey(), timeSinceMark);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            for (Map.Entry<String, Counter> counterEntry : counters.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                Long countSinceMark = counterEntry.getValue().getCountSince(actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                if (countSinceMark != null && countSinceMark > 0L) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                    actionStatsMap.put(counterEntry.getKey(), countSinceMark);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    protected void stopActionTimer(String actionName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        stopTimer(LoggingService.TIMER_ACTION + actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public void startTimer(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        Timer t = timers.get(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            t = new Timer(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            timers.put(name, t);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        t.start();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public void stopTimer(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        Timer t = timers.get(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public long getTime(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        Timer t = timers.get(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public void resetTimer(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        Timer t = timers.get(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public Object getValue(String key) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        return values.get(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public void setValue(String key, Object value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        values.put(key, value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public void logRequestValues() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        for (Map.Entry<String, Timer> entry : timers.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            loggingValues.put(entry.getKey(), entry.getValue().getTime());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        for (Map.Entry<String, Counter> entry : counters.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            loggingValues.put(entry.getKey(), entry.getValue().get());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        loggingValues.putAll(values);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        logRequestValuesMap(loggingValues);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        logActions(loggingValues);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public KeyValueLogger getKeyValueLogger(StringBuffer log) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    protected void logRequestValuesMap(Map<String, Object> valueMap) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        log(valueMap);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    protected void logActions(Map<String, Object> valueMap) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        for (Map.Entry<String, Map<String, Long>> actionStat : actionStats.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            String actionName = actionStat.getKey();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            Map<String, Long> actionMap = actionStat.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            logAction(actionName, actionMap, valueMap);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    protected void logAction(String actionName, Map<String, Long> actionMap, Map<String, Object> valueMap) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        StringBuilder buffer = new StringBuilder(actionName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        for (Map.Entry<String, Long> entry : actionMap.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            if (entry.getValue() != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                buffer.append(";" + entry.getKey() + ": " + String.valueOf(entry.getValue()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    private static class KVLogger implements KeyValueLogger {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private final StringBuffer logLine;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        public void log(String name, String value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            logLine.append("{").append(name).append(",").append(value).append("}");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:     * A simple counter class.  Used instead of an Long so that it can keep track of a names mark.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    private static class Counter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private Map<String, Long> marks = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private long count = 0;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:         * @param markName if the markName already exists it will be replaced
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        public void mark(String markName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            marks.put(markName, count);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        public long getCountSince(String markName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            Long mark = marks.get(markName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            return (mark == null) ? 0 : count - mark;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:     * A simple nestable timer class.  Time is reported in milliseconds.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:     * If the timer start method is nested (called more than once before stop is called
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:     * reference counting is employed so that the timer keeps running until the number
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:     * of stop calls equals the number of PrEvious start calls.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:     * The timer is restartable.  Addition start/stop calls will add to the PrEvious
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:     * total time unless restart is called in between.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public static class Timer {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        //totalTime and startTime is are nanoseconds for compatibility with System.getNanoTime();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        //getTime converts totalTime to ms
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private long startTime = -1L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private long totalTime = -1L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private final String name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private int startCount = 0;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private Map<String, Long> marks = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        public Timer(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            this.name = name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        public String getName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            return name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        public void start() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            startCount ++;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            if (startTime < 0L) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                startTime = System.nanoTime();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            startCount--;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            if (startCount == 0L && startTime >= 0L) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                long curr = System.nanoTime();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                totalTime = ((totalTime > 0L) ? totalTime : 0L)  + curr - startTime;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                startTime = -1;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:         * Like a stop watch lap time with a name, does not stop the timer.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:         * @param markName if the markName already exists it will be replaced not incremented
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private void mark(String markName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            long markTime = 0L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            if (totalTime > 0L || startTime > 0L) {// started at least once
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                markTime = ((totalTime > 0L) ? totalTime : 0L)  + ((startTime > 0L) ? (System.nanoTime() - startTime) : 0L);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            marks.put(markName, markTime);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        private long getTimeSince(String markName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            if (totalTime > 0L || startTime > 0L) {// started at least once
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                long duration = ((totalTime > 0L) ? totalTime : 0L)  + ((startTime > 0L) ? (System.nanoTime() - startTime) : 0L);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                Long markTime = marks.get(markName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                return (markTime == null) ? -1L : ((duration - markTime) / 1000000L);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:         * @return The accumulated duration in ms.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            return (totalTime > 0L) ? (totalTime / 1000000L) : totalTime; //convert to ms for public consumption
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:         * Reset the accumulated total time.  If the timer was
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:         * started it is now stopped and the accumulated time is discarded.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            startTime = -1L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            totalTime = -1L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    protected void log(Map<String, Object> valueMap) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:        for (Map.Entry<String, Object> entry : valueMap.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:            if (entry.getValue() != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:                buffer.append(entry.getKey() + ": " + entry.getValue().toString() + ";");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LoggingContextImpl.java:    public void logCSPReport(Map<String, Object> report) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:package org.ruauframework.impl.context;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:import java.util.EnumMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:import org.ruauframework.adapter.PrefixDefaultsAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:public class RuuePrefixDefaultsProviderImpl implements PrefixDefaultsAdapter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:    protected static final Map<DefType, String> defaults = new EnumMap<DefType, String>(DefType.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:    static {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.ACTION, DefDescriptor.JAVA_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.COMPONENT, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.CONTROLLER, DefDescriptor.JAVA_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.MODEL, DefDescriptor.JAVA_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.NAMESPACE, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.EVENT, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.LIBRARY, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.INCLUDE, DefDescriptor.JAVASCRIPT_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.INTERFACE, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.THEME, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.STYLE, DefDescriptor.CSS_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.TYPE, DefDescriptor.JAVA_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.RENDERER, DefDescriptor.JAVASCRIPT_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.PROVIDER, DefDescriptor.JAVA_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.TESTSUITE, DefDescriptor.JAVASCRIPT_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.RESOURCE, DefDescriptor.JAVASCRIPT_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.DOCUMENTATION, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.DESIGN, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        defaults.put(DefType.SVG, DefDescriptor.MARKUP_PREFIX);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:    public Map<DefType, String> getPrefixDefaults(Mode mode) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuuePrefixDefaultsProviderImpl.java:        return RuuePrefixDefaultsProviderImpl.defaults;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:package org.ruauframework.impl.context;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:import java.util.*;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:import org.ruauframework.adapter.LocalizationAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:import org.ruauframework.impl.util.RuueLocaleImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:import org.ruauframework.util.RuueLocale;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:public class LocalizationAdapterImpl implements LocalizationAdapter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:     * Temporary workaround for localized labels for Ruue Standalone
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:    private static Map<String, Map<String, String>> labels = new HashMap<String, Map<String, String>>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:    static {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        Map<String, String> todayLabels = new HashMap<String, String>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("ar", "اليوم");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("cs", "Dnes");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("de", "Heute");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("en", "Today");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("en_US", "Today");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("es", "Hoy");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("fr", "aujourd'hui");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("ja", "今日");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("ko", "오늘");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("zh_CN", "今天");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("zh_TW", "今天");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        labels.put("task_mode_today", todayLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels = new HashMap<String, String>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("ar", "اليوم + المتأخرة");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("cs", "Dnes + splatnosti");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("de", "Heute + Überfällig");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("en", "Today + Overdue");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("en_US", "Today + Overdue");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("es", "Hoy + Atrasado");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("fr", "aujourd'hui1 + retard");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("ja", "今日+延滞");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("ko", "오늘 + 연체");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("zh_CN", "今天+逾期");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        todayLabels.put("zh_TW", "今天+逾期");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        labels.put("task_mode_today_overdue", todayLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        Map<String, String> tomorrowLabels = new HashMap<String, String>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        tomorrowLabels.put("en_US", "Tomorrow");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        labels.put("task_mode_tomorrow", tomorrowLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        Map<String, String> yesterdayLabels = new HashMap<String, String>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        yesterdayLabels.put("en_US", "Yesterday");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        labels.put("yesterday", yesterdayLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        Map<String, String> controllerLabels = new HashMap<String, String>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        controllerLabels.put("en_US", "Controller");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        labels.put("controller", controllerLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        Map<String, String> helperLabels = new HashMap<String, String>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        helperLabels.put("en_US", "Helper");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        labels.put("helper", helperLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        Map<String, String> rendererLabels = new HashMap<String, String>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        rendererLabels.put("en_US", "Renderer");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        labels.put("renderer", rendererLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        Map<String, String> providerLabels = new HashMap<String, String>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        providerLabels.put("en_US", "Provider");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        labels.put("provider", providerLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:    public LocalizationAdapterImpl() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:    public String getLabel(String section, String name, Object... params) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        Map<String, String> label = labels.get(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        if (label == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:            return "FIXME - LocalizationAdapter.getLabel() needs implementation!";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        return label.get(this.getRuueLocale().getLanguageLocale().toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:    public boolean labelExists(String section, String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:     * Creates a RuueLocale using the first Locale specified in the Http Request
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:     * based on the Accept-Language header values when available, otherwise the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:     * default is used.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:    public RuueLocale getRuueLocale() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        // check for nulls - this happens when RuueContextFilter has not been
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:            List<Locale> locales = context.getRequestedLocales();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:            if (locales != null && locales.size() > 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:                return new RuueLocaleImpl(locales.get(0));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        return new RuueLocaleImpl();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:    public RuueLocale getRuueLocale(Locale defaultLocale) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        return new RuueLocaleImpl(defaultLocale);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:    public RuueLocale getRuueLocale(Locale defaultLocale, TimeZone timeZone) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        return new RuueLocaleImpl(defaultLocale, timeZone);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:    public RuueLocale getRuueLocale(Locale defaultLocale, Locale currencyLocale, Locale dateLocale,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:            Locale languageLocale, Locale numberLocale, Locale systemLocale, TimeZone timeZone) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:        return new RuueLocaleImpl(defaultLocale, currencyLocale, dateLocale, languageLocale, numberLocale,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/LocalizationAdapterImpl.java:                systemLocale, timeZone);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:package org.ruauframework.impl.context;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.ArrayList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.Collections;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.Comparator;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.HashSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.Locale;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import com.google.common.base.Optional;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.apache.log4j.Logger;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.css.MutableThemeList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.css.ThemeList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.def.EventType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.impl.css.ThemeListImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.instance.Event;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.instance.Instance;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.instance.InstanceStack;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.system.Client;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.system.LoggingContext.KeyValueLogger;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.test.TestContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.test.TestContextAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.throwable.SystemErrorException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.throwable.quickfix.InvalidEventTypeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.util.json.BaseJsonSerializationContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.util.json.JsonSerializationContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.util.json.JsonSerializer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.util.json.JsonSerializer.NoneSerializer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import org.ruauframework.util.json.JsonSerializers;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:import java.util.Deque;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:public class RuueContextImpl implements RuueContext {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private static final Logger logger = Logger.getLogger(RuueContextImpl.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public static class SerializationContext extends BaseJsonSerializationContext {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        public SerializationContext() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            super(false, false, -1, -1, false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        public JsonSerializer<?> getSerializer(Object o) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            Class<?> c = o.getClass();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (c == RuueContextImpl.class || o instanceof RuueContextImpl) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            } else if (c == ArrayList.class || o instanceof Collection) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                return JsonSerializers.COLLECTION;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            } else if (c == Mode.class || c == String.class) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                return JsonSerializers.STRING;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private static class DefSorter implements Comparator<Definition> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        public int compare(Definition arg0, Definition arg1) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            return arg0.getDescriptor().compareTo(arg1.getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private static final DefSorter DEFSORTER = new DefSorter();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private static class Serializer extends NoneSerializer<RuueContext> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        private final boolean forClient;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        private Serializer(boolean forClient) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        public static final String DELETED = "deleted";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        private void writeDefs(Json json, String name, List<Definition> writable) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (writable.size() > 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                Collections.sort(writable, DEFSORTER);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                json.writeMapEntry(name, writable);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        public void serialize(Json json, RuueContext ctx) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            json.writeMapEntry("mode", ctx.getMode());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            DefDescriptor<? extends BaseComponentDef> appDesc = ctx.getApplicationDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (appDesc != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                if (appDesc.getDefType().equals(DefType.APPLICATION)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    json.writeMapEntry("app", String.format("%s:%s", appDesc.getNamespace(), appDesc.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    json.writeMapEntry("cmp", String.format("%s:%s", appDesc.getNamespace(), appDesc.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (ctx.getSerializeThemes()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    List<String> stringed = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        stringed.add(theme.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    json.writeMapEntry("themes", stringed);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                Optional<String> dynamicVarsUid = themes.getActiveDynamicVarsUid();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                if (dynamicVarsUid.isPresent()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    json.writeMapEntry("dynamicVarsUid", dynamicVarsUid.get());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (ctx.getRequestedLocales() != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                List<String> locales = new ArrayList<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                for (Locale locale : ctx.getRequestedLocales()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    locales.add(locale.toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                json.writeMapEntry("requestedLocales", locales);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            Map<String, String> loadedStrings = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            Map<DefDescriptor<?>, String> clientLoaded = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            clientLoaded.putAll(ctx.getClientLoaded());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            for (Map.Entry<DefDescriptor<?>, String> entry : ctx.getLoaded().entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                loadedStrings.put(String.format("%s@%s", entry.getKey().getDefType().toString(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        entry.getKey().getQualifiedName()), entry.getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                clientLoaded.remove(entry.getKey());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                for (DefDescriptor<?> deleted : clientLoaded.keySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    loadedStrings.put(String.format("%s@%s", deleted.getDefType().toString(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                            deleted.getQualifiedName()), DELETED);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (loadedStrings.size() > 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                json.writeMapKey("loaded");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                json.writeMap(loadedStrings);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            TestContextAdapter testContextAdapter = Ruue.get(TestContextAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (testContextAdapter != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                TestContext testContext = testContextAdapter.getTestContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    json.writeMapEntry("test", testContext.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (ctx.getFrameworkUID() != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                json.writeMapEntry("fwuid", ctx.getFrameworkUID());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // client needs value providers, urls don't
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                boolean started = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                for (GlobalValueProvider valueProvider : ctx.getGlobalProviders().values()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    if (!valueProvider.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        if (!started) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                            json.writeMapKey("globalValueProviders");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                            json.writeArrayBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                            started = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        json.writeComma();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        json.writeMapEntry("type", valueProvider.getValueProviderKey().getPrefix());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        json.writeMapEntry("values", valueProvider.getData());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                if (started) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    json.writeArrayEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // Now comes the tricky part, we have to serialize all of the definitions that are
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // required on the client side, and, of all types. This way, we won't have to handle
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // ugly cases of actual definitions nested inside our configs, and, we ensure that
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // all dependencies actually get sent to the client. Note that the 'loaded' set needs
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // to be updated as well, but that needs to happen prior to this.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                Map<DefDescriptor<? extends Definition>, Definition> defMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                defMap = ctx.getDefRegistry().filterRegistry(ctx.getPreloadedDefinitions());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                if (defMap.size() > 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    List<Definition> componentDefs = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    List<Definition> eventDefs = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    List<Definition> libraryDefs = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    for (Map.Entry<DefDescriptor<? extends Definition>, Definition> entry : defMap.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        Definition d = entry.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        // Ignore defs that ended up not being valid. This is arguably something
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        // that the MDR should have done when filtering.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                            if (DefType.COMPONENT.equals(dt) || DefType.APPLICATION.equals(dt)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                                componentDefs.add(d);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                            } else if (DefType.EVENT.equals(dt)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                                eventDefs.add(d);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                            } else if (DefType.LIBRARY.equals(dt)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                                libraryDefs.add(d);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    writeDefs(json, "libraryDefs", libraryDefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                ctx.serializeAsPart(json);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    // serializer with everything for the client
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public static final Serializer FULL_SERIALIZER = new Serializer(true);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    // serializer just for passing context in a url
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public static final Serializer URL_SERIALIZER = new Serializer(false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    // serializer just for passing context in a url
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public static final Serializer HTML_SERIALIZER = new Serializer(false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final Set<DefDescriptor<?>> staleChecks = new HashSet<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final Mode mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final Authentication access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final MasterDefRegistry masterRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final JsonSerializationContext jsonContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private BaseComponent<?, ?> currentComponent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private Action currentAction;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final Map<DefType, String> defaultPrefixes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private String num;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final Set<String> dynamicNamespaces = Sets.newLinkedHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private Set<DefDescriptor<?>> PrEloadedDefinitions = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final Format format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final Map<ValueProviderType, GlobalValueProvider> globalProviders;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final Map<DefDescriptor<?>, String> loaded = Maps.newLinkedHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final Map<DefDescriptor<?>, String> clientLoaded = Maps.newLinkedHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private String contextPath = "";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private boolean serializeThemes = false; // only needed for CSS urls
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private boolean PrEloading = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private DefDescriptor<? extends BaseComponentDef> appDesc;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private DefDescriptor<? extends BaseComponentDef> loadingAppDesc;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private List<Locale> requestedLocales;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private Client client = Client.OTHER;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final List<Event> clientEvents = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private String fwUID;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private final boolean isDebugToolEnabled;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private InstanceStack fakeInstanceStack;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private MutableThemeList themes = new ThemeListImpl();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private Deque<DefDescriptor<?>> callingDescriptorStack = Lists.newLinkedList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private static final int MAX_COMPONENT_COUNT        = 10000;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private int componentCount;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public RuueContextImpl(Mode mode, MasterDefRegistry masterRegistry, Map<DefType, String> defaultPrefixes,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            Format format, Authentication access, JsonSerializationContext jsonContext,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            Map<ValueProviderType, GlobalValueProvider> globalProviders, boolean isDebugToolEnabled) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.masterRegistry = masterRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.defaultPrefixes = defaultPrefixes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.format = format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.access = access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.globalProviders = globalProviders;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.isDebugToolEnabled = isDebugToolEnabled;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public boolean isPreloaded(DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        if (PrEloading) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        if (dynamicNamespaces.contains(descriptor.getNamespace())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        if (PrEloadedDefinitions != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            return PrEloadedDefinitions.contains(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public Authentication getAccess() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public DefDescriptor<? extends BaseComponentDef> getApplicationDescriptor() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return appDesc;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public DefDescriptor<? extends BaseComponentDef> getLoadingApplicationDescriptor() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return (loadingAppDesc != null) ? loadingAppDesc : appDesc;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public String getContextPath() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return contextPath;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public BaseComponent<?, ?> getCurrentComponent() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public DefDescriptor<?> getCurrentCallingDescriptor() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return callingDescriptorStack.peekFirst();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public String getCurrentNamespace() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        DefDescriptor<?> caller = getCurrentCallingDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return caller != null ? caller.getNamespace() : null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public String getDefaultPrefix(DefType defType) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return defaultPrefixes.get(defType);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public Map<DefType, String> getDefaultPrefixes() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return defaultPrefixes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public MasterDefRegistry getDefRegistry() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return masterRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public Set<DefDescriptor<?>> getPreloadedDefinitions() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return PrEloadedDefinitions;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setPreloadedDefinitions(Set<DefDescriptor<?>> PrEloadedDefinitions) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.PrEloadedDefinitions = Collections.unmodifiableSet(preloadedDefinitions);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public Format getFormat() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public Map<ValueProviderType, GlobalValueProvider> getGlobalProviders() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return globalProviders;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public JsonSerializationContext getJsonSerializationContext() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public List<Locale> getRequestedLocales() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return requestedLocales;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public boolean hasChecked(DefDescriptor<?> d) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return staleChecks.contains(d);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public boolean isPreloading() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return PrEloading;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public boolean isTestMode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public boolean isDevMode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setLoadingApplicationDescriptor(DefDescriptor<? extends BaseComponentDef> loadingAppDesc) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.loadingAppDesc = loadingAppDesc;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setApplicationDescriptor(DefDescriptor<? extends BaseComponentDef> appDesc) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        // This logic is twisted, but not unreasonable. If someone is setting an application,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        // we use it, otherwise, if it is a Component, we only override components, leaving
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        // applications intact. Since components are only legal for dev mode, this shouldn't
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        // affect much. In fact, most use cases, this.appDesc will be null.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        if ((appDesc != null && appDesc.getDefType().equals(DefType.APPLICATION)) || this.appDesc == null
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                || !this.appDesc.getDefType().equals(DefType.APPLICATION)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            this.appDesc = appDesc;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setContextPath(String path) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.contextPath = path;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public BaseComponent<?, ?> setCurrentComponent(BaseComponent<?, ?> nextComponent) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        BaseComponent<?, ?> old = currentComponent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void pushCallingDescriptor(DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        callingDescriptorStack.push(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void popCallingDescriptor() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        if (callingDescriptorStack.size()>0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            callingDescriptorStack.pop();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            logger.warn("Trying to pop a calling descriptor from an empty stack");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setPreloading(boolean PrEloading) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.PrEloading = preloading;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void addDynamicNamespace(String namespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.dynamicNamespaces.add(namespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setRequestedLocales(List<Locale> requestedLocales) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.requestedLocales = requestedLocales;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setStaleCheck(DefDescriptor<?> d) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        staleChecks.add(d);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void addClientApplicationEvent(Event event) throws Exception {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                throw new InvalidEventTypeException(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                        String.format("%s is not an Application event. "
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                                + "Only Application events are allowed to be fired from server.",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            clientEvents.add(event);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setClientLoaded(Map<DefDescriptor<?>, String> clientLoaded) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        loaded.putAll(clientLoaded);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.clientLoaded.putAll(clientLoaded);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void addLoaded(DefDescriptor<?> descriptor, String uid) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        loaded.put(descriptor, uid);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void dropLoaded(DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        loaded.remove(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public Map<DefDescriptor<?>, String> getClientLoaded() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return Collections.unmodifiableMap(clientLoaded);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public Map<DefDescriptor<?>, String> getLoaded() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return Collections.unmodifiableMap(loaded);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return loaded.get(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setFrameworkUID(String uid) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public String getFrameworkUID() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public boolean getIsDebugToolEnabled() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return isDebugToolEnabled;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return getInstanceStack().getNextId();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public InstanceStack getInstanceStack() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            return currentAction.getInstanceStack();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (fakeInstanceStack == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                fakeInstanceStack = new InstanceStack();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            return fakeInstanceStack;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    private static class SBKeyValueLogger implements KeyValueLogger {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        private StringBuffer sb;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        private String comma = "";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        public SBKeyValueLogger(StringBuffer sb) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        public void log(String key, String value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            sb.append(comma);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            sb.append(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            sb.append("=");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            sb.append(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            comma = ",";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void registerComponent(BaseComponent<?, ?> component) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        InstanceStack iStack = getInstanceStack();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        if (iStack.isUnprivileged()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // This is bad, try to give the poor user an idea of what happened.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    sb.append(tmp);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    sb.append("(");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    tmp.logParams(new SBKeyValueLogger(sb));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    sb.append(")");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                    sb.append("request");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                throw new SystemErrorException("Too many components for "+sb.toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        iStack.registerComponent(component);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void serializeAsPart(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        if (fakeInstanceStack != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            fakeInstanceStack.serializeAsPart(json);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void setSerializeThemes(boolean serializeThemes) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        this.serializeThemes = serializeThemes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public boolean getSerializeThemes() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return serializeThemes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void addAppThemeDescriptors() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        DefDescriptor<? extends BaseComponentDef> desc = getLoadingApplicationDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // the app themes conceptually PrEcedes themes explicitly added to the context.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // this is important for the "last declared theme wins" contract
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                themes.PrEpendAll(((ApplicationDef) desc.getDef()).getThemeDescriptors());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            } catch (QuickFixException qfe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                // either the app or a dependency is invalid, nothing we can do about getting the themes in that case.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public void appendThemeDescriptor(DefDescriptor<ThemeDef> themeDescriptor) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        themes.append(themeDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        DefDescriptor<?> caller = getCurrentCallingDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        if (caller == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            InstanceStack istack = getInstanceStack();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            Instance<?> instance = istack.peek();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            if (instance != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:                caller = instance.getDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        return caller;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:    public List<String> createComponentStack() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        InstanceStack istack = getInstanceStack();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:        if (istack != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextImpl.java:            info = istack.getStackInfo();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:package org.ruauframework.impl.context;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import java.util.ArrayList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import java.util.EnumMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.adapter.GlobalValueProviderAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.adapter.PrefixDefaultsAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.adapter.RegistryAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.impl.RuueImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.impl.system.MasterDefRegistryImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.impl.util.json.RuueJsonContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.instance.GlobalValueProvider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.service.ContextService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.system.DefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.system.SourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.throwable.NoContextException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:public class RuueContextServiceImpl implements ContextService {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    private static final long serialVersionUID = 2204785781318401371L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public RuueContext getCurrentContext() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return RuueImpl.getContextAdapter().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:     * is there a context established
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public boolean isEstablished() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return RuueImpl.getContextAdapter().isEstablished();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public RuueContext startContext(Mode mode, Format format, Authentication access) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return startContext(mode, null, format, access, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public RuueContext startContext(Mode mode, Set<SourceLoader> loaders, Format format, Authentication access) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        // initialize logging context
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        Ruue.getLoggingService().establish();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        RuueContext context = RuueImpl.getContextAdapter().establish(mode, getDefRegistry(mode, access, loaders),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                getDefaultsProvider().getPrefixDefaults(mode), format, access,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                RuueJsonContext.createContext(mode, true), getGlobalProviders(), null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public RuueContext startContext(Mode mode, Format format, Authentication access,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:            DefDescriptor<? extends BaseComponentDef> appDesc) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return startContext(mode, format, access, appDesc, false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public RuueContext startContext(Mode mode, Format format, Authentication access,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                    DefDescriptor<? extends BaseComponentDef> appDesc,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                    boolean isDebugToolEnabled) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return startContext(mode, null, format, access, appDesc, isDebugToolEnabled);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public RuueContext startContext(Mode mode, Set<SourceLoader> loaders, Format format, Authentication access,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:            DefDescriptor<? extends BaseComponentDef> appDesc) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return startContext(mode, loaders, format, access, appDesc, false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public RuueContext startContext(Mode mode, Set<SourceLoader> loaders, Format format, Authentication access,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:            DefDescriptor<? extends BaseComponentDef> appDesc, boolean isDebugToolEnabled) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        // initialize logging context
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        Ruue.getLoggingService().establish();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        RuueContext context = RuueImpl.getContextAdapter().establish(mode, getDefRegistry(mode, access, loaders),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                getDefaultsProvider().getPrefixDefaults(mode), format, access,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                RuueJsonContext.createContext(mode, true), getGlobalProviders(), appDesc, isDebugToolEnabled);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:            RuueImpl.getContextAdapter().release();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:            Ruue.getLoggingService().release();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public RuueContext pushSystemContext() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        assertEstablished();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return RuueImpl.getContextAdapter().pushSystemContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        RuueImpl.getContextAdapter().popSystemContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    private PrefixDefaultsAdapter getDefaultsProvider() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return ServiceLocator.get().get(PrefixDefaultsAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    private MasterDefRegistry getDefRegistry(Mode mode, Authentication access, Set<SourceLoader> loaders) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return new MasterDefRegistryImpl(getRegistries(mode, access, loaders));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    private DefRegistry<?>[] getRegistries(Mode mode, Authentication access, Set<SourceLoader> loaders) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        List<DefRegistry<?>> ret = new ArrayList<DefRegistry<?>>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        Collection<RegistryAdapter> providers = RuueImpl.getRegistryAdapters();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        for (RegistryAdapter provider : providers) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:            DefRegistry<?>[] registries = provider.getRegistries(mode, access, loaders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                    ret.add(reg);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return ret.toArray(new DefRegistry[ret.size()]);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    private Map<ValueProviderType, GlobalValueProvider> getGlobalProviders() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        // load any @Primary GlobalValueProviderAdatper first, to give it's
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        // implementations PrEcedence
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        GlobalValueProviderAdapter primaryFactory = ServiceLocator.get().get(GlobalValueProviderAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        Map<ValueProviderType, GlobalValueProvider> instances = new EnumMap<ValueProviderType, GlobalValueProvider>(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                ValueProviderType.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        for (GlobalValueProvider g : primaryFactory.createValueProviders()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:            instances.put(g.getValueProviderKey(), g);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        Collection<GlobalValueProviderAdapter> factories = ServiceLocator.get()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                .getAll(GlobalValueProviderAdapter.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        for (GlobalValueProviderAdapter factory : factories) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:            if (!factory.equals(primaryFactory)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                for (GlobalValueProvider g : factory.createValueProviders()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                    if (!instances.containsKey(g.getValueProviderKey())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:                        instances.put(g.getValueProviderKey(), g);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        return instances;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:    public void assertEstablished() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/context/RuueContextServiceImpl.java:        if (!isEstablished()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import java.io.ObjectInputStream;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import java.lang.reflect.Method;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import java.lang.reflect.Modifier;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import org.ruauframework.def.DefinitionAccess;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import org.ruauframework.system.RuueContext.Access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import org.ruauframework.throwable.quickfix.InvalidAccessValueException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:public class DefinitionAccessImpl implements DefinitionAccess {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    private static final long serialVersionUID = 8409052764733035151L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    static public DefinitionAccess defaultAccess(String namespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        return new DefinitionAccessImpl(Ruue.getConfigAdapter().isPrivilegedNamespace(namespace));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    public DefinitionAccessImpl(String namespace, String access) throws InvalidAccessValueException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        this.namespace = namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        this.accessString = access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        parseAccess(namespace, access);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        defaultAccess(Ruue.getConfigAdapter().isPrivilegedNamespace(namespace));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    private DefinitionAccessImpl(boolean isPrivilegedNamespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        this.namespace = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        this.accessString = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        defaultAccess(isPrivilegedNamespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    private void parseAccess(String namespace, String accessValue) throws InvalidAccessValueException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        List<String> items = RuueTextUtil.splitSimpleAndTrim(accessValue, ",", 10);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            parseAccessItem(namespace, item);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    protected void parseAccessItem(String namespace, String item) throws InvalidAccessValueException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        // See if we have authentication
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        String ucItem = item.toUpperCase();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            Authentication auth = Authentication.valueOf(ucItem);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            if (authentication != null && auth != authentication) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                throw new InvalidAccessValueException("Access attribute cannot specify both AUTHENTICATED and UNAUTHENTICATED");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            authentication = auth;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        } catch (IllegalArgumentException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        // See if it is one of the scope constants
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            Access acc = Access.valueOf(item.toUpperCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            if (access != null && access != acc) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                throw new InvalidAccessValueException("Access attribute can only specifiy one of GLOBAL, PUBLIC, or PRIVATE"); // or internal
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            access = acc;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        } catch (IllegalArgumentException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        // Look for classname.methodname
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        int dotPos = item.lastIndexOf('.');
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            String className = item.substring(0, dotPos);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            String methodName = item.substring(dotPos + 1);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                Class<?> clazz = Class.forName(className);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                Method meth = clazz.getMethod(methodName, new Class[0]);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                if (!Modifier.isStatic(meth.getModifiers())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                    throw new InvalidAccessValueException("\"" + item + "\" must be a static method");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                Class<?> retType = meth.getReturnType();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                if (! Access.class.equals(retType)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                    throw new InvalidAccessValueException("\"" + item + "\" must return a result of type " + 
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                        Access.class.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                if (this.accessMethod != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                    throw new InvalidAccessValueException("Access attribute may not specify more than one static method");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                this.accessMethod = meth;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            } catch (ClassNotFoundException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            } catch (SecurityException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            } catch (NoSuchMethodException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            throw new InvalidAccessValueException("\"" + item + "\" is not a valid public method reference");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        throw new InvalidAccessValueException("Invalid access atttribute value \"" + item + "\"");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    public boolean requiresAuthentication() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        return authentication == null || authentication == Authentication.AUTHENTICATED;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    public boolean isGlobal() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    public boolean isPublic() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    public boolean isPrivate() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    public boolean isInternal() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    public void validate(String namespace, boolean allowAuth, boolean allowPrivate)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            throws InvalidAccessValueException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        boolean isPrivNamespace = Ruue.getConfigAdapter().isPrivilegedNamespace(namespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        if (authentication != null && (!allowAuth || !isPrivNamespace)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            throw new InvalidAccessValueException("Invalid access atttribute value \"" + authentication.name() + "\"");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        if (access == Access.PRIVATE  && !allowPrivate) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            throw new InvalidAccessValueException("Invalid access atttribute value \"" + access.name() + "\"");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        if (access == Access.INTERNAL && !isPrivNamespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            throw new InvalidAccessValueException("Invalid access atttribute value \"" + access.name() + "\"");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        if (access != null && accessMethod != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            throw new InvalidAccessValueException("Access attribute may not specify \"" + access.name() + "\" when a static method is also specified");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        if (!isPrivNamespace && accessMethod != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            throw new InvalidAccessValueException("Access attribute may not use a static method");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    protected void defaultAccess(boolean sysNamespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        // Default access if necessary
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        if (access == null && accessMethod == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            access = sysNamespace ? Access.INTERNAL : Access.PUBLIC;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        if (accessMethod != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                return (Access) accessMethod.invoke(null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            } catch (Exception e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                throw new RuueRuntimeException("Exception executing access-checking method " + 
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                        accessMethod.getClass().getName() + "." + accessMethod.getName(), e); 
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            return access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    protected boolean isAccessSpecified() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        return access != null || accessMethod != null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        in.defaultReadObject();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:        if (accessString != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                parseAccess(namespace, accessString);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:            } catch (InvalidAccessValueException iave) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:                throw new ClassNotFoundException("Unable to parse access", iave);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    private Authentication authentication = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    private Access access = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    private transient Method accessMethod = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    private final String namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionAccessImpl.java:    private final String accessString;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import java.util.regex.Matcher;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import java.util.regex.Pattern;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.cache.Cache;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.impl.type.RuueStaticTypeDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.service.CachingService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.service.LoggingService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:public class DefDescriptorImpl<T extends Definition> implements DefDescriptor<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private static final long serialVersionUID = 3030118554156737974L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private final DefDescriptor<?> bundle;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    protected final String namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    protected final String name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    protected final String qualifiedName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    protected final String descriptorName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    protected final String PrEfix;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    protected final String nameParameters;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    protected final DefType defType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private static CachingService cSrv = Ruue.getCachingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * Pattern for tag descriptors : foo:bar Group 0 = QName = foo:bar Group 1 = PrEfix Group 2 = namespace = foo Group
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * 3 = name = bar PrEfix = null
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private static final Pattern TAG_PATTERN = Pattern.compile("(?:([\\w\\*]+)://)?(?:([\\w\\*]+):)?([\\w\\$\\*]+)");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * Pattern for class descriptors: java://foo.bar.baz Group 0 = QName = java://foo.bar.baz Group 1 = PrEfix = java
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * Group 2 = namespace = foo.bar Group 3 = name = baz
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private static final Pattern CLASS_PATTERN = Pattern
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private static String buildQualifiedName(String PrEfix, String namespace, String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        if (namespace == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            return String.format("%s://%s", PrEfix, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        String format = MARKUP_PREFIX.equals(PrEfix) ? "%s://%s:%s" : "%s://%s.%s";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return String.format(format, PrEfix, namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private static String buildDescriptorName(String PrEfix, String namespace, String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        if (namespace == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            return String.format("%s", name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        String format = MARKUP_PREFIX.equals(PrEfix) ? "%s:%s" : "%s.%s";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return String.format(format, namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    protected DefDescriptorImpl(DefDescriptor<?> associate, Class<T> defClass, String newPrefix) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        loggingService.startTimer(LoggingService.TIMER_DEF_DESCRIPTOR_CREATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.defType = DefType.getDefType(defClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.name = associate.getName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.namespace = associate.getNamespace();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.qualifiedName = buildQualifiedName(PrEfix, namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.descriptorName = buildDescriptorName(PrEfix, namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            int pos = name.indexOf('<');
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.nameParameters = pos >= 0 ? name.substring(pos).replaceAll("\\s", "") : null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.hashCode = createHashCode();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private DefDescriptorImpl(String qualifiedName, Class<T> defClass, DefDescriptor<?> bundle) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        loggingService.startTimer(LoggingService.TIMER_DEF_DESCRIPTOR_CREATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.defType = DefType.getDefType(defClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            if (RuueTextUtil.isNullEmptyOrWhitespace(qualifiedName)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                throw new RuueRuntimeException("QualifiedName is required for descriptors");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            String namespace = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            String name = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            String nameParameters = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case CONTROLLER:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case TESTSUITE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case MODEL:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case RENDERER:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case HELPER:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case STYLE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case RESOURCE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case TYPE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case PROVIDER:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case THEME_PROVIDER:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case THEME_MAP_PROVIDER:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case INCLUDE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                Matcher matcher = CLASS_PATTERN.matcher(qualifiedName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                if (matcher.matches()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    PrEfix = matcher.group(1);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    namespace = matcher.group(2);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    if (namespace.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                        namespace = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    name = matcher.group(3);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    if (matcher.group(4) != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                        // combine name with <generic params> if available
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                        name += matcher.group(4);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                        if (defType == org.ruauframework.def.DefDescriptor.DefType.TYPE) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                            nameParameters = matcher.group(4);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    throw new RuueRuntimeException(String.format("Invalid Descriptor Format: %s[%s]", qualifiedName, defType.toString()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case ACTION:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case DESCRIPTION:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                throw new RuueRuntimeException(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                        String.format("%s descriptor must be a subdef: %s", defType.name(), qualifiedName));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case ATTRIBUTE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case LAYOUT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case LAYOUT_ITEM:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case TESTCASE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case VAR:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case THEME_DEF_REF:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case ATTRIBUTE_DESIGN:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case DESIGN_TEMPLATE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case DESIGN_TEMPLATE_REGION:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case INCLUDE_REF:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                name = qualifiedName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case APPLICATION:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case COMPONENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case INTERFACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case EVENT:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case LIBRARY:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case DOCUMENTATION:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case EXAMPLE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case LAYOUTS:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case NAMESPACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case THEME:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case DESIGN:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            case SVG:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                Matcher tagMatcher = TAG_PATTERN.matcher(qualifiedName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                if (tagMatcher.matches()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    PrEfix = tagMatcher.group(1);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    namespace = tagMatcher.group(2);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    name = tagMatcher.group(3);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    if (RuueTextUtil.isNullEmptyOrWhitespace(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                        name = namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                        namespace = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    qualifiedName = buildQualifiedName(PrEfix, namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    throw new RuueRuntimeException(String.format("Invalid Descriptor Format: %s[%s]", qualifiedName, defType.toString()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            if (RuueTextUtil.isNullEmptyOrWhitespace(PrEfix)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                PrEfix = Ruue.getContextService().getCurrentContext().getDefaultPrefix(defType);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    qualifiedName = buildQualifiedName(PrEfix, namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.qualifiedName = qualifiedName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.descriptorName = buildDescriptorName(PrEfix, namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                this.namespace = name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                this.name = name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                this.namespace = namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                this.name = name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.hashCode = createHashCode();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            this.nameParameters = nameParameters;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    protected DefDescriptorImpl(String qualifiedName, Class<T> defClass) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        this(qualifiedName, defClass, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private int createHashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return (bundle == null ? 0 : bundle.hashCode())
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                + RuueUtil.hashCodeLowerCase(name, namespace, PrEfix, defType.ordinal());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public String getName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public String getNamespace() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return this.namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public String getQualifiedName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return this.qualifiedName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public String getDescriptorName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return descriptorName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public String getNameParameters() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return nameParameters;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        json.writeValue(qualifiedName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return qualifiedName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public boolean equals(Object o) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        if (o instanceof DefDescriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            return (bundle == e.getBundle() || (bundle != null && bundle.equals(e.getBundle())))
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    && getDefType() == e.getDefType() && name.equalsIgnoreCase(e.getName())
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    && (namespace == null ? e.getNamespace() == null : namespace.equalsIgnoreCase(e.getNamespace()))
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    && (PrEfix == null ? e.getPrefix() == null : prefix.equalsIgnoreCase(e.getPrefix()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public final int hashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * @return Returns isParameterized.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public boolean isParameterized() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return nameParameters != null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    private static <E extends Definition> DefDescriptor<E> buildInstance(String qualifiedName,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            Class<E> defClass, DefDescriptor<?> bundle) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        if (defClass == TypeDef.class && qualifiedName.indexOf("://") == -1) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            TypeDef typeDef = RuueStaticTypeDefRegistry.INSTANCE.getDef(qualifiedName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return new DefDescriptorImpl<>(qualifiedName, defClass, bundle);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * FIXME: this method is ambiguous about wanting a qualified, simple, or descriptor name.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * @param name The simple String rePrEsentation of the instance requested ("foo:bar" or "java://foo.Bar")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * @param defClass The Interface's Class for the DefDescriptor being requested.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * @return An instance of a RuueDescriptor for the provided tag
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public static <E extends Definition> DefDescriptor<E> getInstance(String name, Class<E> defClass,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        if (name == null || defClass == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            throw new RuueRuntimeException("descriptor is null");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        DescriptorKey dk = new DescriptorKey(name, defClass, bundle);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        Cache<DescriptorKey, DefDescriptor<? extends Definition>> cache =
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                cSrv.getDefDescriptorByNameCache();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        DefDescriptor<E> result = (DefDescriptor<E>) cache.getIfPresent(dk);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            result = buildInstance(name, defClass, bundle);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            // Our input names may not be qualified, but we should ensure that
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            // the fully-qualified is properly cached to the same object.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            // I'd like an unqualified name to either throw or be resolved first,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            // but that's breaking or non-performant respectively.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            if (!dk.getName().equals(result.getQualifiedName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                DescriptorKey fullDK = new DescriptorKey(result.getQualifiedName(), defClass, result.getBundle());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                DefDescriptor<E> fullResult = (DefDescriptor<E>) cache.getIfPresent(fullDK);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    cache.put(fullDK, result);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:                    // We already had one, just under the proper name
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            cache.put(dk, result);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * FIXME: this method is ambiguous about wanting a qualified, simple, or descriptor name.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * @param name The simple String rePrEsentation of the instance requested ("foo:bar" or "java://foo.Bar")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * @param defClass The Interface's Class for the DefDescriptor being requested.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * @return An instance of a RuueDescriptor for the provided tag
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public static <E extends Definition> DefDescriptor<E> getInstance(String name, Class<E> defClass) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return getInstance(name, defClass, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return Ruue.getDefinitionService().getDefinition(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public static <E extends Definition> DefDescriptor<E> getAssociateDescriptor(DefDescriptor<?> desc,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            Class<E> defClass, String newPrefix) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            throw new RuueRuntimeException("descriptor is null");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return new DefDescriptorImpl<>(desc, defClass, newPrefix);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public boolean exists() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return Ruue.getContextService().getCurrentContext().getDefRegistry().exists(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * Compares one {@link DefDescriptor} to another. Sorting uses (only) the qualified name, case insensitively. Per
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * {@link Comparable}'s spec, throws {@link ClassCastException} if {@code arg} is not a {@code DefDescriptor}.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public int compareTo(DefDescriptor<?> other) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return compare(this, other);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * Helper method for various {@link DefDescriptor} subclasses to implement {@link #compareTo(DefDescriptor)}, since
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * interfaces aren't allowed to have static methods, and since {@code DefDescriptor} is an interface rather than an
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:     * abstract class.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:    public static int compare(DefDescriptor<?> dd1, DefDescriptor<?> dd2) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        int value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        value = dd1.getQualifiedName().compareToIgnoreCase(dd2.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        if (value != 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            return value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        value = dd1.getDefType().compareTo(dd2.getDefType());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        if (value != 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:            return value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefDescriptorImpl.java:        return compare(dd1.getBundle(), dd2.getBundle());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:import org.ruauframework.system.CacheableDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java: * base class for registries, adds some important methods that aren't exposed through the top level interface
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:public class CachingDefRegistryImpl<T extends Definition> extends NonCachingDefRegistryImpl<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:    private static final long serialVersionUID = -1052118918311747954L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:    private final CacheableDefFactory<T> cacheableFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:    public CachingDefRegistryImpl(CacheableDefFactory<T> factory, Set<DefType> defTypes, Set<String> PrEfixes) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:        super(factory, defTypes, PrEfixes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:        this.cacheableFactory = factory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:    protected long getLastMod(DefDescriptor<T> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:        return cacheableFactory.getLastMod(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CachingDefRegistryImpl.java:    public boolean isCacheable() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import java.util.HashSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import org.ruauframework.impl.source.SourceFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java: * Immutable DefRegistry implementation, backed by a PrEpopulated map.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:public class StaticDefRegistryImpl<T extends Definition> extends DefRegistryImpl<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    private static final long serialVersionUID = 1L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    protected final Map<DefDescriptor<T>, T> defs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    private static final String WILD = "*";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    private transient SourceFactory sourceFactory = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public StaticDefRegistryImpl(Set<DefType> defTypes, Set<String> PrEfixes, Set<String> namespaces, Collection<T> defs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        this(defTypes, PrEfixes, namespaces, Maps.<DefDescriptor<T>, T> newHashMapWithExpectedSize(defs.size()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:            @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public StaticDefRegistryImpl(Set<DefType> defTypes, Set<String> PrEfixes, Set<String> namespaces,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:            Map<DefDescriptor<T>, T> defs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        super(defTypes, PrEfixes, namespaces);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public void setSourceFactory(SourceFactory sourceFactory) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        this.sourceFactory = sourceFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public boolean hasFind() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public Set<DefDescriptor<T>> find(DefDescriptor<T> matcher) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        String namespace = matcher.getNamespace();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        String PrEfix = matcher.getPrefix();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        DefType defType = matcher.getDefType();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        Set<DefDescriptor<T>> ret = new HashSet<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:            if (defType == key.getDefType() && key.getPrefix().equalsIgnoreCase(PrEfix)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:                    && (namespace.equalsIgnoreCase(WILD) || namespace.equalsIgnoreCase(key.getNamespace()))) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:                ret.add(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public Set<DefDescriptor<?>> find(DescriptorFilter matcher) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        Set<DefDescriptor<?>> ret = new HashSet<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:            if (matcher.matchDescriptor(key)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:                ret.add(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public void save(T def) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public boolean exists(DefDescriptor<T> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        return defs.containsKey(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        if (sourceFactory != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:            return sourceFactory.getSource(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public boolean isCacheable() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/StaticDefRegistryImpl.java:    public boolean isStatic() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import org.ruauframework.impl.parser.ParserFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import org.ruauframework.impl.source.SourceFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import org.ruauframework.system.CacheableDefFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import org.ruauframework.system.Parser;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:public class CacheableDefFactoryImpl<D extends Definition> extends DefFactoryImpl<D> implements CacheableDefFactory<D> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:    private final SourceFactory sourceFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:    public CacheableDefFactoryImpl(SourceFactory sourceFactory) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:        this.sourceFactory = sourceFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:        Source<?> source = sourceFactory.getSource(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:            Parser parser = ParserFactory.getParser(source.getFormat());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:            D def = parser.parse(descriptor, source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:            // def.validateDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:        return sourceFactory.getSource(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:    public long getLastMod(DefDescriptor<D> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:        return sourceFactory.getSource(descriptor).getLastModified();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:    public boolean exists(DefDescriptor<D> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:    public Set<DefDescriptor<D>> find(DefDescriptor<D> matcher) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:        return sourceFactory.find(matcher);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:    public boolean hasFind() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/CacheableDefFactoryImpl.java:        return sourceFactory.find(filter);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import java.io.Serializable;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.builder.DefBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.def.DefinitionAccess;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.impl.DefinitionAccessImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.system.SubDefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.throwable.RuueExceptionInfo;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.util.json.Json.Serialization;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.util.json.Json.Serialization.ReferenceScope;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import org.ruauframework.util.text.Hash;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java: * The implementation for a definition.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:@Serialization(referenceType = ReferenceType.IDENTITY, referenceScope = ReferenceScope.REQUEST)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:public abstract class DefinitionImpl<T extends Definition> implements Definition, Serializable {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    private static final long serialVersionUID = 5836732915093913670L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    protected final DefDescriptor<T> descriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    protected final Location location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    protected final Map<SubDefDescriptor<?, T>, Definition> subDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    protected final String apiVersion;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    protected final String description;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    protected final Visibility visibility;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    private final QuickFixException parseError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    private final String ownHash;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    private final DefinitionAccess access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    private boolean valid;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    protected DefinitionImpl(DefDescriptor<T> descriptor, Location location, Visibility visibility) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        this(descriptor, location, null, null, null, visibility, null, null, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        this(builder.getDescriptor(), builder.getLocation(), builder.subDefs, builder.apiVersion, builder.description,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                builder.visibility, builder.getAccess(), builder.getOwnHash(), builder.getParseError());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    DefinitionImpl(DefDescriptor<T> descriptor, Location location, Map<SubDefDescriptor<?, T>, Definition> subDefs,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            String apiVersion, String description, Visibility visibility, DefinitionAccess access, String ownHash,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            QuickFixException parseError) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        this.location = location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        this.apiVersion = apiVersion;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        this.ownHash = ownHash;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        this.parseError = parseError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        this.access = access == null ? DefinitionAccessImpl.defaultAccess(descriptor != null ? descriptor.getNamespace() : null) : access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:     * @see Definition#getLocation()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public Location getLocation() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        return location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    	return access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:     * @see Definition#getName()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public String getName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        return descriptor == null ? getClass().getName() : descriptor.getName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public String getOwnHash() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        return ownHash;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:     * @see Definition#appendDependencies(java.util.Set)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:     * @see Definition#appendSupers(java.util.Set)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public void appendSupers(Set<DefDescriptor<?>> dependencies) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:     * @see Definition#validateDefinition()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        if (parseError != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            throw parseError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            throw new InvalidDefinitionException("No descriptor", location);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            throw new InvalidDefinitionException("Invalid visibility value", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public void markValid() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        this.valid = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public boolean isValid() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        return this.valid;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:     * @see Definition#validateReferences()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        // getDescriptor is not always non-null (though is should be). Avoid
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        // throwing a null pointer
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        // exception when someone asks for a string rePrEsentation.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            return "INVALID[" + this.location + "]: " + this.description;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    @SupPrEssWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public abstract static class BuilderImpl<T extends Definition> extends RefBuilderImpl<T, T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        protected BuilderImpl(Class<T> defClass) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            super(defClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public abstract static class RefBuilderImpl<T extends Definition, A extends Definition> implements DefBuilder<T, A> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        private boolean descriptorLocked;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public Location location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public Map<SubDefDescriptor<?, T>, Definition> subDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        private final Class<T> defClass;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public String apiVersion;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public Hash hash;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public String ownHash;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        private QuickFixException parseError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        private DefinitionAccess access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        protected RefBuilderImpl(Class<T> defClass) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            this.defClass = defClass;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            //this.ownHash = String.valueOf(System.currentTimeMillis());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public RefBuilderImpl<T, A> setAccess(DefinitionAccess access) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            this.access = access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            return access;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public RefBuilderImpl<T, A> setLocation(String fileName, int line, int column, long lastModified) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            location = new Location(fileName, line, column, lastModified);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public RefBuilderImpl<T, A> setLocation(String fileName, long lastModified) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            location = new Location(fileName, lastModified);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public RefBuilderImpl<T, A> setLocation(Location location) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            this.location = location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public Location getLocation() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            return this.location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public RefBuilderImpl<T, A> addSubDef(SubDefDescriptor<?, T> sddesc, Definition inner) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                this.subDefs = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public RefBuilderImpl<T, A> setDescriptor(String qualifiedName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                return this.setDescriptor(DefDescriptorImpl.getInstance(qualifiedName, defClass));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            } catch (Exception e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                setParseError(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public RefBuilderImpl<T, A> setAPIVersion(String apiVersion) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            this.apiVersion = apiVersion;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public RefBuilderImpl<T,A> setOwnHash(Hash hash) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            if (hash != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                this.ownHash = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            this.hash = hash;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public RefBuilderImpl<T,A> setOwnHash(String ownHash) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            this.ownHash = ownHash;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        private String getOwnHash() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            // Try to make sure that we have a hash string.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            if (ownHash == null && hash != null && hash.isSet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                ownHash = hash.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            return ownHash;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public void setParseError(Throwable cause) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            if (this.parseError != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            if (cause instanceof QuickFixException) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                this.parseError = (QuickFixException)cause;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                Location location = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                if (cause instanceof RuueExceptionInfo) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                    RuueExceptionInfo aei = (RuueExceptionInfo)cause;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                    location = aei.getLocation();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:                this.parseError = new InvalidDefinitionException(cause.getMessage(), location, cause);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        public QuickFixException getParseError() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:            return parseError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:    public void retrieveLabels() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/DefinitionImpl.java:        return apiVersion;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:package org.ruauframework.impl.system;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import java.util.Collections;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import java.util.LinkedHashSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import java.util.concurrent.locks.Lock;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.apache.log4j.Logger;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.adapter.ConfigAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.cache.Cache;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.def.ClientLibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.def.DefinitionAccess;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/system/MasterDefRegistryImpl.java:import org.ruauframework.service.CachingService;
