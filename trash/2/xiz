ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:package org.ruauframework.components.ui.button;
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:import org.openqa.selenium.support.ui.WebDriverWait;
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:public class ButtonUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:    public ButtonUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:    public void testButtonLabelRequired() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        final String errorMsg = "COMPONENT markup://uitest:button_LabelRequiredTest is missing required attribute 'label'";
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        openNoRuue("/uitest/button_LabelRequiredTest.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        ruauUITestingUtil.waitForDocumentReady();
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        WebDriverWait wait = new WebDriverWait(getDriver(), timeoutInSecs);
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        wait.withMessage("Required label error not displayed");
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        wait.until(new ExpectedCondition<Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:            public Boolean apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:                return ruauUITestingUtil.getQuickFixMessage().contains(errorMsg);
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        String valueExPrEssion = ruauUITestingUtil.getValueFromRootExpr("v.isDomEventSet");
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        valueExPrEssion = ruauUITestingUtil.prepareReturnStatement(valueExpression);
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:        assertTrue("domEvent attribute on event should have been set",
ruau/ruau/src/test/java/org/ruauframework/components/ui/button/ButtonUITest.java:                ruauUITestingUtil.getBooleanEval(valueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:package org.ruauframework.components.ui.html.onclickCaseSensitiveUITest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:import java.net.MalformedURLException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:import java.net.URISyntaxException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:import org.ruauframework.test.WebDriverTestCase.TargetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:@TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.FIREFOX })
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:public class onclickCaseSensitiveUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:    public static final String TEST_APP = "/uitest/html_onclickCaseSensitive.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:    private final String onclickAnchor = ".onclickHandler";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:	private final String onClickAnchor = ".onClickHandler";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:	private final String onclickOutput = ".onclickOutput";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:	private final String onClickOutput = ".onClickOuput";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:    public onclickCaseSensitiveUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:     * Test to verify onClick is CaseSensitive
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:    public void testOnClickIsCaseSensitive() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:		assertTrue("onclick Event should not be fired when cmp is loaded", RuueTextUtil.isEmptyOrWhitespace(onclickOutputText.getText()));
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:		assertTrue("onClick Event should not be fired when cmp is loaded", RuueTextUtil.isEmptyOrWhitespace(onClickOutputText.getText()));
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:		assertFalse("onclick Event should not be fired when cmp is loaded", RuueTextUtil.isEmptyOrWhitespace(onclickOutputText.getText()));
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:		//this action should not be fired as onClick is case sensitive 
ruau/ruau/src/test/java/org/ruauframework/components/ui/html/onclickCaseSensitiveUITest/onclickCaseSensitiveUITest.java:		assertTrue("onClick Event should not be fired as onClick is case Sensitive", RuueTextUtil.isEmptyOrWhitespace(onClickOutputText.getText()));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:package org.ruauframework.components.ui.inputNumber;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:import org.ruauframework.test.WebDriverTestCase.ExcludeBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:// ios-driver gets a NoSuchElementException trying to type after a input.clear()
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:public class InputNumberUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:    public InputNumberUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement input = d.findElement(By.xpath("//input"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement submit = d.findElement(By.xpath("//button"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement output = d.findElement(By.xpath("//span[@class='uiOutputText']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        waitForElementTextPresent(output, "987654321");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        // negative integer
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        waitForElementTextPresent(output, "-123");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:    // FIXME: bug W-1296985 - Ruue numbers only handle numbers as large as JavaScript
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:    public void _testInputNumberDefaultValue() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement input = d.findElement(By.xpath("//input"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        assertEquals("Default number from model is incorrect", "123456789123456789", input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:    // TODO: WebDriver doesn't support setting http headers for language. Need
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:    // to use proxy or PrEconfigured browser to spoof Locales other than US.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:    public void testLocalizedInputNumber() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        open("/uitest/inputLocalizedNumber_Test.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement input = d.findElement(By.xpath("//input"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement submit = d.findElement(By.xpath("//button"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement output = d.findElement(By.xpath("//span[@class='uiOutputText']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        waitForElementTextPresent(output, "123456789");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        // decimal
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        waitForElementTextPresent(output, "123456.789");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        // negative integer
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        waitForElementTextPresent(output, "-123456");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        // negative decimal
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        waitForElementTextPresent(output, "-123.456");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement input = d.findElement(By.xpath("//input"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement submit = d.findElement(By.xpath("//button"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        WebElement output = d.findElement(By.xpath("//span[@class='uiOutputText']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        input.sendKeys("abcdef");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        waitForElementTextPresent(output, "Got Error!");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        ruauUITestingUtil.waitForElementText(By.className("uiInputDefaultError"),
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:                "Invalid value for inVar: java://long", true, "Error element never inserted into DOM");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        // clear error
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        waitForElementTextPresent(output, "1234");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputNumber/InputNumberUITest.java:        assertFalse("Did not expect an error message", isElementPresent(By.className("uiInputDefaultError")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:package org.ruauframework.components.ui.inputDate;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import java.text.DateFormat;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import java.text.SimpleDateFormat;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import java.util.Calendar;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import java.util.GregorianCalendar;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import org.openqa.selenium.Keys;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:public class InputDateWithLabelUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public String URL = "/uitest/inputDate_Test.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private final String DATE_FORMAT_STR = "yyyy-MM-dd";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private final String TEST_DATE_TO_USE = "2013-04-15";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private final String DATE_INPUT_BOX_SEL = "input[class*='date_input_box']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private final String DATE_ICON_SEL = "a[class*='datePicker-openIcon']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private final String ARIA_SELECTED_SEL = "a[aria-selected*='true']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private final String SELECTED_DATE = "a[class*='selectedDate']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private final String OUTPUT_ST = "span[class*='outputStatus']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private final String CLASSNAME = "return $A.test.getActiveElement().className";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public InputDateWithLabelUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     * Excluded Browser Reasons:
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     * IE7: pageUpDown test is flappy, works through webdriver after running a few times and manually. Issue here is
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     * that it will sometimes stop one short
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     * IE8: homeEndButton test is flappy, works fine manually and on webdriver after running a few times
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     * IE9/10: Sending in Shift anything (tab, page up, page down), does not register when sent through WebDriver.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     * Manually works fine
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     * Android/IOS: This feature will not be used on mobile devices. Instead the their native versions will be used
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     * Safari: Sending in Shift tab does not register when sent through WebDriver. Manually works fine
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private WebElement loopThroughKeys(WebElement element, WebDriver driver, String keyString, int iterCondition,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:            String cssSel, String assertVal) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:            assertTrue(assertVal + "combination could not find aria-selected='true'", element != null);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private String pageUpDownHelper(int iterCondition, String keyString)
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Making sure the textBox is empty so we always start at the same date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Grabbing the Date Icon and click on it to open the calendar
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String classOfActiveElem = "" + ruauUITestingUtil.getEval(CLASSNAME);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector("a[class*='" + classOfActiveElem + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = loopThroughKeys(element, driver, keyString, iterCondition, ARIA_SELECTED_SEL, "Shift+Page Up/Down");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Selecting the date that we are on to get the value and compare it to what it should be
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Setting the input box in focus to get its value
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Checking if the values are equal
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        return element.getAttribute("value");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    private String homeEndButtonHelper(String initDate, Keys buttonToPress)
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Getting the input box, making sure it is clear, and sending in the the starting date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element.sendKeys(initDate);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Opening the calendar icon to grab the date we are looking for
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Grabbing the correct focus cell date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Pressing the home or End button and grabbing the associated date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Clicking on that element to compare it to the date we should receive
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Making sure they are equal
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        return element.getAttribute("value");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public void gotToNextElem(WebDriver driver, String shftTab) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String classOfActiveElem = "a[class*='" + ruauUITestingUtil.getEval(CLASSNAME) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        findDomElement(By.cssSelector(classOfActiveElem)).sendKeys(shftTab);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     *********************************** Date Picker Tests*******************************************
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Home and End Button Test using January (31 days) , February (28 or 29 days), September (30 days)
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Checking January (31 days)
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("The Home button did not go to the beginning of January", "2011-01-01", inputBoxResult);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("The End button did not go to the end of January", "2011-01-31", inputBoxResult);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Checking February (28 or 29 days), none Leap year
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("The Home button did not go to the beginning of February", "2011-02-01", inputBoxResult);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("The End button did not go to the end of February", "2011-02-28", inputBoxResult);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Checking February (28 or 29 days), Leap year
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("The Home button did not go to the beginning of February", "2012-02-01", inputBoxResult);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("The End button did not go to the end of February", "2012-02-29", inputBoxResult);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Checking September (30 days)
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("The Home button did not go to the beginning of September", "2011-09-01", inputBoxResult);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("The End button did not go to thes end of September", "2011-09-30", inputBoxResult);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Testing the functionality of page_down, page_up, shift+page_down, shift+page_up
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public void testPageUpDownYear() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        DateFormat formatter = new SimpleDateFormat(DATE_FORMAT_STR);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Calendar used to get current date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        GregorianCalendar cal = new GregorianCalendar();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Running test, Increasing year
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String result = pageUpDownHelper(10, Keys.SHIFT + "" + Keys.PAGE_UP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Moving calendar to match corresponding action of test and formatting date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal.setTime(formatter.parse(TEST_DATE_TO_USE));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal.add(Calendar.YEAR, -10);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Formatting date to match out of test
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String fmt = new SimpleDateFormat(DATE_FORMAT_STR).format(cal.getTime());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Making sure test result and true calendar outcome match
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("Shift + Page up did not go to the correct date", fmt, result);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Resetting calendar
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal = new GregorianCalendar();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Running test, decreasing month
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        result = pageUpDownHelper(15, Keys.SHIFT + "" + Keys.PAGE_DOWN);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Moving calendar to match corresponding action of test and formatting date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal.setTime(formatter.parse(TEST_DATE_TO_USE));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal.add(Calendar.YEAR, 15);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        fmt = new SimpleDateFormat(DATE_FORMAT_STR).format(cal.getTime());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Making sure test result and true calendar outcome match
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("shift + Page Down did not find the correct date", fmt, result);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Testing the functionality of page_down, page_up, shift+page_down, shift+page_up
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public void testPageUpDownMonth() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        DateFormat formatter = new SimpleDateFormat(DATE_FORMAT_STR);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Calendar used to get current date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        GregorianCalendar cal = new GregorianCalendar();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Running test, Decreasing month
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String result = pageUpDownHelper(4, "" + Keys.PAGE_UP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Moving calendar to match corresponding action of test and formatting date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal.setTime(formatter.parse(TEST_DATE_TO_USE));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal.add(Calendar.MONTH, -4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String fmt = new SimpleDateFormat(DATE_FORMAT_STR).format(cal.getTime());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("Page up id not find the correct date", fmt, result);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Resetting calendar
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal = new GregorianCalendar();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Running Test, increasing month
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        result = pageUpDownHelper(10, "" + Keys.PAGE_DOWN);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Moving calendar to match corresponding action of test and formatting date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal.setTime(formatter.parse(TEST_DATE_TO_USE));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        cal.add(Calendar.MONTH, 10);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        fmt = new SimpleDateFormat(DATE_FORMAT_STR).format(cal.getTime());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Making sure test result and true calendar outcome match
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("Page down id not find the correct date", fmt, result);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Testing functionallity of tab, starting from the InputBox to the today button
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Do Not run with Safari. Safari does not handle tabs normally
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public void testTab() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Tab test Begins
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Tabbing to the next item and getting what is in focus
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String classOfActiveElem = "" + ruauUITestingUtil.getEval(CLASSNAME);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector("a[class*='" + classOfActiveElem + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Todays date should be on focus, Grabbing that element. Pressing tab with WebDriver after clicking on the icon
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        classOfActiveElem = "" + ruauUITestingUtil.getEval(CLASSNAME);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector("a[class*='" + classOfActiveElem + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Moving from the on focus element to the today link
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Clicking on the today link
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        classOfActiveElem = "" + ruauUITestingUtil.getEval(CLASSNAME);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector("button[class*='" + classOfActiveElem + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String elementClass = element.getAttribute("class");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertTrue("Tabbing through every buttong did not take us to the today button",
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:                elementClass.indexOf("calToday") >= 0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Test case for W-2031902
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public void testValueChangeEvent() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Tab test Begins
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Tabbing to the next item and getting what is in focus
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // tab out does not fire value change event
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("Value Change event should not be fired", "", element.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Setting focus to the Calendar Icon and clicking on it
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Todays date should be on focus, Grabbing that element. Pressing tab with WebDriver after clicking on the icon
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String classOfActiveElem = "" + ruauUITestingUtil.getEval(CLASSNAME);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector("a[class*='" + classOfActiveElem + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Moving from the on focus element to the today link
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        ruauUITestingUtil.PrEssEnter(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // make sure value change event got fired
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("Value Change event should not be fired", "Value Change Event Fired", element.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:     * UnAdaptable because issue with sfdc environments with sendkeys in iframes see W-1985839 and W-2009411
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Checking functionality of the shift tab button
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public void testShiftTab() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Tab test Begins
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String classOfActiveElem = "a[class*='" + ruauUITestingUtil.getEval(CLASSNAME) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Focused on Today's date, grabbing it and PrEssing tab to go to the Today hyperlink
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        classOfActiveElem = "a[class*='" + ruauUITestingUtil.getEval(CLASSNAME) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String shftTab = Keys.SHIFT + "" + Keys.TAB;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Going from Today hyperlink, back to SELECTED_DATE
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // gotToNextElem(driver, shftTab);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String classOfActiveElemButton = "button[class*='" + ruauUITestingUtil.getEval(CLASSNAME) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        findDomElement(By.cssSelector(classOfActiveElemButton)).sendKeys(shftTab);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Going from SELECTED_DATE to next-year
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        gotToNextElem(driver, shftTab);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Going from next-year to next-month
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        gotToNextElem(driver, shftTab);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        gotToNextElem(driver, shftTab);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Going from PrEv-month to prev-Year
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        gotToNextElem(driver, shftTab);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Going from PrEv-Year to icon
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        gotToNextElem(driver, shftTab);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        gotToNextElem(driver, shftTab);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Getting the input textbox in focus and getting the value, which should not have changed
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        classOfActiveElem = "input[class*='" + ruauUITestingUtil.getEval(CLASSNAME) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("Shift Tabbing did not get us to the input textbox", "1111-11-11", element.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Testing functionality of the ESC key
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public void testEscape() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        boolean escButtonClosedCal = false;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Setting focus to the Calendar Icon and clicking on it
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Looking for the current date, which should be focused on
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Hitting escape to close the Calendar
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Want to get a NoSuchElementExpection when looking for the class
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // if visible exists, that means that the calendar did not close
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector("div[class*='uiDatePicker']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        escButtonClosedCal = !element.getAttribute("class").contains("visible");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertTrue("Escape button did not close the calendar", escButtonClosedCal);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Testing Functionality of calendar in traversing through 1 year by the keys
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    public void testDateWithOneArrow() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Getting the calendar Icon
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String classOfActiveElem = "" + ruauUITestingUtil.getEval(CLASSNAME);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector("a[class*='" + classOfActiveElem + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Loop through 355 days
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("Dates do not match up", "2014-03-01", element.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Testing functionality of arrows being used one after the other
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Increase day in month by 1
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Grab calendar Icon
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Find todays date, which should be focused
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String classOfActiveElem = "" + ruauUITestingUtil.getEval(CLASSNAME);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector("a[class*='" + classOfActiveElem + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Move from todays date, to the todays date +41
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Move from today (date+41), to the todays date+1
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Focus on the input box and get its value
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("Next day was not correctly found", "2013-04-16", element.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:    // Testing functionality of arrows being used one after the other, while going through months
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Start at specific date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Select the calendar Icon
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Find todays date, which should be focused
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        String classOfActiveElem = "" + ruauUITestingUtil.getEval(CLASSNAME);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        element = findDomElement(By.cssSelector("a[class*='" + classOfActiveElem + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Focus should be back on todays date
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        // Select the input text box and get its value for comparison
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:        assertEquals("Moving dates using arrows has not brought us to todays date", TEST_DATE_TO_USE,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputDate/InputDateWithLabelUITest.java:                element.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java:package org.ruauframework.components.ui.inputMultiSelect;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java:public class InputMultiSelectNestedOptionsUITest extends BaseInputMultiSelect{
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java:     * This URL runs tests against options added in through the body
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectNestedOptionsUITest.java:        // TODO Auto-generated constructor stub
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:package org.ruauframework.components.ui.inputMultiSelect;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:import org.openqa.selenium.support.ui.Select;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:public class InputMultiSelectUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private final String[] URL = new String[] { "/uitest/inputMultiSelect_Test.cmp",
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private final By outputLocator = By.xpath("//span[@class='uiOutputText']");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private final By selectLocator = By.xpath("//select[1]");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private final By submitLocator = By.xpath("//button");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private final String optionLocatorString = "//select[1]/option[text()='%s']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    public InputMultiSelectUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private void openTestPage(int i) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private Select getInputSelect() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:        return new Select(findDomElement(selectLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private void selectOption(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:        selectDeselectOption(optionLabel, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private void deselectOption(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:        selectDeselectOption(optionLabel, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private void selectDeselectOption(String optionLabel, boolean isSelect) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            getInputSelect().selectByVisibleText(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            verifyOptionSelected(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            getInputSelect().deselectByVisibleText(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            verifyOptionDeselected(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private void verifyOptionSelected(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:        verifyOptionSelectDeselct(optionLabel, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private void verifyOptionDeselected(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:        verifyOptionSelectDeselct(optionLabel, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private void verifyOptionSelectDeselct(String optionLabel, boolean isSelected) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:        WebElement option = findDomElement(By.xpath(String.format(optionLocatorString, optionLabel)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            assertTrue("Option '" + optionLabel + "' should be selected", option.isSelected());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            assertFalse("Option '" + optionLabel + "' should be deselected", option.isSelected());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            openTestPage(i);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            findDomElement(submitLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            ruauUITestingUtil.waitForElementText(outputLocator, "option1", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            findDomElement(submitLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            ruauUITestingUtil.waitForElementText(outputLocator, "option3", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:     * select element corrupts selected/unselected options so we need to PrEserve the state
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:    private void focusSelectElement() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:        if (BrowserType.IE10.equals(getBrowserType())) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/InputMultiSelectUITest.java:            findDomElement(selectLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:package org.ruauframework.components.ui.inputMultiSelect;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:import org.ruauframework.test.WebDriverTestCase.ExcludeBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:import org.openqa.selenium.support.ui.Select;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:// TODO(W-2233222): ios-driver cannot select or deselect options from ui:inputSelect options
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:public class BaseInputMultiSelect extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private final String URL;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private final By outputLocator = By.xpath("//span[@class='uiOutputText']");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private final By selectLocator = By.xpath("//select[1]");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private final By submitLocator = By.xpath("//button");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private final String optionLocatorString = "//select[1]/option[text()='%s']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    public BaseInputMultiSelect(String urlPath) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        super(urlPath);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        this.URL = urlPath;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private Select getInputSelect() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        return new Select(findDomElement(selectLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private void selectOption(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        selectDeselectOption(optionLabel, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private void deselectOption(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        selectDeselectOption(optionLabel, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private void selectDeselectOption(String optionLabel, boolean isSelect) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:            getInputSelect().selectByVisibleText(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:            verifyOptionSelected(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:            getInputSelect().deselectByVisibleText(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:            verifyOptionDeselected(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private void verifyOptionSelected(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        verifyOptionSelectDeselct(optionLabel, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private void verifyOptionDeselected(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        verifyOptionSelectDeselct(optionLabel, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:    private void verifyOptionSelectDeselct(String optionLabel, boolean isSelected) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        WebElement option = findDomElement(By.xpath(String.format(optionLocatorString, optionLabel)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:            assertTrue("Option '" + optionLabel + "' should be selected", option.isSelected());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:            assertFalse("Option '" + optionLabel + "' should be deselected", option.isSelected());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        findDomElement(submitLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        ruauUITestingUtil.waitForElementText(outputLocator, "option1", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        findDomElement(submitLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        ruauUITestingUtil.waitForElementText(outputLocator, "option3", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        // find the element a 2nd time which helps get around the IE hover issues by focusing the element
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        findDomElement(submitLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        ruauUITestingUtil.waitForElementText(outputLocator, "option1;option2", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        findDomElement(submitLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        ruauUITestingUtil.waitForElementText(outputLocator, "option1", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:     * Select all. Select all options. Deselect all. Deselect all options.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        // select all
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        findDomElement(submitLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        ruauUITestingUtil.waitForElementText(outputLocator, "option1;option2;option3", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        // deselect all
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        findDomElement(submitLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputMultiSelect/BaseInputMultiSelect.java:        ruauUITestingUtil.waitForElementText(outputLocator, "", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:package org.ruauframework.components.ui.popup;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.ruauframework.test.WebDriverTestCase.TargetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.openqa.selenium.Keys;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:import org.openqa.selenium.interactions.Actions;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:// Note that as of July '14 this component is still in its early stages
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:// https://gus.my.salesui.com/0D5B0000001QjOc
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:@TargetBrowsers({BrowserType.GOOGLECHROME})
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:public class PopupUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:	private final String POPUP_CONTAINER = ".popupTargetContainer";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private final String POPUP_CONTAINER_TARGET = POPUP_CONTAINER + " div";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    public PopupUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Creates a popup with an extended target and confirms the
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * popup is launched with the specified height and width
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @expectedResults Popup launches with the specified size
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    public void testPopupWithExtendedTarget() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerText = "Trigger" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String popupText = "Target" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerLocator = "a[class='triggerExtendedTrigger']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Open Extended Popup app and verify the trigger loads
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        openExtendedPopupComponent(triggerText, popupText, true, false, true, false, false, false, false, popupWidth, popupHeight);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click the trigger and verify popup launches
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement trigger = driver.findElement(By.cssSelector(triggerLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementPresent("Popup did not launch", driver.findElement(By.cssSelector(POPUP_CONTAINER_TARGET)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement popupTarget = driver.findElement(By.cssSelector(POPUP_CONTAINER_TARGET));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        assertTrue("Popup does not contain specified text", popupTarget.getText().contains(popupText));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click outside popup and verify it closes
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementAbsent("Popup did not close", driver.findElement(By.cssSelector(POPUP_CONTAINER_TARGET)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private String randString(int len) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:		return ruauUITestingUtil.randString(len);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Sets a label to be the target of the popup, launches the popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * and verifies the label is PrEsent, then closes the popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @expectedResults popup launches with the label used as the target
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    public void testPopupWithLabelTarget() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerText = "Trigger" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String popupText = "Target" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerLocator = "a[class='triggerLabel']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String cmpMarkup = "<ruau:application>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                + "<ui:popupTrigger class='triggerLabel' ruau:id='triggerLabel' label='" + triggerText + "'/>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                + "<ui:popupTarget ruau:id='targetLabel' attachToBody='true'>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                + "</ui:popupTarget>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                + "</ruau:application>";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Open app and verify the trigger loads
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        openComponentApp(cmpMarkup);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click the trigger and verify popup launches
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement trigger = driver.findElement(By.cssSelector(triggerLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementPresent("Popup did not launch", driver.findElement(By.cssSelector(POPUP_CONTAINER)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement popupContainer = driver.findElement(By.cssSelector(POPUP_CONTAINER));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        assertTrue("Popup does not contain specified text", popupContainer.getText().contains(popupText));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click outside popup and verify it closes
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementAbsent("Popup did not close", popupContainer);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Creates a trigger with a popup outside of an iFrame, opens the
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * popup, then verifies that clicking inside of the iFrame will
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * close the popup.  This issue was found during development.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @expectedResults Popup closes when the click occurs in the iFrame
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    //Currently this test is not passing
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    public void _testPopupCollapseAfterClickInIframe() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerText = "Trigger" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String popupText = "Target" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerLocator = "div[class='triggerLabel']>a";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String appMarkup = "<ruau:application>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "<ui:popupTrigger class='triggerLabel' ruau:id='triggerLabel' label='" + triggerText + "'/>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "<ui:popupTarget class='targetExtendedTarget' ruau:id='targetExtendedTarget' attachToBody='false'>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "</ui:popupTarget>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "<iframe width='500' height='500' name='frameId' title='iframeTitle'/>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "</ruau:application>";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Open app and verify the trigger loads
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        DefDescriptor<ApplicationDef> appDef = addSourceAutoCleanup(ApplicationDef.class, appMarkup);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String appUrl = String.format("/%s/%s.app", appDef.getNamespace(), appDef.getName());
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        open(appUrl);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementPresent(driver.findElement(By.cssSelector("iframe")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement iframeElement = driver.findElement(By.cssSelector("iframe"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click the trigger and verify popup launches
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement trigger = driver.findElement(By.cssSelector(triggerLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementPresent("Popup did not launch", driver.findElement(By.cssSelector(POPUP_CONTAINER)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement popupContainer = driver.findElement(By.cssSelector(POPUP_CONTAINER));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        assertTrue("Popup does not contain specified text", popupContainer.getText().contains(popupText));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click outside popup in the iFrame and verify the popup closes
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        iframeElement.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementAbsent("Popup did not close", popupContainer);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Sets a popup target to close with a mouse click outside of it.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        verifyPopupCloseWithClick(false, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Sets a popup target to close with a mouse click inside and outside
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * of itself.  Verifies the popup can be closed both ways.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     *      of it as well as outside
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Sets a popup target to close with a mouse click outside of it.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        verifyPopupCloseWithClick(true, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Verifies the popup closes when the trigger is clicked; also
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        verifyPopupCloseWithClick(false, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Uses input box selection as a custom trigger to launch a
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * popup.  Closes the popup via a button (custom close trigger).
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     *      and closes when the button is clicked
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        verifyCustomTrigger(false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Uses input box selection as a custom trigger to launch a
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * popup.  Closes the popup via the TAB key.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     *      and closes when the TAB key is PrEssed
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    //Not working as PrEssing Tab key does not close the target container if there are many popup's on the page
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    public void _testCloseOnTabKey() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Sets a popup to open at a manual position (move left by 5px)
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * and verifies the popup opens at the specified location.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    public void testPopupManualPosition() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerText = "Trigger" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String popupText = "Target" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerLocator = "a[class='triggerExtendedTarget']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String cmpMarkup = "<ruau:application>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "<ui:popupTrigger class='triggerExtendedTarget' ruau:id='triggerExtendedTarget' label='" + triggerText + "'/>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "<ui:popupTarget ruau:id='targetExtendedTarget' attachToBody='true' manualPosition='true' autoPosition='false'>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "<div style='position: absolute; left: " + xCoord + "px;width: " + popupWidth + "px;height: " + popupHeight + "px'>" + popupText
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "</ui:popupTarget>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            + "</ruau:application>";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        DefDescriptor<ApplicationDef> appDef = addSourceAutoCleanup(ApplicationDef.class, cmpMarkup);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String appUrl = String.format("/%s/%s.app", appDef.getNamespace(), appDef.getName());
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Open app and verify the trigger loads
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        open(appUrl);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click the trigger and verify popup launches
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement trigger = driver.findElement(By.cssSelector(triggerLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementPresent("Popup did not launch", driver.findElement(By.cssSelector(POPUP_CONTAINER_TARGET)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement containerTgt = driver.findElement(By.cssSelector(POPUP_CONTAINER_TARGET));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        assertTrue("Popup does not contain specified text", containerTgt.getText().contains(popupText));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Verify the popup location is as specified
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        assertEquals("Popup position incorrect", xCoord, popupElem.getLocation().getX());
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Sets a curtain to open with the popup, verifies it is PrEsent
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * when the popup opens, and confirms it closes when the popup is
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @expectedResults Curtain is PrEsent when the popup opens and
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     *      closes along with the popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    public void testPopupWithCurtain() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerText = "Trigger" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String popupText = "Target" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerLocator = "a[class='triggerExtendedTrigger']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String popupLocator = ".popupCurtain";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Open Extended Popup app and verify the trigger loads
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        openExtendedPopupComponent(triggerText, popupText, true, true, false, true, true, false, false, popupWidth, popupHeight);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click the trigger and verify popup launches
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement trigger = driver.findElement(By.cssSelector(triggerLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement popCurtain = driver.findElement(By.cssSelector(popupLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementPresent("Popup with curtain did not launch", popCurtain);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click outside popup and verify it closes
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementAbsent("Popup did not close", popCurtain);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Helper to create a custom popup trigger and closer.  Trigger is
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * selecting an input box; popup closing is done via clicking on a
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * button OR via the keyboard TAB key.
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param closeOnTabKey true if using the TAB key to close the popup;
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     *      false if using the button to close the popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private void verifyCustomTrigger(boolean closeOnTabKey) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerLocator = "customTriggerInput";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String buttonLocator = "customTriggerButton";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String targetLocator = "customTriggerTargetContainer";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String appUrl = "/uitest/popupTest.app";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        open(appUrl);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click on the trigger and verify the popup opens
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementPresent("Trigger input box not PrEsent", driver.findElement(By.className(triggerLocator)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement triggerInput = driver.findElement(By.className(triggerLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement popContainerTgtElem = driver.findElement(By.className(targetLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementPresent("Popup did not launch", popContainerTgtElem);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        if (closeOnTabKey) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        	WebElement customTriggerButton = driver.findElement(By.className(buttonLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementAbsent("Popup did not close", popContainerTgtElem);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Helper to verify popup closes via a mouse click inside the popup,
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param closeOnClickInside
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param closeOnClickOutside
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private void verifyPopupCloseWithClick(boolean closeOnClickInside, boolean closeOnClickOutside) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    	String triggerText = "Trigger" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String popupText = "Target" + randString(4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String triggerLocator = "a[class='triggerExtendedTrigger']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Open Extended Popup app and verify the trigger loads
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        openExtendedPopupComponent(triggerText, popupText, true, closeOnClickInside, closeOnClickOutside, false, false, false, false, popupWidth, popupHeight);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        // Click the trigger and verify popup launches
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement trigger = driver.findElement(By.cssSelector(triggerLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        By popContainerTgt = By.cssSelector(POPUP_CONTAINER_TARGET); 
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementPresent("Popup did not launch", driver.findElement(popContainerTgt));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement popContainerTgtElem = driver.findElement(popContainerTgt);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        assertTrue("Popup does not contain specified text", popContainerTgtElem.getText().contains(popupText));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            // Verify popup doesn't close with a mouse click outside of it
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                // Verify popup doesn't close with a mouse click inside of it
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                WebElement trgLocatorElemt = driver.findElement(By.cssSelector(triggerLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                trgLocatorElemt.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                waitForElementAbsent("Popup did not close", popContainerTgtElem);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                WebElement trgLocatorElemt = driver.findElement(By.cssSelector(triggerLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                trgLocatorElemt.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                waitForElementPresent("Popup did not launch", popContainerTgtElem);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                // Verify popup doesn't close with a mouse click inside of it
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                // Verify popup closes with a mouse click inside of it
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        waitForElementAbsent("Popup did not close", popContainerTgtElem);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Helper that performs a mouse click inside a launched popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param popupLocator CSS locator of popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private void clickInsidePopup(String popupLocator) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        WebElement popupElem = driver.findElement(By.cssSelector(popupLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        //org.openqa.selenium.Dimension popupSize = popupElem.getSize();
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param popupLocator CSS locator of popup target
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private void verifyPopupNotClosed(String popupLocator) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            // wait to see if popup closes
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            waitForElementAbsent(driver.findElement(By.cssSelector(popupLocator)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            fail("Popup closed when it shouldn't");
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            //Continue with no failure if the popup didn't close
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Helper to verify that the height and width of a popup match
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * the expected values
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param popupLocator CSS locator of popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param expectedHeight Expected height of the popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param expectedWidth Expected width of the popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private void verifyPopupSize(String popupLocator, int expectedHeight, int expectedWidth) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    	org.openqa.selenium.Dimension popupSize = driver.findElement(By.cssSelector(popupLocator)).getSize();
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        assertEquals("Popup height not as specified", expectedHeight, popupSize.getHeight());
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        assertEquals("Popup width not as specified", expectedWidth, popupSize.getWidth());
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Helper that performs a mouse click outside of a launchd popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param popupLocator CSS locator of popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private void clickOutsidePopup(String popupLocator) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java://        WebElement popupElem = driver.findElement(By.cssSelector(popupLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java://        org.openqa.selenium.Point popupLoc = popupElem.getLocation();
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java://        org.openqa.selenium.Dimension popupSize = popupElem.getSize();
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String elemLoc = isElementPresent(By.cssSelector(".popupCurtain")) ? ".popupCurtain" : "body";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Helper that creates and opens a popup with Extended target
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param triggerText Text for the trigger
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param popupText Text to appear in the popup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param attachToBody true if popup should be at body level; false if
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     *      popup should be at trigger level
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param closeOnClickInside true if popup can be closed with a click
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param closeOnClickOutside true if popup can be closed witha click
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param width Width of popup in px
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param height Height of popup in px
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private void openExtendedPopupComponent(String triggerText, String popupText, boolean attachToBody, boolean closeOnClickInside, 
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            boolean closeOnClickOutside, boolean manualPosition, boolean curtain, boolean closeOnTabKey, boolean visible, int width, int height) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String cmpMarkup = "<ruau:application>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                + "<ui:popupTrigger class='triggerExtendedTrigger' ruau:id='triggerExtendedTarget' label='" + triggerText + "'/>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                + "<ui:popupTarget class='targetExtendedTarget' ruau:id='targetExtendedTarget' attachToBody='" + attachToBody
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                    + "' manualPosition='" + manualPosition
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                    + "' curtain='" + curtain
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                    + "' closeOnTabKey='" + closeOnTabKey
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                + "</ui:popupTarget>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:                + "</ruau:application>";
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            // Open app and verify the trigger loads
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:            openComponentApp(cmpMarkup);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * Creates an app and opens it in the browser based on
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * input app markup
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:     * @param markup String markup for app
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:    private void openComponentApp(String markup) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        DefDescriptor<ApplicationDef> appDef = addSourceAutoCleanup(ApplicationDef.class, markup);
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        String appUrl = String.format("/%s/%s.app", appDef.getNamespace(), appDef.getName());
ruau/ruau/src/test/java/org/ruauframework/components/ui/popup/PopupUITest.java:        open(appUrl);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:package org.ruauframework.components.ui.inputPercent;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:public class InputPercentUITest_DISABLED extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    public InputPercentUITest_DISABLED(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // This tests behaviour exhibited by HTML5 input type="number".
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // We are currently rendering ui:inputPercent using type="text" to get
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // around
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // browser implementation bugs. If these bugs are resolved, we should
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // switch back to using type="number" and re-enable this test.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // String source = "<ruau:component>" +
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // "</ruau:component>";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // addSource("inputtextuipercentsymboltest", source, ComponentDef.class);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // WebElement input = d.findElement(By.tagName("input"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // RuueUITestingUtil.PrEssTab(input);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // input = d.findElement(By.tagName("input"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // assertEquals("Percent symbol was not trimed", "12.3",
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputPercent/InputPercentUITest_DISABLED.java:    // input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:package org.ruauframework.components.ui.inputSearch;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java: * UI Tests for inputSearch Component
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:public class InputSearchUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:    public InputSearchUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:    // W-1551076: Webdriver not firing search event in Safari, IPAD and IPHONE
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:    public void testSearch() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        String valueExPrEssion = ruauUITestingUtil.getValueFromRootExpr("v.searched");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        String cmpValueExPrEssion = ruauUITestingUtil.prepareReturnStatement(ruauUITestingUtil
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:                .getValueFromRootExpr("v.value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        valueExPrEssion = ruauUITestingUtil.prepareReturnStatement(valueExpression);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        open("/uitest/inputSearch_HandlingSearchEvent.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        WebElement input = ruauUITestingUtil.findElementAndTypeEventNameInIt("search");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        assertFalse("Search event should not have been triggered yet",
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:                ruauUITestingUtil.getBooleanEval(valueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        assertNull("Component value should not be updated yet", ruauUITestingUtil.getEval(cmpValueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        ruauUITestingUtil.PrEssEnter(input);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        assertTrue("Search event should have been triggered", ruauUITestingUtil.getBooleanEval(valueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        // test case for W-1545841
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        assertEquals("Component value should be updated", "search", ruauUITestingUtil.getEval(cmpValueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:    // W-1551076: Webdriver not firing search event in Safari
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:    // W-1410946: "x" not displayed on IE7/IE8
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:    public void testClearSelection() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        String valueExPrEssion = ruauUITestingUtil.getValueFromRootExpr("v.searched");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        valueExPrEssion = ruauUITestingUtil.prepareReturnStatement(valueExpression);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        open("/uitest/inputSearch_HandlingSearchEvent.cmp?showClear=true");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        WebElement input = ruauUITestingUtil.findElementAndTypeEventNameInIt("search");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        assertEquals("The initial value in input Search is wrong", "search", input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        WebElement clearButton = d.findElement(By.cssSelector("button[class*='clear']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        assertTrue("input search clear button doesn't show up", clearButton.isDisplayed());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        ruauUITestingUtil.PrEssEnter(clearButton);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        assertEquals("The input search term should be cleared", "", input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:        assertTrue("input Search Search event should have been triggered",
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSearch/InputSearchUITest.java:                ruauUITestingUtil.getBooleanEval(valueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:package org.ruauframework.components.ui.tabset;
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:import java.net.MalformedURLException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:import java.net.URISyntaxException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:import org.openqa.selenium.*;
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:public class TabsetUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private final String URL = "/uitest/tabset_Test.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private By ACTIVE_LI_LOCATOR = By.cssSelector("li[class*='tabItem uiTabItem active'] > a");
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private By ACTIVE_SECTION = By.cssSelector("section[class*='active uiTab']");
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private String [] TITLE_ARRAY = {"Accounts", "Contacts", "Opportunities", "Leads", "Chatter", "Icon", "Dashboards"};
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private String [] BODY_ARRAY = {"tab 1 contents", "tab 2 contents", "tab 3 contents", "tab 4 contents", "tab 5 contents", "tab 6 contents", "tab 7 contents",};
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private int NUMBER_OF_TABS = 7;
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    public TabsetUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Function that will iterate through all tabs and make sure that we go in the correct order
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param rightOrDownArrow - Key to PrEss
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param leftOrUpArrow  Key to PrEss
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private void iterateThroughTabs(CharSequence rightOrDownArrow, CharSequence leftOrUpArrow){
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        WebElement activeSection = findDomElement(ACTIVE_SECTION);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        //Loop through all of the tabs to make sure we get to the correct values
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            //Verify on correct tab
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            assertEquals("Did not get to the correct tab", TITLE_ARRAY[i], element.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            //Verify Section id and tab id match
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            assertEquals("The aria-controls id and section id do not match", element.getAttribute("aria-controls"), activeSection.getAttribute("id"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            //Verify Body text matches what we think it should be
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            assertTrue("The body of the section is not what it should be", activeSection.getText().contains(BODY_ARRAY[i]));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            //Go to the next element then grab the new active elements
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            activeSection = findDomElement(ACTIVE_SECTION);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        //Loop through all of the tabs to make sure we get to the correct values
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            activeSection = findDomElement(ACTIVE_SECTION);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            //Verify on correct tab
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            assertEquals("Did not get to the correct tab", TITLE_ARRAY[i], element.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            //Verify Section id and tab id match
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            assertEquals("The aria-controls id and section id do not match", element.getAttribute("aria-controls"), activeSection.getAttribute("id"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            //Verify Body text matches what we think it should be
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:            assertTrue("The body of the section is not what it should be", activeSection.getText().contains(BODY_ARRAY[i]));           
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Verify that when a tab closes that it actually closes
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param loc - string location of tab to close
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private void closeTabAndVerify(String loc){
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	findDomElement(By.xpath(loc)).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	int numberOfElement = findDomElements(By.xpath("//ul/li")).size();
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	//Subtracting total number of tabs that we expect by 1
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	assertEquals("The number of tabs, after deleting a tab, do not match", numberOfElement, NUMBER_OF_TABS);   
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Making sure that when an element closes the element that is focused is no longer focused, and focus is on the next item
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param initialFocusLocator - where the current focus is
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param initialText         - the text that we are expecting
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param secondaryText       - text of the element where we want the focus to be
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private void checkFocusMoves(String initialFocusLocator,  String initialText, String secondaryText ){
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	 WebElement element = findDomElement(By.xpath(initialFocusLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:         assertTrue("Correct element ("+initialText+") was not found", element.getText().contains(initialText));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:         //Close element directly before/after tab current tab
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:         closeTabAndVerify(initialFocusLocator+"/a");
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:         //Verify that there is only one active element on the page
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:         assertEquals("Amount of active elements on the page is incorrect", 1, elms.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:         assertTrue("Correct element ("+secondaryText+") was not found", element.getText().contains(secondaryText));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * method to create an xpath location that we are looking for
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param pos - position of the li, under the UL that we are looking for 
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @return    - the xpath string
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private String createXPath(int pos){
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	return "//ul/li["+pos+"]/a";
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Function that will create a tab, tab and verify its contents
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param tabName - Name of the tab
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param tabBody - Body of the tab
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private void createNewTab(String tabName, String tabBody){
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        WebElement element = findDomElement(By.xpath("//button[contains(@class,'addTab')]"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        assertTrue("Correct element was not found", element.getText().contains(tabName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        //Verify Body text matches what we think it should be
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        assertEquals("The body of the section is not what it should be", tabBody, element.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Function that will create a url based on the item attribute. Depending on what ITem is the page will render differently
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param item - what item we want rendered
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private String createURL(String item, String closable){
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	return URL+"?renderItem="+item+"&closable="+closable;
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Function verifying that the element we are expecting to be active is actually active
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @param loc - the locator for the element
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    private void verifyElementIsActive(By loc){
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	assertTrue("The Active class name was not found in the non deleted element", el.getAttribute("class").contains("active"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    public void verifyElementFocus(String itemToVerifyAgainst){
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        //Verify correct element is focused (verified with with the class that we are expecting the element to contain)
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  String activeElementClass = (String) ruauUITestingUtil.getEval("return $A.test.getActiveElement().getAttribute('class')");
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  assertTrue("Focus is not on ther correct element", activeElementClass.contains(itemToVerifyAgainst));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Test that will verify that the arrows keys work. This is not something that will be run on mobile devices
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * IE7/8 don't handle arrows well. Disabling tests until bug is fixed: W-2295362
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    public void testLeftRightUpDownArrows () throws MalformedURLException, URISyntaxException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        open(createURL("basic", "false"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        //Left/Up and Right/Down Arrows do the samething. Making sure that the result is also the same
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        iterateThroughTabs(Keys.ARROW_RIGHT, Keys.ARROW_LEFT);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        iterateThroughTabs(Keys.ARROW_DOWN, Keys.ARROW_UP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Test that will verify that when a tab closes, the active element is moved to either the correct element.
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    public void testFocusOnClose_MovesToAnotherElement() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        open(createURL("basic", "true"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        //Check focus moves from the first element to the second element after it is closed
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        checkFocusMoves(createXPath(1), TITLE_ARRAY[0], TITLE_ARRAY[1]);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        checkFocusMoves(createXPath(2), TITLE_ARRAY[2], TITLE_ARRAY[3]);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        //Check focus moves from the last element to the second to last element
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        checkFocusMoves(createXPath(5), TITLE_ARRAY[6], TITLE_ARRAY[5]);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Test verifying that if an element that is not active is closed, then focus is not lost
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    public void testFocusOnClose_NonCurrentElementDoesntLoseFocus() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        open(createURL("basic", "true"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        closeTabAndVerify(createXPath(4)+"/a");
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        assertEquals("Correct element was not found", TITLE_ARRAY[4], element.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Dynamically create a component, verify it and make sure that it still acts as a normal component
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    public void testFocusOnClose_DynamicTabGeneration() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	String tabName = "Dynamic";
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        String tabBody = "Dynamically generated";
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        open(createURL("basic", "false"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        createNewTab(tabName, tabBody);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:        checkFocusMoves(createXPath(8), tabName, TITLE_ARRAY[6]);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Verifying that nestedTabs work the same as normal tabs
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    public void testNestedTabsDelete () throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	open(createURL("nestedTabs", "false"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	WebElement el = findDomElement(By.partialLinkText("inner tab 1"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	el = findDomElement(By.xpath("//li/a/a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	//Verify nested tab that was not deleted is active
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	verifyElementIsActive(By.xpath("//li[contains(., 'inner tab 2')]"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	//Verify that the parent tab is still active, and that both elements in the parents tabBar still exist
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	verifyElementIsActive(By.xpath("//li[contains(., 'tab1')]"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	List<WebElement> elements = findDomElements(By.xpath("//div[contains(@class,'nestedTabs')]/div/ul/li"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	assertEquals("Size of the part tabBar was not as expected. Something must have been deleted", 2, elements.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Test that will verify that tabbing through tabset should go into the body.
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Disabled against mobile since tabbing does not make sense on mobile
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * Tabbing with Safari acts oddly. For some strange reason, I have to grab the element I 
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * want and then send the tab key to put it into focus other wise nothing happens
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    public void testTabbingInTabSet() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  open(createURL("tab", "true"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  //Focus on tab and move to next focusable element
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  WebElement element = findDomElement(By.partialLinkText("Accounts"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  //Verify anchor is focused on
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  String activeElementText = ruauUITestingUtil.getActiveElementText();
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  assertTrue("Focus is not on ther correct element", activeElementText.contains("Close"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  //Move from anchor to next item (inputTextBox)    	  
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  element = findDomElement(By.xpath(createXPath(1)+"/a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  //Verify inputTextBox (in tab section) is focused 
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  verifyElementFocus("inputTabTitle");
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  //Tab to the next focusable area
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  element = findDomElement(By.cssSelector("input[class*='inputTabTitle']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  //Verify inputTextArea (outside of the tab) is focused
ruau/ruau/src/test/java/org/ruauframework/components/ui/tabset/TabsetUITest.java:    	  verifyElementFocus("inputTabContent");
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:package org.ruauframework.components.ui.infiniteListRow;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import java.net.MalformedURLException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import java.net.URISyntaxException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import org.ruauframework.test.WebDriverTestCase.TargetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:@TargetBrowsers({ BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:public class infiniteListRowUITest extends WebDriverTestCase{
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private static final String TEST_APP = "/uitest/infiniteListRow_Test.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private final String INFINITE_LISTROW = "li[class*='uiInfiniteListRow']";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private final String DIV_CONTAINER = ".container";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private final String SHOW_MORE_BUTTON = ".btnShowMore";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private final String REFRESH_BUTTON = ".btnRefresh";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private final String INFINITE_LISTROW_OPEN = ".uiInfiniteListRow.open";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private int container_x_coordinate;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private int swipeBody_x_coordinate;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private enum swipeDirection {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	public infiniteListRowUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Test to verify default Horizontal left and right swipe
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	public void testHorizontalSwipeGesturesDefaultBehavior() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		setViewPortVariable();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		//Horizontal right swipe should not swipe
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		//verify there is no uiInfiniteListRow element with class open
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		//horizontal left flick
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        //Horizontal right swipe should close the swipeBody
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:      	verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Test to verify Horizontal left swipe behavior
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	public void testHorizontalLeftSwipeBehavior() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		setViewPortVariable();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		//horizontal left flick on row7
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        clickOnListRowAndWait(row8);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        clickOnListRowAndWait(row12);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        //Horizontal right swipe on row7 should close row12
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:      	verifyOnlyOneSwipeBodyIsOpen(row12, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Click on any row to close the open Listrow
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @param element
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private void clickOnListRowAndWait(WebElement listRow) throws InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Test to verify adding more ListRows using show More button should close the open swipeBody if any
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	public void testShowMoreListRowsClosesOpenSwipeBody() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Test to verify doing refresh on ListRows should close the open swipeBody if any
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	public void testRefreshOnListRowsClosesOpenSwipeBody() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	public void testScrollingAnyVerifyDefaultSwipeBehavior() throws MalformedURLException, URISyntaxException, InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        setViewPortVariable();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        //vertical flick
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private void verifyListRowAfterRefreshOrShowMoreAction(String action) throws MalformedURLException, URISyntaxException, InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		setViewPortVariable();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		int totalListRows = getAllListRows().size();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		assertEquals("Total ListRow on the page should be 25", 25, totalListRows);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		//horizontal left flick on row7
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        if(action.equalsIgnoreCase("showMore")){
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        	//refresh case
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        totalListRows = getAllListRows().size();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        assertEquals("Total ListRow on the page should remain 25 after clicking on refresh button", expectedListRows, totalListRows);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		//Swipe body for row20 should be closed after the action is performed
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Automation for vertical swipe support to infiniteList & infiniteListRow
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	public void testVerticalSwipeClosesOpenSwipeBody() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		setViewPortVariable();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		//horizontal left flick
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        //Vertical right swipe should close the swipeBody
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:      	verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * tap outside of active row should close active row
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	public void testTapOnNonActiveRowClosesActiveRow() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		setViewPortVariable();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		//horizontal left flick
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        //tap on non active list row1 should close swipe body for row7
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        clickOnListRowAndWait(row1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        verifyOnlyOneSwipeBodyIsOpen(null, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * To verify swipe body for the listRow that is opened after the Horizontal swipe is done
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @param listRow
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @param isPresent
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private void verifyOnlyOneSwipeBodyIsOpen(WebElement listRow, boolean isPresent) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:			assertEquals("Swipe Body for Only one list row should be opened", 1, openRow.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:			WebElement actualRow = openRow.get(0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:			assertEquals(String.format("Correct List Row is not Opened it should be %s", listRow.getText()), listRow, actualRow);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:			assertNull("No Swipe Body should be opened", openRow);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Method To add more listRows on the page
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private void clickOnShowMore() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		waitForLoadingIndicatorToDisappear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Set x-coordinate of the container and x-coordinate for swipeBody to some variables for future reference
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Helpful to check if element is within the viewport after swipe gestures
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private void setViewPortVariable() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		WebElement container = findDomElement(By.cssSelector(DIV_CONTAINER));
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		container_x_coordinate = container.getLocation().getX();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		swipeBody_x_coordinate = row1SwipeBody.getLocation().getX();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Swipe and then verify if the element is within or outside of the viewport depending
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @param elem
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @param swipeOption
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private void swipeOnElementAndVerify(WebElement elem, swipeDirection swipeOption) throws InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        case SWIPE_LEFT:
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        	waitForElementPresent(String.format("Swipe body for %s should be visible on the page after horizontal swipe",swipBody.getText()), swipBody);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        	int swipeBody_xPos_SL = swipBody.getLocation().getX();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:    		int eleBody_xPos_SL = eleBody.getLocation().getX();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            boolean viewPortConditionForSwipeBody_SL = container_x_coordinate <= swipeBody_xPos_SL && swipeBody_xPos_SL <= swipeBody_x_coordinate;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            assertTrue(String.format("%s should be within the view port after horizontal Left swipe",swipBody.getText()), viewPortConditionForSwipeBody_SL);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            boolean viewPortConditionForListBody_SL =  eleBody_xPos_SL < container_x_coordinate;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            assertTrue(String.format("%s should not be within the view port after horizontal Left swipe",eleBody.getText()), viewPortConditionForListBody_SL);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            break;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        case SWIPE_RIGHT:
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        	waitForElementPresent(String.format("%s should be visible on the page",eleBody.getText()), elem);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            int swipeBody_xPos_SR = swipBody.getLocation().getX();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:    		int eleBody_xPos_SR = eleBody.getLocation().getX();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            boolean viewPortConditionForListBody_SR =  container_x_coordinate <= eleBody_xPos_SR && eleBody_xPos_SR <= swipeBody_x_coordinate;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            assertTrue(String.format("%s should be within the view port after horizontal Right swipe",eleBody.getText()), viewPortConditionForListBody_SR);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            boolean viewPortConditionForSwipeBody_SR = swipeBody_xPos_SR >= swipeBody_x_coordinate;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            assertTrue(String.format("%s should be outside of the view port after horizontal Right swipe",swipBody.getText()), viewPortConditionForSwipeBody_SR);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            break;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        case SWIPE_VERTICAL_DOWN:
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        	int totalElementBeforeFlick = getAllListRows().size();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        	WebElement lastElement = getListRowElement(totalElementBeforeFlick);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        	waitForElementPresent(String.format("Last Element %s should be visible on the page",getListRowBody(lastElement).getText()), lastElement);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:            break;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        case SWIPE_VERTICAL_UP:
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:        	break;
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @param elem
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @param xOffset
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @param yOffset
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private void performFlick(WebElement elem, int xOffset, int yOffset) throws InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private void pause(long timeout) throws InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		Thread.sleep(timeout);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private void refreshInfiniteList() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		waitForLoadingIndicatorToDisappear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private List<WebElement> getListRowOpened() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		By locator = By.cssSelector(INFINITE_LISTROW_OPEN);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		if(isElementPresent(locator)){
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:			return findDomElements(locator);
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private WebElement getListRowSwipeBody(WebElement elem) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private WebElement getListRowBody(WebElement elem) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * Return List Row given particular rowNumber
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * @param rowNumber
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private WebElement getListRowElement(int rowNumber) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		String locator = "li:nth-child(" + rowNumber +")";
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		waitForElementPresent(String.format("ListViewRow%s not visible on the screen", rowNumber), driver.findElement(By.cssSelector(locator)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:		return findDomElement(By.cssSelector(locator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	 * get all ListRows on the page
ruau/ruau/src/test/java/org/ruauframework/components/ui/infiniteListRow/infiniteListRowUITest.java:	private List<WebElement> getAllListRows() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:package org.ruauframework.components.ui.menu;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import java.net.MalformedURLException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import java.net.URISyntaxException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.ruauframework.test.WebDriverTestCase.TargetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.openqa.selenium.Dimension;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.openqa.selenium.Keys;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:import org.openqa.selenium.interactions.Actions;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * UI automation to verify Action, checkbox and radio Menu using mouse and keyboard interaction .
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: * @userStory a07B0000000TG3R Excluding the test from IE due to know issue related to mouseOver Excluding it from touch
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java: *            browsers due to to W-1478819 and mouse over related issues
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:@TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.FIREFOX })
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:public class MenuUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public static final String MENUTEST_APP = "/uitest/menu_Test.app";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public static final String MENUTEST_ATTACHTOBODY_APP = "/uitest/menu_AttachToBodyTest.app";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public static final String MENUTEST_METADATA_APP = "/uitest/menu_MetadataTest.app";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public static final String MENUTEST_EVENTBUBBLING_APP = "/uitest/menu_EventBubbling.app";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public MenuUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    private void testActionMenuForApp(String appName) throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        open(appName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String label = "trigger";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuName = "actionMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem2 = "actionItem2";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem3 = "actionItem3";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(label));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionMenu = driver.findElement(By.className(menuName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem2 = driver.findElement(By.className(menuItem2));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem2Element = actionItem2.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem3 = driver.findElement(By.className(menuItem3));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem3Element = actionItem3.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Menu list should not be visible", actionMenu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // check menu list is visible after the click
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Menu list should be visible", actionMenu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify focus on action item3
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        ruauUITestingUtil.setHoverOverElement(menuItem3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem3", actionItem3Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String globalIdItem2 = ruauUITestingUtil.getCmpGlobalIdGivenElementClassName(menuItem2);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        Double item2TopValue = Double.parseDouble(ruauUITestingUtil.getBoundingRectPropOfElement(globalIdItem2, "top"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item 2 in the menu List is should be visible on the page", item2TopValue > 0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // use send key("f") to move to actionItem2
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem3Element.sendKeys("f");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify focus on actionItem2
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem 2", actionItem2Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // action item 2 not clickable as its disable item
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem2.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // check menu list is still visible after the click
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Menu list should be visible after click on item2",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                actionMenu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // set focus back to actionItem3
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        ruauUITestingUtil.setHoverOverElement(menuItem3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem3", actionItem3Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // click on item 1 and verify click worked
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem3.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Item3 not selected", "Inter Milan", menuLabel.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    private void testActionMenuViaKeyboardInteractionForApp(String appName) throws MalformedURLException,
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:            URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        open(appName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String label = "trigger";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuName = "actionMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem1 = "actionItem1";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem3 = "actionItem3";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem4 = "actionItem4";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(label));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionMenu = driver.findElement(By.className(menuName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem1 = driver.findElement(By.className(menuItem1));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem1Element = actionItem1.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem3 = driver.findElement(By.className(menuItem3));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem3Element = actionItem3.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem4 = driver.findElement(By.className(menuItem4));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem4Element = actionItem4.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // check menu list is visible after the click
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Menu list should be visible", actionMenu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // default focus on action item1
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem1", actionItem1Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem1Element.sendKeys(Keys.DOWN, Keys.DOWN);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify focus on action item3
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        ruauUITestingUtil.setHoverOverElement(menuItem3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem3", actionItem3Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem3.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Item3 unchecked after PrEssing Enter key", "Inter Milan", menuLabel.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // focus on action item4
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        ruauUITestingUtil.setHoverOverElement(menuItem4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem4", actionItem4Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem4Element.sendKeys(Keys.UP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify focus on action item3
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem3", actionItem3Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // PrEss space key and check if item3 got selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem3Element.sendKeys(Keys.SPACE);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Item3 not selected after PrEssing space key", "Inter Milan", menuLabel.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Menu list should be visible", actionMenu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        ruauUITestingUtil.setHoverOverElement(menuItem1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem1Element.sendKeys(Keys.ESCAPE);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Menu list should not be visible", actionMenu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * Test that verify's interaction with Action Menu Excluding Ipad and iphone as hover wont work for touch devices
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testActionMenu() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    // Test case for W-2181713
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testActionMenuAttachToBodySet() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testActionMenuGeneratedFromMetaData() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testActionMenuViaKeyboardInteraction() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        testActionMenuViaKeyboardInteractionForApp(MENUTEST_APP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    // Test case for W-2234265
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testActionMenuAttachToBodySetViaKeyboardInteraction() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        testActionMenuViaKeyboardInteractionForApp(MENUTEST_ATTACHTOBODY_APP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    // TODO: W-2406307: remaining Halo test failure
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void _testActionMenuGeneratedFromMetaDataViaKeyboardInteraction() throws MalformedURLException,
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:            URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        testActionMenuViaKeyboardInteractionForApp(MENUTEST_METADATA_APP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testCheckboxMenu() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testCheckboxMenuGeneratedFromMetaData() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    private void testMenuCheckboxForApp(String appName) throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        open(appName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String label = "checkboxMenuLabel";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuName = "checkboxMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String globalIdItem3 = ruauUITestingUtil.getCmpGlobalIdGivenElementClassName(menuItem3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String globalIdItem4 = ruauUITestingUtil.getCmpGlobalIdGivenElementClassName(menuItem4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String disableValueM4Exp = ruauUITestingUtil.getValueFromCmpExPrEssion(globalIdItem4, "v.disabled");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String selectedValueM4Exp = ruauUITestingUtil.getValueFromCmpExPrEssion(globalIdItem4, "v.selected");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String selectedValueM3Exp = ruauUITestingUtil.getValueFromCmpExPrEssion(globalIdItem3, "v.selected");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(label));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menu = driver.findElement(By.className(menuName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item3 = driver.findElement(By.className(menuItem3));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item3Element = item3.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item4 = driver.findElement(By.className(menuItem4));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item4Element = item4.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement button = driver.findElement(By.className("checkboxButton"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement result = driver.findElement(By.className("result"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // check for default label PrEsent
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("label is wrong", "NFC West Teams", menuLabel.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Default: CheckboxMenu list should not be visible", menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // click on label
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("CheckboxMenu list should be visible", menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify aria attribute item4 which is used for accessibility is disabled and selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item4 aria attribute should be disabled",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                Boolean.valueOf(item4Element.getAttribute("aria-disabled")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item4 aria attribute should be selected",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                Boolean.valueOf(item4Element.getAttribute("aria-checked")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify item4 is disabled and selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item4 should be disabled", (Boolean) ruauUITestingUtil.getEval(disableValueM4Exp));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item4 should be selected", (Boolean) ruauUITestingUtil.getEval(selectedValueM4Exp));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item4 aria attribute should be Selected even when clicked",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                Boolean.valueOf(item4Element.getAttribute("aria-checked")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item4 should be Selected even when clicked",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                (Boolean) ruauUITestingUtil.getEval(selectedValueM4Exp));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("default: Item3 aria attribute should be Uncheked",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                Boolean.valueOf(item3Element.getAttribute("aria-checked")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("default: Item3 should be Uncheked", (Boolean) ruauUITestingUtil.getEval(selectedValueM3Exp));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item3 aria attribute should be Selected after the click",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                Boolean.valueOf(item3Element.getAttribute("aria-checked")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item3 should be Selected after the click", (Boolean) ruauUITestingUtil.getEval(selectedValueM3Exp));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // click on item3 again
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        ruauUITestingUtil.PrEssEnter(item3Element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Item3 aria attribute should be Uncheked after Pressing Enter",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                Boolean.valueOf(item3Element.getAttribute("aria-checked")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Item3 should be Uncheked after Pressing Enter",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                (Boolean) ruauUITestingUtil.getEval(selectedValueM3Exp));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item3 aria attribute should be checked after Pressing Space",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                Boolean.valueOf(item3Element.getAttribute("aria-checked")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item3 should be checked after Pressing Space",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                (Boolean) ruauUITestingUtil.getEval(selectedValueM3Exp));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // check if focus changes when you use up and down arrow using keyboard
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on item 4", item4Element.getText(), ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be back to item 3", item3Element.getText(), ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // PrEss Tab to close to menu
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("CheckboxMenu list should not be visible after escape",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // click on submit button and verify the results
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("label value should not get updated", "NFC West Teams", menuLabel.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Checkbox items selected are not correct", "St. Louis Rams,Arizona Cardinals", result.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testMenuRadio() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String label = "radioMenuLabel";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuName = "radioMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem3 = "radioItem3";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem4 = "radioItem4";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem5 = "radioItem5";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String disableValueM4Exp = ruauUITestingUtil.getValueFromCmpRootExPrEssion(menuItem4, "v.disabled");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(label));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menu = driver.findElement(By.className(menuName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item3 = driver.findElement(By.className(menuItem3));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item3Element = item3.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item4 = driver.findElement(By.className(menuItem4));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item4Element = item4.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item5 = driver.findElement(By.className(menuItem5));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement item5Element = item5.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement button = driver.findElement(By.className("radioButton"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement result = driver.findElement(By.className("radioResult"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // check for default label PrEsent
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("label is wrong", "National League West", menuLabel.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Default: CheckboxMenu list should not be visible", menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("CheckboxMenu list should be visible", menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item3 should be selected after the click", item3Element.getAttribute("class").contains("selected"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on item4 after the search", item4Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify item is disabled
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item4 aria attribute should be defaulted to disable",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                Boolean.valueOf(item4Element.getAttribute("aria-disabled")));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item4 should be defaulted to disable", (Boolean) ruauUITestingUtil.getEval(disableValueM4Exp));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify item4 should not be selectable
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Item4 should not be selectable as its disable item",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                item4Element.getAttribute("class").contains("selected"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // goto item 5 using down arrow
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on item5 after PrEssing down key", item5Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // click on item 5 using space
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Item5 should be checked after PrEssing Space",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                item5Element.getAttribute("class").contains("selected"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Item3 should be unchecked after clicking item 5",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                item3Element.getAttribute("class").contains("selected"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Checkbox items selected are not correct", "Colorado", result.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * Test case for W-1575100
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testMenuExpandCollapse() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String label = "trigger";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuName = "actionMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(label));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menu = driver.findElement(By.className(menuName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement button = driver.findElement(By.className("radioButton"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Action Menu list should not be visible", menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Action Menu list should be expanded", menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("Action Menu list should be collapsed", menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * Test case : W-2235117 menuItem should reposition itself relative to its trigger when attachToBody attribute is
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws URISyntaxException TODO: Uncomment test once W-2235117 is fixed
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void _testMenuPostionWhenMenuItemAttachToBody() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem3 = "actionItemAttachToBody3";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem3 = driver.findElement(By.className(menuItem3));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // Need to make the screen bigger so WebDriver doesn't need to scroll
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        driver.manage().window().setSize(new Dimension(1366, 768));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String trigger = "triggerAttachToBody";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuList = "actionMenuAttachToBody";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String triggerGlobalId = ruauUITestingUtil.getCmpGlobalIdGivenElementClassName(trigger);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuListGlobalId = ruauUITestingUtil.getCmpGlobalIdGivenElementClassName(menuList);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(trigger));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menu = driver.findElement(By.className(menuList));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Action Menu list should be expanded", menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        verifyMenuPositionedCorrectly(triggerGlobalId, menuListGlobalId,
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                "Menu List is not positioned correctly when the menuList rendered on the page");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String triggerLeftPosBeforeClick = ruauUITestingUtil.getBoundingRectPropOfElement(triggerGlobalId, "left");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem3.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String triggerLeftPosAfterClickOnItem2 = ruauUITestingUtil
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                .getBoundingRectPropOfElement(triggerGlobalId, "left");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Menu Item position changed after clicking on Item2", triggerLeftPosBeforeClick,
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        int currentWidth = driver.manage().window().getSize().width;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        int currentHeight = driver.manage().window().getSize().height;
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        driver.manage().window().setSize(new Dimension(currentWidth - 200, currentHeight - 100));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        verifyMenuPositionedCorrectly(triggerGlobalId, menuListGlobalId,
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                "Menu List is not positioned correctly after the resize");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * Verify horizontal alignment of menuItem
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @param trigger
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @param menuList
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @param failureMessage
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    private void verifyMenuPositionedCorrectly(String trigger, String menuList, String failureMessage) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String triggerLeftPos = ruauUITestingUtil.getBoundingRectPropOfElement(trigger, "left");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuListLeftPos = ruauUITestingUtil.getBoundingRectPropOfElement(menuList, "left");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals(failureMessage, triggerLeftPos, menuListLeftPos);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * Test case for: W-1559070
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testRemovingMenuDoesNotThrowJsError() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String uiMenuClassName = "clubMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String uiMenuLocalId = "uiMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(uiMenuClassName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("UiMenu should be PrEsent on the page", menuLabel.isDisplayed());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("ui:menu's wrapper element should be div", "div", menuLabel.getTagName());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String uiMenu = ruauUITestingUtil.getFindAtRootExpr(uiMenuLocalId);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        ruauUITestingUtil.getEval("$A.unrender(" + uiMenu + ")");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertFalse("UiMenu should not be PrEsent after unrender", isElementPresent(By.className(uiMenuClassName)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * Test case to check double clicking on Menu Trigger link component within 350ms with disableDoubleClicks attribute
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * set disregards the 2nd click. Test case for W-1855568
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testDoubleClickOnMenuTrigger() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String label = "triggercheckPosition";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuName = "checkPosition";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(label));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menu = driver.findElement(By.className(menuName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        Actions a = new Actions(driver);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        a.doubleClick(menuLabel).build().perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Check Menu list should be expanded even after double click",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                menu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * Test case for W-2315592 Components extends menuItem get's focus
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testFocusForExtendedMenuItem() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        open("/uitest/menu_extendMenuItem.app");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String label = "trigger";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuName = "actionMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem1 = "actionItem1";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem2 = "actionItem2";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuItem3 = "actionItem3";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(label));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionMenu = driver.findElement(By.className(menuName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem1 = driver.findElement(By.className(menuItem1));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem1Element = actionItem1.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem2 = driver.findElement(By.className(menuItem2));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem2Element = actionItem2.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem3 = driver.findElement(By.className(menuItem3));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionItem3Element = actionItem3.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // check menu list is visible after the click
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Menu list should be visible", actionMenu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // default focus on action item1
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem1", actionItem1Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify focus on action item3
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        ruauUITestingUtil.setHoverOverElement(menuItem3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem3", actionItem3Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // use send key("f") to move to actionItem2
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        actionItem3Element.sendKeys("f");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // verify focus on actionItem2
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertEquals("Focus should be on actionItem 2", actionItem2Element.getText(),
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getActiveElementText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * Test case to allow bubbling of event with menu Bug: W-2368359
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testStopClickPropogoationByDefault() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String label = "trigger";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuName = "actionMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(label));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionMenu = driver.findElement(By.className(menuName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String valueExPrEssion = ruauUITestingUtil.getValueFromRootExpr("v.eventBubbled");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        valueExPrEssion = ruauUITestingUtil.prepareReturnStatement(valueExpression);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertNull("Event should not bubble up to parent div", ruauUITestingUtil.getEval(valueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // check menu list is visible after the click
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Menu list should be visible", actionMenu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Event should get bubble up to parent div", ruauUITestingUtil.getBooleanEval(valueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:     * Test case to Stop bubbling of event when StopClickPropogoation attribute is set Bug: W-2368359
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:    public void testStopClickPropogoationIsSet() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        open(MENUTEST_EVENTBUBBLING_APP + "?stopClickPropagation=true");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String label = "trigger";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String menuName = "actionMenu";
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement menuLabel = driver.findElement(By.className(label));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        WebElement actionMenu = driver.findElement(By.className(menuName));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        String valueExPrEssion = ruauUITestingUtil.getValueFromRootExpr("v.eventBubbled");
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        valueExPrEssion = ruauUITestingUtil.prepareReturnStatement(valueExpression);
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertNull("Event should not bubble up to parent div", ruauUITestingUtil.getEval(valueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        menuLabel.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        // check menu list is visible after the click
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertTrue("Menu list should be visible", actionMenu.getAttribute("class").contains("visible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:        assertNull("Event should not bubble up to parent div when StopPropogoation is set on menu",
ruau/ruau/src/test/java/org/ruauframework/components/ui/menu/MenuUITest.java:                ruauUITestingUtil.getEval(valueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:package org.ruauframework.components.ui.inputText;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:import org.openqa.selenium.Keys;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java: * UI Tests for inputSearch Component
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:public class InputCutCopyPasteUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:    public InputCutCopyPasteUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:    public void testCutCopyPasteEvents() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        if (System.getProperty("os.name").startsWith("Mac")) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:            // Selenium's key event injection are simulated for OSX, and not actually received by
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:            // the real browser (see https://code.google.com/p/selenium/issues/detail?id=3101),
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:            // which means that there's no way to generate cut/copy/paste events under Selenium.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:            // So, on Mac, skip this whole test. No, changing Keys.CONTROL to Keys.COMMAND below
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:            // doesn't do it, they aren't "real keyPrEsses" to the browser at all.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        open("/uitest/inputText_CutCopyPasteEventTest.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        WebElement input = d.findElement(By.xpath("//input"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        WebElement output = d.findElement(By.xpath("//span[@class='uiOutputText']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        input.sendKeys(Keys.CONTROL, "a");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        String copyValueExPrEssion = ruauUITestingUtil.getValueFromRootExpr("v.copyEventFired");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        copyValueExPrEssion = ruauUITestingUtil.prepareReturnStatement(copyValueExpression);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        assertFalse("Copy event should not have been triggered yet",
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:                ruauUITestingUtil.getBooleanEval(copyValueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        assertTrue("Copy event should have been triggered", ruauUITestingUtil.getBooleanEval(copyValueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        waitForElementTextPresent(output, "Copy Event Fired");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        String cutValueExPrEssion = ruauUITestingUtil.getValueFromRootExpr("v.cutEventFired");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        cutValueExPrEssion = ruauUITestingUtil.prepareReturnStatement(cutValueExpression);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        assertFalse("Cut event should not have been triggered yet",
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:                ruauUITestingUtil.getBooleanEval(cutValueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        input.sendKeys(Keys.CONTROL, "a");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        assertTrue("Cut event should have been triggered", ruauUITestingUtil.getBooleanEval(cutValueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        waitForElementTextPresent(output, "Cut Event Fired");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        // Fire Paste Event
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        String pasteValueExPrEssion = ruauUITestingUtil.getValueFromRootExpr("v.pasteEventFired");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        pasteValueExPrEssion = ruauUITestingUtil.prepareReturnStatement(pasteValueExpression);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        assertFalse("Paste event should not have been triggered yet",
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:                ruauUITestingUtil.getBooleanEval(pasteValueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        assertTrue("Paste event should have been triggered", ruauUITestingUtil.getBooleanEval(pasteValueExPrEssion));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputCutCopyPasteUITest.java:        waitForElementTextPresent(output, "Paste Event Fired");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:package org.ruauframework.components.ui.inputText;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.openqa.selenium.TimeoutException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.openqa.selenium.interactions.Actions;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:public class InputTextUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public static final String TEST_CMP = "/uitest/inputtext_updateontest.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public static final String TEST_CMP_WITH_LABELS = "/uitest/inputtext_updateonwithlabeltest.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public InputTextUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    // Exclude on ios-driver because the driver hides the keyboard after send keys which triggers a blur event
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testUpdateOnAttribute_UsingStringSource() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String baseTag = "<ruau:component  model=\"java://org.ruauframework.impl.java.model.TestJavaModel\"> "
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                + "<ui:inputText ruau:id=\"%s\" class=\"%s\" value=\"{!m.string}\" updateOn=\"%s\"/>" + "</div>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                + "<div id=\"output\">" + "output: <ui:outputText value=\"{!m.string}\"/>" + "</div>"
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                + "</ruau:component>";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        DefDescriptor<ComponentDef> cmpDesc = addSourceAutoCleanup(ComponentDef.class, baseTag.replaceAll("%s", event));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        open(String.format("/%s/%s.cmp", cmpDesc.getNamespace(), cmpDesc.getName()));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String value = getCurrentModelValue();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement input = ruauUITestingUtil.findElementAndTypeEventNameInIt(event);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(value, "Value shouldn't be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        outputDiv.click();// to simulate tab behavior for touch browsers
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(event); // value should have been updated
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    // Change event not picked up on IOS devices
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testUpdateOnAttributeForNonIosAndroidDevice() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        doTestUpdateOnAttributeForNonIosAndroidDevice(TEST_CMP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    // Change event not picked up on IOS devices
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testUpdateOnAttributeWithLabelsForNonIosAndroidDevice() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        doTestUpdateOnAttributeForNonIosAndroidDevice(TEST_CMP_WITH_LABELS);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void doTestUpdateOnAttributeForNonIosAndroidDevice(String url) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String eventName = "change";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testUpdateOnAttribute() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        doTestUpdateOnAttribute(TEST_CMP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    @UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testUpdateOnAttributeWithLabels() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        doTestUpdateOnAttribute(TEST_CMP_WITH_LABELS);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void doTestUpdateOnAttribute(String url) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String value = getCurrentModelValue();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        // ios-driver sends a blur event during sendKeys so skip blur check. It also seems to send a delayed click event
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        // when doing a WebElement.clear() and WebElement.sendKeys() in sequence so skip click check.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        if (!BrowserType.IPAD.equals(getBrowserType())
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                && !BrowserType.IPHONE.equals(getBrowserType())) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            String eventName = "blur";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            WebElement input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            assertModelValue(value, "Value shouldn't be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            outputDiv.click(); // to simulate tab behavior for touch browsers
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            value = assertModelValue(eventName); // value should have been updated
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            eventName = "click";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            assertModelValue(value);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            assertModelValue(value, "Clicking an element without the updateOn attribute should not change the value");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            value = assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String eventName = "focus";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        eventName = "keydown";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName.substring(0, eventName.length() - 1));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        eventName = "keyPrEss";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName.substring(0, eventName.length() - 1));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        eventName = "keyup";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME })
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testUpdateOnAttributeWithCertainEventsChrome() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        doTestUpdateOnAttributeWithCertainEventsChrome(TEST_CMP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME })
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testUpdateOnAttributeWithLabelsWithCertainEventsChrome() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        doTestUpdateOnAttributeWithCertainEventsChrome(TEST_CMP_WITH_LABELS);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    @TargetBrowsers({ BrowserType.GOOGLECHROME })
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void doTestUpdateOnAttributeWithCertainEventsChrome(String url) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String value = getCurrentModelValue();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        Actions a = new Actions(d);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String eventName = "dblclick";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(value, "Value shouldn't be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        a.doubleClick(input).build().perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        eventName = "mousemove";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(value, "Value shouldn't be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        a.moveToElement(input).moveByOffset(0, 100).build().perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        eventName = "mouseout";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(value, "Value shouldn't be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        a.moveToElement(input).moveToElement(outputDiv).build().perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        eventName = "mouseover";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(value, "Value shouldn't be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        a.moveToElement(input).build().perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        eventName = "mouseup";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(value, "Value shouldn't be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        eventName = "select";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input = ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(value, "Value shouldn't be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        a.doubleClick(input).build().perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        value = assertModelValue(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:     * Different browsers support different events, so this case tests an event supported by all browsers.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:     * testUpdateOnAttributeWithCertainEventsChrome() more extensively tests different event types, but only on Chrome
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:     * where we know they are all supported.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:     * Note we are not using ruauUITestingUtil.findElementAndTypeEventNameInIt(eventName) in this test because the
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:     * Android driver sends a mousedown event when clearing the text field.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testUpdateOnAttributeWithCertainEventsAllBrowsers() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        doTestUpdateOnAttributeWithCertainEventsAllBrowsers(TEST_CMP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testUpdateOnAttributeWithLabelsWithCertainEventsAllBrowsers() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        doTestUpdateOnAttributeWithCertainEventsAllBrowsers(TEST_CMP_WITH_LABELS);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void doTestUpdateOnAttributeWithCertainEventsAllBrowsers(String url) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String value = getCurrentModelValue();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String eventName = "mousedown";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String locatorTemplate = "input[class*='%s']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String locator = String.format(locatorTemplate, eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement input = findDomElement(By.cssSelector(locator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input.sendKeys(eventName);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(value, "Value shouldn't be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String expected = value + eventName;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        // When we click the input on Firefox the cursor is at the beginning of the text.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        if (BrowserType.FIREFOX.equals(getBrowserType())) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            expected = eventName + value;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(expected);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    // W-1551077: Issue with Webdriver API ignores maxlength HTML5 attribute (iOS/Safari)
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testMaxLength() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        open("/uitest/inputText_MaxLength.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertEquals("Text not truncated to 5 chars correctly", "12345", input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testNoMaxLength() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        open("/uitest/inputText_NoMaxLength.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertEquals("Expected untruncated text", inputText, input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    private String assertModelValue(final String expectedValue) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        return assertModelValue(expectedValue, "Model value is not what we expected");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    private String assertModelValue(final String expectedValue, final String errorMsg) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            return ruauUITestingUtil.waitUntil(new ExpectedCondition<String>() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                public String apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                    String actual = getCurrentModelValue();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                    if (expectedValue.equals(actual)) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                        return actual;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        } catch (TimeoutException e) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            assertEquals(errorMsg, expectedValue, getCurrentModelValue());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            return getCurrentModelValue();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    private String getCurrentModelValue() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String valueExPrEssion = ruauUITestingUtil.prepareReturnStatement(ruauUITestingUtil
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                .getValueFromRootExpr("m.string"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String value = (String) ruauUITestingUtil.getEval(valueExPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        return value;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    private void assertDomEventSet() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String valueExPrEssion = ruauUITestingUtil.prepareReturnStatement(ruauUITestingUtil
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                .getValueFromRootExpr("v.isDomEventSet"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        boolean value = ruauUITestingUtil.getBooleanEval(valueExPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertTrue("domEvent attribute on event should have been set.", value);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testNullValue() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String cmpSource = "<ruau:component  model=\"java://org.ruauframework.impl.java.model.TestJavaModel\"> "
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:                + "<ui:inputText value=\"{!m.stringNull}\"/>" + "</ruau:component>";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        DefDescriptor<ComponentDef> inputTextNullValue = addSourceAutoCleanup(ComponentDef.class, cmpSource);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        open(String.format("/%s/%s.cmp", inputTextNullValue.getNamespace(), inputTextNullValue.getName()));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement input = findDomElement(By.tagName("input"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertEquals("Value of input is incorrect", "", input.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testBaseKeyboardEventValue() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        // SafariDriver has trouble finding nested elements so use this 2 step approach.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement div = findDomElement(By.id("inspectBaseEvent"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement outputValue = div.findElement(By.cssSelector(".outputValue"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            char outputText = (char) Integer.parseInt(outputValue.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            assertEquals("InputChar and outputChar are different ", inputText.charAt(0), outputText);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:            fail("ParseInt failed with following error" + e.getMessage());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    // W-1625895: Safari WebDriver bug- cannot right click because interactions API not implemented
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testBaseMouseClickEventValue() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement outputValue = findDomElement(By.cssSelector(".outputValue"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        // IE < 9 uses values 1, 2, 4 for left, right, middle click (respectively)
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String expectedVal = (BrowserType.IE7.equals(getBrowserType()) || BrowserType.IE8.equals(getBrowserType())) ? "1"
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertEquals("Left click not performed ", expectedVal, outputValue.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        // right click behavior
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        Actions actions = new Actions(getDriver());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        actions.contextClick(input).perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertEquals("Right click not performed ", "2", outputValue.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:     * Test Case for W-1689213
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testInputTextWithLabel() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement div = findDomElement(By.id("inputwithLabel"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement input = div.findElement(By.tagName("input"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String inputRuueId = "inputwithLabel";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String valueExPrEssion = ruauUITestingUtil.getValueFromCmpRootExpression(inputRuueId, "v.value");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String defExpectedValue = (String) ruauUITestingUtil.getEval(valueExPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertEquals("Default value should be the same", inputRuueId, defExpectedValue);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        // AndroidDriver likes to type things in all caps so modify input to accommodate.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        outputDiv.click(); // to simulate tab behavior for touch browsers
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String actualText = (String) ruauUITestingUtil.getEval(valueExPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertEquals("Value of Input text shoud be updated", inputText, actualText);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    // Exclude on ios-driver because the driver hides the keyboard after send keys which triggers a blur event
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:    public void testInputTextWithEmptyLabel() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        String value = getCurrentModelValue();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        WebElement input = ruauUITestingUtil.findElementAndTypeEventNameInIt("empty");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue(value, "Value should not be updated yet.");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        outputDiv.click(); // to simulate tab behavior for touch browsers
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertModelValue("empty"); // value should have been updated
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputText/InputTextUITest.java:        assertDomEventSet();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:package org.ruauframework.components.ui.inputRichText;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:import org.ruauframework.test.annotation.ThreadHostileTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:/* UnAdaptable because issue with sfdc environments with sendkeys in iframes
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java: * see W-1985839 and W-2009411
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:public class InputRichTextUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    private final String URL = "/uitest/inputRichText_Test.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    private final String LINKBEFORE_LOCATOR = ".linkbefore";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    private final String CK_EDITOR_LOCATOR = ".cke_contents";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    private final String SUBMIT_BUTTON_LOCATOR = ".uiButton";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    private final String OUTPUT_LOCATOR = ".uiOutputText";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    private final String RT_CMP = "Text";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    public InputRichTextUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:     * Able to tab into inputRichText Component.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    /* Excluding ipad and safari because safari driver has issues with element.sendkeys(Keys.TAB) */
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    public void testRichTextTabbing() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        WebElement beforeLink = ruauUITestingUtil.waitForElement(By.cssSelector(LINKBEFORE_LOCATOR));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        WebElement ckEditor = ruauUITestingUtil.waitForElement(By.cssSelector(CK_EDITOR_LOCATOR));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        WebElement ckEditorInput = ckEditor.findElement(By.tagName("iframe"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        WebElement submitBtn = ruauUITestingUtil.findDomElement(By.cssSelector(SUBMIT_BUTTON_LOCATOR));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        // tab into
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        ruauUITestingUtil.PrEssTab(beforeLink);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        waitForTextInRichText(RT_CMP, inputText);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        // click submit and see if text was entered into editor
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        assertOutputText(inputText);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:     * Test html content is escaped.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    // Issue with sendKeys in Safari https://code.google.com/p/selenium/issues/detail?id=4467.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    // ios-driver fails to send the '/' key
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    @ThreadHostileTest("testHtmlContentEscaped is not thread-safe")
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    public void testHtmlContentEscaped() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        WebElement ckEditor = ruauUITestingUtil.waitForElement(By.cssSelector(CK_EDITOR_LOCATOR));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        WebElement ckEditorInput = ckEditor.findElement(By.tagName("iframe"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        String escapedHtml = "&lt;/html&gt;";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        waitForTextInRichText(RT_CMP, escapedHtml);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    private void waitForTextInRichText(final String ruauId, final String text) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        ruauUITestingUtil.waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:            public Boolean apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:                String expr = ruauUITestingUtil.getValueFromCmpRootExPrEssion(ruauId, "v.value");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:                String rtText = (String) ruauUITestingUtil.getEval(expr);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:                return text.equals(rtText);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:    private void assertOutputText(String expectedText) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputRichText/InputRichTextUITest.java:        ruauUITestingUtil.waitForElementText(By.cssSelector(OUTPUT_LOCATOR), expectedText, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:package org.ruauframework.components.ui.autocomplete;
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:import java.util.*;
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:import org.ruauframework.test.*;
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:import org.ruauframework.test.WebDriverTestCase.ExcludeBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:import org.openqa.selenium.*;
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java: * UI test to test autocomplete component. Excluding IE7 and IE8 because component uses html5 specific tags
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:public class AutocompleteUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final String URL = "/uitest/autoComplete_Test.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final String INPUT_SELECTOR = "input[class*='default']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final String OUTPUT_SELECTOR = "span[class*='uiOutputText']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final String EVENT_OUTPUT_SELECTOR = "span[class*='outputLabel']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final String AUTOCOMPLETE_LIST_SELECTOR = "div[class*='uiAutocompleteList']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final String AUTOCOMPLETE_OPTION_SELECTOR = "li[class*='uiAutocompleteOption']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final String AUTOCOMPLETE_CUSTOM_TEMPLATE_OPTION_SELECTOR = "div[class*='uitestAutoComplete_CustomTemplate']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    //since W-2419601, 'invisible' is being added to the li contains "div[class*='customOption']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final String AUTOCOMPLETE_CUSTOM_OPTION_SELECTOR = "li[class*='uiAutocompleteOption']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final String MATCHED_SELECTOR = "mark[class*='data-match']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private final Map<String, Integer> AUTOCOMPLETE_COMPONENT = new HashMap<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        AUTOCOMPLETE_COMPONENT.put("LargeList", 3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        AUTOCOMPLETE_COMPONENT.put("CustomTemplate", 4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        AUTOCOMPLETE_COMPONENT.put("autoCompleteUpdateOn", 6);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        AUTOCOMPLETE_COMPONENT.put("matchFunc", 8);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private enum OptionType {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public AutocompleteUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Initial load of the autocomplete component. Verify data is loaded and the list is not visible.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteComponentInitialRender() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertTrue("AutocompleteList should be invisible on initial load", hasCssClass(list, "invisible"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Autocomplete has the incorrect number of options", 10, options.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertNull("List toggle button should not be PrEsent", toggle);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        String matchCount = getAutoCompleteMatchCount(driver, AUTOCOMPLETE_COMPONENT.get("Generic"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Match Done should not be fired yet", "", matchCount);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Test to verify input cmp does get its value updated on clicking ENTER in the field Bug: W-2293143 Press Enter is
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * not used for Safari
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteWithUpdateOnAttributeSet() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        String inputAutoComplete = "autoCompleteUpdateOn";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        String expr = ruauUITestingUtil.PrEpareReturnStatement(ruauUITestingUtil.getFindAtRootExpr(inputAutoComplete)
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:                + ".find('input').get('v.value')");
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        String autoCompleteText = (String)ruauUITestingUtil.getEval(expr);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertNull("Auto complete Text for input should be undefined", autoCompleteText);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement inputElement = getAutoCompleteInput(driver, AUTOCOMPLETE_COMPONENT.get("autoCompleteUpdateOn"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        ruauUITestingUtil.PrEssEnter(inputElement);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        autoCompleteText = (String)ruauUITestingUtil.getEval(expr);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Input Value was not change after PrEssing Enter", expectedText, autoCompleteText);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Test to verify blur and focus events works when set in the ui:autocomplete component.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Test case: W-2391008
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    // Exclude on ios-driver because the driver hides the keyboard after send keys which triggers a blur event
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        String outputTextLocator = "span[class*='outputLabelOnFocusAndBlur']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        Integer matchFuncInput = AUTOCOMPLETE_COMPONENT.get("matchFunc");
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement outputText = findDomElement(By.cssSelector(outputTextLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("No Event should be fire yet", "", outputText.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Focus Event should be fired", "Focus Event Fired!!", outputText.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement inputmatchFunc = getAutoCompleteInput(driver, matchFuncInput);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        inputmatchFunc.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Blur Event should be fired", "Blur Event Fired!!", outputText.getText());
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Matching multiple items verifying list is visible and matched items PrEsent.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteComponentRenderOnMatch() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        doTestMatch(AUTOCOMPLETE_COMPONENT.get("Generic"), "o", null, 10, OptionType.AUTOCOMPLETE_OPTION);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Able to select an item from autocomplete list.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Matching single items verifying list is visible and single matched items PrEsent.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteSingleMatch() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        doTestMatch(AUTOCOMPLETE_COMPONENT.get("Generic"), "hello world2", "hello world2", 1,
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Autocomplete list with no data renderes correctly.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    // TODO: W-2406307: remaining Halo test failure
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        Integer autoCompleteCmpNum = AUTOCOMPLETE_COMPONENT.get("Empty");
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement list = getAutoCompleteList(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertFalse("Expected emptyListContent to be invisible", hasCssClass(list, "showEmptyContent"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Autocomplete with no data should not have any options", 0, options.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        // Make sure the list is not visible after input since no emptyListContent is specified.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        doTestEmptyListContent(autoCompleteCmpNum, "o", false, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Test to check support for keydown event. Test case for W-2227931
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForElementTextPresent(output, "KeyDown Event Fired");
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Tabbing through input field and list items functions properly.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    // Excluding mobile devices since they don't have tabbing functionality
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    // Excluding Firefox as well because tabbing in Firefox works differently. There is a separate test for this.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteTabing() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        ruauUITestingUtil.PrEssTab(input);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Focus should be on the next input", nextInput.getAttribute("data-ruau-rendered-by"),
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:                ruauUITestingUtil.getUniqueIdOfFocusedElement());
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Using arrow keys to cycle through list items functions properly.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    // Excluding mobile devices since they dont have arrow key functionality
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        ruauUITestingUtil.PrEssEnter(input);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Wrong option was selected", "hello world2", input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * For a component using a custom template match multiple items and verify list is visible and matched items
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteCustomTemplateComponentRenderOnMatch() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        doTestMatch(AUTOCOMPLETE_COMPONENT.get("CustomTemplate"), "o", null, 10,
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * For a component using a custom template able to select item in list.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void _testAutoCompleteCustomTemplateComponentSelectOption() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        doTestSelectOption(AUTOCOMPLETE_COMPONENT.get("CustomTemplate"), OptionType.AUTOCOMPLETE_CUSTOM_TEMPLATE_OPTION);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * For a component extending autocompleteOption able to match multiple items, also verify list is visible and
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * matched items PrEsent.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteCustomOptionComponentRenderOnMatch() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        doTestMatch(AUTOCOMPLETE_COMPONENT.get("OptionExtention"), "o", null, 10, OptionType.AUTOCOMPLETE_CUSTOM_OPTION);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * For component extending autocompleteOption able to select item in list.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * For a component extending autocompleteOption able to match single item, also verify list is visible and matched
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteSingleMatchUsingCustomTemplate() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        doTestMatch(AUTOCOMPLETE_COMPONENT.get("CustomTemplate"), "hello world2", "hello world2", 1,
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Test for autocomplete with emptyListContent when there are no matches in the list.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    // public void testAutoCompleteEmptyListContentNoMatches() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Test for autocomplete with emptyListContent when there are matches in the list.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteEmptyListContentOnMatch() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        doTestEmptyListContent(AUTOCOMPLETE_COMPONENT.get("emptyListContent"), "hello world", true, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Test for autocomplete with emptyListContent. Verifies that emptyListContent is not visible when matches are
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * PrEsent and becomes visible when no matches are found.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    // public void testAutoCompleteEmptyListContentUseCase() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    //     Integer autoCompleteCmpNum = AUTOCOMPLETE_COMPONENT.get("emptyListContent");
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    //     doTestEmptyListContent(autoCompleteCmpNum, "hello world", true, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    //     doTestEmptyListContent(autoCompleteCmpNum, "hello worldx", true, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    //     WebElement input = getAutoCompleteInput(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    //     ruauUITestingUtil.PrEssTab(input);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    //     WebElement list = getAutoCompleteList(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    //     waitForAutoCompleteListVisible(list, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    //     assertFalse("Expected emptyListContent to be invisible", hasCssClass(list, "showEmptyContent"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Test for autocomplete with a matchFunc override. The behavior is overridden to show all items no matter what gets
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * typed in the input field. Verifies that all elements are found.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    public void testAutoCompleteMatchFunc() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        Integer autoCompleteCmpNum = AUTOCOMPLETE_COMPONENT.get("matchFunc");
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement input = getAutoCompleteInput(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement list = getAutoCompleteList(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Incorrect number of visible options", 10, options.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Test for autocomplete with a list toggle button. The behavior is overridden to show all items no matter what gets
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * typed in the input field. Verifies that the list visibility can be toggled.
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        Integer autoCompleteCmpNum = AUTOCOMPLETE_COMPONENT.get("toggle");
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement toggle = getAutoCompleteToggle(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement list = getAutoCompleteList(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertNotNull("List toggle button should be PrEsent", toggle);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private void doTestMatch(int autoCompleteCmpNum, String searchString, String target, int expectedMatched,
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement input = getAutoCompleteInput(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        input.sendKeys(searchString);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement list = getAutoCompleteList(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        List<WebElement> matched;
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        if (optionType.equals(OptionType.AUTOCOMPLETE_OPTION)) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:            matched = getMatchedOptionsInList(list);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:            matched = getMatchedOptionsInListThatUsesCustomOptions(list, optionType);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Incorrect number of matched options", expectedMatched, matched.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        String matchCount = getAutoCompleteMatchCount(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Total count for match items after Matchdone event fired is not correct", expectedMatched + "",
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:                matchCount);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        if (target != null) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:            assertEquals("Wrong option matched", target, matched.get(0).getAttribute("innerHTML"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private void doTestEmptyListContent(int autoCompleteCmpNum, String searchString, boolean listVisible,
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:            boolean emptyContentVisible) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement input = getAutoCompleteInput(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        input.sendKeys(searchString);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement list = getAutoCompleteList(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, listVisible);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        boolean visible = hasCssClass(list, "showEmptyContent");
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:            assertTrue("Expected emptyListContent to be visible", visible);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:            assertFalse("Expected emptyListContent to be invisible", visible);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private void doTestSelectOption(int autoCompleteCmpNum, OptionType optionType) throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement input = getAutoCompleteInput(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        WebElement list = getAutoCompleteList(driver, autoCompleteCmpNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        waitForAutoCompleteListVisible(list, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        assertEquals("Wrong option was selected", "hello world3", input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private WebElement getAutoCompleteInput(WebDriver d, int inputNumber) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private WebElement getAutoCompleteToggle(WebDriver d, int inputNumber) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        List<WebElement> toggles = input.findElements(By.xpath("following-sibling::button"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private WebElement getAutoCompleteList(WebDriver d, int listNumber) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * Returns the count of the total items match
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * @param d
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:     * @param outputNumber
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private String getAutoCompleteMatchCount(WebDriver d, int outputNumber) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private List<WebElement> getAutoCompleteListOptions(WebElement l) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private List<WebElement> getAutoCompleteListOptions(WebElement l, OptionType optionType) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        case AUTOCOMPLETE_OPTION:
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        case AUTOCOMPLETE_CUSTOM_TEMPLATE_OPTION:
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        case AUTOCOMPLETE_CUSTOM_OPTION:
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        default:
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:            return new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private List<WebElement> getMatchedOptionsInList(WebElement l) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private List<WebElement> getMatchedOptionsInListThatUsesCustomOptions(WebElement l, OptionType optionType) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        List<WebElement> matched = new ArrayList<>();
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:            if (optionType.equals(OptionType.AUTOCOMPLETE_CUSTOM_TEMPLATE_OPTION)) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:                option = option.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:            if (!option.getAttribute("class").contains("invisible")) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:                matched.add(option);
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        return matched;
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:    private WebElement getInnerElementOfAutoCompleteOptionInList(WebElement l, int optionNumber, OptionType optionType) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/autocomplete/AutocompleteUITest.java:        return option.findElement(By.tagName("a"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:package org.ruauframework.components.ui.inputSelect;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:import org.openqa.selenium.support.ui.Select;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:public class InputSelectUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private final String URL = "/uitest/inputSelect_DynamicOptions.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private final By selectLocator = By.xpath("//select[1]");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private final String optionLocatorString = "//select[1]/option[text()='%s']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    public InputSelectUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:     * Selecting any option should work
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        // There should be 4 options with Option2 as selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        assertEquals(4, selectOptionsSize());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        // There should be 4 options with Option3 as selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        assertEquals(4, selectOptionsSize());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        // There should be 4 options with Option2 as selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        assertEquals(4, selectOptionsSize());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        // There should be 4 options with Option1 as selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        assertEquals(4, selectOptionsSize());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:     * Selecting last option should work
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    public void testSelectingLastOption() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        // There should be 4 options with Option2 as selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        assertEquals(4, selectOptionsSize());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        // There should be 4 options with Option4 as selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        assertEquals(4, selectOptionsSize());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private Select getInputSelect() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        return new Select(findDomElement(selectLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private int selectOptionsSize() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private void selectOption(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        getInputSelect().selectByVisibleText(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        verifyOptionSelected(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private void verifyOptionSelected(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        verifyOptionSelectDeselct(optionLabel, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private void verifyOptionDeselected(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        verifyOptionSelectDeselct(optionLabel, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private void verifyOptionSelectDeselct(String optionLabel, boolean isSelected) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        WebElement option = findDomElement(By.xpath(String.format(optionLocatorString, optionLabel)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:            assertTrue("Option '" + optionLabel + "' should be selected", option.isSelected());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:            assertFalse("Option '" + optionLabel + "' should be deselected", option.isSelected());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:     * select element corrupts selected/unselected options so we need to PrEserve the state
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:    private void focusSelectElement() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:        if (BrowserType.IE10.equals(getBrowserType())) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/InputSelectUITest.java:            findDomElement(selectLocator).click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:package org.ruauframework.components.ui.inputSelect;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:import org.openqa.selenium.support.ui.Select;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:public class BaseInputSelectUI extends WebDriverTestCase{
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private final String URL;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private final String [] options;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private final By SELECT_LOCATOR;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private final String OPTION_LOCATOR_STRING;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private final int SIZE_OF_OPTIONS;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private final String SELECT_ID;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    public BaseInputSelectUI(String url, By sel_loc, String opt_loc, String [] opts, String sel_id) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        // TODO Auto-generated constructor stub
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:     * Test verifying that the The DOM values and the value stored in the component are the same.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    public void testSelectedOptionAndDOMMatch () throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        // There should be 4 options with Option2 as selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        assertEquals(4, selectOptionsSize());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        String ruau_selected_item =  ruauUITestingUtil.getValueFromCmpRootExPrEssion(SELECT_ID, "v.value");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        assertEquals(ruauUITestingUtil.getEval(ruau_selected_item), oldOption);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        assertEquals(ruauUITestingUtil.getEval(ruau_selected_item), newOption);          
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:     * Selecting last option should work
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    public void testSelectingLastOption() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        // There should be 4 options with Option2 as selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        assertEquals(SIZE_OF_OPTIONS, selectOptionsSize());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        // There should be 4 options with Option4 as selected
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        assertEquals(SIZE_OF_OPTIONS, selectOptionsSize());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private Select getInputSelect() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private int selectOptionsSize() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private void selectOption(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:		inputSelect.selectByValue(optionLabel);  
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        verifyOptionSelected(optionLabel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private void verifyOptionSelected(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        verifyOptionSelectDeselct(optionLabel, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private void verifyOptionDeselected(String optionLabel) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        verifyOptionSelectDeselct(optionLabel, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:    private void verifyOptionSelectDeselct(String optionLabel, boolean isSelected) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:        WebElement option = findDomElement(By.xpath(String.format(OPTION_LOCATOR_STRING, optionLabel)));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:            assertTrue("Option '" + optionLabel + "' should be selected", option.isSelected());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputSelect/BaseInputSelectUI.java:            assertFalse("Option '" + optionLabel + "' should be deselected", option.isSelected());
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:package org.ruauframework.components.ui.inputTextArea;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java: * UI tests for inputTextArea Component
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:// Exluding the test as sendKeys and click not working with ios
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:public class InputTextAreaUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:    public static final String TEST_CMP = "/uitest/inputTextArea_UpdateOnTest.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:    public InputTextAreaUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:     * Test Case for W-1731003 ui:inputTextArea throws error when value is changed
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:    public void testInputTextAreaWithLabel() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        WebElement div = findDomElement(By.id("textAreaWithLabel"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        WebElement input = div.findElement(By.tagName("textarea"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        String inputRuueId = "textAreaWithLabel";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        String valueExPrEssion = ruauUITestingUtil.getValueFromCmpRootExpression(inputRuueId, "v.value");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        String defExpectedValue = (String) ruauUITestingUtil.getEval(valueExPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        assertEquals("Default value for inputTextArea should be the same", inputRuueId, defExpectedValue);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        // AndroidDriver likes to type things in all caps so modify input to accommodate.
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        outputDiv.click(); // to simulate tab behavior for touch browsers
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        String actualText = (String) ruauUITestingUtil.getEval(valueExPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        assertEquals("Value of Input text Area shoud be updated", inputText, actualText);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:     * Ensuring \r\n for line breaks in textarea to match aloha form-encode Test Case for W-2326901
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:    public void testEncodedTextAreaBehavior() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        WebElement div = findDomElement(By.id("textAreaWithLabel"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        WebElement input = div.findElement(By.tagName("textarea"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        String inputRuueId = "textAreaWithLabel";
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        String valueExPrEssion = ruauUITestingUtil.getValueFromCmpRootExpression(inputRuueId, "v.value");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        String inputText = String.format("%s%n%s%n%s%n%s", "LINE1", "LINE2", "LINE3", "LINE4");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        input.clear();
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        outputDiv.click(); // to simulate tab behavior for touch browsers
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        String actualText = (String) ruauUITestingUtil.getEval(valueExPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        assertEquals("Total number of bytes with \r\n does not match", inputText.getBytes().length + 3,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:                actualText.getBytes().length);
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        assertEquals("Value of Input text Area shoud be updated after removing carriage return", inputText,
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:                actualText.replaceAll("(\\r)", ""));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:    // W-1551077: Issue with Webdriver API ignores maxlength HTML5 attribute (iOS/Safari)
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:    public void testMaxLengthInTextArea() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        open("/uitest/inputTextArea_MaxLength.cmp?maxlength=5");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        WebElement input = findDomElement(By.className("textArea"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        assertEquals("Text not truncated to 5 chars correctly", "12345", input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:    public void testNoMaxLengthInTextArea() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        open("/uitest/inputTextArea_MaxLength.cmp");
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        WebElement input = findDomElement(By.className("textArea"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/inputTextArea/InputTextAreaUITest.java:        assertEquals("Expected untruncated text", inputText, input.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:package org.ruauframework.components.ui.scroller;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:import org.ruauframework.test.*;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:import org.ruauframework.test.WebDriverTestCase.TargetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:import org.openqa.selenium.*;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:import org.openqa.selenium.remote.RemoteWebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:import org.uiautomation.ios.client.uiamodels.impl.augmenter.IOSDriverAugmenter;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java: * Test basic scroller
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:@TargetBrowsers({BrowserType.IPHONE, BrowserType.IPAD})
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:public class ScrollerUITest extends WebDriverTestCase{
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private static final String SCROLLER_CMP1 = "/uitest/scroller_basic.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java://private static final String SCROLLER_CMP2 = "/uitest/scrollerEndless.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java://private static final String SCROLLER_CMP3 = "/uitest/scrollerSnap.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java://private static final String SCROLLER_CMP4 = "/uitest/scrollerNative.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private WebDriver driver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:public ScrollerUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    augmentDriver();
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    /* disable due to W-2233861
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //attempting pull to refresh
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(0, 50);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(600);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertFalse("canRefresh attribute set as false isn't propagated.", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //toggling canRefresh to true
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    evaluateTogglePTLPTR("PullToRefresh");
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(0, 50);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(600);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //after pull to refresh, we will get 2 data items from 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //have id's '1onPTR', '2onPTR'. since it's PrEpend they will be in 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //viewport anyways, so we are not asserting verifyIfElementInViewport. 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //we are just ensuring we have those 2 data items in the DOM.
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //if needed, you can assert if the items got correctly 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //PrEpended by querying div.items and looking for
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertEquals("Seems like pull to refresh did not work as expected", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    		2, verifyPullToRefreshData().size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //scroll down vertically and ensure it scrolls correctly by 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //asserting elements that you got in pull to refresh
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //are no longer in viewport now e.g. element with id '1onPTR'
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(0, -600);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(2500);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertFalse("Seems like vertical scrolling did not work after pull to refresh", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    /* disable due to W-2233861
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //attempting to pull to show more when canShowMore attribute is false
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(0, -50);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(2500);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //asserting that pull to show more didnt happen. 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertFalse("Seems like setting canShowMore attribute false didn't work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //toggling canShowMore to true
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    evaluateTogglePTLPTR("PullToShowMore");
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //pull to show more will fetch 4 data items from the server 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //and they will be appended to the DOM they will have id's '1onPTL', '2onPTL', '3onPTL', '4onPTL' 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //respectively. we are asserting if these 4 data items got appended to the DOM
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //if needed, you can assert if the items got correctly appended by 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //querying div.items and looking for last four elements in it.
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(0, -50);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(2500);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertEquals("Seems like pull to show more did not work as expected", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    		4, verifyPullToShowMoreData().size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //scroll down vertically to get to elements after pull to 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //show more and ensure they are in viewport. we are
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //asserting for data item with id '4onPTL' to exist in viewport
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(0, -600);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like vertical scrolling did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //test for scrollTo and scrollBy events
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    evaluateEventExPrEssion("scrollTo","{destination:'top'}");
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like vertical scrolling did not work on firing scrollTo", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    evaluateEventExPrEssion("scrollTo","{destination:'bottom'}");
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like vertical scrolling did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    evaluateEventExPrEssion("scrollBy","{deltaX: 0, deltaY: 600, time: 0}");
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like vertical scrolling did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //test for events onBeforeScrollStart, onScrollStart,
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //assert event onBeforeScrollStart fired
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertEquals("Seems like onBeforeScrollStart did not get fired", "1", getEventHandlerExecutionStatus("beforeScrollStartHandlerCalled"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //assert event onScrollStart fired
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertEquals("Seems like onScrollStart did not get fired", "1", getEventHandlerExecutionStatus("scrollStartHandlerCalled"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //assert event onScrollMove fired
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertEquals("Seems like onScrollMove did not get fired", "1", getEventHandlerExecutionStatus("scrollMoveHandlerCalled"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //assert event onScrollEndStart fired
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertEquals("Seems like onScrollEndStart did not get fired", "1", getEventHandlerExecutionStatus("scrollEndHandlerCalled"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue(true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:/* disable due to W-2233861
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:public void testScrollingEndlessHorizontal() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    augmentDriver();
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //testing horizontal scroll works correctly
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(50,0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(600);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like horizontal scrolling in the right direction did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(-50,0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(600);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like horizontal scrolling in the left direction did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //testing endless scrolling by verifying both the last element and the first element are in viewport.
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(500,0);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like endless scrolling did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like endless scrolling did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:public void testScrollingSnapInfinite() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    augmentDriver();
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //testing if snap sticky works correctly
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(0,-50);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(600);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like vertical scrolling did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //scrolling back to top  
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    evaluateEventExPrEssion("scrollTo","{destination:'top'}");
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //testing if flicking with a different momentum doesn't result in a different element set in viewport.
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //snap plugin property 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    this.startFlick(0,-100);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(600);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like vertical scrolling did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    //scrolling to bottom to evaluate infinite scrolling 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    evaluateEventExPrEssion("scrollTo","{destination:'bottom'}"); 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like vertical scrolling did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:public void testScrollingNativeFiresEvents() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	    augmentDriver();
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	evaluateEventExPrEssion("scrollTo","{destination:'bottom'}");
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	assertTrue("Seems like vertical scrolling did not work", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    evaluateEventExPrEssion("scrollTo","{destination:'top'}");
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertTrue("Seems like vertical scrolling did not work on firing scrollTo", 
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	//assert event onScrollMove fired
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    assertEquals("Seems like onScrollMove did not get fired", "1", getEventHandlerExecutionStatus("scrollMoveHandlerCalled"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private void startFlick(int xOffset, int yOffset){
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private void augmentDriver(){
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private List<WebElement> verifyPullToRefreshData(){
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	List<WebElement> PTRdata = driver.findElements(By.className("onPTR"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	return PTRdata;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private List<WebElement> verifyPullToShowMoreData(){
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	List<WebElement> PTLdata = driver.findElements(By.className("onPTL"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	return PTLdata;
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private boolean verifyIfElementInViewport(String elementId){
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	    	"return 'Element was not found in the DOM.';" +
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:		"var rect = el.getBoundingClientRect();" +
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	ruauUITestingUtil.getEval(exPrEssionFn);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	return (Boolean) ruauUITestingUtil.getEval(exPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java://Thread.sleep is not a good practice, ideally should execute,
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java://something like ruauUITestingUtil.waitUntil(ExpectedCondition)
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java://but that approach does not work here, since the ExpectedCondition
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java://will query the DOM (poll) frequently and that interferes with
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java://the scrolling making it jittery. so the only way is to halt
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java://WebDriver java calls until the DOM animation completes.
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private void pause(long timeout) throws InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	Thread.sleep(timeout);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private String getEventHandlerExecutionStatus(String id){
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:	return (String) ruauUITestingUtil.getEval(exPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private void evaluateEventExPrEssion(String evt, String params){
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    String exPrEssion = "$A.getRoot().find('test-scroller').getEvent('"+evt+"').setParams("+params+").fire();";
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    ruauUITestingUtil.getEval(exPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:/* disable due to W-2233861
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:private void evaluateTogglePTLPTR(String evt){
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    String exPrEssion = "$A.getRoot().find('test-scroller').getScrollerInstance().toggle"+evt+"()";
ruau/ruau/src/test/java/org/ruauframework/components/ui/scroller/ScrollerUITest.java:    ruauUITestingUtil.getEval(exPrEssion);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:package org.ruauframework.components.ui.carousel;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.ruauframework.test.WebDriverTestCase.ExcludeBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.openqa.selenium.Keys;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.openqa.selenium.interactions.Actions;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:import org.openqa.selenium.support.ui.ExpectedCondition;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * Tests to verify ui:carousel keyboard interactions and UI.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * Tests excluded on mobile browsers (Android, iOS) because WebDriver does not support advanced user interactions such
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java: * as Actions.moveToElement() yet. Excluded from IE7/8 because uses HTML5 features such as nav.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:public class CarouselUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private final String URL = "/uitest/carousel_Test.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private final String CAROUSEL_XPATH = "//article[contains(@class, 'uitestCarousel_Test')] | //article[contains(@class, 'myclass')]";
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private final String NAVIGATION_ITEM_SELECTOR = "a[class*='carousel-nav-item']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private final String NAVIGATION_ITEM_SELECTED_SELECTOR = "a[class*='carousel-nav-item-selected']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private final String CAROUSEL_PAGE_SELECTOR = "section[class*='uiCarouselPage']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private final String CAROUSEL_PAGE_ITEM_SELECTOR = "li[class*='pageItem']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private final String AURA_RENDERED_BY_ID = "data-ruau-rendered-by";
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public CarouselUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * Able to tab into a page on the carousel.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    /* Excluding safari because safari driver has issues with element.sendkeys(Keys.TAB) */
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void testTabIntoCarouselPage() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement page = getPageOnCarousel(carousel, 2);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        waitForCarouselPageSelected(page);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement navElement = getNavigationItemSelected(carousel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        navElement.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        assertEquals("Navigation bar element should be in focus.",
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                navElement.getAttribute(AURA_RENDERED_BY_ID), ruauUITestingUtil.getUniqueIdOfFocusedElement());
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        waitForCarouselPageSelected(page);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        // tab into carousel page
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        ruauUITestingUtil.PrEssTab(navElement);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement element1 = getMDMPageElement(page, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        assertEquals("Should be focused on the first element on the carousel page.",
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                element1.getAttribute(AURA_RENDERED_BY_ID), ruauUITestingUtil.getUniqueIdOfFocusedElement());
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * Able to tab through elements on a carousel page.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    // TODO : @ctatlah - clicking on a carouselPageItem does not bring focus
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void _testTabingThroughElementsOnCarouselPage() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement page = getPageOnCarousel(carousel, 2);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement element1 = getMDMPageElement(page, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement element2 = getMDMPageElement(page, 2);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        // tab to next element
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        ruauUITestingUtil.PrEssTab(element1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        assertEquals("Should be focused on the second element on the carousel page.",
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                element2.getAttribute(AURA_RENDERED_BY_ID), ruauUITestingUtil.getUniqueIdOfFocusedElement());
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        // tab to PrEvious element
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        shiftTab().perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        assertEquals("Shift+Tab to PrEvious element. Should be focused on the first element on the carousel page.",
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                element1.getAttribute(AURA_RENDERED_BY_ID), ruauUITestingUtil.getUniqueIdOfFocusedElement());
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * While on a carousel page you are able to tab back to the navigation indicators.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    // TODO : @ctatlah - clicking on a carouselPageItem does not bring focus
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void _testTabBackToNavigationBar() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement page = getPageOnCarousel(carousel, 2);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement element = getMDMPageElement(page, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement navElement = getNavigationItemSelected(carousel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        // tab back to navigation bar
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        shiftTab().perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        assertEquals("Shift+Tab to navigation bar. Should be focused on the navigation bar item.",
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                navElement.getAttribute(AURA_RENDERED_BY_ID), ruauUITestingUtil.getUniqueIdOfFocusedElement());
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * Tabing on the last element on a carousel page tabs you out of the carousel.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    /* Excluding safari because safari driver has issues with element.sendkeys(Keys.TAB) */
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void testTabOutOfCarousel() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement navItem = getNavigationItemSelected(carousel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement nextCarousel = getCarousel(driver, 4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement expectedFocus = getNavigationItemOnCarousel(nextCarousel, 3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        // this carousel has no elements on its page so tabbing in will
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        // actually tab out. Tabbing once, focus will go on nav bar of
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        // the next carousel.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        navItem.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        ruauUITestingUtil.PrEssTab(navItem);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        assertEquals("Should be focused on the next carousel page.",
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                expectedFocus.getAttribute(AURA_RENDERED_BY_ID), ruauUITestingUtil.getUniqueIdOfFocusedElement());
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * Tabing out of carousel from the first element on carousel.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    /* Excluding safari because safari driver has issues with element.sendkeys(Keys.TAB) */
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void testShiftTabOutOfCarousel() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement navItem = getNavigationItemSelected(carousel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement PrEviousCarousel = getCarousel(driver, 3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement expectedFocus = getNavigationItemOnCarousel(PrEviousCarousel, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        // the PrEvious carousel has no elements on its page so tabbing out
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        // of this carousel will move focus to the nav bar of the PrEvious carousel.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        navItem.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        shiftTab().perform();
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        assertEquals("Should be focused on the PrEvious carousel",
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                expectedFocus.getAttribute(AURA_RENDERED_BY_ID), ruauUITestingUtil.getUniqueIdOfFocusedElement());
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * Using keyboard arrow keys to get to next page.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void testGoToNextPage() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        doArrowKeysTest(driver, carousel, Keys.ARROW_RIGHT, 3, "Understanding Execution Governors and Limits");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * Using keyboard arrow keys to get to PrEvious page.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void testGoToPreviousPage() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        doArrowKeysTest(driver, carousel, Keys.ARROW_LEFT, 1, "New Post 1");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * Keyboard up arrow key does not change page on carousel.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        doArrowKeysTest(driver, carousel, Keys.ARROW_UP, 2, "New Post 2");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * Keyboard down arrow key does not change page on carousel.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 1);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        doArrowKeysTest(driver, carousel, Keys.ARROW_DOWN, 2, "New Post 2");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * While on first page attempt to move to a non existent page before the first page.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void testMovingBeforeFirstPage() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 3);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        doArrowKeysTest(driver, carousel, Keys.ARROW_LEFT, 1, "page 1");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * While on last page attempt to move to a non existent page after the last page.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void testMovingPastLastPage() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = getCarousel(driver, 4);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        doArrowKeysTest(driver, carousel, Keys.ARROW_RIGHT, 3, "page 3");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private void doArrowKeysTest(WebDriver d, WebElement c, Keys key, int nextPageNum, String expectedTextOnPage) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement navItem = getNavigationItemSelected(c);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        navItem.sendKeys(key);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement nextPage = getPageOnCarousel(c, nextPageNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:            waitForCarouselPageToChange(nextPage, expectedTextOnPage);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:            if (e.getMessage().contains("Timed out")) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                String pageContent = nextPage.getAttribute("innerHTML");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                fail("Used arrow key to get to next/PrEvious page, but page's content is incorrect, " +
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                        "could not find expected content: '" + expectedTextOnPage +
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                        "' in actual content: '" + pageContent + "'");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                fail("Got unexpected error while waiting for carousel page to turn: " +
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                        e.getMessage());
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private WebElement getCarousel(WebDriver d, int carouselNum) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        List<WebElement> carousels = d.findElements(By.xpath(CAROUSEL_XPATH));
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        WebElement carousel = carousels.get(--carouselNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        moveToCarousel(d, carousel);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        return carousel;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * WebDriver.moveToElement() does not work in safari - https://code.google.com/p/selenium/issues/detail?id=4136 This
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:     * is a workaround for that.
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private boolean moveToCarousel(WebDriver d, WebElement c)
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        boolean result = false;
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:            String mouseOverScript = "if(document.createEvent){" +
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                    "var evObj = document.createEvent('MouseEvents');" +
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                    "evObj.initEvent('mouseover', true, false);" +
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                    "arguments[0].dispatchEvent(evObj);" +
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                    "} else if(document.createEventObject) {" +
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                    "arguments[0].fireEvent('onmouseover');}";
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:            ruauUITestingUtil.getEval(mouseOverScript, c);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private List<WebElement> getPagesOnCarousel(WebElement c) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private WebElement getPageOnCarousel(WebElement c, int pageNum) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        List<WebElement> pages = getPagesOnCarousel(c);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        if (pages.size() > 0 && pageNum <= pages.size()) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:            return pages.get(--pageNum);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private WebElement getNavigationItemSelected(WebElement c) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private List<WebElement> getNavigationItemsOnCarousel(WebElement c) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private WebElement getNavigationItemOnCarousel(WebElement c, int itemNum) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        List<WebElement> items = getNavigationItemsOnCarousel(c);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    private WebElement getMDMPageElement(WebElement p, int entityNum) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        List<WebElement> pageItems = p.findElements(By.cssSelector(CAROUSEL_PAGE_ITEM_SELECTOR));
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        assertNotNull("Did not find any crouselPageItems on this page", pageItems);
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        return pageItems.get(--entityNum).findElement(By.tagName("a")); // return tab-able element
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:    public void waitForCarouselPageSelected(final WebElement page) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:        ruauUITestingUtil.waitUntil(new ExpectedCondition<Boolean>() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:            public Boolean apply(WebDriver d) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                String cssClass = page.getAttribute("class");
ruau/ruau/src/test/java/org/ruauframework/components/ui/carousel/CarouselUITest.java:                return cssClass.contains("carousel-page-selected");
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:package org.ruauframework.components.ui.dialogUITest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:import java.net.MalformedURLException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:import java.net.URISyntaxException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:import org.openqa.selenium.Keys;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * IE7: Does not work friendly with web-driver tabbing functionality or with $A.foreach Test that use that do not test
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * on IE. Manual testing has been done.
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * IE8: Does not work with $A.foreach. Manual testing has been done however
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * Safari/iOS: Does not support tabbing/PrEssing enter when done through web driver. So the tests that require it have
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java: * @author mkohanfars
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:public class DialogUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String URL_MODAL = "/uitest/dialog_ModalTest.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String URL_NON_MODAL = "/uitest/dialog_NonModalTest.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String URL_NON_MODAL_WITH_CHECKBOXES = "/uitest/dialog_NonModalWCheckboxesTest.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String CLASSNAME = "return $A.test.getActiveElement().className";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String TITLE = "return $A.test.getActiveElement().title";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String SHIFT_TAB = Keys.SHIFT + "" + Keys.TAB;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String CONFIRM_STR = "Click to confirm";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String CANCEL_STR = "Click to cancel";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String CLOSE_STR = "Close this window";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String SUBMITTED = "Data Submited";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String NOT_SUBMITTED = "Data Not Submitted";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String RESULT_LABEL = "input[class*='resultLabel']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private final String LAUNCH_DIALOG = "launchDialogButton default uiBlock uiButton";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public DialogUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    // Helper method used to make sure that enter is not used for Safari
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        if (BrowserType.SAFARI.equals(getBrowserType())) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:            ruauUITestingUtil.PrEssEnter(elm);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void openDialogBox(WebDriver driver) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        element = driver.findElement(By.cssSelector("button[class*='" + LAUNCH_DIALOG + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        waitForComponentToChangeStatus("div[class*='dialog']", "className", "hidden", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        String dialogDivClass = driver.findElement(By.cssSelector("div[class*='medium default uiDialog']"))
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:                .getAttribute("className");
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertTrue("DialogBox did not appear on the screen", !dialogDivClass.contains("hidden"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:     * Function that will check that the modal dialog box does not close when clicked outside the box
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private boolean tryToCloseBlockingDialog(WebElement elem) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        } catch (Exception e) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:            if (e.getMessage().contains("Element is not clickable")) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:            return false;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        return false;
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        String classOfActiveElem = "button[title^='" + ruauUITestingUtil.getEval(TITLE) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        return driver.findElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testDialogModalWorksWithoutButtonsAttribSet() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        openDialogBox(driver);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testDialogModalFocusOnDialogBox() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        openDialogBox(driver);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        tryToCloseBlockingDialog(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Make sure DialogBox did not close
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        element = driver.findElement(By.cssSelector("div[class*='mask uiDialog']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        boolean dialogStillUp = element.getAttribute("class").contains("fadeIn");
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertTrue("The Modal Dialog box was closed by clicking outside of it", dialogStillUp);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testDialogNonModalCheckBoxes() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        openDialogBox(driver);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        String classOfActiveElem = "input[class*='" + ruauUITestingUtil.getEval(CLASSNAME) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        WebElement element = driver.findElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        Boolean obj = (Boolean) ruauUITestingUtil.getEval("return $A.util.hasClass(arguments[0],\"checkbox1\")",
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertTrue("Did not move to next checkbox", obj.booleanValue());
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        classOfActiveElem = "button[title*='" + CONFIRM_STR + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        element = driver.findElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        ruauUITestingUtil.PrEssEnter(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Getting the input text box to grab the value that was put in it
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("Values that were selected don't match the output given", "Pudding", element.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    // Checking if Dialog box will will close after having all elements tabbed through
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testDialogNonModalTab() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        openDialogBox(driver);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // getting Cancel Button
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("Went through all check boxees but did not get to the cancel button", CANCEL_STR,
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("Got to the cancel button but did not tab to confirm button", CONFIRM_STR,
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("Got to the confirm button but did not tab to close button", CLOSE_STR,
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Getting the item that called it
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        String classOfActiveElem = "button[class*='" + ruauUITestingUtil.getEval(CLASSNAME) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        element = driver.findElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertClassesSame("Hitting tab did not go to item that called the dialog box",
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:                LAUNCH_DIALOG, element.getAttribute("className"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testDialogNonModalFocusOnExit() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        openDialogBox(driver);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // getting Cancel Button
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("Went through all check boxees but did not get to the cancel button", CANCEL_STR,
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Wait for dialog box to close
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        waitForComponentToChangeStatus("div[class*='dialog']", "className", "hidden", false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Make sure focus is back on the ok button
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        element = driver.findElement(By.cssSelector("button[class*='" + ruauUITestingUtil.getEval(CLASSNAME) + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertClassesSame("Hitting tab did not go to item that called the dialog box",
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:                LAUNCH_DIALOG, element.getAttribute("className"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    // Checking that the Escape button should not submit with submiting
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testDialogNonModalDefaultSubmit() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        openDialogBox(driver);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // getting Cancel Button
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("Went through all check boxees but did not get to the cancel button", CANCEL_STR,
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        ruauUITestingUtil.PrEssTab(element);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("Got to the cancel button but did not tab to confirm button", CONFIRM_STR,
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Grab the focused element, then PrEss escape to close dialog box
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Wait for DialogBox to close
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        waitForComponentToChangeStatus("div[class*='dialog']", "className", "hidden", false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Make sure no data was submitted
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("The enter button did not submit data, and it should have", SUBMITTED,
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:                element.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    // Checking that the Escape button should not submit with submiting
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testDialogNonModalEscapeButton() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        openDialogBox(driver);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Grab the focused element, then PrEss escape to close dialog box
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        String classOfActiveElem = "button[title*='" + ruauUITestingUtil.getEval(TITLE) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        WebElement element = driver.findElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Wait for DialogBox to close
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        waitForComponentToChangeStatus("div[class*='dialog']", "className", "hidden", false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Make sure no data was submitted
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("The escape button submitted data, and it shouldn't have", NOT_SUBMITTED,
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:                element.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    // Check that shift tab does not break nonModal Dialog boxes
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testDialogNonModalShiftTab() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        openDialogBox(driver);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Grab the focused element, then shift-tab to close dialog box
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        String classOfActiveElem = "button[title*='" + ruauUITestingUtil.getEval(TITLE) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        WebElement element = driver.findElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals("Did not focus on the cancel button", element.getAttribute("title"), CANCEL_STR);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Getting the item that called it
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        classOfActiveElem = "button[class*='" + ruauUITestingUtil.getEval(CLASSNAME) + "']";
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        element = driver.findElement(By.cssSelector(classOfActiveElem));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertClassesSame("Hitting tab did not go to item that called the dialog box",
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:                LAUNCH_DIALOG, element.getAttribute("className"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    private void mobileBrowserAide(WebDriver driver, String cssSel, String assertString, String correctStr) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        WebElement element = driver.findElement(By.cssSelector("button[class*='" + LAUNCH_DIALOG + "']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Opening dialog box
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        waitForComponentToChangeStatus("div[class*='dialog']", "className", "hidden", true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Find and click on specific element to close dialog box
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Wait for it to close
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        waitForComponentToChangeStatus("div[class*='dialog']", "className", "hidden", false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Make sure that that closes the dialog box sent in the correct data
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        assertEquals(assertString, correctStr, element.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    @TargetBrowsers({ BrowserType.IPAD, BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testMobilePhoneModal() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Does the same for close window button, except it checks to make sure that it did not submit
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:                "The close window button should not have submitted data", NOT_SUBMITTED);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    @TargetBrowsers({ BrowserType.IPAD, BrowserType.IPHONE })
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:    public void testMobilePhoneNonModal() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Open dialog box, PrEss ok to check that it submitted data.
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        mobileBrowserAide(driver, "button[title*='" + CONFIRM_STR + "']", "The ok button did not submit data",
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Does the same for close window button, except it checks to make sure that it did not submit
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:                "The close window button should not have submitted data", NOT_SUBMITTED);
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:        // Does the same for cancel window button, except it checks to make sure that it did not submit
ruau/ruau/src/test/java/org/ruauframework/components/ui/dialogUITest/DialogUITest.java:                "The cancel window should not have submitted data", NOT_SUBMITTED);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:package org.ruauframework.components.ui.listSorter;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import java.net.MalformedURLException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import java.net.URISyntaxException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import org.ruauframework.test.WebDriverTestCase.TargetBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import org.ruauframework.test.annotation.PerfTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import org.openqa.selenium.Keys;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * UI automation for ui:ListSorter.
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java: * UnAdaptable because issue with sfdc environments with sendkeys in iframes see W-1985839 and W-2009411
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:@UnAdaptableTest
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:@TargetBrowsers({ BrowserType.GOOGLECHROME, BrowserType.FIREFOX, BrowserType.IE7, BrowserType.SAFARI })
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:public class ListSorterUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    public static final String APP = "/uitest/listSorter_Test.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    private final String ACTIVE_ELEMENT = "return $A.test.getActiveElement()";
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    private final String SORT_TRIGGER = "defaultListSorterTrigger";
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    private final String SORTER = "defaultListSorter";
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    public ListSorterUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * Tab out should not close the sorter dialog The focus should remain in the Sorter Menu Test case for W-1985435
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    public void testTabOutOfListSorter() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        verifyTabOutAndEscBehaviour(Keys.TAB, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    public void testEscOfListSorter() throws MalformedURLException, URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        verifyTabOutAndEscBehaviour(Keys.ESCAPE, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * If isOpen: true then listSorter should be open after PrEssing tab, isopen: false, list sorter should be closed
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * after PrEssing tab
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * @param keysToSend
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * @param isOpen
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    private void verifyTabOutAndEscBehaviour(Keys keysToSend, boolean isOpen) throws MalformedURLException,
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:            URISyntaxException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        WebElement listSorter = driver.findElement(By.className(SORTER));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        // List Sorter dialog should be closed
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        assertFalse("list Sorter Dialog should not be visible", listSorter.getAttribute("class").contains("open"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        WebElement activeElement = (WebElement) ruauUITestingUtil.getEval(ACTIVE_ELEMENT);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        activeElement.sendKeys(keysToSend);
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:            assertTrue("list Sorter Dialog should still be visible after PrEssing tab", listSorter
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:                    .getAttribute("class").contains("open"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:            assertFalse("list Sorter Dialog should not be visible after PrEssing ESC", listSorter.getAttribute("class")
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:                    .contains("open"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    private void openListSorter() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        WebElement listTrigger = driver.findElement(By.className(SORT_TRIGGER));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        WebElement listSorter = driver.findElement(By.className(SORTER));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        assertTrue("list Sorter Dialog should be visible", listSorter.getAttribute("class").contains("open"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:    private void focusOnListSorter() {
ruau/ruau/src/test/java/org/ruauframework/components/ui/listSorter/ListSorterUITest.java:        WebElement input = findDomElement(By.cssSelector("li[class*='uiMenuItem']"));
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:package org.ruauframework.components.ui.modalOverlay;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import java.net.MalformedURLException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import java.net.URISyntaxException;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import java.util.List;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import org.ruauframework.test.WebDriverTestCase;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import org.ruauframework.test.WebDriverTestCase.ExcludeBrowsers;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import org.openqa.selenium.Keys;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import org.openqa.selenium.WebDriver;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:public class PanelModalOverlayUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private static final String APP = "/uitest/panelTest.cmp";
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private final String MODAL_OVERLAY_BUTTON = ".panelDialogModalButton";
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private final String NONMODAL_OVERLAY_BUTTON = ".panelDialogNonModalButton";
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private final String PANEL_OVERLAY_BUTTON = ".panelOverlayButton";
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private final String MODAL_OVERLAY_CMP = ".uiPanelDialog";
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private final String PANEL_OVERLAY_CMP = ".uiPanelOverlay";
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private final String ACTIVE_ELEMENT = "return $A.test.getActiveElement()";
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private final String ACTIVE_ELEMENT_TEXT = "return $A.test.getActiveElementText()";
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private final String ESC_BUTTON = ".closeBtn";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private final String NEWOVERLAY_BUTTON = ".PrEssOverlay";	
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public PanelModalOverlayUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * [Accessibility] modal overlay dialog closing on Esc key.
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Test case for W-2396326
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void testPressEscKeyOnModalOverlayDialog() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyPressEscKeyOnModalAndNonModalOverlay(MODAL_OVERLAY_BUTTON, MODAL_OVERLAY_CMP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * [Accessibility] non-modal overlay dialog closing on Esc key.
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Test case for W-2396326
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void testPressEscKeyOnNonModalDialog() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyPressEscKeyOnModalAndNonModalOverlay(NONMODAL_OVERLAY_BUTTON, MODAL_OVERLAY_CMP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * [Accessibility] Panel overlay dialog - non Full screen should be closed on Esc key.
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Test case for W-2424490 
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void _testPressEscKeyOnPanelOverlayDialog() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyPressEscKeyOnModalAndNonModalOverlay(PANEL_OVERLAY_BUTTON, PANEL_OVERLAY_CMP);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Verify PrEssing ESC while modalOverlay dialog is opened should close the overlay
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private void verifyPressEscKeyOnModalAndNonModalOverlay(String button, String cmp) throws MalformedURLException, URISyntaxException, InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:        //verifyTabOutAndEscBehaviour(Keys.ESCAPE, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(cmp, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	openOverlay(button);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(cmp, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	WebElement activeElement = (WebElement) ruauUITestingUtil.getEval(ACTIVE_ELEMENT);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	activeElement.sendKeys(Keys.ESCAPE);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(cmp, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * [Accessibility] Modal overlay dialog closes on PrEssing ESC button.
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void testPressEscButtonOnModalOverlayDialog() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyPressEscButtonOnModalAndNonModalOverlay(MODAL_OVERLAY_BUTTON);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * [Accessibility] non-modal overlay dialog closes on PrEssing ESC button.
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void testPressEscButtonOnNonModalDialog() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyPressEscButtonOnModalAndNonModalOverlay(NONMODAL_OVERLAY_BUTTON);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Verify PrEssing ESC button with modal and non-modal Overlay dialog
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @param button
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private void verifyPressEscButtonOnModalAndNonModalOverlay(String button) throws MalformedURLException, URISyntaxException, InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	openOverlay(button);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Test multiple overlay one above another on modal overlay should close all the overlay's when we PrEss ESC on the newest overlay
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void testClickEscButtonClosesAllModalOverlays() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyClickEscButtonClosesAllModalNonModalOverlays(MODAL_OVERLAY_BUTTON);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Test multiple overlay one above another on non-modal overlay should close all the overlay's when we PrEss ESC on the newest overlay
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void testClickEscButtonClosesAllNonModalOverlays() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyClickEscButtonClosesAllModalNonModalOverlays(NONMODAL_OVERLAY_BUTTON);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * verify multiple overlay one above another on modal or nonModal should close all the overlay's when we PrEss ESC on the newest overlay
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void verifyClickEscButtonClosesAllModalNonModalOverlays(String button) throws MalformedURLException, URISyntaxException, InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	openOverlay(button);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	openNewOverlayOnTopOfExistingModalOverlay(2);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	WebElement activeElement = (WebElement) ruauUITestingUtil.getEval(ACTIVE_ELEMENT);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	activeElement.sendKeys(Keys.ESCAPE);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Tabs on Modal overlay should do focus trapping and not close the overlay
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void testModalOverlayDialogDoesFocusTrapping() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyFocusTrappingForModalAndNonModalDialog(MODAL_OVERLAY_BUTTON, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Tabs on nonModal overlay dialog should close the overlay and not trap the focus within the overlay
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    public void testNonModalOverlayDialogDoesNotDoFocusTrapping() throws MalformedURLException, URISyntaxException, InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyFocusTrappingForModalAndNonModalDialog(NONMODAL_OVERLAY_BUTTON, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Verify PrEssing TAB key behavior for modal and nonModal overlay wrt to focus trapping 
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @param button
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws MalformedURLException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @throws URISyntaxException
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private void verifyFocusTrappingForModalAndNonModalDialog(String button, Boolean isFocusTrapped) throws MalformedURLException, URISyntaxException, InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, false);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	openOverlay(button);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, true);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	assertEquals("Button1 should be active element", "button 1", ruauUITestingUtil.getEval(ACTIVE_ELEMENT_TEXT));
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	WebElement activeElement = (WebElement) ruauUITestingUtil.getEval(ACTIVE_ELEMENT);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	activeElement.sendKeys(Keys.TAB);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	assertEquals("Button1 should be active element", "button 2", ruauUITestingUtil.getEval(ACTIVE_ELEMENT_TEXT));
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	activeElement = (WebElement) ruauUITestingUtil.getEval(ACTIVE_ELEMENT);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	activeElement.sendKeys(Keys.TAB);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	activeElement = (WebElement) ruauUITestingUtil.getEval(ACTIVE_ELEMENT);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	activeElement.sendKeys(Keys.TAB);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	activeElement = (WebElement) ruauUITestingUtil.getEval(ACTIVE_ELEMENT);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	activeElement.sendKeys(Keys.TAB);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	if(isFocusTrapped){
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    		assertEquals("Button1 should be active element", "button 1", ruauUITestingUtil.getEval(ACTIVE_ELEMENT_TEXT));
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    		//Test case for W-2424553
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    		//assertEquals("Show panel slider button should be active element", "Show panel slider", ruauUITestingUtil.getEval(ACTIVE_ELEMENT_TEXT));
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	verifyOverlayActive(MODAL_OVERLAY_CMP, isFocusTrapped);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private void openNewOverlayOnTopOfExistingModalOverlay(int expectedOverlay) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	WebElement newOverlayButton = findDomElement(By.cssSelector(NEWOVERLAY_BUTTON));
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	newOverlayButton.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	List<WebElement> modalOverlays = findDomElements(By.cssSelector(MODAL_OVERLAY_CMP));
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	assertEquals(String.format("Only %s active overlay should be opened at any point",expectedOverlay), expectedOverlay, modalOverlays.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * Verify overlay is opened
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @param overlayCmpLocator
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:     * @param isActive
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    private void verifyOverlayActive(String overlayCmpLocator, boolean isActive) throws InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	pause(1000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:		List<WebElement> activeOverlay = getActiveOverlay(overlayCmpLocator);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:			assertNotNull("There should be one overlay active", activeOverlay);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:	    	assertEquals("Only 1 active overlay should be opened at any point", 1, activeOverlay.size());
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:			assertNull("No Overlay should be active currently", activeOverlay);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:	 * Get list of active overlay panel, typically it should just return 1
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:	private List<WebElement> getActiveOverlay(String overlayCmpLocator) {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:		By locator = By.cssSelector(overlayCmpLocator + ".active");
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:		if(isElementPresent(locator)){
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:			return findDomElements(locator);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:	 * open overlay panel
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:	 * @param overlayLocator
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:	private void openOverlay(String overlayLocator) throws InterruptedException {
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:		WebElement modalOverlayButton = driver.findElement(By.cssSelector(overlayLocator));
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:    	modalOverlayButton.click();
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:		pause(5000);
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:	private void pause(long timeout) throws InterruptedException{
ruau/ruau/src/test/java/org/ruauframework/components/ui/modalOverlay/PanelModalOverlayUITest.java:		Thread.sleep(timeout);
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java: * You may obtain a copy of the License at
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java: * See the License for the specific language governing permissions and
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java: * limitations under the License.
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:package org.ruauframework.localization;
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:import org.ruauframework.test.*;
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:import org.ruauframework.test.WebDriverTestCase.CheckAccessibility;
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:import org.ruauframework.test.WebDriverUtil.BrowserType;
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:import org.openqa.selenium.By;
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:import org.openqa.selenium.WebElement;
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:@CheckAccessibility(false)
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:public class LocalizationAppUITest extends WebDriverTestCase {
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    public String URL = "/uitest/localization_Test.app";
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    public LocalizationAppUITest(String name) {
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        super(name);
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Excluded on mobile browsers for lack of tab support
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Checking functionality of the inputDate/outputDate components
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    public void testDateComponents() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // initial load
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementInput = findDomElement(By.cssSelector("input[class~='uiInputDate']"));
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementoutput = findDomElement(By.cssSelector("span[class~='uiOutputDate']"));
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputDate component rendered with wrong value", "Sep 23, 2004",
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:                elementInput.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputDate component rendered with wrong value", "Sep 23, 2004", elementoutput.getText());
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // Tab out
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        ruauUITestingUtil.PrEssTab(elementInput);
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputDate component rendered with wrong value", "Sep 23, 2005",
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:                elementInput.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputDate component rendered with wrong value", "Sep 23, 2005", elementoutput.getText());
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementButton = findDomElement(By.cssSelector("button[title~='Date']"));
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputDate component rendered with wrong value", "Sep 23, 2006",
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:                elementInput.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputDate component rendered with wrong value", "Sep 23, 2006", elementoutput.getText());
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Excluded on mobile browsers for lack of tab support
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    // Checking functionality of the inputDateTime/outputDateTime components
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:    public void testDateTimeComponents() throws Exception {
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // initial load
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementInput = findDomElement(By.cssSelector("input[class~='uiInputDateTime']"));
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        WebElement elementoutput = findDomElement(By.cssSelector("span[class~='uiOutputDateTime']"));
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputDateTime component rendered with wrong value", "Oct 23, 2004 4:30:00 PM",
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:                elementInput.getAttribute("value"));
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("outputDateTime component rendered with wrong value", "Oct 23, 2004 4:30:00 PM",
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        // Tab out
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        elementInput.clear();
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        ruauUITestingUtil.PrEssTab(elementInput);
ruau/ruau/src/test/java/org/ruauframework/localization/LocalizationAppUITest.java:        assertEquals("InputDateTime component rendered with wrong value", "Oct 23, 2005 9:30:00 AM",
