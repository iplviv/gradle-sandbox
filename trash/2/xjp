ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                assert : function(param) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    if (param === expectedReturn) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        actual = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var action = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.runAfter(action);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function AddsActionParamToQueue() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedReturn = "expectedReturn";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                assert : function(param) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    enqueueAction : function(param) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        actual = param;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var action = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.runAfter(action);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(action, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "RunAfter() cannot be called on a client action. Use run() on a client action instead.";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                assert : function(condition, message) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        var error = new Error(message);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var action = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    target.runAfter(action);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.storable = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.returnValue = "NONE";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.state = "FAILURE";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.responseState = "FAILURE";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var stored = target.getStored("bogus");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(null, stored);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function NullIfNotStorable() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.storable = false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.returnValue = "NONE";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.state = "SUCCESS";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.responseState = "SUCCESS";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var stored = target.getStored("bogus");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(null, stored);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ValuesFromResponse() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.storable = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.returnValue = "NONE";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.state = "SUCCESS";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.responseState = "SUCCESS";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.components = [];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var stored = target.getStored("bogus");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal("NONE", stored["returnValue"]);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal({}, stored["components"]);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal("SUCCESS", stored["state"]);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal("bogus", stored["storage"]["name"]);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // time is harder.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        var mockContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsActionCallbackIfCmpIsValid() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.sanitizeStoredResponse = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            delete target.originalResponse;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getState = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.cmp = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                isValid : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.callbacks = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        actual = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getStorage = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getId = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.finishAction({
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsCompleteGroups() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var context = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.completeGroups = Stubs.GetMethod(null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getStorage = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getId = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.finishAction(context);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            } ], target.completeGroups.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsCompleteGroupsEvenOnErrors() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.completeGroups = Stubs.GetMethod(null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.components = "something";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getStorage = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getId = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var error = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    target.finishAction({
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                            throw new Error("intentional");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            } ], target.completeGroups.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal("intentional", error);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsContextFinishComponentsWithStorageFalse() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedId = "9955";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var context = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            context.clearComponentConfigs = Stubs.GetMethod("id", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.components = [ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                "creationPath" : "hi"
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.completeGroups = Stubs.GetMethod(null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getStorage = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getId = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.finishAction(context);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            } ], context.finishComponentConfigs.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([], context.clearComponentConfigs.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsClearComponentsWithStorageTrueAndNoCB() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedId = "9955";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var context = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            context.clearComponentConfigs = Stubs.GetMethod("id", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.components = [ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                "creationPath" : "hi"
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.completeGroups = Stubs.GetMethod(null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getStorage = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.storable = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getId = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.finishAction(context);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(JSON.stringify(context.finishComponentConfigs.Calls), "[]");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([], context.finishComponentConfigs.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            } ], context.clearComponentConfigs.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsContextFinishComponentsWithCB() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedId = "9955";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var context = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            context.clearComponentConfigs = Stubs.GetMethod("id", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.components = [ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                "creationPath" : "hi"
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.completeGroups = Stubs.GetMethod(null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getStorage = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getState = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getId = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.callbacks = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.finishAction(context);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            } ], context.finishComponentConfigs.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([], context.clearComponentConfigs.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function SetAbortable() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        var mock = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsAbortableToTrueByDefault() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var abortable;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                abortable = target.isAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(true, target.abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsAbortableToTrue() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var abortable;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                abortable = target.isAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsAbortableToFalse() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var abortable;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setAbortable(false);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                abortable = target.isAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.False(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(false, target.abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsAbortableToNull() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var abortable;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setAbortable(null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                abortable = target.isAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsAbortableToNumber() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var abortable;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setAbortable(1);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                abortable = target.isAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(true, target.abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsAbortableToString() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var abortable;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setAbortable("false");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                abortable = target.isAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(true, target.abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function IsAbortable() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        var mock = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseByDefault() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var abortable;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                abortable = target.isAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.False(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.abortable = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = target.isAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsExclusiveTrueIfParamUndefined() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.setExclusive(undefined);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(target.exclusive);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsExclusiveToParamIfDefined() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.setExclusive(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target.exclusive;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.exclusive = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target.isExclusive();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseIfExclusiveNotSet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.exclusive = undefined;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target.isExclusive();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function SetStorable() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        var mock = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            assert : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsStorableToTrue() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                assert : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.def = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.setAbortable = target.getStorageKey = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setStorable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = target.storable;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsStorableConfigToParam() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                assert : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.def = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.setAbortable = target.getStorageKey = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setStorable(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = target.storableConfig;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function StorableErrorHandlerFromParam() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = function expected() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                assert : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.def = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.setAbortable = target.getStorageKey = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setStorable({
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    errorHandler : expected
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = target.getStorageErrorHandler();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsStorableCallsSetAbortable() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                assert : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.def = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.setAbortable = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getStorageKey = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setStorable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedReturn = "expectedReturn";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockAssert = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                assert : function(param) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    if (param === expectedReturn) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        actual = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.def = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.setAbortable = target.getStorageKey = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setStorable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function IsStorable() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseWhenIgnoreExistingFlagSet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.storableConfig = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target._isStorable = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var ret = target.isStorable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.False(ret);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseWhen_IsStorableFalse() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target._isStorable = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var ret = target.isStorable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.False(ret);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsTrueWhen_IsStorableTrue() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target._isStorable = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var ret = target.isStorable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function _IsStorable() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsStorableIfSet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.storable = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target._isStorable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseIfStorableNotSet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.storable = undefined;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target._isStorable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function getStorageKey() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsKeyAsDescriptorAndEncodedParams() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedEncode = "encodedString";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedDescriptor = "expectedDescriptor";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = expectedDescriptor + ":" + expectedEncode;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.params = undefined;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.def = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = target.getStorageKey();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function IsFromStorage() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        var mockContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                isUndefinedOrNull : function(storage) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    return storage === undefined || storage === null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsTrueIfStorageSet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.storage = {};
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = target.isFromStorage();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseIfStorageNotSet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            delete target.storage;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = target.isFromStorage();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseIfStorageNull() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.storage = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = target.isFromStorage();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function SetChained() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsChainedTrue() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setChained();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(target.chained);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ChainsCurrentAction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockContext = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                enqueueAction : function(param) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    actual = param;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setChained();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(target, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function IsChained() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsChainedIfSet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.chained = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target.isChained();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsFalseIfStorableNotSet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.chained = undefined;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target.isChained();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsMapOfIdDescriptorAndParams() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedId = "expectedId";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedDescriptor = "expectedDescriptor";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expectedParams = "expectedParams";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                "params" : expectedParams
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getId = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.params = expectedParams;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.def = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target.toJSON();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function GetStorage() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ReturnsStorageServiceGetStorage() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockStorageService = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                storageService : {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    getStorage : function(param) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        return param === "actions";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            mockStorageService(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = target.getStorage();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function ParseAndFireEvent() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsClientServiceWhenEventNotFoundByDescriptor() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockClientService = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    parseAndFireEvent : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        actual = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getComponent = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.parseAndFireEvent("");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsClientServiceWithNullComponent() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var mockClientService = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    parseAndFireEvent : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        actual = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getComponent = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.parseAndFireEvent("");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var evt = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    actual = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.getComponent = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.parseAndFireEvent("");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.cmp = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                isValid : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                isInstanceOf : function(param) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    return param === "ruauStorage:refreshObserver";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        setParams : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                                    actual = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = null;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.fireRefreshEvent("refreshBegin");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function AddCallbackGroup() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        var MockGroup = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            this.completeAction = Stubs.GetMethod("action", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.state = "NEW";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.addCallbackGroup(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target.groups;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ expected ], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = [];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.state = "new";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var group = new MockGroup();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.addCallbackGroup(group);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = target.groups;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsCompleteActionOnGroupIfNotNew() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.state = "new";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var group = new MockGroup();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.addCallbackGroup(group);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    action : target
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            } ], group.completeAction.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function DoesNotCallCompleteActionOnGroupIfNew() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.state = "NEW";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var group = new MockGroup();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.addCallbackGroup(group);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(0, group.completeAction.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        var MockGroup = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            this.completeAction = Stubs.GetMethod("action", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var group1 = new MockGroup();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var group2 = new MockGroup();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.groups = [ group1, group2 ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.completeGroups();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([], target.groups);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsCompleteActionOnEachGroup() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var group1 = new MockGroup();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var group2 = new MockGroup();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.groups = [ group1, group2 ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.completeGroups();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    action : target
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            } ], group1.completeAction.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    action : target
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            } ], group2.completeAction.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        var mockGlobal = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        encode : function(val) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                            return val;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsStateToAborted() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.abort();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal("ABORTED", target.state);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsCompleteGroups() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.completeGroups = Stubs.GetMethod(null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.abort();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            } ], target.completeGroups.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function CallsAbortedCallback() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual = false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            target.callbacks = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        actual = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.abort();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(actual, true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:    function setParentAction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        var mockContext = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function SetsParentAction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "EXPECTED";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.setParentAction({
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    ruauType : "Action",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    abortableId : expected
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, target.abortableId);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ThrowsIfParentIsUndefined() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "The provided parent action is not a valid Action: undefined";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    target.setParentAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ThrowsIfParentIsNull() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "The provided parent action is not a valid Action: null";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    target.setParentAction(null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ThrowsIfParentIsNotAnAction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "The provided parent action is not a valid Action: [object Object]";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    target.setParentAction({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:        function ThrowsIfParentAlreadySet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var target = new Action();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var expected = "You may only set the parent action once, and it must be before enqueueing:PROVIDED";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.abortableId = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                target.getStorageKey = function(){ return "PROVIDED" }; 
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                    target.setParentAction({
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:                        ruauType : "Action"
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js: * limitations under the License.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:Function.RegisterNamespace("Test.Ruue.Controller");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:Test.Ruue.Controller.ActionCallbackGroupTest = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:	// #import ruau.controller.ActionCallbackGroup
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:	var MockAction = function(id) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:	MockAction.prototype.addCallbackGroup = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:	var mockWindow = Mocks.GetMock(Object.Global(), "window", {});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:	var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			arrayIndexOf : function(array, searchElement) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			    for (var i = 0; i < array.length; i++) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			      if (array[i] === searchElement) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var actual = new ActionCallbackGroup([], expected, function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function SetsCallback() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var expected = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			    actual = new ActionCallbackGroup([], null, expected).callback;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function ExecutesCallbackIfActionsEmpty() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var stubbedCallback = Stubs.GetMethod("param", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			    new ActionCallbackGroup([], null, stubbedCallback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:					param : {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			} ], stubbedCallback.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function NoErrorIfCallbackUndefined() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			// because it would normally try to execute the callback if actions was empty
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			new ActionCallbackGroup([], null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function NoErrorIfCallbackNull() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			// because it would normally try to execute the callback if actions was empty
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			new ActionCallbackGroup([], null, null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function ExecutesCallbackWithProvidedScope() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var scope = {};
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var callback = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var expected = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			new ActionCallbackGroup([], scope, callback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(expected, scope);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function ExecutesCallbackWithWindowScopeIfScopeUndefined() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var callback = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				new ActionCallbackGroup([], undefined, callback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				actual = window.property;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function ExecutesCallbackWithWindowScopeIfScopeNull() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var callback = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				new ActionCallbackGroup([], null, callback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				actual = window.property;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		    	var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:        			actual = new ActionCallbackGroup([], null, function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:        			}).actions;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal([], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			function CopiesActionWithAddCallbackGroup() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var expected = [ new MockAction("expected") ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var actual = new ActionCallbackGroup(expected, null, function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				}).actions;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var valid1 = new MockAction("valid1");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var valid2 = new MockAction("valid2");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var actions = [ valid1, valid2 ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var expected = [ valid1, valid2 ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var actual = new ActionCallbackGroup(actions, null, function() { }).actions;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			function CallsAddCallbackGroupOnAction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var stub = Stubs.GetMethod("group", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var actions = [ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:					addCallbackGroup : stub
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var expected = new ActionCallbackGroup(actions, null, function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:					ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				} ], stub.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			function DoesNotExecuteCallbackIfActionsNotEmpty() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				var stubbedCallback = Stubs.GetMethod("param", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				new ActionCallbackGroup([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:					addCallbackGroup : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				} ], null, stubbedCallback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				Assert.Equal(0, stubbedCallback.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction("inlist");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var stubbedCallback = Stubs.GetMethod("param", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action ], null, stubbedCallback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var other = new MockAction("other");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			mockRuueUtil(function() { group.completeAction(other) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(0, stubbedCallback.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal([ action ], group.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var scope = {};
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var callback = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action ], scope, callback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			mockRuueUtil(function() { group.completeAction(action) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal([], group.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var scope = {};
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var callback = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action ], scope, callback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			mockRuueUtil(function() { group.completeAction(action) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal([], group.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function DoesNotExecuteCallbackIfActionsNotEmpty() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action1 = new MockAction("inlist1");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action2 = new MockAction("inlist2");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var stubbedCallback = Stubs.GetMethod("param", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action1, action2 ], null, stubbedCallback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			mockRuueUtil(function() { group.completeAction(action1) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(0, stubbedCallback.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function DoesNotExeuteCallbackDuringConstruction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var stubbedCallback = Stubs.GetMethod("param", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action ], null, stubbedCallback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			mockRuueUtil(function() { group.completeAction(action) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(0, stubbedCallback.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function ExecutesCallbackIfLastActionCompleted() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		    	//Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var stubbedCallback = Stubs.GetMethod("param", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			    group = new ActionCallbackGroup([ action ], null, stubbedCallback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				mockRuueUtil(function() { group.completeAction(action) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:					param : {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				ReturnValue : null
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			} ], stubbedCallback.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function NoErrorIfCallbackUndefined() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			// because it would normally try to execute the callback if last action was completed
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var stubbedCallback = Stubs.GetMethod("param", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action ], null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			mockRuueUtil(function() { group.completeAction(action) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function NoErrorIfCallbackNull() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			// because it would normally try to execute the callback if last action was completed
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var stubbedCallback = Stubs.GetMethod("param", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action ], null, null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			mockRuueUtil(function() { group.completeAction(action) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function ExecutesCallbackWithProvidedScope() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var scope = {};
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var callback = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var expected = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action ], scope, callback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			mockRuueUtil(function() { group.completeAction(action) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(expected, scope);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function ExecutesCallbackWithWindowScopeIfScopeUndefined() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var callback = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action ], undefined, callback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				mockRuueUtil(function() { group.completeAction(action) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				actual = window.property;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:		function ExecutesCallbackWithWindowScopeIfScopeNull() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var action = new MockAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var callback = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var group = new ActionCallbackGroup([ action ], null, callback);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				mockRuueUtil(function() { group.completeAction(action) });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:				actual = window.property;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCallbackGroupTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js: * limitations under the License.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:Function.RegisterNamespace("Test.Ruue.Controller");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:Test.Ruue.Controller.ActionQueueTest = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:    // Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:    Mocks.GetMock(Object.Global(), "exp", function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:	// Action objects are used for tests here
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:	// #import ruau.controller.Action
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:	//This file is testing the implementation for ActionQueue, so import that
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:    // #import ruau.controller.ActionQueue
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:    var mockGlobal = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                    encode : function(val) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                        return val;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:    var serverDef = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        isCaboose : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:    var serverCabooseDef = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        isCaboose : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            return "serverCabooseDef";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:    var clientDef = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        isCaboose : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function SetsTransactionId() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = -1;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.nextTransactionId;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function SetsLastAbortableTransactionId() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = -1;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.lastAbortableTransactionId;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = 0;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.actions.length;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.actions;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ expected ], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var serverAction = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(serverAction);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.xhr;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(true, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function DoesntSetXHROnCaboose() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var serverCabooseAction = new Action(serverCabooseDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            serverCabooseAction.caboose = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(serverCabooseAction);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.xhr;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(false, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function LeavesXHROnCaboose() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var serverAction = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var serverCabooseAction = new Action(serverCabooseDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(serverAction);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(serverCabooseAction);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.xhr;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(true, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function EnqueuesAbortableAction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var abortable, actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                expected.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                actual = target.actions;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                abortable = actual[0].isAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ expected, expected ], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.True(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function CallsClearPreviousAbortableActionsWhenAbortableActionIsEnqueuedOnNewTransaction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = [ "lastTransaction" ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var abortable = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.incrementNextTransactionId();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.clearPreviousAbortableActions = Stubs.GetMethod("queue", []);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                abortable.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                // abortable not returned but pushed onto returned list
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                ReturnValue : [ abortable ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            } ], target.clearPreviousAbortableActions.Calls);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function DoesNotCallClearPreviousAbortableActionsWhenAbortableActionIsEnqueuedOnCurrentTransaction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var abortable = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.clearPreviousAbortableActions = Stubs.GetMethod();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                abortable.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(abortable);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(0, target.clearPreviousAbortableActions.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function DoesNotCallClearPreviousAbortableActionsWhenNonAbortableActionIsEnqueuedOnNewTransaction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var action = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.incrementNextTransactionId();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.clearPreviousAbortableActions = Stubs.GetMethod();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(action);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(0, target.clearPreviousAbortableActions.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function DoesNotCallClearPreviousAbortableActionsWhenParentedAbortableActionIsEnqueued() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var action = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.incrementNextTransactionId();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.clearPreviousAbortableActions = Stubs.GetMethod();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            action.setAbortableId(target.getLastAbortableTransactionId());
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(action);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(0, target.clearPreviousAbortableActions.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function AbortsActionIfParentAborted() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var action = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                action.abort = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                    actual = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                action.setAbortable();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                action.setAbortableId("ALREADYABORTED");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(action);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(true, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:    function ClearPreviousAbortableActions() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function PrunesOldAbortableAction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var old = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ old ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.incrementNextTransactionId();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                old.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                expected.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.actions;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ expected ], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function PrunesOldAbortableActionsFromSet() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var oldest = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var nonAbortable1 = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var older = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var nonAbortable2 = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var old = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ oldest, nonAbortable1, older, nonAbortable2, old ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.incrementNextTransactionId();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                oldest.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                older.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                old.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                expected.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.actions;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ nonAbortable1, nonAbortable2, expected ], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function CallsAbortOnPrunedActions() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var older = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            older.abort = Stubs.GetMethod();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var nonAbortable = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            nonAbortable.abort = Stubs.GetMethod();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var old = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            old.abort = Stubs.GetMethod();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            expected.abort = Stubs.GetMethod();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ older, nonAbortable, old ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.incrementNextTransactionId();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            mockGlobal(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                older.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                old.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                expected.setAbortable(true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:                target.enqueue(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(1, older.abort.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(1, old.abort.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(0, expected.abort.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(0, nonAbortable.abort.Calls.length);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getClientActions();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var background = new Action(serverDef, null, null, null, true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var server = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ background, server ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getClientActions();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ background, server ], target.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = new Action(clientDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ expected ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getClientActions();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ expected ], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([], target.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var first = new Action(clientDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var background = new Action(serverDef, null, null, null, true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var second = new Action(clientDef, null, null, null, true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var server = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var third = new Action(clientDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ first, background, second, server, third ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getClientActions();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ first, second, third ], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ background, server ], target.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.xhr = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.getServerActions();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.xhr;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(false, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getServerActions();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var background = new Action(serverDef, null, null, null, true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var client = new Action(clientDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ background, client ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getServerActions();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ background, client ], target.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ expected ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getServerActions();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ expected ], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([], target.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var first = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var background = new Action(serverDef, null, null, null, true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var second = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var client = new Action(clientDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var third = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ first, background, second, client, third ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getServerActions();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ first, second, third ], actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ background, client ], target.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:    function GetNextBackgroundAction() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getNextBackgroundAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Null(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        function ReturnsNullIfNoBackgroundActions() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var server = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var client = new Action(clientDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ server, client ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getNextBackgroundAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Null(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ server, client ], target.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = new Action(serverDef, null, null, null, true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var other = new Action(serverDef, null, null, null, true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var server = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var client = new Action(clientDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ expected, other, server, client ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getNextBackgroundAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ other, server, client ], target.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:        [ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var server = new Action(serverDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var client = new Action(clientDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var expected = new Action(serverDef, null, null, null, true);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var target = new ActionQueue();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            target.actions = [ server, client, expected ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            var actual = target.getNextBackgroundAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionQueueTest.js:            Assert.Equal([ server, client ], target.actions);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js: * limitations under the License.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:Function.RegisterNamespace("Test.Ruue.Controller");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:Test.Ruue.Controller.ActionCollectorTest = function(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:    var $A = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        assert: function(condition, message) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:                var error = new Error(message);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:                return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:    var mockRuue = Mocks.GetMocks(Object.Global(), { "$A": $A });
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:    //Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:    Mocks.GetMocks(Object.Global(), { "exp": function(){}, "$A":$A})(function(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        //#import ruau.controller.ActionCollector
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var expected = [];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var target;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            mockRuue(function(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:                target = new $A.ns.ActionCollector();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var actual = target.actionsToSend;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var expected = [];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var target;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            mockRuue(function(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:                target = new $A.ns.ActionCollector();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var actual = target.actionsToComplete;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var expected = -1;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var target;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            mockRuue(function(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:                target = new $A.ns.ActionCollector();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var actual = target.num;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var expected = 0;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var target;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            mockRuue(function(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:                target = new $A.ns.ActionCollector();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var actual = target.actionsToCollect;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var expected = 1;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var target;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            mockRuue(function(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:                target = new $A.ns.ActionCollector(["action"]);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var actual = target.actionsToCollect
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        function ActionsRequestedStartsAsInput(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var expected = [ "action" ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var target;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            mockRuue(function(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:                target = new $A.ns.ActionCollector(expected);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var actual = target.getActionsRequested();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:        function ActionsRequestedIsSettable(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var expected = [ "action1", "action2" ];
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var target;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            mockRuue(function(){
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:                target = new $A.ns.ActionCollector();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            target.actionsRequested = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            var actual = target.getActionsRequested();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionCollectorTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js: * limitations under the License.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:Function.RegisterNamespace("Test.Ruue.Controller");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:Test.Ruue.Controller.ActionDefTest = function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:	// Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:	Mocks.GetMock(Object.Global(), "exp", function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		// #import ruau.controller.ActionDef
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		// #import ruau.controller.Action
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function SetsName() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				name : expected
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = new ActionDef(config).name;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = new ActionDef(config).descriptor;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				actionType : expected
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = new ActionDef(config).actionType;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var ValueDef = function(param) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					name : param,
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					getName : function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						return this.name;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var mockValueDef = Mocks.GetMock(Object.Global(), "ValueDef", ValueDef);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).returnType;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal(new ValueDef(expected), actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			function SetsEmptyParamDefsWhenParamsNotArray() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					params : [ "ignored" ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						isArray : function(obj) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:							return false;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						actual = new ActionDef(config).paramDefs;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Empty(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			function WithParams() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						isArray : function(obj) {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				function SetsEmptyParamDefsWhenParamsEmpty() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						params : []
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:							actual = new ActionDef(config).paramDefs;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					Assert.Empty(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				function SetsParamDefsWhenParamsHasOne() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						params : [ "expected" ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:							actual = new ActionDef(config).paramDefs;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					Assert.Equal({
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						expected : new ValueDef("expected")
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					}, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				function SetsParamDefsWhenParamsHasTwo() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						params : [ "expected1", "expected2" ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:							actual = new ActionDef(config).paramDefs;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					Assert.Equal({
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						expected1 : new ValueDef("expected1"),
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:						expected2 : new ValueDef("expected2")
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					}, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			function DefaultBackground() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).background;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal(false, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			function SetsBackground() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					background : expected
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).background;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal(true, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			function DefaultCaboose() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).caboose;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal(false, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			function SetsCaboose() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					caboose : expected
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).caboose;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal(true, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "SERVER",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockValueDef(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).meth;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Null(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "CLIENT",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).meth;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal("decoded", actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "CLIENT",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var stubbedDecoder = Stubs.GetMethod("toDecode", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual = stubbedDecoder.Calls[0].Arguments.toDecode;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal("decode me", actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "CLIENT",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).returnType;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Undefined(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			function SetsEmptyParamDefs() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "CLIENT"
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).paramDefs;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Empty(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			function DoesNotSetBackground() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "CLIENT",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					background : true
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var actual;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actual = new ActionDef(config).background;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal(false, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var config = {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					actionType : "CLIENT",
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:					code : "decodable"
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var expected = new Error("expected");
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var stubbedLogger = Stubs.GetMethod("msg", "error", null);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				var mockRuueUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				mockRuueUtil(function() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal("decodable", stubbedLogger.Calls[0].Arguments.msg);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:				Assert.Equal(expected, stubbedLogger.Calls[0].Arguments.error);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:	function GetName() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function ReturnsName() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.name = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.getName();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.descriptor = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.getDescriptor();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.actionType = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.getActionType();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:	function IsBackground() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function ReturnsTrueIfBackgroundTrue() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.background = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.isBackground();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function ReturnsFalseIfBackgroundNotTrue() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.background = "true";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.isBackground();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function ReturnsTrueIfActionTypeEqualsCLIENT() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.actionType = "CLIENT";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.isClientAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function ReturnsFalseIfActionTypeNotEqualsCLIENT() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.actionType = "client";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.isClientAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function ReturnsTrueIfActionTypeEqualsSERVER() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.actionType = "SERVER";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.isServerAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function ReturnsFalseIfActionTypeNotEqualsSERVER() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.actionType = "server";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.isServerAction();
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:	function NewInstance() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.newInstance().def;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(target, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.meth = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.newInstance().meth;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function ReturnsActionWithParamDefs() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			target.paramDefs = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.newInstance().paramDefs;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		function ReturnsActionWithBackgroundFromIsBackground() {
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:                        // Note, this used to use 'expected', but that breaks with the new
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:                        // more strict values.
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = true;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:                        target.background = expected;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.newInstance().background;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:		[ Fact ]
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			// Arrange
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var expected = "expected";
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var target = new ActionDef({});
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			var actual = target.newInstance(expected).cmp;
ruau/ruau-impl/src/test/javascript/ruau/controller/ActionDefTest.js:			Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js: * limitations under the License.
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:Function.RegisterNamespace("Test.Ruue");
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:Test.Ruue.LoggerTest = function() {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:    var $A = {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:    //Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:    Mocks.GetMocks(Object.Global(), { "$A": $A })(function(){
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        // #import ruau.Logger
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:    var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                return !!obj && this.objToString.apply(obj) === '[object Error]';
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                return typeof obj === "object" && obj !== null && !this.isArray(obj);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            isArray: typeof Array.isArray === "function" ? Array.isArray : function(obj) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                return obj instanceof Array;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        message: function() {}
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var logger = new $A.ns.Logger(),
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            level, message, error;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var cb = function(l, m, e) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            message = m;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            var expectedLevel = "INFO",
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(expectedLevel, level);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(expectedMsg, message);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(true, logger.hasSubscriptions(expectedLevel));
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(undefined, error);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:    function warning() {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var logger = new $A.ns.Logger(),
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            level, message, error;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var cb = function(l, m, e) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            message = m;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        function WarningLog() {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            var expectedLevel = "WARNING",
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                logger.warning(expectedMsg);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(expectedLevel, level);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(expectedMsg, message);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(true, logger.hasSubscriptions(expectedLevel));
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(undefined, error);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:    function assertion() {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var logger = new $A.ns.Logger(),
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            level, message, error;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var cb = function(l, m, e) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            message = m;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        function AssertFalse() {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            var expectedLevel = "ASSERT",
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                condition = false;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                logger.assert(false, expectedMsg);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(expectedLevel, level);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal("Assertion Failed!: " + expectedMsg + " : " + condition, message);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(true, logger.hasSubscriptions(expectedLevel));
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(undefined, error);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            var called = false;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                called = true;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            logger.assert(true, "blah");
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.False(called);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var logger = new $A.ns.Logger(),
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            level, message, error;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var cb = function(l, m, e) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            message = m;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            var expectedLevel = "ERROR",
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(expectedLevel, level);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(expectedMsg, message);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(true, logger.hasSubscriptions(expectedLevel));
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.Equal(undefined, error);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var logger = new $A.ns.Logger(),
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            level, message, error;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var cb = function(l, m, e) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            message = m;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            // case insensitive
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.True(logger.hasSubscriptions("iNFo"));
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var logger = new $A.ns.Logger(),
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            level, message, error;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var cb = function(l, m, e) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            message = m;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.True(logger.hasSubscriptions("InFo"));
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            Assert.False(logger.hasSubscriptions("INFO"));
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:    function validation() {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var logger = new $A.ns.Logger(),
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            level, message, error;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        var cb = function(l, m, e) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            message = m;
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        function InvalidLevel() {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                Assert.Fail("Should have thrown error for invalid level");
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                Assert.Equal("Please specify valid log level: 'INFO', 'WARNING', 'ASSERT', 'ERROR'", e);
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:        function InvalidCallback() {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                Assert.Fail("Should have thrown error for invalid callback");
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:            } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/LoggerTest.js:                Assert.Equal("Logging callback must be a function", e);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * limitations under the License.
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:Function.RegisterNamespace("Test.Ruue.BrowserSupportedUtilTest");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * This test shows that when the browser is mocked to have native utilities in place, they are used instead of
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js: * the fallbacks.
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:Test.Ruue.BrowserSupportedUtilTest=function() {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        var MockObject = {};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        for (var key in Object) { MockObject[key] = Object[key]; }
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockObject.prototype = Object.create(Object.prototype);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        var MockFunction = function MockFunction() {};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockFunction.prototype = Object.create(Function.prototype);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        var MockArray = function MockArray() {};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockArray.prototype = Object.create(Array.prototype);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockArray.prototype.forEach = function() {throw "FOREACH";};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockArray.prototype.map = function() {throw "MAP";};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockArray.prototype.reduce = function() {throw "REDUCE";};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockArray.prototype.some = function() {throw "SOME";};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockArray.prototype.every = function() {throw "EVERY";};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockArray.prototype.filter = function() {throw "FILTER";};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        MockArray.isArray = function(obj) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:            return obj instanceof [].constructor;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        var utilMock = function(override, delegate) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:            Mocks.GetMocks(Object.Global(),{
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                window:Object.Global(),
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                document:{createDocumentFragment:function() {}},
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                Transport:function() {},
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                NumberFormat:{},            
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                navigator:{userAgent:''},
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                Array: override === MockArray ? override : Array,
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                var CurrentObject = window.Object;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                // #import ruau.util.Util
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    delegate(new $A.ns.Util());
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                } finally {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        function testForEach() {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    util.forEach(new MockArray("A", "B", "C"), function(letter, index) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.False(true, "default call should have raised an exception!");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.Equal("FOREACH", e);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        function testMap() {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    var actual = util.map(new MockArray("A", "B", "C"), function(letter, index) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.False(true, "default call should have raised an exception!");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.Equal("MAP", e);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    var actual = util.reduce(new MockArray("A", "B", "C"), function(letter, index) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.False(true, "default call should have raised an exception!");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.Equal("REDUCE", e);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    var actual = util.filter(new MockArray("A", "B", "C"), function(letter, index) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.False(true, "default call should have raised an exception!");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.Equal("FILTER", e);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    var actual = util.every(new MockArray("A", "B", "C"), function(letter, index) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                        return false;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.False(true, "default call should have raised an exception!");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.Equal("EVERY", e);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    var actual = util.some(new MockArray("A", "B", "C"), function(letter, index) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                        return false;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.False(true, "default call should have raised an exception!");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.Equal("SOME", e);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    var actual = util.bind(function() {}, 1);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.False(true, "default call should have raised an exception!");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.Equal("BIND", e);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    var actual = util.keys({});
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.False(true, "default call should have raised an exception!");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserSupportedUtilTest.js:                    Assert.Equal("KEYS", e);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * limitations under the License.
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:Function.RegisterNamespace("Test.Ruue.BrowserUnsupportedUtilTest");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * This test shows that when the browser is mocked to be missing native utilities, the fallbacks implementation in
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js: * $A.util are used.
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:Test.Ruue.BrowserUnsupportedUtilTest=function() {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        var MockObject = {};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        for (var key in Object) { MockObject[key] = Object[key]; }
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockObject.prototype = Object.create(Object.prototype);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        var MockFunction = function MockFunction() {};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockFunction.prototype = Object.create(Function.prototype);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        var MockArray = function() {};
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockArray.prototype = Object.create(Array.prototype);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockArray.prototype.forEach = undefined;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockArray.prototype.map = undefined;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockArray.prototype.reduce = undefined;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockArray.prototype.every = undefined;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockArray.prototype.some = undefined;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockArray.prototype.filter = undefined;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        MockArray.isArray = function(obj) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            return (obj instanceof [].constructor);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        var utilMock = function(override, delegate) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            Mocks.GetMocks(Object.Global(),{
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                window:Object.Global(),
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                document:{createDocumentFragment:function() {}},
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Transport:function() {},
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                NumberFormat:{},            
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                navigator:{userAgent:''},
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Array: override === MockArray ? override : Array,
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                var CurrentObject = window.Object;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                // #import ruau.util.Util
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    delegate(new $A.ns.Util());
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                } finally {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        function doArrayErrorTest(methodName, isPredicate) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    util[methodName]({});
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.False(true, "Method should throw an error.");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.True(e instanceof TypeError);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.Equal("$A.util." + methodName + " called on non-array.",  e.message);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    util[methodName]([], {});
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.False(true, "Method should throw an error.");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.True(e instanceof TypeError);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.Equal(
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                        "$A.util." + methodName + " called with non-function " + (isPredicate ? "PrEdicate." : "callback."),
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                        e.message
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        function testForEach() {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                var actual = [];
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                util.forEach(["A", "B", "C"], function(letter, index) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    actual.push(this + letter + index);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(actual[0], "THIS_OBJECTA0");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(actual[1], "THIS_OBJECTB1");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(actual[2], "THIS_OBJECTC2");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        function testForEachError() {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            doArrayErrorTest("forEach");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        function testMap() {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                var actual = util.map(["A", "B", "C"], function(letter, index) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(actual[0], "THIS_OBJECTA0");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(actual[1], "THIS_OBJECTB1");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(actual[2], "THIS_OBJECTC2");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        function testMapError() {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            doArrayErrorTest("map");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                var actual = util.reduce(["A", "B", "C"], function(current, letter, index) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(actual[0], "A0");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(actual[1], "B1");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(actual[2], "C2");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            doArrayErrorTest("reduce");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            utilMock(MockArray, function(util) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    "Result should only contain even numbers."
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            doArrayErrorTest("filter", true);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            utilMock(MockArray, function(util){
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.False(
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            doArrayErrorTest("every", true);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            utilMock(MockArray, function(util) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    "Last element + 2 should be odd."
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.False(
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            doArrayErrorTest("some", true);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:            function multiplyBPlusCByA(a, b, c) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                return a * (b + c);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                var bPlusCTimes5 = util.bind(multiplyBPlusCByA, null, 5);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(20, bPlusCTimes5(1, 3));
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(50, bPlusCTimes5(7, 3));
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                var cPlus1Times5 = util.bind(bPlusCTimes5, null, 1);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(20, cPlus1Times5(3));
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(25, cPlus1Times5(4));
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                var bPlusCTime5Called = util.bind.call(null, multiplyBPlusCByA, null, 5);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(20, bPlusCTimes5(1, 3));
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                Assert.Equal(50, bPlusCTimes5(7, 3));
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.False(true, "Method should throw an error.");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.True(e instanceof TypeError);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.Equal("$A.util.bind called on non-function.",  e.message);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                var testObjects = [{}, new function(){}, []], i;
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    var keys = util.keys(testObjects[i]);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.Equal(2, keys.length);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.Equal("hello", keys[0]);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.Equal("goodbye", keys[1]);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.False(true, "Method should throw an error.");
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.True(e instanceof TypeError);
ruau/ruau-impl/src/test/javascript/ruau/util/BrowserUnsupportedUtilTest.js:                    Assert.Equal("$A.util.keys called on non-object.",  e.message);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js: * limitations under the License.
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:Function.RegisterNamespace("Test.Ruue.Util");
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:Test.Ruue.UtilTest=function(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:	var ruauMock=function(delegate){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		Mocks.GetMocks(Object.Global(),{
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			window:Object.Global(),
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			document:{createDocumentFragment:function() {}},
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			Transport:function() {},
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			NumberFormat:{},			
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			navigator:{userAgent:''}
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			// #import ruau.util.Util
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			delegate();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:	var targetUtil;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:	ruauMock(function(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		targetUtil = new $A.ns.Util();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:    function transportRequest(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function testTransportRequestNotPublic(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        	var targetUtil;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            ruauMock(function(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                targetUtil = new $A.ns.Util();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var method = targetUtil.transport.request;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(undefined, method); 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var mockUserAgentIOS7WebView = Mocks.GetMock(Object.Global(), "window", {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                navigator: {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    userAgent: "iPhone OS/7.1 (iPhone) Salesforce1/3001899 XBranding/1.0 SalesforceTouchContainer/2.0 Mozilla/5.0 (iPhone; CPU iPhone OS 7_1 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D167 (241664608)"
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            // Create fresh instance of Util.js since we store isIOSWebView return value on object
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var targetUtil;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            ruauMock(function(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                targetUtil = new $A.ns.Util();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                actual = targetUtil.isIOSWebView();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function ReturnsFalseForIOS7_1Safari(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var mockUserAgentIOS7Safari = Mocks.GetMock(Object.Global(), "window", {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                navigator: {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 7_1 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D5145e Safari/9537.53"
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            // Create fresh instance of Util.js since we store isIOSWebView return value on object
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var targetUtil;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            ruauMock(function(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                targetUtil = new $A.ns.Util();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            mockUserAgentIOS7Safari(function(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                actual = targetUtil.isIOSWebView(); 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:	function stripTags(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		var tags = ['script', 'style'];
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		var mockElement = {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			name: '',	
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			parentNode: ''
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		var mockDiv = {				
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			getElementsByTagName:function(name){							
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				mockElement.name = name;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				mockElement.parentNode = this;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				var str;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				if(name == 'script'){						
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				var count = 0;								
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				var index = this.innerHTML.indexOf(str);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				var arr = new Array();					
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				for (var j = 0; j < count; j++){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					arr[j] = mockElement;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				return arr;				
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				if(element.name == 'script') {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					this.innerHTML = this.innerHTML.replace('<script>', '');
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					this.innerHTML = this.innerHTML.replace('</script>', '');
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				if(element.name == 'style') {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					this.innerHTML = this.innerHTML.replace('<style>', '');
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					this.innerHTML = this.innerHTML.replace('</style>', '');
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		var mockDocument = Mocks.GetMock(Object.Global(), "document", {				
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			createElement:function(value){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				if(value == 'div') return mockDiv;										
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		var mockRemoveElement = Mocks.GetMock(targetUtil, "removeElement", function(element){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		function undefinedValue(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var expected = undefined;  
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual = targetUtil.stripTags(undefined, tags);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual); 		
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		function invalidValue(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var expected = undefined;  
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual = targetUtil.stripTags('', tags);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual); 					
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		function invalidTags(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var expected = 'value';  
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual;						
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					actual = targetUtil.stripTags('value', '');
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual); 					
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		function noTags(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var expected = 'value';  
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual;						
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					actual = targetUtil.stripTags('value', tags);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual); 					
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		function withTags(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var expected = 'value';  
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual;						
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					actual = targetUtil.stripTags('<script>value</script>', tags);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual); 					
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		function withMultipleTags(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var expected = 'value';  
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual;						
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					actual = targetUtil.stripTags('<script></script>value<script></script>', tags);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual); 					
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		function withNestedTags(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var expected = 'value';  
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual;						
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					actual = targetUtil.stripTags('<script><script><style>value</style></script></script>', tags);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual); 					
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		function withMultipleValues(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var expected = 'value1 value2 value3';  
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual;						
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:					actual = targetUtil.stripTags('value1 <script><script><style>value2</style></script></script> value3', tags);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual); 					
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		var ruauMockCustomUserAgent=function(delegate, userAgentOverride){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			Mocks.GetMocks(Object.Global(),{
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				window:Object.Global(),
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				document:{createDocumentFragment:function() {}},
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				Transport:function() {},
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				NumberFormat:{},			
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				navigator:{userAgent : userAgentOverride }
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				// #import ruau.util.Util
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				delegate();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			//Arrange
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var userAgent = "Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; .NET4.0E; .NET4.0C; rv:11.0) like Gecko";
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			ruauMockCustomUserAgent(function(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				var targetUtil = new $A.ns.Util();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				actual = targetUtil.isIE; 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			Assert.True(actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		[Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:		function ChromeUserAgentReturnsFalse(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			//Arrange
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			var userAgent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36";
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			ruauMockCustomUserAgent(function(){
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				var targetUtil = new $A.ns.Util();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:				actual = targetUtil.isIE; 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:			Assert.False(actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            ruauMock(function() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                var util = new $A.ns.Util(),
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    array1 = [0, 1],
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    array2 = [2, 3, 4],
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    array3 = [5, 6, 7, 8],
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                // Merge arrays into array1 and test:
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                util.merge(array1, array2, array3);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                Assert.Equal(9, array1.length);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                for (i = 0; i < array1.length; i++) {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    Assert.Equal(i, array1[i]);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                // Merge just array1 and make sure it doesn't change.
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                util.merge(array1);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                Assert.Equal(9, array1.length);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                for (i = 0; i < array1.length; i++) {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    Assert.Equal(i, array1[i]);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            ruauMock(function() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    Assert.False(true, "Invalid arguments. Should throw exception.");
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    Assert.Equal("Merge takes only arrays as arguments.", e);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    Assert.False(true, "Invalid arguments. Should throw exception.");
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                } catch (e) {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    Assert.Equal("Merge takes only arrays as arguments.", e);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        var mockIsUndefinedReturnsFalse = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    return false;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact] 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function ReturnsCachedResultIfExistsAndTruthy() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var expected = true;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            targetUtil.supportsTouchEvents.cache = expected;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            mockIsUndefinedReturnsFalse(function() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                actual = targetUtil.supportsTouchEvents();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact] 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function ReturnsCachedResultIfExistsAndFalsy() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var expected = false;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            targetUtil.supportsTouchEvents.cache = expected;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            mockIsUndefinedReturnsFalse(function() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                actual = targetUtil.supportsTouchEvents();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact] 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function ReturnsTrueWhenOnTouchStartInWindow() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var expected = true;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var mockItAll = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                                return "NonBlacklistedMode";
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    ontouchstart: true
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                actual = targetUtil.supportsTouchEvents();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact] 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var expected = true;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var mockItAll = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                                return "NonBlacklistedMode";
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    navigator: {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        msPointerEnabled: true
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                actual = targetUtil.supportsTouchEvents();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact] 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function ReturnsTrueForMaxTouchPoints() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var expected = true;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var mockItAll = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                                return "NonBlacklistedMode";
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        return false;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    navigator: {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        msPointerEnabled: false,
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        msMaxTouchPoints: 10
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                actual = targetUtil.supportsTouchEvents();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact] 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function ReturnsFalseForBlacklistedMode() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var expected = false;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var mockItAll = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        return false;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    ontouchstart: false
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                actual = targetUtil.supportsTouchEvents();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact] 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        // This case covers non-touch IE11 where msPointerEnabled is true
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function ReturnsFalseForPointerEnabledNotWindowsPhone() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var expected = false;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var mockItAll = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                                return "NonBlacklistedMode";
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        return false;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                    navigator: {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        msPointerEnabled: true,
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        pointerEnabled: true,
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        msMaxTouchPoints: 0,
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                        maxTouchPoints: 0
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                actual = targetUtil.supportsTouchEvents();
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var structure = {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            ruauMock(function() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                Assert.Equal("VALUE", new $A.ns.Util().lookup(structure, "first", "second", "third"));
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function looksUpNestedArrayProperties() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var structure = ["WRONG", ["WRONG", ["VALUE", "WRONG"]]];
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            ruauMock(function() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                Assert.Equal("VALUE", new $A.ns.Util().lookup(structure, 1, 1, 0));
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var structure = {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            ruauMock(function() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                Assert.Equal("VALUE", new $A.ns.Util().lookup(structure, "first", 1, 1, 0, "result"));
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:        function handlesUnfoundProperties() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            var structure = {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:            ruauMock(function() {
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                var util = new $A.ns.Util(); 
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                var found = 0;
ruau/ruau-impl/src/test/javascript/ruau/util/UtilTest.js:                Assert.Equal(0, found);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js: * limitations under the License.
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:Function.RegisterNamespace("Test.Ruue");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:Test.Ruue.RuueLocalizationServiceTest = function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	// Mock the exp() function defined in Ruue.js, this is originally used for exposing members using a export.js file
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	Mocks.GetMock(Object.Global(), "exp", function() {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		// #import ruau.RuueLocalizationService
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockGlobal = Mocks.GetMocks(Object.Global(), {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetService;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	mockGlobal(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		targetService = new RuueLocalizationService();
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetDate = "07/10/2013";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetDateFormat = "DD-MM-YYYY";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetDateTime = "07/10/2013 12:00:00";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetDateTimeFormat = "DD-MM-YYYY hh:mm:ss";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetTime = "12:00:00";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetTimeFormat = "hh:mm:ss";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetLocale = "en";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetTimezone = "PST";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetNumber = 101;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetPercent = '10%';
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetCurrency = '$100';
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetNumberFormat = "nFormat";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetPercentFormat = "pFormat";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var targetCurrencyFormat = "cFormat";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        get:function(value){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            if(value == "$Locale.dateFormat") return targetDateFormat;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            if(value == "$Locale.datetimeFormat") return targetDateTimeFormat;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            if(value == "$Locale.timeFormat") return targetTimeFormat;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            if(value == "$Locale.timezone") return targetTimezone;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	if(value == "$Locale.numberFormat") return targetNumberFormat;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			if(value == "$Locale.percentFormat") return targetPercentFormat;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			if(value == "$Locale.currencyFormat") return targetCurrencyFormat;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockInvalidDate = {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		isValid:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			return false;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockDate = {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		isValid:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			return targetDate;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockDateTime = {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		isValid:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			return targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		toDate:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			return targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockTime = {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		isValid:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			return targetTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockMomentConstructor = Mocks.GetMock(Object.Global(), "moment", function(value, format, locale){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		if(value == mockDate) return mockDate;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		if(value == mockDateTime) return mockDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		if(value == mockTime) return mockTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		return mockInvalidDate;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockMoment = Mocks.GetMock(Object.Global(), "moment", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		utc:function(value){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			if(value == mockDate) return mockDate;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			if(value == mockDateTime) return mockDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			if(value == mockTime) return mockTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			return mockInvalidDate;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		langData:function(value){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			if(value == targetLocale || value == "zh-cn") return true;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			return false;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockDisplayDateTime = Mocks.GetMock(targetService, "displayDateTime", function(mDate, format, locale){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		return mDate.toString() + format + locale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockGetNormalizedFormat = Mocks.GetMock(targetService, "getNormalizedFormat", function(format){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		return format;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockGetNormalizedLangLocale = Mocks.GetMock(targetService, "getNormalizedLangLocale", function(locale){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		return locale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockGetTimeZoneInfo = Mocks.GetMock(targetService, "getTimeZoneInfo", function(timezone, callback){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		callback(mockDateTime, timezone);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	var mockWallTime = Mocks.GetMock(Object.Global(), "WallTime",{
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		EST:false
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function displayDuration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetNoSuffix = "noSuffix";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetDuration={
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		humanize:function(noSuffix){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				if(noSuffix == targetNoSuffix)return true;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			asDays:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			asHours:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			asMilliseconds:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			asMinutes:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			asMonths:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			asSeconds:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			asYears:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			days:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			years:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function displayDuration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = true;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.displayDuration(targetDuration, targetNoSuffix);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function displayDurationInDays(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "365";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.displayDurationInDays(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function displayDurationInHours(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "24";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	actual = targetService.displayDurationInHours(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function displayDurationInMilliseconds(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "3600000";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	actual = targetService.displayDurationInMilliseconds(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function displayDurationInMinutes(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "60";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	actual = targetService.displayDurationInMinutes(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function displayDurationInMonths(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "12";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	actual = targetService.displayDurationInMonths(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function displayDurationInSeconds(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "3600";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.displayDurationInSeconds(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function displayDurationInYears(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "2013";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	actual = targetService.displayDurationInYears(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function getDaysInDuration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "365";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	actual = targetService.getDaysInDuration(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function getHoursInDuration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "24";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	actual = targetService.getHoursInDuration(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function getMillisecondsInDuration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "3600000";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.getMillisecondsInDuration(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function getMinutesInDuration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "60";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.getMinutesInDuration(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function getMonthsInDuration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "12";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.getMonthsInDuration(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function getSecondsInDuration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "3600";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.getSecondsInDuration(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function getYearsInDuration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "2013";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.getYearsInDuration(targetDuration);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function duration(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetNum = "Num";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetUnit = "Unit";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockMoment = Mocks.GetMock(Object.Global(), 'moment',{
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		duration:function(num, unit){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				if(num == targetNum && unit == targetUnit)return "With Unit";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				if(num == targetNum)return "Without Unit";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function durationWithoutUnit(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "Without Unit";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.duration(targetNum, undefined);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function durationWithUnit(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "With Unit";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.duration(targetNum, targetUnit);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function DateLimits(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetDate = "date";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetUnit = "Unit";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockMomentConstr = Mocks.GetMock(Object.Global(), "moment", function(date){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			if(date == targetDate)return mockDuration;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockDuration={
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				if(unit == targetUnit) {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:						toDate:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			startOf:function(unit){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				if(unit == targetUnit) {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:						toDate:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:							return "startOf";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "endOf";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.endOf(targetDate, targetUnit);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function startOf(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "startOf";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.startOf(targetDate, targetUnit);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function formatDate(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidDate(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "Invalid date value";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		targetService.formatDate("", targetDateFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual.message);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function ValidDate(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDate + targetDateFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				actual = targetService.formatDate(targetDate, targetDateFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NoFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDate + targetDateFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    					actual = targetService.formatDate(targetDate, undefined, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function formatDateUTC(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidDate(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "Invalid date value";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		targetService.formatDateUTC("", targetDateFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual.message);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function ValidDate(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDate + targetDateFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				actual = targetService.formatDateUTC(targetDate, targetDateFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NoFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDate + targetDateFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    					actual = targetService.formatDateUTC(targetDate, undefined, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function formatDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "Invalid date time value";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		targetService.formatDateTime("", targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual.message);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function ValidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime + targetDateTimeFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				actual = targetService.formatDateTime(targetDateTime, targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NoFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime + targetDateTimeFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    					actual = targetService.formatDateTime(targetDateTime, undefined, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function formatDateTimeUTC(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "Invalid date time value";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		targetService.formatDateTimeUTC("", targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual.message);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function ValidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime + targetDateTimeFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				actual = targetService.formatDateTimeUTC(targetDateTime, targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NoFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime + targetDateTimeFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    					actual = targetService.formatDateTimeUTC(targetDateTime, undefined, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function formatTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "Invalid time value";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		targetService.formatTime("", targetTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual.message);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function ValidTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetTime + targetTimeFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				actual = targetService.formatTime(targetTime, targetTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NoFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetTime + targetTimeFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    					actual = targetService.formatTime(targetTime, undefined, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function formatTimeUTC(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "Invalid time value";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = Record.Exception(function() {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		targetService.formatTimeUTC("", targetTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual.message);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function ValidTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetTime + targetTimeFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				actual = targetService.formatTimeUTC(targetTime, targetTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NoFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetTime + targetTimeFormat + targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockDisplayDateTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    					actual = targetService.formatTimeUTC(targetTime, undefined, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function DateComparisons(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetDate1 = "date1";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetDate2 = "date2";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetUnit = "unit";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockDuration={
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			isAfter:function(date2, unit){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				if(date2 == targetDate2 && unit == targetUnit) return "isAfter";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			isBefore:function(date2, unit){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				if(date2 == targetDate2 && unit == targetUnit) return "isBefore";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			isSame:function(date2, unit){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				if(date2 == targetDate2 && unit == targetUnit) return "isSame";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockMomentConstr = Mocks.GetMock(Object.Global(), "moment", function(date){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			if(date == targetDate1)return mockDuration;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	    [Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        var expected = "isAfter";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.isAfter(targetDate1, targetDate2, targetUnit);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	    [Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        var expected = "isBefore";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.isBefore(targetDate1, targetDate2, targetUnit);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	    [Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	    function isSame(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        var expected = "isSame";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.isSame(targetDate1, targetDate2, targetUnit);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	        Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function parseDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockMomentConstr = Mocks.GetMock(Object.Global(), "moment", function(dateTimeString, format, locale){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		if(dateTimeString == mockDateTime && format == targetDateTimeFormat && locale == targetLocale) return mockDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		if(dateTimeString == "null") return null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		return mockInvalidDate;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.parseDateTime("", targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InValidFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		mockGetNormalizedLangLocale(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.parseDateTime(targetDateTime, "", targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InValidLocale(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		mockGetNormalizedLangLocale(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.parseDateTime(targetDateTime, targetDateTimeFormat, "");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NullDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		mockGetNormalizedLangLocale(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.parseDateTime("null", targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function ValidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		mockGetNormalizedLangLocale(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.parseDateTime(targetDateTime, targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function parseDateTimeISO8601(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockMomentConstr = Mocks.GetMock(Object.Global(), "moment", function(dateTimeString){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		if(dateTimeString == mockDateTime) return mockDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		if(dateTimeString == "null") return null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		return mockInvalidDate;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.parseDateTimeISO8601("");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NullDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.parseDateTimeISO8601("null");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function ValidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			actual = targetService.parseDateTimeISO8601(targetDateTime);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function parseDateTimeUTC(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockMoment = Mocks.GetMock(Object.Global(), "moment", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		utc:function(dateTimeString, format, locale){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			if(dateTimeString == mockDateTime && format == targetDateTimeFormat && locale == targetLocale) return mockDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			if(dateTimeString == "null") return null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		return mockInvalidDate;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				actual = targetService.parseDateTimeUTC("", targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		mockGetNormalizedLangLocale(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.parseDateTimeUTC(targetDateTime, "", targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InValidLocale(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		mockGetNormalizedLangLocale(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.parseDateTimeUTC(targetDateTime, targetDateTimeFormat, "");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NullDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		mockGetNormalizedLangLocale(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        				actual = targetService.parseDateTimeUTC("null", targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function ValidDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		mockGetNormalizedLangLocale(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.parseDateTimeUTC(targetDateTime, targetDateTimeFormat, targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = null;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.toISOString(null);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = '';
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.toISOString('');
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function NotDateObject(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		var expected = targetDate;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.toISOString(targetDate);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function DateObjectWithToISOString(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		var dt = new Date(2004,10,23,12,30,59,123);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		var expected = dt.getUTCFullYear() + "-" +
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    					dt.getUTCDate() + "T" +
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.toISOString(dt);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function DateObjectWithoutToISOString(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		var dt = new Date(2004,10,23,12,30,59,123);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		var expected = dt.getUTCFullYear() + "-" +
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    					dt.getUTCDate() + "T" +
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.toISOString(dt);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function UTCToWallTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var callback = function(dateObj){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		actual = dateObj.toString();
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockGetWallTimeFromUTC = Mocks.GetMock(targetService, "getWallTimeFromUTC", function(dateObj, timezone){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		if(dateObj == mockDateTime) return dateObj;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function DateTimeInGMT(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			targetService.UTCToWallTime(mockDateTime, "GMT", callback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function GetDefaultTimezone(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:                get:function(value){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:                    if(value == "$Locale.timezone") return "UTC";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				targetService.UTCToWallTime(mockDateTime, "", callback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function TimezoneInfoAlreadyLoaded(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	mockWallTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			mockGetWallTimeFromUTC(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				targetService.UTCToWallTime(mockDateTime, targetTimezone, callback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function LoadTimezoneInfo(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	mockWallTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		mockGetWallTimeFromUTC(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        				targetService.UTCToWallTime(mockDateTime, "EST", callback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function WallTimeToUTC(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var callback = function(dateObj){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		actual = dateObj.toString();
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var mockGetUTCFromWallTime = Mocks.GetMock(targetService, "getUTCFromWallTime", function(dateObj, timezone){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    		if(dateObj == mockDateTime) return dateObj;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function DateTimeInGMT(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			targetService.WallTimeToUTC(mockDateTime, "GMT", callback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function GetDefaultTimezone(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:                get:function(value){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:                    if(value == "$Locale.timezone") return "UTC";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				targetService.WallTimeToUTC(mockDateTime, "", callback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function TimezoneInfoAlreadyLoaded(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	mockWallTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		mockGetUTCFromWallTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    				targetService.WallTimeToUTC(mockDateTime, targetTimezone, callback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function LoadTimezoneInfo(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetDateTime;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	mockWallTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        			mockGetUTCFromWallTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        				targetService.WallTimeToUTC(mockDateTime, "EST", callback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function displayDateTime(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetFormat = "format";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetLang = "lang";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetDateTimeObj={
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			lang:function(lang){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				if(lang == targetLang) this.l = lang;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			format:function(format){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				if(format == targetFormat) this.f = format + this.l;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function InvalidLocale(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetFormat;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.displayDateTime(targetDateTimeObj, targetFormat, '');
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function validFormatAndLocale(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetFormat+targetLang;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockGetNormalizedLangLocale(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	mockGetNormalizedFormat(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            		actual = targetService.displayDateTime(targetDateTimeObj, targetFormat, targetLang);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function getNormalizedFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	var targetFormat = "DDMMYYYY";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function inValidFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.getNormalizedFormat("");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function cacheHit(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetFormat;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockCache = Mocks.GetMock(targetService, "cache", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	            format: {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	    			DDMMYYYY:targetFormat
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockCache(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.getNormalizedFormat(targetFormat);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function cacheMiss(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetFormat;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockCache = Mocks.GetMock(targetService, "cache", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		format: {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        			ddMMyyyy:false
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockCache(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.getNormalizedFormat("ddMMyyyy");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    function getNormalizedLangLocale(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function inValidFormat(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            actual = targetService.getNormalizedLangLocale("");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function cacheHit(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockCache = Mocks.GetMock(targetService, "cache", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	langLocale: {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	    			en:targetLocale
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockCache(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	actual = targetService.getNormalizedLangLocale(targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function cacheMiss(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockCache = Mocks.GetMock(targetService, "cache", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	langLocale: {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        			en:false
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockCache(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.getNormalizedLangLocale(targetLocale);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function cacheMissInvalidLang(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockCache = Mocks.GetMock(targetService, "cache", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	langLocale: {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        			en:false
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockCache(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.getNormalizedLangLocale("xx");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function cacheMissCompoundLang(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = "zh-cn";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockCache = Mocks.GetMock(targetService, "cache", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	langLocale: {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        			en:false
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	            	isEmpty: function() { return false; }
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockCache(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.getNormalizedLangLocale("ZH_CN");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function cacheMissInvalidCompoundLang(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockCache = Mocks.GetMock(targetService, "cache", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	langLocale: {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        			en:false
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	            	isEmpty: function() { return false; }
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockCache(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.getNormalizedLangLocale("xx_ca");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function cacheMissInvalidCompoundCountry(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            // Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var expected = targetLocale;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockCache = Mocks.GetMock(targetService, "cache", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            	langLocale: {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        			en:false
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:	            	isEmpty: function() { return false; }
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            mockCache(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            			actual = targetService.getNormalizedLangLocale("en_xx");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    	[Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function callbackGetsCalled(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	// Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var expected = "called";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var targetCallback = function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		actual = "called";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var mockEnqueuedAction={
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			getState:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var mockAction={
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		setParams:function(id){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        			if(id == targetTimezone)this.timezoneId = id;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				setCallback:function(service, callback){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:					callback(mockEnqueuedAction);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:					if(exPrEssion=="c.ruau://TimeZoneInfoController.getTimeZoneInfo") return mockAction;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:                enqueueAction: function(a) { if(a != mockAction) throw new Error("Wrong Action enqueued"); }
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				targetService.getTimeZoneInfo(targetTimezone, targetCallback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function SuccessWithWalltimeInitialized(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	// Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var expected = "called";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var targetCallback = function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		actual = "called";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var mockWalltimeData = {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var mockEnqueuedAction={
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			getState:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		returnValue : mockWalltimeData
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var mockAction={
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		setParams:function(id){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        			if(id == targetTimezone)this.timezoneId = id;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				setCallback:function(service, callback){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:					callback(mockEnqueuedAction);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			var mockUtil = Mocks.GetMock(Object.Global(), "$A", {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:					if(exPrEssion=="c.ruau://TimeZoneInfoController.getTimeZoneInfo") return mockAction;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:                enqueueAction: function(a) { if(a != mockAction) throw new Error("Wrong Action enqueued"); }
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:			var mockWallTime = Mocks.GetMock(Object.Global(), "WallTime",{
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		    	data: '',
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		    	addRulesZones : function(a, b){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		    		if(a != 'ru' && b != 'zo') throw new Error("Wrong arguments in walltime.addRulesZones a:" + a + ", b:" + b );
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		    	autoinit: '',
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		    	init: function(a, b){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		    		if(this.autoinit == false) throw new Error("walltime.autoinit is not set to true");
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:		    		if(a != 'ru' && b != 'zo') throw new Error("Wrong arguments in walltime.init a:" + a + ", b:" + b );
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:				mockWallTime(function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:					targetService.getTimeZoneInfo(targetTimezone, targetCallback);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:            Assert.Equal(expected, actual);
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        [Fact]
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        function SuccessWithWalltimeNotInitialized(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	// Arrange
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var expected = "called";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var actual;
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var targetCallback = function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		actual = "called";
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var mockWalltimeData = {
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        	var mockEnqueuedAction={
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:    			getState:function(){
ruau/ruau-impl/src/test/javascript/ruau/RuueLocalizationServiceTest.js:        		returnValue : mockWalltimeData
