ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			self.updateValueProvidersFromItems(concrete);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	updateValueProvidersFromItems: function (concrete) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var items = concrete.get('v.items') || [];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:        for(var i=0;i<items.length;i++){
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:            var rowData=concrete._rowData[i];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:            var rowElement = tbody.rows[i];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:            rowData.vp.set('item',items[i]);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:            rowData.vp.set('index',i);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:            rowData.vp.set('disabled', false);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:            for(var j=0;j<rowData.classes.length;j++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:            	$A.util.toggleClass(rowElement, rowData.classes[j], false);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:            rowData.classes = [];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:            for(var j=0;j<rowData.columnData.length;j++){
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:                var columnData=rowData.columnData[j];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:                var columns=columnData.components[columnData.cellKey];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:                for(var c=0;c<columns.length;c++){
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:                    columns[c].markDirty("DataGrid item changed.");
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		// Set the state back to 'idle'.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		// TODO: is this necessary? Not used anywhere else
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		//concrete.set('v.state', 'idle');
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Creates column data to manage the components that make up a column
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * and attaches them to the rowData object at the specified index
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Object} rowData
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Integer} colIndex
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Boolean} isEditMode
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	createCellData: function(rowData, colIndex, isEditMode) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var cellCmps = {},
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		rowData.columnData[colIndex] = {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		return rowData.columnData[colIndex];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Destroys the column data and components at the specified row and column index
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * and removes the <td> element from the specified parent <tr>.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Object} rowData
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Integer} colIndex
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {HTMLTableRowElement} parentTR
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	destroyCellData: function(rowData, colIndex, parentTR) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var colData = rowData.columnData[colIndex],
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		if (colData) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			key = colData.cellKey;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			$A.util.forEach(colData.components[key], function(cmp) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			colData.components[key] = [];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			parentTR.removeChild(colData.elementRef);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			rowData.columnData[colIndex] = {};
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Rendering functions to help generate the table's DOM
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	// TODO: optimize column iteration
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	createTableBody: function (concrete) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var self = this,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			COD = document.createDocumentFragment(),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			tr, asyncParams, rowElements;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		rowElements = self.createAndRenderTableRows(concrete, concrete._rowData, false);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		COD.appendChild(rowElements);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Creates table row DOM elements for the specified data and returns the row elements
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * as a CODument fragment
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Component} concrete
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Array} rowDataArray
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Boolean} isEditMode
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	createAndRenderTableRows: function (concrete, rowDataArray, isEditMode) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var self = this,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			rowElements = CODument.createDocumentFragment(),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			targetComponents = isEditMode ? concrete._inputComponents : concrete._outputComponents,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			tr, td, colData, components, cdrs, rowData;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		for (var rowIndex = 0; rowIndex < rowDataArray.length; rowIndex++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			tr = CODument.createElement('tr');
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			rowData = rowDataArray[rowIndex];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			self.renderTableRow(concrete, rowData, tr, isEditMode, false);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			rowElements.appendChild(tr);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Asynchronously (if has serverside dependencies) create and render the given components. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Component} concrete The concrete componetn
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Array.<ComponentDefRef>} cdrs THe defRefs to use as a blueprint
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {ValueProvider} vp The value provider to resolve against
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {HTMLElement} element The parent element of the components
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Array.<Component>} components An output array for the built components
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {function (Component)} callback A callback. Not using promises due to high volume.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	createAndRenderCell: function (concrete, cdrs, vp, element, components, callback) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var resolved = 0,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			cdr, path, output, span;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		for (var cdrIndex = 0; cdrIndex < cdrs.length; cdrIndex++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				$A.render(out, element);	// Most of the performance hits here
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				$A.afterRender(out);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				if (callback && (++resolved === cdrs.length)) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					callback();
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Updates and rerenders the rows specified by rowDataArray, making sure to pick
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * up changes to column metadata
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	rerenderRowsWithNewColumns: function (concrete, rowDataArray, isEditMode) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var self = this,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			targetComponents = isEditMode ? concrete._inputComponents : concrete._outputComponents,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			tr, td, colData, components, cdrs, rowData;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		for (var rowIndex = 0; rowIndex < rowDataArray.length; rowIndex++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			rowData = rowDataArray[rowIndex];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			self.renderTableRow(concrete, rowData, tr, isEditMode, true);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Renders the row using the data specified in rowData in the element tr.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Optionally cleans up the component data
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Component} concrete
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Object} rowData
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {HTMLTableRowElement} tr
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Boolean} isEditMode
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Booelan} cleanOldComponents
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	renderTableRow: function(concrete, rowData, tr, isEditMode, cleanOldComponents) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var self = this,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			targetComponents = isEditMode ? concrete._inputComponents : concrete._outputComponents,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			colData, td, key, components, cdrs, colIndex, largerLength, resizeRowData;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		largerLength = (targetComponents.length > rowData.columnData.length) ? targetComponents.length : rowData.columnData.length;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		for (colIndex = 0; colIndex < largerLength; colIndex++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			colData = rowData.columnData[colIndex];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			cdrs = targetComponents[colIndex];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			// TODO: collapse empty columns
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			if (!cdrs && colData) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				self.destroyCellData(rowData, colIndex, tr);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				resizeRowData = true;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				if (!colData) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					colData = self.createCellData(rowData, colIndex, isEditMode);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				if (!colData.elementRef) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					td = CODument.createElement('td');
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					tr.appendChild(td);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					td = colData.elementRef;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				colData.elementRef = td;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				key = colData.cellKey;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				if (cleanOldComponents) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					$A.util.forEach(colData.components[key], function(cmp) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					colData.components[key] = [];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				components = colData.components[key];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				self.createAndRenderCell(concrete, cdrs, rowData.vp, td, components);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		if (resizeRowData) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			rowData.columnData = rowData.columnData.slice(0, targetComponents.length);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Updates the class on a <tr> and keeps track of which classes have been
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * added on the rowData so that they can be removed or reset by the datagrid
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	updateRowClass: function(cmp, rowData, rowElement, params) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var classIndex;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		switch (params.classOp.toLowerCase()) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		case "add":
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			$A.util.toggleClass(rowElement, params.className, true);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			classIndex = rowData.classes.indexOf(params.className);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			if (classIndex === -1) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				rowData.classes.push(params.className);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			break;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		case "remove":
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			$A.util.toggleClass(rowElement, params.className, false);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			classIndex = rowData.classes.indexOf(params.className);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			if (classIndex > -1) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				rowData.classes.splice(classIndex, 1);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			break;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		case "toggle":
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			$A.util.toggleClass(rowElement, params.className);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			classIndex = rowData.classes.indexOf(params.className);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			if (classIndex === -1) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				rowData.classes.push(params.className);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				rowData.classes.splice(classIndex, 1);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			break;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		default:
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			$A.log("datagrid " + cmp.getGlobalId() + " - updateGridRows handler: unrecognized class operation. Please use \"add\", \"remove\", or \"toggle\".");
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	updateValueProvider: function(cmp, rowData, attributes) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		for (var i=0; i<attributes.length; i++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			var attr = attributes[i];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			if (attr.name == 'disabled') {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				rowData.vp.set("disabled", attr.value);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Maps the given operation onto all the components in the grid
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Component} concrete
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Boolean} batch Specifies whether the operation should be done on an array of components (true) or on each individual component (false)
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Function} op A function to be applied onto the components in the data grid. If [batch] is true, this should take an array of components as its parameter. Otherwise, it should take a single component.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	componentMap: function(concrete, batch, op) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var rowDataLength = concrete._rowData.length;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		this.selectiveMap(concrete, 0, rowDataLength, batch, op);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Maps the given operation onto the components in the grid, starting from
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Component} concrete
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Integer} rowIndex
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Integer} count
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Boolean} batch Specifies whether the operation should be done on an array of components (true) or on each individual component (false)
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {Function} op A function to be applied onto the components in the data grid. If [batch] is true, this should take an array of components as its parameter. Otherwise, it should take a single component.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	selectiveMap: function (concrete, rowIndex, count, batch, op) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var rowDataArray = concrete._rowData,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			batchedCmps = [], components;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		for (var i=0; i<count; i++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			columnData = rowDataArray[rowIndex + i].columnData;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			for (var j=0; j<columnData.length; j++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				components = columnData[j].components
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				if (batch) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:						batchedCmps = batchedCmps.concat(components.input);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:						batchedCmps = batchedCmps.concat(components.output);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					$A.util.forEach(components.input, op);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					$A.util.forEach(components.input, op);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		if (batch) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			op(batchedCmps);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @param {String} sortBy
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	parseSortBy: function (sortBy) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var columns = {}, 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			tokens, token, name,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			desc = false;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			for (var i = 0; i < tokens.length; i++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					name = desc ? token.slice(1, token.length) : token;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					columns[name] = desc ? 'descending' : 'ascending';
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Helper function to generate the value provider for a row
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	createPassthroughValue: function(concrete, item, rowIndex) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var rowContext = {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				item : $A.expressionService.create(null, item),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				selected : $A.expressionService.create(null, false),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				index : $A.expressionService.create(null, rowIndex),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				disabled : $A.expressionService.create(null, false)
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		return $A.expressionService.createPassthroughValue(rowContext, concrete);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Fastest, cleanest deep clone. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Falls back to provide a simple implementation for IE7. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js: 	 * @param {Object} source
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var obj;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			return JSON.parse(JSON.stringify(source));
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			for (var i in source) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Clones a defRef (primary its attributes) so that a components constructed from 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * the same template defRef do not share attribute values after creation.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * Purposely not copying 'localId' to avoid confusion.	
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:     * If the overriden cellTemplate has no attributes, then inject the structure.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:     * @param {ComponentDefRef} defRef	
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			attributes		: defRef.attributes ? this.clone(defRef.attributes) : { values : {} },
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			valueProvider	: defRef.valueProvider
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	// Used in createSummaryRow
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	inject: function (cmpDefRef, attribute, value, force) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var self = this;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		if (force && !cmpDefRef.attributes) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			cmpDefRef.attributes = { values: {} };
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		// If the value has not been set or force is specified, then inject. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		if (!cmpDefRef.attributes.values[attribute] || force) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			cmpDefRef.attributes.values[attribute] = {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				descriptor 	: attribute,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				value 		: $A.util.isArray(value) ? value : [value]
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	// Components cannot be generated with an empty item shape 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	// TODO: set all the data to nulls or empty objects
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	generateNewItemShape: function (concrete) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:    	var itemShape = concrete.get('v.itemShape'),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			template,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			sub, path;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			template = this.clone(item); // TODO: make empty clone rather than full clone?
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			concrete.set("v.itemShape", template);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		concrete.set("v.itemShape", item);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:     * Not-fully-supported Functionality
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 * @return {HTMLElement} null if no summary row is defined
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	createSummaryRow: function (concrete) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var vp = concrete.getAttributeValueProvider(), 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			summaryRow = concrete.get('v.summaryRow'), 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			self = this, COD, tr, priv_rows, summaries, colspan;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		// Create map to store by column name. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		concrete._summaryCells = {};
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		if (summaryRow.length === 0) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		COD = document.createDocumentFragment(),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		tr = CODument.createElement('tr'),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	 	priv_rows = concrete._rowItems,//concrete.getValue('v.priv_rows'),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		summaries = {},
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		colspan = 0;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		COD.appendChild(tr);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		// Build up a mapping of the summary columns and their positions.		
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		$A.util.forEach(summaryRow, function (cell, i) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			var column = cell.get("v.column"),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				// If an outputComponent has not been definited, inject one.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					// TODO: investigate valueProvider
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					var cdr = concrete._columns[column].get('v.outputComponent')[0];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					delete cdr.attributes.valueProvider;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					var clone = self.cloneDefRef(cdr);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				// Force inject the initial items.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				// With a reference to the value object, changes should propagate.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				// Create component from defRef. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				$A.componentService.newComponentAsync(this, function (summaryCell) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					concrete._allChildrenCmps.push(summaryCell);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					// Put into map for later awesomeness.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					concrete._summaryCells[column] = summaryCell;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					summaries[co] = summaryCell;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				}, cell, cell.valueProvider || vp);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				$A.error('Invalid column name: \'' + column + '\'');
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		for (var i = 0; i < concrete._columnCount; i++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			if (summaries[i]) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				if (colspan > 0) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					colspan = 0;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				$A.render(summaries[i], tr);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				$A.afterRender(summaries[i]);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				++colspan;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			if (colspan && i === concrete._columnCount - 1) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			var td = CODument.createElement('td');
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			td.setAttribute('colspan', colspan);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			tr.appendChild(td);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:	handleModeChange: function (cmp) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		var self 				= this,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			targetComponents 	= isEditMode ? concrete._inputComponents : concrete._outputComponents,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			targetComponent, 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			parent,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:		for (var columnIndex = 0; columnIndex < concrete._columnCount; columnIndex++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			targetComponent = targetComponents[columnIndex];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:			if (targetComponent) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:				for (var rowIndex = 0; rowIndex < itemCount; rowIndex++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					cellData 			= self.getCellData(concrete, rowIndex, columnIndex);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					oldComponents 	= cellData.components[isEditMode ? 'output' : 'input'];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					newComponents 	= cellData.components[isEditMode ? 'input' : 'output'];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					// Columns do not need to define intputComponents and outputComponents.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					// Extract relevant objects.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					el 		= cellData.elementRef;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					vp		= concrete._rowData[rowIndex].vp;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					cdrs 	= targetComponent;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:					// If components have already been created, use them. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:						$A.afterRender(newComponents); 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:						// Create and render the components (async).
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:						self.createAndRenderCell(concrete, targetComponent, vp, el, newComponents);	
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridHelper.js:						cellData.components[isEditMode ? 'input' : 'output'] = newComponents;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js: * You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js: * limitations under the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		var modelItemsKey, items;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		// Use for loading logic. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		cmp._hasDataProvider = cmp._dataProviders && cmp._dataProviders.length > 0;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		cmp._rendered = false;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		// Attempt to extract the initial set of items. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		if (cmp._hasDataProvider) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			modelItemsKey = cmp._dataProviders[0].get('v.modelItemsKey');	
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:				items = cmp.get("v.dataProvider.0").get("m." + modelItemsKey);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		// Set the initial items and then fire provide against 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		// the dataProvider to configure paging.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		// TODO: move into if statement above
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		hlp.initializeCaches(cmp);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		hlp.initializeActionDelegate(cmp);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		hlp.initializeNewColumns(cmp);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		hlp.generateNewItemShape(cmp);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		hlp.initializeRowData(cmp);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:	handleItemsChange: function (cmp, evt, hlp) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		hlp.generateNewItemShape(cmp);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			hlp.initializeRowData(cmp);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		hlp.handleItemsChange(cmp, evt.getParams());
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		var concrete = cmp.getConcreteComponent();
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			concrete._sorting = false;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:	handleColumnsChange: function(cmp, evt, helper) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		var concrete = cmp.getConcreteComponent();
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		helper.initializeNewColumns(concrete);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		helper.rerenderRowsWithNewColumns(concrete, concrete._rowData, false);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:	handleColumnSortChange: function (cmp, evt, hlp) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		var concrete; 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:	handleClick: function (cmp, evt, hlp) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		var name;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		if (evt.target) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			name = $A.util.getDataAttribute(evt.target, 'action-name'); 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			if (name) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:				hlp.handleAction(cmp, {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:					name 		: name,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:					index   	: $A.util.getDataAttribute(evt.target, 'item-index'),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:					value 		: $A.util.getDataAttribute(evt.target, 'action-value'),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:					globalId 	: $A.util.getDataAttribute(evt.target, 'action-global-id')
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:	handleUpdateRowAttrs: function(cmp, evt, hlp) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		var params = evt.getParams(),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			rowData = concrete._rowData[params.index],
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			rowElement, rowData, attr, tbody, classIndex;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		if (params.className && params.classOp) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			rowElement = tbody.rows[params.index];
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			hlp.updateRowClass(cmp, rowData, rowElement, params);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:		if (params.attributes) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridController.js:			hlp.updateValueProvider(cmp, rowData, params.attributes);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:    you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:    You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:    See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:    limitations under the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:<ruau:component extensible="true" extends="ui:abstractDataGrid" support="PROTO" description="Represents a table containing dynamic rows of data with inline edit support">
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	<ruau:attribute name="initialRenderCount" type="Integer" default="200"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	<ruau:attribute name="batchRenderCount" type="Integer" default="100"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	<ruau:attribute name="summary" type="String"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	<ruau:registerevent name="updateRowAttributes" type="ui:updateGridRow"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	<ruau:handler name="init" value="{!this}" action="{!c.init}"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	<ruau:handler name="updateRowAttributes" action="{!c.handleUpdateRowAttrs}"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	<ruau:handler name="change" value="{!v.items}" action="{!c.handleItemsChange}" description="This lives here due to a bug in value objects."/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	<ruau:handler name="change" value="{!v.columns}" action="{!c.handleColumnsChange}"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	 ~ Default implementation is a table. Consider moving this logic to ui:dataTable 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	 ~ A dataTable is potentially a concrete of a dataGrid.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	<table class="{! v.class + ' ' + v.state + ' ' + v.mode }" onclick="{!c.handleClick}" summary="{!v.summary}">
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:		<thead>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:			<tr ruau:id="headerRow">
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:		</thead>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:		<tfoot ruau:id="tfoot"></tfoot>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:		<tbody ruau:id="tbody"></tbody>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:	</table>	
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.cmp:</ruau:component>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css: * You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css: * limitations under the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css:.THIS tbody, .THIS thead, .THIS tr, .THIS th, .THIS td  {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.css:	vertical-align: middle;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js: * You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js: * limitations under the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		var concrete 	= cmp.getConcreteComponent(),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:			table 		= this.superRender(),
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:			summaryRow;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		cmp._loadedOnce = items.length > 0;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		// Build the table body. 
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		// The DOM nodes are built synchronously, but the components are built asynchronously.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		tbody.appendChild(hlp.createTableBody(concrete));
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		// Attempt to create a summary row.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		//summaryRow = hlp.createSummaryRow(concrete);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		if (summaryRow) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:			tfoot.appendChild(summaryRow);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		return table;
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		var children = cmp._allChildrenCmps,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		// Asynchronously destroy leaf (cell) components.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGridRenderer.js:		for (var i = 0; i < children.length; i++) {
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    limitations under the License.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:<ruau:documentation>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:	<ruau:description>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:			A <code>ui:dataGrid</code> component represents rows of data with support for actionable buttons, sortable columns, and pagination. You can also insert new rows or remove existing ones.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:		This is an example setup of a <code>ui:dataGrid</code> component, which displays an Id and Name column.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:&lt;ruau:attribute name="data" type="List"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:&lt;ui:dataGrid ruau:id="myData" items="{!v.data}">
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:       &lt;ruau:set attribute="columns">
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:           &lt;ui:dataGridColumn label="Id" name="id"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:           &lt;ui:dataGridColumn label="Name" name="name"/>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:       &lt;/ruau:set>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:   &lt;/ui:dataGrid>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:		<p>This controller code sets the data for the columns above.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:cmp.set("v.data", [{id: 1, name: "name1"}, {id: 2, name: "name2"}, {id: 3, name: "name3"}, {id: 4, name: "name4"}]);
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:		<code>ui:dataGrid</code> can contain these components.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:			<li><code>ui:dataGridActionColumn</code> - A column of actionable buttons or links</li>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:			<li><code>ui:dataGridColumn</code> - A column of data</li>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:			<li><code>ui:dataGridSelectionColumn</code> - A column of checkboxes for individual and multiple row selection</li>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:			<li><code>ui:dataGridSummaryCell</code> - A value rendered in the table footer that computes a given column</li>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:	</ruau:description>	
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:		<ruau:example name="dataGridExample" ref="uiExamples:dataGridKitchenSink" label="Using ui:dataGrid">
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    	<p>This example shows an implementation of <code>ui:dataGrid</code>. The Id column is sorted by the data provider, <code>uiExamples:dataGridKitchenSinkDataProvider</code>.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    	Pagination is provided by the <code>ui:pagerNextPrevious</code> and <code>ui:pagerPageInfo</code> components.
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:    	<p>To trigger inline editing, click the <b>VIEW</b> button, edit any row data, and click <b>EDIT</b> to exit the editing view. To Insert a new row, enter a value in the index and row count fields, then click <b>Insert</b>.</p>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:	</ruau:example>
ruau/ruau-components/src/main/components/ui/dataGrid/dataGrid.ruauCOD:</ruau:documentation>
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:    you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:    You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:    See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:    limitations under the License.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:<ruau:component access="GLOBAL" support="GA" extends="ui:output" extensible="true" description="Displays richly-formatted text including tags such as paragraph, image, and hyperlink, as specified in the value attribute.">
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:	<ruau:attribute name="supportedTags" type="String" 
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:	    description="A list of supported HTML tag names separated by comma; the list is stored in the helper file of this component. Certain tags, such as &lt;script&gt;, are removed. The default value is used if it is not specified."/>
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:	<div class="{!v.class}" dir="{!v.dir}" ruau:id="div">
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:		<ruau:unescapedHTML value="{!v.value}" />
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.cmp:</ruau:component>
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js: * You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js: * limitations under the License.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js:        helper.validate(component);
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextRenderer.js:        helper.validate(component);
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css: * You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css: * limitations under the License.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichText.css:	font-style : italic;	
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js: * You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js: * limitations under the License.
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:    SUPPORTED_HTML_TAGS: ["form", "input", "button", "img", "div", "span", "ol", "li", "p", "ul", "a",
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:                          "pre", "big", "small", "tt", "code", "kbd", "samp", "var", "del", "ins", "cite", "q", 
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:                          "table", "tr", "td", "caption", "thead", "th", "tbody", "tfoot", "hr", 
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:                          "object", "param", "embed", "iframe"],
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:    removeEventHandlers: function(element) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        var attributes = element.attributes;
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        for (var i = 0; i < attributes.length; i++) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:            if ($A.util.isIE && !attributes[i].specified) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:            if (attributes[i].nodeName.substring(0, 2) == "on") { // event handler
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:                attributes[i].nodeValue = null;
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:    validate: function(component) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        var value = component.get("v.value");
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        if ($A.util.isUndefinedOrNull(value) || $A.util.isEmpty(value)) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        var supportedTags = component.get("v.supportedTags");
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        if (supportedTags) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:            supportedTags = supportedTags.replace(/ /g,'').toLowerCase().split(",");
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:            supportedTags = this.SUPPORTED_HTML_TAGS;
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        var root = CODument.createElement('div');
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        root.innerHTML = value;
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        this.validateElement(root, supportedTags);
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        var result = root.innerHTML;
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        if (result != value) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:            component.set("v.value", result);
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:    validateElement: function(element, supportedTags) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        if (supportedTags.indexOf(element.tagName.toLowerCase()) < 0) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:            //element.parentNode.removeChild(element);
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        this.removeEventHandlers(element);
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        var nodes = element.childNodes;
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        var len = nodes.length;
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:        for (var i = 0; i < len; i++) {
ruau/ruau-components/src/main/components/ui/outputRichText/outputRichTextHelper.js:            this.validateElement(nodes[i], supportedTags);
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:    you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:    You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:    Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:    See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:    limitations under the License.
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:<ruau:event type="COMPONENT" extends="ui:baseDOMEvent" support="GA">
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:    <ruau:attribute name="button" type="Integer" description="The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2."/>
ruau/ruau-components/src/main/components/ui/baseMouseEvent/baseMouseEvent.evt:</ruau:event>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    limitations under the License.
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:<ruau:documentation>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:	<ruau:description>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:			A <code>ui:inputText</code> component represents a text input field, which is rendered as an HTML <code>input</code> tag of type <code>text</code>.
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:			To render the output from a <code>ui:inputText</code> component, use the <code>ui:outputText</code> component.
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:		<p>This is a basic set up of a text field.</p>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:		<pre>&lt;ui:inputText ruau:id="expname" label="Expense Name" value="My Expense" required="true"/></pre>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:		<p>This example results in the following HTML.</p>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:		<pre>&lt;div class="uiInput uiInputText">
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:  &lt;label class="uiLabel-left uiLabel">
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    &lt;span>Expense Name&lt;/span>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    &lt;span class="required">*&lt;/span>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:  &lt;/label>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:  &lt;input required="required" class="uiInput uiInputText" aria-describedby placeholder type="text">
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:	</ruau:description>	
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:		<ruau:example name="inputTextExample" ref="uiExamples:inputTextExample" label="Using ui:inputText">
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:    	<p>This example shows a <code>ui:inputText</code> component with the default error handling, and a corresponding <code>ui:outputText</code> component for text rendering.</p>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:	</ruau:example>
ruau/ruau-components/src/main/components/ui/inputText/inputText.ruauCOD:</ruau:documentation>
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    limitations under the License.
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:<ruau:component extends="ui:input" extensible="true" support="GA" access="GLOBAL"
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    description="Represents an input field suitable for entering a single line of free-form text.">
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    <ruau:attribute name="type" type="String" default="text" description="The input type of the string. Default value is &quot;text&quot;."/>
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    <ruau:attribute name="placeholder" type="String" access="GLOBAL" default="" description="Text that is displayed when the field is empty, to prompt the user for a valid entry."/>
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    <ruau:attribute name="maxlength" type="Integer" access="GLOBAL" description="The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element."/>
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    <ruau:attribute name="size" type="Integer" access="GLOBAL" description="The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element."/>
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    <ruau:renderif isTrue="{!v.body.length == 0}">
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:       <input ruau:id="txt"
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:			  class="{!v.class}"
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:			  value="{!v.value}"
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:			  placeholder="{!v.placeholder}"
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:			  disabled="{!v.disabled}"
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:			  maxlength="{!v.maxlength}"
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:			  aria-describedby="{!v.ariaDescribedBy}"/>
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:       <ruau:set attribute="else">
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:       </ruau:set>
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:    </ruau:renderif>
ruau/ruau-components/src/main/components/ui/inputText/inputText.cmp:</ruau:component>
ruau/ruau-components/src/main/components/ui/inputText/inputText.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/components/ui/inputText/inputText.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/components/ui/inputText/inputText.css: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/components/ui/inputText/inputText.css: * You may obtain a copy of the License at
ruau/ruau-components/src/main/components/ui/inputText/inputText.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/components/ui/inputText/inputText.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/components/ui/inputText/inputText.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/components/ui/inputText/inputText.css: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/components/ui/inputText/inputText.css: * limitations under the License.
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java: * limitations under the License.
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:package configuration;
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:import org.ruauframework.adapter.ComponentLocationAdapter;
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:import org.ruauframework.components.RuueComponentsFiles;
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:import org.ruauframework.util.ServiceLoaderImpl.RuueConfiguration;
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:import org.ruauframework.util.ServiceLoaderImpl.Impl;
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:@RuueConfiguration
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:public class RuueComponentsConfig {
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:    public static ComponentLocationAdapter ruauComponentLocationAdapterImpl() {
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:        return new ComponentLocationAdapter.Impl(RuueComponentsFiles.Components.asFile(), null,
ruau/ruau-components/src/main/java/configuration/RuueComponentsConfig.java:                "components_ruau_components");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:import org.ruauframework.def.IncludeDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:public class IncludeDefModel extends DefModel{
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:	public String getIncludeDefName() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:        	@SuppressWarnings("unchecked")
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:				return include.getDef().getName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:			} catch (QuickFixException e) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:				e.printStackTrace();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:    public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:        json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:        json.writeMapEntry("defType", getDefType());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:        json.writeMapEntry("name", getName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:        json.writeMapEntry("fullname", getFullName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:        json.writeMapEntry("includeDefName", getIncludeDefName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/IncludeDefModel.java:        json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:import org.ruauframework.def.ComponentDescriptorProvider;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:import org.ruauframework.system.Annotations.Provider;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:public class TopicPanelProvider implements ComponentDescriptorProvider {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:        BaseComponent<?, ?> c = Ruue.getContextService().getCurrentContext().getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:        String topic = (String) c.getAttributes().getValue("topic");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:            if (topic.startsWith("api:")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:                return Ruue.getDefinitionService().getDefDescriptor("ruaudocs:apiTopic", ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:                DefDescriptor<ComponentDef> desc = Ruue.getDefinitionService().getDefDescriptor("ruaudocs:" + topic,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:                        ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicPanelProvider.java:        return Ruue.getDefinitionService().getDefDescriptor("ruaudocs:welcomeTopic", ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import java.util.Collections;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import java.util.Set;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.def.Definition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.def.EventDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:import com.google.common.collect.Maps;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:public class TopicsModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    private final List<Node> applications;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    private final List<Node> components;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    private final List<Node> interfaces;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    private final List<Node> events;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    private final List<Node> librariesList;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    private final List<Node> tests;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        applications = makeNodes("markup", ApplicationDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        components = makeNodes("markup", ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        interfaces = makeNodes("markup", InterfaceDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        events = makeNodes("markup", EventDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        librariesList = makeNodes("markup", LibraryDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        tests = makeNodes("js", TestSuiteDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    private <E extends Definition> List<Node> makeNodes(String prefix, Class<E> type) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        String sep = prefix.equals("markup") ? ":" : ".";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        List<Node> ret = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        Map<String, Node> namespaceNodes = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        DefDescriptor<E> matcher = definitionService.getDefDescriptor(String.format("%s://*%s*", prefix, sep), type);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        Set<DefDescriptor<E>> descriptors = definitionService.find(matcher);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            String namespace = desc.getNamespace();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            Node namespaceNode = namespaceNodes.get(desc.getNamespace());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            if (namespaceNode == null) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:                namespaceNode = new Node(namespace);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:                namespaceNodes.put(namespace, namespaceNode);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:                ret.add(namespaceNode);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            namespaceNode.addChild(new Node(String.format("%s%s%s", prefix.equals("markup") ? namespace : prefix
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:                    + "://" + namespace, sep, desc.getName())));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    public List<Node> getApplications() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        return applications;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    public List<Node> getLibraries() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        return this.librariesList;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    public List<Node> getInterfaces() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        return this.interfaces;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:    public static class Node implements JsonSerializable, Comparable<Node> {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        private final String title;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        private List<Node> children;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        public void addChild(Node child) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:                this.children = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            this.children.add(child);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            json.writeMapEntry("title", title);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            json.writeMapEntry("children", children);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:        public int compareTo(Node o) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            if (this.equals(o)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicsModel.java:            return title.compareTo(o.title);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import java.util.Collection;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.def.Definition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.def.ImportDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.def.IncludeDefRef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.system.RuueContext;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:public class TopicExampleModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:    private final List<DefModel> defs = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:    private final List<IncludeDefModel> includeDefs = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:    @SuppressWarnings("unchecked")
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:    public TopicExampleModel() throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:        String desc = (String) component.getAttributes().getValue("descriptor");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:        DefType defType = DefType.valueOf(((String) component.getAttributes().getValue("defType")).toUpperCase());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:        DefDescriptor<? extends RootDefinition> descriptor = (DefDescriptor<? extends RootDefinition>) Ruue
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:                .getDefinitionService().getDefDescriptor(desc, defType.getPrimaryInterface());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:        defs.add(new DefModel(descriptor));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:        if (def instanceof RootDefinition) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:                defs.add(new DefModel(dep));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:        // Add all imported libraries AND their source to the documentation.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:        if (def instanceof ComponentDef) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:                LibraryDef libraryDef = Ruue.getDefinitionService().getDefinition(importDef.getLibraryDescriptor());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:                if (ReferenceTreeModel.hasAccess(libraryDef)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:                    defs.add(new DefModel(libraryDef.getDescriptor()));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:                    // Treat the included js files specially because they load source differently:
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:                    for (IncludeDefRef includeDef : libraryDef.getIncludes()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:                        includeDefs.add(new IncludeDefModel(includeDef.getIncludeDescriptor()));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TopicExampleModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:import org.ruauframework.def.ComponentDescriptorProvider;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:import org.ruauframework.system.Annotations.Provider;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java: *  Provide component def for the example component to render its output
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:public class ExampleComponentProvider implements ComponentDescriptorProvider {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:        BaseComponent<?, ?> component = Ruue.getContextService().getCurrentContext().getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:        String realComponent = (String)component.getAttributes().getValue("def");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:        if (realComponent != null) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:            DefDescriptor<ComponentDef> desc = Ruue.getDefinitionService().getDefDescriptor(realComponent,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:                  ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExampleComponentProvider.java:        throw new RuueRuntimeException("Component " + realComponent + " not found");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:import java.util.ArrayList;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:import org.ruauframework.components.ui.MenuItem;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java: * Model for ruaudocs:demoMenu to demo ruau:menu
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:public class MenuTestModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:    public List<MenuItem> getData() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        ArrayList<MenuItem> a = new ArrayList<>(4);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m1 = new MenuItem("checkboxItem1", "San Francisco 49ers", false, "checkbox");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m1);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m2 = new MenuItem("checkboxItem2", "Seattle Seahawks", false, "checkbox");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m2);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m3 = new MenuItem("checkboxItem3", "St. Louis Rams", false, "checkbox");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m3);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m4 = new MenuItem("checkboxItem4", true, "Arizona Cardinals", true, "checkbox");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m4);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        return a;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        ArrayList<MenuItem> a = new ArrayList<>(3);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m1 = new MenuItem("Heavenly", true, "checkbox");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m1);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m2 = new MenuItem("North Star", false, "checkbox");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m2);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m3 = new MenuItem("Square Valley", true, "checkbox");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m3);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        return a;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:    public List<MenuItem> getPlaces() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        ArrayList<MenuItem> a = new ArrayList<>(4);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m1 = new MenuItem("actionItem1", false, "Bayern München", false, "action");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m1);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m2 = new MenuItem("actionItem2", true, "FC Barcelona", false, "action");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m2);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m3 = new MenuItem("actionItem3", false, "Inter Milan", false, "action");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m3);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m4 = new MenuItem("actionItem4", false, "Manchester United", false, "action");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m4);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        return a;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:    public List<MenuItem> getImages() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        ArrayList<MenuItem> a = new ArrayList<>(3);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m1 = new MenuItem("tiger1", "Tiger1", false, "action");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m1);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m2 = new MenuItem("tiger3", "Tiger2", false, "action");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m2);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        MenuItem m3 = new MenuItem("tiger4", "Tiger3", false, "action");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        a.add(m3);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/MenuTestModel.java:        return a;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:import java.util.ArrayList;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:import org.ruauframework.components.ui.InputOption;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java: * Used by /expressionTest/expressionFunction.cmp which expects the current return values.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:public class SizeModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        ArrayList<InputOption> a = new ArrayList<InputOption>(4);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        InputOption m1 = new InputOption("X-Small", "xs", false, "X-Small");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        a.add(m1);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        InputOption m2 = new InputOption("Small", "s", false, "Small");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        a.add(m2);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        InputOption m3 = new InputOption("Medium", "m", false, "Medium");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        a.add(m3);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        InputOption m4 = new InputOption("Large", "l", false, "Large");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        a.add(m4);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        InputOption m5 = new InputOption("X-Large", "xl", false, "X-Large");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        a.add(m5);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SizeModel.java:        return a;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:import java.util.HashMap;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:import java.util.LinkedList;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java: * Model for ruaudocs:demoLabel to demo ui:label
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:public class LabelTestModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:    public List<Object> getIterationItems() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:            Map<String, Object> theMap = new HashMap<String, Object>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:            theMap.put("label","label" + i );
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:            theMap.put("value", "value" + i);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/LabelTestModel.java:            menuItem.add(theMap);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:import java.util.*;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:import org.ruauframework.def.*;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:public class ExamplesModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:    List<Map<String, String>> examples = new ArrayList<Map<String, String>>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:    String message;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:    public ExamplesModel() throws Exception {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:        String name = (String)Ruue.getContextService().getCurrentContext().getCurrentComponent().getAttributes()
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                .getValue("name");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:        if (name != null && !name.isEmpty()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:            Set<DefDescriptor<?>> descriptors = definitionService.find(new DescriptorFilter("markup://" + name, DefType.DOCUMENTATION.name()));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                    case DOCUMENTATION:
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                        Map<String, String> m;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                            DocumentationDef docDef = (DocumentationDef)descriptor.getDef();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                            Collection<ExampleDef> exampleDefs = docDef.getExampleDefs();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                            for (ExampleDef example : exampleDefs) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                                m = new TreeMap<String, String>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                                m.put("label", example.getLabel());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                                m.put("description", example.getDescription());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                                m.put("ref", example.getRef().getDescriptorName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                                examples.add(m);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                        } catch (Exception e) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                            // only display errors in loading DocDefs in dev mode
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                            if (Ruue.getContextService().getCurrentContext().isDevMode()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                                m = new TreeMap<String, String>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                                m.put("descriptor", descriptor.getDescriptorName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                                examples.add(m);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                        break;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                    default: // not including other types in scan
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                if (examples.size() == 0) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                    message = "This component or application has no examples.";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:                message = "Example not available";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:    public List<Map<String, String>> getExamples() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:        return examples;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:    public String getMessage() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ExamplesModel.java:        return message;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:import org.ruauframework.def.ComponentDescriptorProvider;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:import org.ruauframework.system.Annotations.Provider;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:public class DemoPanelProvider implements ComponentDescriptorProvider {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:        BaseComponent<?, ?> c = Ruue.getContextService().getCurrentContext().getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:        String demo = (String)c.getAttributes().getValue("demo");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:            DefDescriptor<ComponentDef> desc = Ruue.getDefinitionService().getDefDescriptor("ruaudocs:" + demo,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:                    ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DemoPanelProvider.java:        return Ruue.getDefinitionService().getDefDescriptor("ruaudocs:demos", ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import java.util.Collections;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import java.util.Set;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.adapter.ConfigAdapter;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.components.ui.TreeNode;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.def.Definition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.def.EventDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:import com.google.common.collect.Maps;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:public class ReferenceTreeModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:    public static boolean hasAccess(Definition def) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        MasterDefRegistry registry = definitionService.getDefRegistry();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        return registry.hasAccess(getReferencingDescriptor(), def) == null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:    public static void assertAccess(Definition def) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        MasterDefRegistry registry = definitionService.getDefRegistry();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        registry.assertAccess(getReferencingDescriptor(), def);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:    public static boolean isRunningInPrivilegedNamespace() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        String ns = Ruue.getConfigAdapter().getDefaultNamespace();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        return ns != null ? Ruue.getConfigAdapter().isPrivilegedNamespace(ns) : true;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:    private static final <E extends Definition> List<TreeNode> makeTreeNodes(String prefix, Class<E> type)
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        String sep = prefix.equals("markup") ? ":" : ".";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        List<TreeNode> ret = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        Map<String, TreeNode> namespaceTreeNodes = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        DefDescriptor<E> matcher = definitionService.getDefDescriptor(String.format("%s://*%s*", prefix, sep), type);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        Set<DefDescriptor<E>> descriptors = definitionService.find(matcher);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        ConfigAdapter configAdapter = Ruue.getConfigAdapter();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                // Getting null here after commit 2037c31ddc81eae3edaf6ddd5bcfd0009fefe1bd. This causes a NPE and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                // breaks the left nav of the reference tab.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            String namespace = desc.getNamespace();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            if (configAdapter.isDocumentedNamespace(namespace)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                    if (hasAccess(def)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                        TreeNode namespaceTreeNode = namespaceTreeNodes.get(desc.getNamespace());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                        if (namespaceTreeNode == null) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                            namespaceTreeNode = new TreeNode(null, namespace);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                            namespaceTreeNodes.put(namespace, namespaceTreeNode);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                            ret.add(namespaceTreeNode);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                        String href = String.format("#reference?descriptor=%s%s%s", namespace, sep, desc.getName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                        href += "&defType=" + desc.getDefType().name().toLowerCase();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                        // Preload the def
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                        } catch (Throwable t) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                            // ignore problems, we were only trying to preload
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                        namespaceTreeNode.addChild(new TreeNode(href, desc.getName()));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                } catch (Exception x) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                    // Skip any invalid def
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                    // System.out.printf("\n*** ReferenceTreeModel.makeTreeNodes() failed to load component '%s': %s\n",
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            tree = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            tree.add(new TreeNode("#reference", "Overview"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            tree.add(new TreeNode(null, "Applications", makeTreeNodes("markup", ApplicationDef.class), false));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            tree.add(new TreeNode(null, "Components", makeTreeNodes("markup", ComponentDef.class), false));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            tree.add(new TreeNode(null, "Interfaces", makeTreeNodes("markup", InterfaceDef.class), false));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            tree.add(new TreeNode(null, "Events", makeTreeNodes("markup", EventDef.class), false));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            tree.add(new TreeNode(null, "Libraries", makeTreeNodes("markup", LibraryDef.class), false));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            if (isRunningInPrivilegedNamespace()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                tree.add(new TreeNode(null, "Tests", makeTreeNodes("js", TestSuiteDef.class), false));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            tree.add(new TreeNode(null, "JavaScript API", new ApiContentsModel().getNodes(), false));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:             * Javadoc not publicly accessible tree.add(new TreeNode( "http://javadoc.ruauframework.org/", "Java API"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:    private static DefDescriptor<ApplicationDef> getReferencingDescriptor() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        String defaultNamespace = Ruue.getConfigAdapter().getDefaultNamespace();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        if (defaultNamespace == null) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:            defaultNamespace = "ruau";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:        return definitionService.getDefDescriptor(String.format("%s:application", defaultNamespace),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:                ApplicationDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ReferenceTreeModel.java:    private List<TreeNode> tree;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import java.io.InputStreamReader;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import java.io.Reader;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import java.util.ArrayList;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import java.util.Collections;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import java.util.Comparator;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import java.util.Set;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import org.apache.commons.logging.Log;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import org.apache.commons.logging.LogFactory;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import org.ruauframework.components.ui.TreeNode;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import org.ruauframework.util.json.JsonStreamReader;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import org.ruauframework.util.resource.ResourceLoader;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:import com.google.common.collect.Maps;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:public class ApiContentsModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    private static final Log log = LogFactory.getLog(ApiContentsModel.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    private static Map<String, Map<String, Object>> symbols;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    private static final ResourceLoader resourceLoader = Ruue.getConfigAdapter().getResourceLoader();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    private static final Comparator<Map<String, Object>> SYMBOL_COMPARATOR = new Comparator<Map<String, Object>>() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:        public int compare(Map<String, Object> o1, Map<String, Object> o2) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:            return ((String) o1.get("name")).compareTo((String) o2.get("name"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    private final List<TreeNode> nodes;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    static {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:        } catch (Throwable t) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:            log.error(t.getClass() + ": " + t.getMessage(), t);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    public static Map<String, Map<String, Object>> getSymbols() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    public static Map<String, Object> getSymbol(String name) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:        return symbols.get(name);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    @SuppressWarnings("unchecked")
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    public static synchronized void refreshSymbols() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:        Reader reader = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                reader = new InputStreamReader(resourceLoader.getResourceAsStream("jsdoc/symbolSet.json"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                JsonStreamReader jsonReader = new JsonStreamReader(reader);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                jsonReader.disableLengthLimitsBecauseIAmStreamingAndMyMemoryUseIsNotProportionalToTheStreamLength();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                jsonReader.next();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                List<Object> readSymbols = jsonReader.getList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                symbols = Maps.newTreeMap();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                List<Map<String, Object>> classes = new ArrayList<Map<String, Object>>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                for (Object symbol : readSymbols) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    Map<String, Object> map = (Map<String, Object>) symbol;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    if (!map.containsKey("access")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                        map.put("access", "public");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    if ("class".equalsIgnoreCase((String) map.get("kind"))) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                        classes.add(map);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                        map.put("methods", new ArrayList<Map<String, Object>>());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                        if (!map.containsKey("properties")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                            map.put("properties", new ArrayList<Map<String, Object>>());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    } else if ("function".equalsIgnoreCase((String) map.get("kind"))) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                        for (Map<String, Object> aClass : classes) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                            if (map.get("memberof") != null && map.get("memberof").equals(aClass.get("longname"))) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                                ((List<Map<String, Object>>) aClass.get("methods")).add(map);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    } else if ("member".equalsIgnoreCase((String) map.get("kind")) && !map.containsKey("undocumented")
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                            && map.get("access").equals("public")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                        for (Map<String, Object> aClass : classes) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                            if (map.get("memberof") != null && map.get("memberof").equals(aClass.get("longname"))) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                                ((List<Map<String, Object>>) aClass.get("properties")).add(map);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                for (Object symbol : readSymbols) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    Map<String, Object> map = (Map<String, Object>) symbol;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    List<Map<String, Object>> l = (List<Map<String, Object>>) map.get("methods");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    l = (List<Map<String, Object>>) map.get("properties");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    String name = (String) map.get("name");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    if (name != null) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                        symbols.put(name, map);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:            } finally {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                if (reader != null) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    reader.close();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:        } catch (IOException e) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:            throw new RuueRuntimeException(e);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:        Map<String, Map<String, Object>> theSymbols = getSymbols();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:        nodes = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:        // List<Map<String,Object>> classes = new ArrayList<Map<String,Object>>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:        Set<String> types = Sets.newHashSet();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:            for (Map<String, Object> symbol : theSymbols.values()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                String name = (String) symbol.get("name");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                if ("class".equalsIgnoreCase(type)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    nodes.add(new TreeNode("#reference?topic=api:" + name, name));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:                    types.add(type);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiContentsModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import java.util.Collections;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import java.util.Map.Entry;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import java.util.Set;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.def.Definition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.system.RuueContext;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:import com.google.common.collect.Maps;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:public class DefOverviewModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:    private final List<Map<String, Object>> dependencies = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:        String desc = (String) component.getAttributes().getValue("descriptor");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:        DefType defType = DefType.valueOf(((String) component.getAttributes().getValue("defType")).toUpperCase());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:		DefDescriptor<?> descriptor = definitionService.getDefDescriptor(desc, defType.getPrimaryInterface());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:		ReferenceTreeModel.assertAccess(def);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:        Map<DefType, List<DefModel>> depsMap = Maps.newEnumMap(DefType.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:        Set<DefDescriptor<?>> deps = Sets.newHashSet();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:        def.appendDependencies(deps);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:            List<DefModel> depsList = depsMap.get(type);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:                depsList = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:                depsMap.put(type, depsList);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:            depsList.add(new DefModel(dep));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:        for (Entry<DefType, List<DefModel>> entry : depsMap.entrySet()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:            List<DefModel> list = entry.getValue();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:            Map<String, Object> group = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:            group.put("type", RuueTextUtil.initCap(entry.getKey().toString().toLowerCase()));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:            dependencies.add(group);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefOverviewModel.java:    public List<Map<String, Object>> getDependencies() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import java.util.Collections;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import java.util.Map.Entry;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import java.util.Set;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.def.Definition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.system.RuueContext;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:import com.google.common.collect.Maps;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:public class DefDependenciesModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:    private final List<Map<String, Object>> dependencies = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        String desc = (String) component.getAttributes().getValue("descriptor");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        DefType defType = DefType.valueOf(((String) component.getAttributes().getValue("defType")).toUpperCase());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        DefDescriptor<?> descriptor = Ruue.getDefinitionService().getDefDescriptor(desc, defType.getPrimaryInterface());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        ReferenceTreeModel.assertAccess(def);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        Map<DefType, List<DefModel>> depsMap = Maps.newEnumMap(DefType.class);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        Set<DefDescriptor<?>> deps = Sets.newHashSet();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        def.appendDependencies(deps);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        	if (ReferenceTreeModel.hasAccess(dep.getDef())) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:	            List<DefModel> depsList = depsMap.get(type);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:	                depsList = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:	                depsMap.put(type, depsList);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:	            depsList.add(new DefModel(dep));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:        for (Entry<DefType, List<DefModel>> entry : depsMap.entrySet()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:            List<DefModel> list = entry.getValue();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:            Map<String, Object> group = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:            group.put("type", RuueTextUtil.initCap(entry.getKey().toString().toLowerCase()));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:            dependencies.add(group);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefDependenciesModel.java:    public List<Map<String, Object>> getDependencies() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import org.ruauframework.instance.Component;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import org.ruauframework.system.Annotations.Controller;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import org.ruauframework.system.Annotations.Key;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import com.google.common.base.Preconditions;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:import com.google.common.collect.Maps;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:public class DocsController {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:    public static Component getTopic(@Key("topic") String topic) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:        Map<String, Object> attributes = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:        attributes.put("topic", topic);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:        return Ruue.getInstanceService().getInstance("ruaudocs:topicPanel", ComponentDef.class, attributes);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:    public static Component getDemo(@Key("demo") String demo) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:        Map<String, Object> attributes = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:        attributes.put("demo", demo);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:        return Ruue.getInstanceService().getInstance("ruaudocs:demoPanel", ComponentDef.class, attributes);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:    public static Component getReference(@Key("topic") String topic, @Key("descriptor") String descriptor,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:        Map<String, Object> attributes = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:            // Show an overview topic for orientation. It's similar to topics in
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:            // the Help tab and is in the ruaudocs
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:            // namespace.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:            return getTopic("referenceTabTopic");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:            DefType dt = DefType.valueOf(defType.toUpperCase());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:            attributes.put("descriptor", descriptor);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:            attributes.put("defType", dt.name());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocsController.java:            return Ruue.getInstanceService().getInstance("ruaudocs:def", ComponentDef.class, attributes);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:import org.ruauframework.def.DocumentationDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:public class DocumentationDefModel implements JsonSerializable {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:	private final DocumentationDef docDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:	DocumentationDefModel(DocumentationDef docDef) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:		return this.docDef.getDescriptor().getQualifiedName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:	public boolean getHasExamples() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:		return !this.docDef.getExampleDefs().isEmpty();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:	public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:		json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:		json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:		json.writeMapEntry("descriptions", getDescriptions());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:		json.writeMapEntry("hasExamples", getHasExamples());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DocumentationDefModel.java:		json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:import java.util.ArrayList;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:import org.ruauframework.components.ui.InputOption;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java: * Used by /expressionTest/expressionFunction.cmp which expects the current return values.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:public class TodoModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:    private List<InputOption> items;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        items = new ArrayList<InputOption>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        InputOption m1 = new InputOption("Download Ruue source code", "first", false, "X-Small");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        items.add(m1);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        InputOption m2 = new InputOption("Make sure you have JDK 1.6 and Maven", "second", false, "Small");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        items.add(m2);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        InputOption m3 = new InputOption("Create your first project", "third", false, "Medium");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        items.add(m3);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        InputOption m4 = new InputOption("Build and run", "fourth", false, "Large");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        items.add(m4);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        InputOption m5 = new InputOption("Give yourself a pat on the back!", "fifth", false, "X-Large");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:        items.add(m5);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TodoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:import java.util.HashMap;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:import java.util.LinkedList;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java: * for ruau:iteration docs modified from TestIterationModel.java
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:public class SampleIterationModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:    private final List<Object> data;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:    public SampleIterationModel() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:        data = new LinkedList<Object>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:            Map<String, Object> theMap = new HashMap<String, Object>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:            char c = (char) ('a' + i);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:            theMap.put("letters", "" + c + c + c);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:            data.add(theMap);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:    public List<Object> getData() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/SampleIterationModel.java:        return data;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.def.Definition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.def.IncludeDefRef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.system.RuueContext;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.system.Source;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:public class EditorPanelModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:    private final String code;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:    private final String format;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:    public EditorPanelModel() throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:        String desc = (String) component.getAttributes().getValue("descriptor");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:        DefType defType = DefType.valueOf(((String) component.getAttributes().getValue("defType")).toUpperCase());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            // Nominal case:
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            descriptor = Ruue.getDefinitionService().getDefDescriptor(desc, defType.getPrimaryInterface());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            // Include case: since included .js files load source differently we have to manually
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            // look up the include defs. If there is a usecase for looking up the defs in a non-doc 
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            // setting, a lookup method should be added to the includeDef class.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            String name = (String) component.getAttributes().getValue("includeDefName");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            DefDescriptor<? extends LibraryDef> library = Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:                desc, LibraryDef.class
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            for (IncludeDefRef includeDef : library.getDef().getIncludes()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:               if (includeDef.getName().equals(name)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            format = String.valueOf(source.getFormat());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:            format = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:     * @return Returns the format.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:    public String getFormat() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/EditorPanelModel.java:        return this.format;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.text.ParseException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.text.SimpleDateFormat;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.ArrayList;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.Calendar;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.Collections;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.Date;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.HashMap;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.LinkedHashMap;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.Locale;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import java.util.TimeZone;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.components.ui.InputOption;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.util.date.DateOnly;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.util.date.DateService;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.util.date.DateServiceImpl;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:import com.google.common.collect.Maps;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:public class demoModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static ArrayList<InputOption> inputOptions = new ArrayList<InputOption>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static ArrayList<InputOption> moreInputOptions = new ArrayList<InputOption>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static HashMap<String, ArrayList<InputOption>> optionMap = new LinkedHashMap<String, ArrayList<InputOption>>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static List<Item> items;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static List<Item> itemsEmpty = new ArrayList<Item>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static List<Item> itemsLarge; 
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static List<LoadColumn> columns;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static List<LoadColumn> noColumns = Collections.emptyList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static List<LoadColumn> maxColumns;   
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static List<ColumnsSelected> columnsSelected;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        inputOptions.add(new InputOption("Option1", "Opt1", false, "option1"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        inputOptions.add(new InputOption("Option2", "Opt2", true, "option2"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        inputOptions.add(new InputOption("Option3", "Opt3", false, "option3"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        inputOptions.add(new InputOption("Option4", "Opt4", false, "option4", true));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        moreInputOptions.add(new InputOption("Option4", "Opt4", false, "val4"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        moreInputOptions.add(new InputOption("Option5", "Opt5", false, "val5"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        moreInputOptions.add(new InputOption("Option6", "Opt6", false, "val6"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            optionMap.put(i.getValue(), getSubCategory(i.getValue()));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    private static ArrayList<InputOption> getSubCategory(String option) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        ArrayList<InputOption> categoryOption = new ArrayList<InputOption>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        if (option.equals("option1")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            categoryOption.add(new InputOption("", "", false, "opt1-sub1"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            categoryOption.add(new InputOption("", "", false, "opt1-sub2"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            categoryOption.add(new InputOption("", "", false, "opt1-sub3"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        } else if (option.equals("option2")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            categoryOption.add(new InputOption("", "", false, "opt2-sub1"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        } else if (option.equals("option3")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            categoryOption.add(new InputOption("", "", false, "opt3-sub1"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            categoryOption.add(new InputOption("", "", false, "opt3-sub2"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return categoryOption;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	columns = new ArrayList<LoadColumn>(5);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	columns.add(new LoadColumn("Hidden Column", "HiddenColumn", false));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    		columns.add(new LoadColumn("Column " + i, "Column" + i));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	maxColumns = new ArrayList<LoadColumn>(20);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    		maxColumns.add(new LoadColumn("Column " + i, "Column" + i));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	columnsSelected = new ArrayList<ColumnsSelected>(1);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	columnsSelected.add(new ColumnsSelected("Column2", false));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    static {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	items = new ArrayList<Item>(10);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            items.add(new Item("hello world" + i, "id" + i));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	itemsLarge = new ArrayList<Item>(50);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    		itemsLarge.add(new Item("some one " + i, "id" + i));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public static class Item implements JsonSerializable {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        private String label;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        private String value;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public Item(String label, String value) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            this.label = label;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            this.value = value;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public String getLabel() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            return this.label;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public String getValue() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            return this.value;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEntry("label", this.label);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEntry("value", this.value);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public static class LoadColumn implements JsonSerializable {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        private String label;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        private String fieldName;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        private Boolean isSortable;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public LoadColumn(String label, String fieldName, Boolean isSortable) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            this.label = label;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            this.fieldName = fieldName;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            this.isSortable = isSortable;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public LoadColumn(String label, String fieldName) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            this.label = label;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            this.fieldName = fieldName;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            this.isSortable = true;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public String getLabel() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:			return label;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:		public String getFieldName() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:			return fieldName;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:		public Boolean getIsSortable() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:			return isSortable;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEntry("label", this.label);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEntry("fieldName", this.fieldName);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEntry("isSortable", this.isSortable);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public static class ColumnsSelected implements JsonSerializable {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        private String fieldName;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        private Boolean ascending;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public ColumnsSelected(String fieldName, Boolean ascending) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:			this.fieldName = fieldName;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:			this.ascending = ascending;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:		public String getFieldName() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:			return fieldName;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:		public Boolean getAscending() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:			return ascending;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEntry("fieldName", this.fieldName);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEntry("ascending", this.ascending);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public List<ColumnsSelected>  getDefaultOrderByList() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getDateTimeISOString() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT"), Locale.US);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        c.set(Calendar.MILLISECOND, 0);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        DateService dateService = DateServiceImpl.get();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return dateService.getDateTimeISO8601Converter().format(c.getTime());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Long getTimestamp() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Date d = new Date(1095957000000L);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Calendar getCalendar() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Calendar c = Calendar.getInstance();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        c.set(Calendar.MILLISECOND, 0);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Calendar getCalendarLater() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Calendar c = Calendar.getInstance();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        c.set(Calendar.MILLISECOND, 0);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Calendar getCalendarWithTimeZone() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Calendar c = Calendar.getInstance();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        c.set(Calendar.MILLISECOND, 0);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Calendar getCalendarWithTimeZoneLater() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Calendar c = Calendar.getInstance();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        c.set(Calendar.MILLISECOND, 0);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Date getDate() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Date d = new Date(1095957000000L);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Date getDateLater() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Date d = new Date(1095957000001L);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    // TODO W-967767 can't return array because of this bug
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Object getStringArray() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        ArrayList<String> sl = new ArrayList<String>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        sl.add("one");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        sl.add("two");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        sl.add("three");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public ArrayList<InputOption> getNoOptionsSel() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        //String label, String name, boolean selected, String value
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return Lists.newArrayList(
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Tiger", "Tiger", false, "Tiger"),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Lion", "Lion", false, "Lion"),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Bear", "Bear", false, "Bear")
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public ArrayList<InputOption>  getSecondOptionSel() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return Lists.newArrayList(
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Tiger", "Tiger", false, "Tiger"),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Bear", "Bear", false, "Bear")
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public ArrayList<InputOption>  getNoOptionsSelWithNone() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return Lists.newArrayList(
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("None", "None", false, ""),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Tiger", "Tiger", false, "Tiger"),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Lion", "Lion", false, "Lion"),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Bear", "Bear", false, "Bear")
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public ArrayList<InputOption>  getThirdOptionSelWithNone() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return Lists.newArrayList(
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("None", "None", false, ""),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Tiger", "Tiger", false, "Tiger"),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Bear", "Bear", false, "Bear")
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public ArrayList<InputOption>  getThirdOptionSel() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return Lists.newArrayList(
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Tiger", "Tiger", false, "Tiger"),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Lion", "Lion", false, "Lion"),
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:            new InputOption("Bear", "Bear", true, "Bear")
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        List<List<String>> listofList = new ArrayList<List<String>>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        ArrayList<String> l1 = new ArrayList<String>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        l1.add("one");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        l1.add("two");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        l1.add("three");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        ArrayList<String> l2 = new ArrayList<String>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        l2.add("un");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        l2.add("do");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        l2.add("tres");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        ArrayList<String> l3 = new ArrayList<String>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        l3.add("ek");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        l3.add("do");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        l3.add("theen");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        listofList.add(l1);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        listofList.add(l2);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        listofList.add(l3);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    // TODO W-967767 can't return array because of this bug
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Object getIntegerArray() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        ArrayList<Integer> il = new ArrayList<Integer>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        il.add(123);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        il.add(999);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        il.add(666);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Boolean getBooleanFalse() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Boolean getBooleanTrue() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public ArrayList<Boolean> getBooleanList() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        ArrayList<Boolean> bl = new ArrayList<Boolean>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        bl.add(true);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        bl.add(false);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        bl.add(true);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public List<Boolean> getBooleanListNull() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Number getNegativeInfinity() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Number getNaN() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return Double.NaN;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Object getEmptyArray() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Object getStringMultiArray() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return new String[][][] { { { "one" }, { "two", "three" } }, {}, { { "a", "b" }, {} } };
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public DateOnly getDateOnly() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        DateOnly d = new DateOnly(1095957000000L);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Date getDateTime() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        // May 10, 2012, 10:45 PM GMT
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Date d = new Date(1336689900000L);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Boolean getTrue() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Boolean getFalse() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Boolean getChecked() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return getDecimal();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getDateString() throws ParseException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return dateFormat.format(dateFormat.parse("1999-5-30"));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public double getDecimal() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getEmail() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "ruau@salesforce.com";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Boolean getOption() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getSearch() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "password";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public ArrayList<InputOption> getSelect() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public boolean getSelectOption() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public ArrayList<InputOption> getSelectOptions() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public ArrayList<InputOption> getMoreSelectOption() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getTextAreaText() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "Some text from server\nspecially created to fit in....\n\n\na textarea!";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getTextWithScriptTag() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "<big>Some text from server with script tag</big><script>Script</script>";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getTextWithStyleTag() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "<big>Some text from server with style tag</big><style>Style</style>";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getTextWithBlacklistedTags() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "Some text from server with blacklisted tags<script>Script</script><style></style>";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getTextWithBlacklistedNestedTags() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "Some text from server with nested blacklisted tags<script><script></script></script><script><style></style></script>";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getTextWithBlacklistedChildrenTags() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "Some text from server with nested blacklisted tags in div<div><script></script><script><style></style></script></div>";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getTextWithWhitelistedChildrenTags() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "Some text from server with nested input in balcklisted tags<script><input></input></script>";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "Some text from server with input tag with event<input type=\"button\" value=\"click\" onclick=\"alert('hello')\" />";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "Some text from server with input tags with events<input type=\"button\" value=\"click\" onclick=\"alert('hello')\" /><input type=\"text\" onclick=\"alert('click')\" onfocus=\"alert('focus')\" />";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        return "http://www.salesforce.com";
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public String getSelectValue() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public Map<String,String> getMap(){
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        Map<String,String> items= Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        items.put("fruit", "apple");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:        items.put("animal", "bear");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	String dataType = (String)Ruue.getContextService().getCurrentContext().getCurrentComponent().getAttributes().getValue("dataType");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	if (dataType == null) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	} else if (dataType.equals("largeList")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    		return itemsLarge;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	} else if (dataType.equals("emptyList")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    public List<LoadColumn> getColumns() throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	String dataType = (String)Ruue.getContextService().getCurrentContext().getCurrentComponent().getAttributes().getValue("dataType");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	if (dataType == null) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	} else if (dataType.equals("largeList")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    		return maxColumns;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/demoModel.java:    	} else if (dataType.equals("emptyList")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import java.util.Collection;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.Definition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.DocumentationDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.EventDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.EventHandlerDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.ImportDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.IncludeDefRef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.system.RuueContext;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:public class ComponentDefModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        String desc = (String) component.getAttributes().getValue("descriptor");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        DefType defType = DefType.valueOf(((String) component.getAttributes().getValue("defType")).toUpperCase());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        descriptor = definitionService.getDefDescriptor(desc, defType.getPrimaryInterface());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        ReferenceTreeModel.assertAccess(definition);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        if (definition instanceof RootDefinition) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            for (AttributeDef attribute : rootDef.getAttributeDefs().values()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                if (ReferenceTreeModel.hasAccess(attribute)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                    attributes.add(new AttributeModel(attribute));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            DocumentationDef docDef = rootDef.getDocumentationDef();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            doc = docDef != null ? new DocumentationDefModel(docDef) : null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            if (definition instanceof BaseComponentDef) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                BaseComponentDef cmpDef = (BaseComponentDef) definition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                for (RegisterEventDef reg : cmpDef.getRegisterEventDefs().values()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                    if (ReferenceTreeModel.hasAccess(reg)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                        events.add(new AttributeModel(reg));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                for (EventHandlerDef handler : cmpDef.getHandlerDefs()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                    handledEvents.add(new AttributeModel(handler));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                for (DefDescriptor<InterfaceDef> intf : cmpDef.getInterfaces()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                    if (ReferenceTreeModel.hasAccess(intf.getDef())) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                        interfaces.add(intf.getNamespace() + ":" + intf.getName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                    theSuper = superDesc.getNamespace() + ":" + superDesc.getName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                isAbstract = cmpDef.isAbstract();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            } else if (definition instanceof EventDef) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                    theSuper = superDesc.getNamespace() + ":" + superDesc.getName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                type = eventDef.getEventType().name();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                isAbstract = false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            } else if (definition instanceof LibraryDef) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                isExtensible = false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                isAbstract = false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                isAbstract = false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            support = rootDef.getSupport().name();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            if (definition instanceof RootDefinition) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                    // we already surface the documentation--users don't need to see the source for it.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                        if (ReferenceTreeModel.hasAccess(def)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                            defs.add(new DefModel(dep));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            // Add all imported libraries AND their source to the documentation.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            if (definition instanceof ComponentDef) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                    LibraryDef libraryDef = Ruue.getDefinitionService().getDefinition(importDef.getLibraryDescriptor());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                    if (ReferenceTreeModel.hasAccess(libraryDef)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                        defs.add(new DefModel(libraryDef.getDescriptor()));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                        // Treat the included js files specially because they load source differently:
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                        for (IncludeDefRef includeDef : libraryDef.getIncludes()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                            includeDefs.add(new IncludeDefModel(includeDef.getIncludeDescriptor()));
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            isExtensible = false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            isAbstract = false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    public String getNamespace() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        return descriptor.getNamespace();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    public String getName() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        return descriptor.getName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    public List<String> getInterfaces() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        return this.interfaces;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        return descriptor.getDefType().name().toLowerCase();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        return attributes;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    public List<AttributeModel> getHandledEvents() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        return handledEvents;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    public boolean isExtensible() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    public boolean isAbstract() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        return isAbstract;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    public DocumentationDefModel getDocumentation() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    public class AttributeModel implements JsonSerializable {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private final String name;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private final String description;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private final String type;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private final boolean required;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private final String defaultValue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private final String parentName;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private final String parentDefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private AttributeModel(AttributeDef def) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.name = def.getName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.type = def.getTypeDef().getName().toLowerCase();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            if (def.getDefaultValue() != null) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                this.defaultValue = def.getDefaultValue().getValue().toString();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                this.defaultValue = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            DefDescriptor<?> parentDesc = def.getParentDescriptor();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            if (parentDesc == null || parentDesc.equals(ComponentDefModel.this.descriptor)) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                this.parentName = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                this.parentDefType = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                this.parentName = parentDesc.getNamespace() + ":" + parentDesc.getName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                this.parentDefType = parentDesc.getDefType().name().toLowerCase();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private AttributeModel(RegisterEventDef def) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.name = def.getAttributeName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.type = def.getDescriptor().getNamespace() + ":" + def.getDescriptor().getName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.required = false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.defaultValue = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.parentName = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.parentDefType = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        private AttributeModel(EventHandlerDef def) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:                this.type = def.getDescriptor().getNamespace() + ":" + def.getDescriptor().getName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.required = false;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.defaultValue = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.name = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.parentName = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            this.parentDefType = null;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            json.writeMapEntry("name", name);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            json.writeMapEntry("description", description);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            json.writeMapEntry("type", type);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            json.writeMapEntry("required", required);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            json.writeMapEntry("defaultValue", defaultValue);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            json.writeMapEntry("parentName", parentName);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            json.writeMapEntry("parentDefType", parentDefType);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        public String getName() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            return name;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        public boolean isRequired() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        public String getDefaultValue() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            return defaultValue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        public String getParentName() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            return parentName;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:        public String getParentDefType() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:            return parentDefType;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final DefDescriptor<?> descriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final Definition definition;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final List<AttributeModel> attributes = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final List<AttributeModel> handledEvents = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final List<AttributeModel> events = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final String support;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final String theSuper;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final String type;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final boolean isExtensible;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final boolean isAbstract;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final List<String> interfaces = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final List<DefModel> defs = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final List<IncludeDefModel> includeDefs = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ComponentDefModel.java:    private final DocumentationDefModel doc;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:import java.util.*;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java: * for iterationTest components
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:public class TableModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:    private final List<Object> data;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:    public TableModel() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:        data = new ArrayList<Object>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            Map<String, Object> dora = new HashMap<String, Object>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            char c = (char)('a' + i);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            dora.put("stringy", "" + c + c + c);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            dora.put("whatever", "hooray for everybody");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            data.add(dora);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            dora = new HashMap<String, Object>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            c = (char)('A' + i);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            dora.put("stringy", "" + c + c + c + c + c);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            dora.put("whatever", "boo for nobody");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:    public List<Object> getData() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:        return data;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:    public List<List<String>> getPlayerData() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:        List<List<String>> team = new ArrayList<List<String>>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:        String[][] s = { { "Héctor Sánchez", "23", "Catcher", "2012" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Buster Posey", "25", "Catcher/First Baseman", "2012,2010" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Brandon Belt", " 24", "First baseman", "2012" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Aubrey Huff", "35", "First Basemen", "2012,2010" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Pablo Sandavol", "26", "Third baseman", "2012,2010" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Marco Scutaro", "37", "Second baseman", "2012" }, { "Ángel Pagán", "31", "Outfielder", "2012" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Hunter Pence", "29", "Outfielder", "2012" }, { "Barry Zito", "34", "Starting Pitcher", "2012" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Brian Wilson", "30", "Closing Pitcher", "2010" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Ryan Vogelsong", "35", "Starting Pitcher", "2012" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Guillermo Mota", "39", "Relief Pitcher", "2012,2010" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Tim Lincecum", "28", "Starting Pitcher", "2012,2010" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Santiago Casilla", "32", "Relief Pitcher", "2012,2010" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Matt Cain", "28", "Starting Pitcher", "2012,2010" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Madison Bumgarner", "23", "Starting Pitcher", "2012,2010" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Brandon Crawford", "25", "Short Stop", "2012" }, { "Melky Cabrera", "28", "OutFielder", "2009" },
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                { "Ryan Theriot", "32", "Short Stop", "2011, 2012" }, };
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            ArrayList<String> player = new ArrayList<String>();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:                player.add(field);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:            team.add(player);
ruau/ruau-components/src/main/java/org/ruauframework/CODs/TableModel.java:        return team;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:import org.ruauframework.system.RuueContext;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:public class ApiTopicModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:    private String title;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:    private final Map<String, Object> symbol;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:        title = (String) component.getAttributes().getValue("topic");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:    public Map<String, Object> getSymbol() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/ApiTopicModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:import org.ruauframework.def.HtmlTag;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:public class HtmlTagsModel {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:    private final List<String> allowedTags = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:    private final List<String> disallowedTags = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:    public HtmlTagsModel() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:        for (HtmlTag tag : HtmlTag.values()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:            if (tag.isAllowed()) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:                allowedTags.add(tag.name());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:                disallowedTags.add(tag.name());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:    public List<String> getAllowedTags() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:        return allowedTags;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:    public List<String> getDisallowedTags() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/HtmlTagsModel.java:        return disallowedTags;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:package org.ruauframework.docs;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:public class DefModel implements JsonSerializable, Comparable<DefModel> {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:    protected final DefDescriptor<?> descriptor;
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        return descriptor.getQualifiedName();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        return descriptor.getDefType().name().toLowerCase();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:    public String getFullName() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        if (descriptor.getPrefix().equals("markup")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:            return String.format("%s:%s", descriptor.getNamespace(), descriptor.getName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:    public String getName() {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        if (descriptor.getPrefix().equals("markup")) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:            return RuueTextUtil.initCap(getDefType());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:            return String.format("%s://%s", descriptor.getPrefix(), getDefType());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:    public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        json.writeMapEntry("defType", getDefType());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        json.writeMapEntry("name", getName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        json.writeMapEntry("fullname", getFullName());
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:    public int compareTo(DefModel o) {
ruau/ruau-components/src/main/java/org/ruauframework/CODs/DefModel.java:        return getFullName().compareTo(o.getFullName());
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:package org.ruauframework.components;
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:import java.io.File;
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:import org.ruauframework.util.RuueFiles;
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java: * Gets files from the relevant file paths.
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:public enum RuueComponentsFiles {
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:     * Ruue Components Module Root dir
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:    RuueComponentsModuleDirectory(RuueFiles.Core.getPath(), "ruau-components"),
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:     * File-based component root dir
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:    Components(RuueComponentsModuleDirectory.getPath(), "src/main/components");
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:    private final String path;
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:    private RuueComponentsFiles(String... path) {
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:        this.path = RuueTextUtil.arrayToString(path, File.separator, -1, false);
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:     * @return the path to this File.
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:    public String getPath() {
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:        return this.path;
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:     * @return A java.util.File for this file's path
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:    public File asFile() {
ruau/ruau-components/src/main/java/org/ruauframework/components/RuueComponentsFiles.java:        return new File(path);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:package org.ruauframework.components.ruaudocs;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.Definition;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.EventDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.EventHandlerDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.docs.ReferenceTreeModel;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.system.RuueContext;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:public class DefOverviewModel {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final DefDescriptor<?> descriptor;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final Definition definition;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final List<AttributeModel> attributes = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final List<AttributeModel> handledEvents = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final List<AttributeModel> events = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final String support;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final String theSuper;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final String type;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final boolean isExtensible;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final boolean isAbstract;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    private final List<String> interfaces = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        String desc = (String) component.getAttributes().getValue("descriptor");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        DefType defType = DefType.valueOf(((String) component.getAttributes().getValue("defType")).toUpperCase());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        descriptor = Ruue.getDefinitionService().getDefDescriptor(desc, defType.getPrimaryInterface());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        ReferenceTreeModel.assertAccess(definition);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        if (definition instanceof RootDefinition) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            for (AttributeDef attribute : rootDef.getAttributeDefs().values()) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                attributes.add(new AttributeModel(attribute));
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            if (definition instanceof BaseComponentDef) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                BaseComponentDef cmpDef = (BaseComponentDef) definition;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                for (RegisterEventDef reg : cmpDef.getRegisterEventDefs().values()) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                    events.add(new AttributeModel(reg));
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                for (EventHandlerDef handler : cmpDef.getHandlerDefs()) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                    handledEvents.add(new AttributeModel(handler));
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                for (DefDescriptor<InterfaceDef> intf : cmpDef.getInterfaces()) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                    interfaces.add(intf.getNamespace() + ":" + intf.getName());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                    theSuper = superDesc.getNamespace() + ":" + superDesc.getName();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                isAbstract = cmpDef.isAbstract();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            } else if (definition instanceof EventDef) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                    theSuper = superDesc.getNamespace() + ":" + superDesc.getName();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                type = eventDef.getEventType().name();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                isAbstract = false;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            } else if (definition instanceof LibraryDef) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                isExtensible = false;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                isAbstract = false;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                isAbstract = false;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            support = rootDef.getSupport().name();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            isExtensible = false;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            isAbstract = false;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    public String getNamespace() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        return descriptor.getNamespace();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    public String getName() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        return descriptor.getName();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    public List<String> getInterfaces() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        return this.interfaces;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        return descriptor.getDefType().name().toLowerCase();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        return attributes;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    public List<AttributeModel> getHandledEvents() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        return handledEvents;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    public boolean isExtensible() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    public boolean isAbstract() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        return isAbstract;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:    public class AttributeModel implements JsonSerializable {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private final String name;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private final String description;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private final String type;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private final boolean required;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private final String defaultValue;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private final String parentName;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private final String parentDefType;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private AttributeModel(AttributeDef def) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.name = def.getName();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.type = def.getTypeDef().getName();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            if (def.getDefaultValue() != null) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                this.defaultValue = def.getDefaultValue().getValue().toString();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                this.defaultValue = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            DefDescriptor<?> parentDesc = def.getParentDescriptor();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            if (parentDesc == null || parentDesc.equals(DefOverviewModel.this.descriptor)) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                this.parentName = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                this.parentDefType = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                this.parentName = parentDesc.getNamespace() + ":" + parentDesc.getName();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                this.parentDefType = parentDesc.getDefType().name();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private AttributeModel(RegisterEventDef def) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.name = def.getAttributeName();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.type = def.getDescriptor().getNamespace() + ":" + def.getDescriptor().getName();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.required = false;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.defaultValue = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.parentName = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.parentDefType = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        private AttributeModel(EventHandlerDef def) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:                this.type = def.getDescriptor().getNamespace() + ":" + def.getDescriptor().getName();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.required = false;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.defaultValue = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.name = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.parentName = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            this.parentDefType = null;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            json.writeMapEntry("name", name);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            json.writeMapEntry("description", description);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            json.writeMapEntry("type", type);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            json.writeMapEntry("required", required);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            json.writeMapEntry("defaultValue", defaultValue);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            json.writeMapEntry("parentName", parentName);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            json.writeMapEntry("parentDefType", parentDefType);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        public String getName() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            return name;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        public boolean isRequired() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        public String getDefaultValue() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            return defaultValue;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        public String getParentName() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            return parentName;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:        public String getParentDefType() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/DefOverviewModel.java:            return parentDefType;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java:package org.ruauframework.components.ruaudocs;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java:import org.ruauframework.components.ui.TreeNode;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java:public class SearchFilterTreeTestModel {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java:        serverRoot.addChild(new TreeNode("#child", "serverChild"));
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauCODs/SearchFilterTreeTestModel.java:        return Lists.newArrayList(serverRoot);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:package org.ruauframework.components.ruauadmin;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import java.util.Collections;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import java.util.Comparator;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import java.util.Map.Entry;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import java.util.Set;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.def.Definition;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:import com.google.common.collect.Maps;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:public class UnusedModel {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:    private final List<Map<String, String>> components = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:        Map<DefDescriptor<?>, Map<String, String>> unused = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:        Set<DefDescriptor<?>> used = Sets.newHashSet();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:        populate(unused, used, ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:        populate(unused, used, ApplicationDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:        for (Entry<DefDescriptor<?>, Map<String, String>> entry : unused.entrySet()) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:                components.add(entry.getValue());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:        Collections.sort(components, new Comparator<Map<String, String>>() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:            public int compare(Map<String, String> o1, Map<String, String> o2) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:                return o1.get("name").compareTo(o2.get("name"));
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:    private <T extends Definition> void populate(Map<DefDescriptor<?>, Map<String, String>> unused,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:            Set<DefDescriptor<?>> used, Class<T> type) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:        DefDescriptor<T> matcher = definitionService.getDefDescriptor("markup://*:*", type);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:        Set<DefDescriptor<T>> descriptors = definitionService.find(matcher);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:            Map<String, String> values = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:            values.put("name", desc.getDescriptorName());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:                TestSuiteDef suite = definitionService.getDefDescriptor(desc, "js", TestSuiteDef.class).getDef();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:                if (suite.getTestCaseDefs().size() == 0) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:                    unused.put(desc, values);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:            } catch (Throwable t) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:                unused.put(desc, values);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:                def.appendDependencies(used);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:            } catch (Throwable t) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:                // it can't use something if it can't compile
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/UnusedModel.java:    public List<Map<String, String>> getComponents() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:package org.ruauframework.components.ruauadmin;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import java.util.Collections;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import java.util.Comparator;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import java.util.Set;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:import com.google.common.collect.Maps;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:public class CatalogModel {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:    private final List<Map<String, String>> components = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:    public CatalogModel() throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:        DefDescriptor<ComponentDef> matcher = definitionService.getDefDescriptor("markup://*:*", ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:        Set<DefDescriptor<ComponentDef>> descriptors = definitionService.find(matcher);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:            Map<String, String> values = Maps.newHashMap();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:            values.put("name", desc.getDescriptorName());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:                values.put("support", def.getSupport().name());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:            } catch (Throwable t) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:                values.put("support", "ERROR");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:                TestSuiteDef suite = definitionService.getDefDescriptor(desc, "js", TestSuiteDef.class).getDef();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:                values.put("tests", "" + suite.getTestCaseDefs().size());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:            } catch (Throwable t) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:                values.put("tests", "0");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:            components.add(values);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:        Collections.sort(components, new Comparator<Map<String, String>>() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:            public int compare(Map<String, String> o1, Map<String, String> o2) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:                return o1.get("name").compareTo(o2.get("name"));
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruauadmin/CatalogModel.java:    public List<Map<String, String>> getComponents() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:package org.ruauframework.components.ruaujstest;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import java.util.Map.Entry;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import java.util.Set;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.apache.http.NameValuePair;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.apache.http.client.utils.URLEncodedUtils;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.apache.http.message.BasicNameValuePair;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.ruauframework.def.TestCaseDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.ruauframework.system.RuueContext;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:public class JSTestCaseModel {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:    private final String url;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:    private final int count;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:    public JSTestCaseModel() throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        TestCaseDef caseDef = (TestCaseDef) component.getAttributes().getValue("case");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        String baseUrl = component.getAttributes().getValue("url").toString();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        Set<Entry<String, Object>> attributes = caseDef.getAttributeValues().entrySet();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        List<NameValuePair> newParams = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        String hash = "";
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        if (!attributes.isEmpty()) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:            for (Entry<String, Object> entry : attributes) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:                String value = entry.getValue().toString();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:                if (key.equals("__layout")) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:                    hash = value;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:                    newParams.add(new BasicNameValuePair(key, value));
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        newParams.add(new BasicNameValuePair("ruau.test", caseDef.getDescriptor().getQualifiedName()));
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        url = baseUrl + "&" + URLEncodedUtils.format(newParams, "UTF-8") + hash;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:        count = ((TestSuiteDef) component.getAttributes().getValue("suite")).getTestCaseDefs().size();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestCaseModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:package org.ruauframework.components.ruaujstest;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import java.util.ArrayList;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.def.TestCaseDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.system.Annotations.Model;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.system.RuueContext;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.test.TestContext;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.test.TestContextAdapter;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:public class JSTestModel {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:    private final DefDescriptor<TestSuiteDef> descriptor;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:    private final TestSuiteDef def;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:    private final String url;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:    private final List<TestCaseDef> tcds;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        DefinitionService defService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        String desc = (String)component.getAttributes().getValue("descriptor");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        DefType defType = DefType.valueOf(((String)component.getAttributes().getValue("defType")).toUpperCase());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        desc = "js://" + desc.replace(':', '.');
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        descriptor = defService.getDefDescriptor(desc, TestSuiteDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        url = String.format("/%s/%s.%s?ruau.nonce=%s&ruau.mode=AUTO%s&ruau.testReset=true", descriptor.getNamespace(),
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:                descriptor.getName(), defType == DefType.COMPONENT ? "cmp" : "app", nonce, context.getMode().name());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        String test = (String)component.getAttributes().getValue("test");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        tcds = filterTestCases(test);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        TestContextAdapter contextAdapter = Ruue.get(TestContextAdapter.class);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        if (contextAdapter != null) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:            for (TestCaseDef tcd : tcds) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:                TestContext testContext = contextAdapter.getTestContext(tcd.getDescriptor().getQualifiedName());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:                testContext.getLocalDefs().clear();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:                testContext.getLocalDefs().addAll(tcd.getLocalDefs());
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:    private List<TestCaseDef> filterTestCases(String test) throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:            List<TestCaseDef> temp = descriptor.getDef().getTestCaseDefs();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:            for (TestCaseDef t : temp) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:                if (t.getName().equals(test)) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:                    List<TestCaseDef> testCases = new ArrayList<>();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:                    testCases.add(t);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:                    return testCases;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:        return descriptor.getDef().getTestCaseDefs();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:    public List<TestCaseDef> getTestCases() throws QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaujstest/JSTestModel.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:package org.ruauframework.components.ruau;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:import java.util.List;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:import org.ruauframework.def.Renderer;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:import org.ruauframework.def.StyleDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:import org.ruauframework.def.ThemeDef;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:import com.google.common.base.Joiner;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * Used in the rendering of {@link StyleDef}s (CSS files) to output the value of referenced {@link ThemeDef} variables.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * This represents a single declaration, for example "margin: theme('namespace.theme.margin')". In other words this has
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java: * to output both the property and the value.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:public class ThemedDeclarationRenderer implements Renderer {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:    @SuppressWarnings("unchecked")
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:    public void render(BaseComponent<?, ?> component, Appendable out) throws IOException, QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        String property = component.getAttributes().getValue("property").toString();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        // Location location = (Location) component.getAttributes().getValue("location");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        List<String> references = (List<String>) component.getAttributes().getValue("references");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        // ThemeValueProvider provide = Ruue.getStyleAdapter().getThemeValueProvider(component.);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        // gather values. there can be multiple values if there were multiple theme functions in the declaration value.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        List<String> resolved = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:            String value = reference;// provider.getValue(reference, location).toString();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:            // for any empty values, we don't output the declaration at all
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:            if (RuueTextUtil.isNullOrEmpty(value)) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:            resolved.add(value);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        // output property name
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        out.append(property).append(":");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        // output each value
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ThemedDeclarationRenderer.java:        out.append(Joiner.on(" ").join(resolved));
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:package org.ruauframework.components.ruau;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:import org.ruauframework.def.ComponentDefRefArray;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:import org.ruauframework.def.Renderer;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * server side renderer for components that have a templated body and provide
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java: * their own dynamic body, e.g. iteration.cmp or if.cmp
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:public class ProvidedBodyRenderer implements Renderer {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:    public void render(BaseComponent<?, ?> component, Appendable out) throws IOException, QuickFixException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:    	ComponentDefRefArray bodyAttribute = component.getAttributes().getValue("body", ComponentDefRefArray.class);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:        // Loop over all the items in the body, which is a ComponentDefRefArray
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:        // If you find a ComponentInstance, render that instance
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:        	if(bodyComponent instanceof BaseComponent) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruau/ProvidedBodyRenderer.java:        		Ruue.getRenderingService().render((BaseComponent<?, ?>)bodyComponent, out);
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:package org.ruauframework.components.ruaudev;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:import org.ruauframework.system.Annotations.RuueEnabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:import org.ruauframework.system.Annotations.Controller;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:import org.ruauframework.throwable.RuueException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:import org.ruauframework.util.RegistryJsonSerializer;
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:public class SerializeRegistryController {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:    @RuueEnabled
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:    public static String serializeComponentRegistryToJson() throws RuueException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:            return RegistryJsonSerializer.serializeToFile();
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:        } catch (IOException e) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ruaudev/SerializeRegistryController.java:            throw new RuueRuntimeException(e.getMessage());
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:package org.ruauframework.components.ui;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:import org.ruauframework.data.*;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java: * A menu item object has all the information to create a ui:menuItem component (actionMenuItem, checkboxMenuItem and radioMenuItem).
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:public class MenuItem implements HasClassName, HasDisabled, HasLabel, HasSelected, HasType, HasValue, JsonSerializable {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    private final String className;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    private final boolean disabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    private final String label;    
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    private final boolean selected;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    private final String type;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    private final String value;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    private final boolean hideMenuAfterSelected;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public MenuItem(String label, String type) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        this(label, false, type);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public MenuItem(String label, boolean selected, String type) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        this("", label, selected, type);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public MenuItem(String className, String label, boolean selected, String type) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        this(className, false, label, selected, type, null);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public MenuItem(String className, boolean disabled, String label, boolean selected, String type) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        this(className, disabled, label, selected, type, null);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public MenuItem(String className, boolean disabled, String label, boolean selected, String type, String value) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        this(className, disabled, label, selected, type, value, false);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public MenuItem(String className, boolean disabled, String label, boolean selected, String type, String value, boolean hideMenuAfterSelected) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        this.className = className;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        this.disabled = disabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        this.label = label;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        this.value = value;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * Get the class name.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * @return the class name of this menu item
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public String getClassName() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        return this.className;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * Get the label.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * @return the label of this menu item
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public String getLabel() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        return this.label;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * Is the component disabled.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * @return the true if disabled, otherwise false
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public boolean isDisabled() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        return this.disabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * @return the true if selected, otherwise false
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public boolean isSelected() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * Get the menu item type ("action", "checkbox", "radio", "separator" or user defined).
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * Get the value.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:     * @return the value of this menu item
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public String getValue() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        return this.value;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public boolean isHideMenuAfterSelected() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:    public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        json.writeMapEntry("className", this.className);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        json.writeMapEntry("disabled", this.disabled);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        json.writeMapEntry("label", this.label);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        json.writeMapEntry("selected", this.selected);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        json.writeMapEntry("type", this.type);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        json.writeMapEntry("value", this.value);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        json.writeMapEntry("hideMenuAfterSelected", this.hideMenuAfterSelected);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:        return String.format("MenuItem(className[%s] disabled[%s] label[%s] selected[%s] type[%s] value[%s] hideMenuAfterSelected[%s])", 
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/MenuItem.java:                this.className, this.disabled, this.label, this.selected, this.type, this.value, this.hideMenuAfterSelected);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:package org.ruauframework.components.ui;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:import java.util.*;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:import org.ruauframework.data.HasHref;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:import org.ruauframework.data.HasTitle;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java: * Used by ui:tree and ui:treeTreeNode
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:public class TreeNode implements HasHref, HasTitle, JsonSerializable, Comparable<TreeNode> {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    public TreeNode(String href, String title, Map<String, Object> data) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        this(href, title, null, false, data);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    public TreeNode(String href, String title, List<TreeNode> children, boolean expanded) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        this(href, title, children, expanded, null);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    public TreeNode(String href, String title, List<TreeNode> children, boolean expanded, Map<String, Object> data) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        this.expanded = expanded;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        this.data = data;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    public void addChild(TreeNode child) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:            this.children = Lists.newArrayList();
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        this.children.add(child);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        json.writeMapEntry("href", href);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        json.writeMapEntry("title", title);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        json.writeMapEntry("children", children);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        json.writeMapEntry("expanded", expanded);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        json.writeMapEntry("data", data);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    public boolean isExpanded() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        return this.expanded;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    public int compareTo(TreeNode o) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        if (this.equals(o)) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:        return title.compareTo(o.title);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:            assert (this.href == null || this.href.isEmpty());
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    private final String title;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    private final String href;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    private List<TreeNode> children;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    private final boolean expanded;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/TreeNode.java:    private final Map<String, Object> data;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:package org.ruauframework.components.ui;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:import org.ruauframework.data.*;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * A input option object has all the information to create an inputOption
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java: * component (inputCheckbox, inputRadio and inputSelectOption.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:public class InputOption implements HasLabel, HasDisabled, HasName, HasSelected, HasValue, JsonSerializable {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    private final String label;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    private final String name;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    private final boolean selected;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    private final String value;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    private final boolean disabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    public InputOption(String label, String name, boolean selected, String value, boolean disabled) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        this.label = label;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        this.name = name;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        this.value = value;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        this.disabled = disabled;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    public InputOption(String label, String name, boolean selected, String value) {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    	this(label, name, selected, value, false);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:     * Get the label.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:     * @return the label of this option
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    public String getLabel() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        return this.label;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:     * Get the name.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:     * @return the name of this option
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    public String getName() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        return this.name;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:     * @return the true if selected, otherwise false
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    public boolean isSelected() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:     * Get the value.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:     * @return the value of this option
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    public String getValue() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        return this.value;
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:    public void serialize(Json json) throws IOException {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        json.writeMapBegin();
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        json.writeMapEntry("label", this.label);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        json.writeMapEntry("name", this.name);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        json.writeMapEntry("selected", this.selected);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        json.writeMapEntry("value", this.value);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        json.writeMapEntry("disabled", this.disabled);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        json.writeMapEnd();
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:        return String.format("InputOption(label[%s] name[%s] selected[%s] value[%s] disabled[%s])", this.label, this.name,
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:                this.selected, this.value, this.disabled);
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:     * Is the component disabled.
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:     * @return the true if disabled, otherwise false
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:	public boolean isDisabled() {
ruau/ruau-components/src/main/java/org/ruauframework/components/ui/InputOption.java:		return this.disabled;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: * you may not use this file except in compliance with the License.
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: * You may obtain a copy of the License at
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: * See the License for the specific language governing permissions and
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: * limitations under the License.
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:package org.ruauframework.util;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import java.io.BufferedWriter;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import java.io.File;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import java.io.FileWriter;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import java.io.IOException;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import java.util.Collection;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import java.util.Map;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import java.util.Set;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import java.util.TreeMap;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import org.ruauframework.Ruue;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import org.ruauframework.def.EventHandlerDef;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:import org.ruauframework.util.json.Json;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java: * Serialize Ruue Component Registry to json for consumption by tools like
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:public class RegistryJsonSerializer {
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public static final String DEFAULT_DIR = System.getProperty("java.io.tmpdir");
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public final static String FILE_NAME = "ruauRegistry.json";
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    final static String DEFAULT_FILE = System.getProperty("java.io.tmpdir") + File.separator + FILE_NAME;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    static boolean shouldPrettyPrint = false;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public final static String ATTRIBUTES_KEY = "attributes";
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public final static String EVENTS_KEY = "events";
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public final static String HANDLERS_KEY = "handledEvents";
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public final static String TYPE_KEY = "type";
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public final static String DESCRIPTION_KEY = "description";
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public final static String SUPPORT_KEY = "support";
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public static String serializeToFile() throws QuickFixException, IOException {
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        serializeToFile(DEFAULT_FILE);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public static void serializeToFile(String file) throws QuickFixException, IOException {
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        Map<String, Map<String, Map<String, Map<String, String>>>> components = new TreeMap<String, Map<String, Map<String, Map<String, String>>>>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        loadMetadataForComponents(components);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        writeMetadataToFile(components, file);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public static void writeMetadataToFile(Map<String, Map<String, Map<String, Map<String, String>>>> components,
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        FileWriter f = new FileWriter(file, false);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        Json.serialize(components, bf, shouldPrettyPrint, false);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:    public static void loadMetadataForComponents(Map<String, Map<String, Map<String, Map<String, String>>>> components)
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        DefDescriptor<ComponentDef> matcher = definitionService.getDefDescriptor("markup://*:*", ComponentDef.class);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        Set<DefDescriptor<ComponentDef>> descriptors = definitionService.find(matcher);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        Map<String, Map<String, Map<String, String>>> component;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:        Map<String, Map<String, String>> componentDetails;
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:            component = new TreeMap<String, Map<String, Map<String, String>>>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                String compName = descriptor.getNamespace() + ":" + compDef.getName();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                if (components.containsKey(compName)) {
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                Map<DefDescriptor<AttributeDef>, AttributeDef> attDefs = compDef.getAttributeDefs();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                if (attDefs != null && attDefs.size() > 0) {
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    componentDetails = new TreeMap<String, Map<String, String>>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    for (DefDescriptor<AttributeDef> attDef : attDefs.keySet()) {
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                        Map<String, String> attributePros = new TreeMap<String, String>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                        attributePros.put("type", attDefs.get(attDef).getTypeDef().getName());
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                        String desc = attDefs.get(attDef).getDescription();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                            attributePros.put(DESCRIPTION_KEY, desc);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                        componentDetails.put(attDef.getName(), attributePros);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    component.put(ATTRIBUTES_KEY, componentDetails);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                Map<String, RegisterEventDef> eventDefs = compDef.getRegisterEventDefs();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    componentDetails = new TreeMap<String, Map<String, String>>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                        Map<String, String> eventPros = new TreeMap<String, String>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                        componentDetails.put(eventDef, eventPros);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    component.put(EVENTS_KEY, componentDetails);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                Collection<EventHandlerDef> handlerDefs = compDef.getHandlerDefs();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                if (handlerDefs != null && handlerDefs.size() > 0) {
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    componentDetails = new TreeMap<String, Map<String, String>>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    for (EventHandlerDef handlerDef : handlerDefs) {
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                        Map<String, String> eventHandlerProps = new TreeMap<String, String>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                        String desc = handlerDef.getDescription();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                            eventHandlerProps.put(DESCRIPTION_KEY, desc);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                        componentDetails.put(handlerDef.getName(), eventHandlerProps);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    component.put(HANDLERS_KEY, componentDetails);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    componentDetails = new TreeMap<String, Map<String, String>>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    componentDetails.put(desc, new TreeMap<String, String>());
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    component.put(DESCRIPTION_KEY, componentDetails);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    componentDetails = new TreeMap<String, Map<String, String>>();
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    componentDetails.put(support, new TreeMap<String, String>());
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                    component.put(SUPPORT_KEY, componentDetails);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                components.put(compName, component);
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:            } catch (Throwable t) {
ruau/ruau-components/src/main/java/org/ruauframework/util/RegistryJsonSerializer.java:                // IGNORE.... basically skip components that are having problem.
ruau/.git/description:Unnamed repository; edit this file 'description' to name the repository.
ruau/.git/hooks/pre-rebase.sample:# Copyright (c) 2006, 2008 Junio C Hamano
ruau/.git/hooks/pre-rebase.sample:# The "pre-rebase" hook is run just before "git rebase" starts doing
ruau/.git/hooks/pre-rebase.sample:# its job, and can prevent the command from running by exiting with
ruau/.git/hooks/pre-rebase.sample:# non-zero status.
ruau/.git/hooks/pre-rebase.sample:# The hook is called with the following parameters:
ruau/.git/hooks/pre-rebase.sample:# $1 -- the upstream the series was forked from.
ruau/.git/hooks/pre-rebase.sample:# $2 -- the branch being rebased (or empty when rebasing the current branch).
ruau/.git/hooks/pre-rebase.sample:# This sample shows how to prevent topic branches that are already
ruau/.git/hooks/pre-rebase.sample:# merged to 'next' branch from getting rebased, because allowing it
ruau/.git/hooks/pre-rebase.sample:# would result in rebasing already published history.
ruau/.git/hooks/pre-rebase.sample:basebranch="$1"
ruau/.git/hooks/pre-rebase.sample:	topic="refs/heads/$2"
ruau/.git/hooks/pre-rebase.sample:	exit 0 ;# we do not interrupt rebasing detached HEAD
ruau/.git/hooks/pre-rebase.sample:case "$topic" in
ruau/.git/hooks/pre-rebase.sample:refs/heads/??/*)
ruau/.git/hooks/pre-rebase.sample:esac
ruau/.git/hooks/pre-rebase.sample:# Now we are dealing with a topic branch being rebased
ruau/.git/hooks/pre-rebase.sample:# on top of master.  Is it OK to rebase it?
ruau/.git/hooks/pre-rebase.sample:# Does the topic really exist?
ruau/.git/hooks/pre-rebase.sample:	echo >&2 "No such branch $topic"
ruau/.git/hooks/pre-rebase.sample:# Is topic fully merged to master?
ruau/.git/hooks/pre-rebase.sample:not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
ruau/.git/hooks/pre-rebase.sample:if test -z "$not_in_master"
ruau/.git/hooks/pre-rebase.sample:	echo >&2 "$topic is fully merged to master; better remove it."
ruau/.git/hooks/pre-rebase.sample:	exit 1 ;# we could allow it, but there is no point.
ruau/.git/hooks/pre-rebase.sample:# Is topic ever merged to next?  If so you should not be rebasing it.
ruau/.git/hooks/pre-rebase.sample:only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
ruau/.git/hooks/pre-rebase.sample:only_next_2=`git rev-list ^master           ${publish} | sort`
ruau/.git/hooks/pre-rebase.sample:	not_in_topic=`git rev-list "^$topic" master`
ruau/.git/hooks/pre-rebase.sample:		echo >&2 "$topic is already up-to-date with master"
ruau/.git/hooks/pre-rebase.sample:		exit 1 ;# we could allow it, but there is no point.
ruau/.git/hooks/pre-rebase.sample:		my $msg = "* $topic has commits already merged to public branch:\n";
ruau/.git/hooks/pre-rebase.sample:		my (%not_in_next) = map {
ruau/.git/hooks/pre-rebase.sample:			/^([0-9a-f]+) /;
ruau/.git/hooks/pre-rebase.sample:		for my $elem (map {
ruau/.git/hooks/pre-rebase.sample:				/^([0-9a-f]+) (.*)$/;
ruau/.git/hooks/pre-rebase.sample:	' "$topic" "$not_in_next" "$not_in_master"
ruau/.git/hooks/pre-rebase.sample:This sample hook safeguards topic branches that have been
ruau/.git/hooks/pre-rebase.sample:The workflow assumed here is:
ruau/.git/hooks/pre-rebase.sample: * Once a topic branch forks from "master", "master" is never
ruau/.git/hooks/pre-rebase.sample:   merged into it again (either directly or indirectly).
ruau/.git/hooks/pre-rebase.sample: * Once a topic branch is fully cooked and merged into "master",
ruau/.git/hooks/pre-rebase.sample:   earlier mistakes, a new topic branch is created by forking at
ruau/.git/hooks/pre-rebase.sample:   the tip of the "master".  This is not strictly necessary, but
ruau/.git/hooks/pre-rebase.sample:   it makes it easier to keep your history simple.
ruau/.git/hooks/pre-rebase.sample: * Whenever you need to test or publish your changes to topic
ruau/.git/hooks/pre-rebase.sample:   branches, merge them into "next" branch.
ruau/.git/hooks/pre-rebase.sample:The script, being an example, hardcodes the publish branch name
ruau/.git/hooks/pre-rebase.sample:to be "next", but it is trivial to make it configurable via
ruau/.git/hooks/pre-rebase.sample:$GIT_DIR/config mechanism.
ruau/.git/hooks/pre-rebase.sample:With this workflow, you would want to know:
ruau/.git/hooks/pre-rebase.sample:(1) ... if a topic branch has ever been merged to "next".  Young
ruau/.git/hooks/pre-rebase.sample:    topic branches can have stupid mistakes you would rather
ruau/.git/hooks/pre-rebase.sample:    clean up before publishing, and things that have not been
ruau/.git/hooks/pre-rebase.sample:    merged into other branches can be easily rebased without
ruau/.git/hooks/pre-rebase.sample:    affecting other people.  But once it is published, you would
ruau/.git/hooks/pre-rebase.sample:    not want to rewind it.
ruau/.git/hooks/pre-rebase.sample:(2) ... if a topic branch has been fully merged to "master".
ruau/.git/hooks/pre-rebase.sample:    Then you can delete it.  More importantly, you should not
ruau/.git/hooks/pre-rebase.sample:    build on top of it -- other people may already want to
