ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				var expectedOutputText = cmp.find("checkboxItem4").get('v.label');
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(expectedOutputText, function(){return cmp.find("result").get('v.value')}, "Checkbox Menu output text did not get updated");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	 * Test to verify radiobox menu works when interacting with the menu items
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:    testRadioMenu:{
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				menuLabel = cmp.find("radioMenuLabel");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				radioMenu = cmp.find("radioMenu");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				ouptutButton = cmp.find("radioButton");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				item1 = cmp.find("radioItem1")
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				item2 = cmp.find("radioItem2")
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				menuLabel.get("e.click").fire();
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(true, function(){return $A.util.hasClass(radioMenu.getElement(),"visible")}, "Radio Menu should be visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(true, function(){return item1.get('v.selected')}, "Radio Menu item 1 should be selected");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(true, function(){return item2.get('v.selected')}, "Radio Menu item 2 should be selected");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				//menu item 1 should be unchecked after selecting item2
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.assertFalse(item1.get('v.selected'),"Radio Menu item 1 should be unchecked");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				menuLabel.get("e.click").fire();
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(false, function(){return $A.util.hasClass(radioMenu.getElement(),"visible")}, "Radio Menu should not be visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				var expectedOutputText = item2.get('v.label');
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(expectedOutputText, function(){return cmp.find("radioResult").get('v.value')}, "Radio Menu output text did not get updated");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	 * Test to verify radiobox menu created using iteration cmp works when interacting with the menu items
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	 * Test Case for W-1617363, W-1617518 
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:    testRadioMenuCreatedByIteration:{
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				menuLabel = cmp.find("iterationTrigger");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				radioMenu = cmp.find("iterationRadioMenu");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				ouptutButton = cmp.find("radioIterationButton");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				menuItems = radioMenu.get("v.childMenuItems");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				menuLabel.get("e.click").fire();
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(true, 
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:							return $A.util.hasClass(radioMenu.getElement(),"visible")
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:						}, "Radio Menu created by Iteration should be visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(true, 
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:						}, "Radio Menu created by iteration should have item 1 selected");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				//Test case for W-1617363
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.assertDefined(item1.get('v.value'),"value of item1 should be defined");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.assertEquals(item1.get('v.value'), item1.get('v.label'), "Value of Item1 is not correct");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(true, 
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:							}, "Radio Menu created by iteration should have item 2 selected");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				//menu item 1 should be unchecked after selecting item2
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.assertFalse(item1.get('v.selected'),"Radio Menu item 1 should be unchecked");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				menuLabel.get("e.click").fire();
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(false,
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:							return $A.util.hasClass(radioMenu.getElement(),"visible")
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:						}, "Radio Menu created by Iteration should not be visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				var expectedOutputText = item2.get('v.label');
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(expectedOutputText, 
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:							return cmp.find("radioIterationResult").get('v.value')
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:						}, "Output text did not get updated for Menu created by iteration");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	 * General Test to verify focus on menu item using AURA API  
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				var menuItem3 = cmp.find("actionItem3");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(menuItem3.get('v.label'), function(){return $A.test.getActiveElementText()}, "Focus should be on item 3");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:     * Test menu is positioned above if there is no space left at the bottom.
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:     * Test Case: W-1622773
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.addWaitForWithFailureMessage(true, function(){return $A.util.hasClass(menuList.getElement(),"visible")}, "Menu Should be visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			//check if expand event got fired - test case for W-1647658
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.assertTrue(cmp.get('v.expandEventFired'),"Expand event did not get fired");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.assertFalse(cmp.get('v.collapseEventFired'),"Collapse event should not be fired");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			topPropertyValue = $A.util.style.getCSSProperty(menuListElement,'top');
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			//default value
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.assertTrue(parseInt(topPropertyValue) >=0 || topPropertyValue=="auto", "CSS property of MenuList should be auto or a positive value");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			//change the height for item1 such that not enough space below
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.addWaitForWithFailureMessage(false, function(){return $A.util.hasClass(menuList.getElement(),"visible")}, "Menu Should not be visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			//check if collapse event got fired - test case for W-1647658
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.assertTrue(cmp.get('v.collapseEventFired'),"Collapse event did not get fired");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.assertFalse(cmp.get('v.expandEventFired'),"Expand event should not be fired");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.addWaitForWithFailureMessage(true, function(){return $A.util.hasClass(menuList.getElement(),"visible")}, "Menu Should be visible after changing height of item1");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			topPropertyValue = $A.util.style.getCSSProperty(menuListElement,'top');
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.assertTrue(parseInt(topPropertyValue) < 0, "Menu is not position properly");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	 * Test case for W-1636495
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	 * Test to verify menuTrigger expands menuList since ui:menuList is extensible
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:   testMenuExpandWhenExtendFromMenuList:{
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.addWaitForWithFailureMessage(true, function(){return $A.util.hasClass(menuList.getElement(),"visible")}, "Menu Should be visible when you extend from menuList");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	 * Test to verify action menu list does not collapse if HideMenuAfterSelected is set to false
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	 * Test case: W-2328775
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:		attributes: { hideMenuAfterSelected : "false" },
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				actionMenu = cmp.find("actionMenu");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	menuLabel = cmp.find("trigger");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	//check menu is default to hidden by using AURA API
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	$A.test.assertFalse(actionMenu.get('v.visible'),"Action Menu should not be visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	//check menu is default to hidden by using DOM API
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	$A.test.assertTrue($A.util.hasClass(actionMenu.getElement(),"uiMenuList"), "Class name should be just uiMenuList");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	$A.test.assertFalse($A.util.hasClass(actionMenu.getElement(),"visible"), "Class name should not contain visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	menuLabel.get("e.click").fire();
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	            //Check if secondItem in the menu is disabled
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	            $A.test.addWaitForWithFailureMessage(true, function(){return cmp.find("actionItem2").get("v.disabled");}, "Check if Item2 in the menu is disabled");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				//make sure menuItem is not attached to body directly and its attached to uiMenu instead
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				//Test case for W-2181713
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				var actionMenuParentClassName = actionMenu.getElement().parentNode.className;
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				$A.test.assertTrue($A.test.contains(actionMenuParentClassName,"uiMenu"), "Menu Item List not attached to correct uiMenu");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:				//click actionItem3 and check if label is updated
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	            cmp.find("actionItem3").get("e.click").fire();
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	            $A.test.addWaitForWithFailureMessage(cmp.find("actionItem3").get('v.label'), function(){return menuLabel.get('v.label')}, "Label should be updated to "+ cmp.find("actionItem3").get('v.label'));
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	//check menu is still visible after selecting actionItem3
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	$A.test.assertTrue(actionMenu.get('v.visible'),"Menu should be visible after selecting actionItem3");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	//click actionItem1 and check if label is updated
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	            cmp.find("actionItem1").get("e.click").fire();
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	            $A.test.addWaitForWithFailureMessage(cmp.find("actionItem1").get('v.label'), function(){return menuLabel.get('v.label')}, "Label should be updated to "+ cmp.find("actionItem1").get('v.label'));
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	//check menu is still visible after selecting actionItem1
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	$A.test.assertTrue(actionMenu.get('v.visible'),"Menu should be visible after selecting actionItem1");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	//click actionItem4 and check if label is updated
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	            cmp.find("actionItem4").get("e.click").fire();
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	            $A.test.addWaitForWithFailureMessage(cmp.find("actionItem4").get('v.label'), function(){return menuLabel.get('v.label')}, "Label should be updated to "+ cmp.find("actionItem4").get('v.label'));
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	//check menu is still visible after selecting actionItem1
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:	        	$A.test.assertFalse(actionMenu.get('v.visible'),"Menu should not be visible after selecting actionItem4");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:    * Test to verify menuSelect event is fired only 1 time upon selecting a menu item and not multiple times
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:    * Test Case: W-2413902
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.assertEquals(0, cmp.get("v.menuSelectFireCount"),"menuSelect event should not be fired yet");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.addWaitForWithFailureMessage(true, function(){return $A.util.hasClass(menuList.getElement(),"visible")}, "Menu list Should be visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.addWaitForWithFailureMessage(false, function(){return $A.util.hasClass(menuList.getElement(),"visible")}, "Menu list Should not be visible");
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			//make sure menuSelect event is fired only once
ruau/ruau/src/test/components/uitest/menu_Test/menu_TestTest.js:			$A.test.assertEquals(1, cmp.get("v.menuSelectFireCount"),"menuSelect event should be fired only once");
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    limitations under the License.
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<ruau:application model="java://org.ruauframework.component.ui.MenuTestModel">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<ruau:attribute name="expandEventFired" type="boolean" default="false"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<ruau:attribute name="collapseEventFired" type="boolean" default="false"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<ruau:attribute name="hideMenuAfterSelected" type="Boolean" default="true"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<ruau:attribute name="menuSelectFireCount" type="Integer" default="0" />
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<div style="display:inline-block;width:50%;vertical-align:top;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:menu ruau:id="uiMenu" class="checkPositionMenu">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            <ui:menuTriggerLink class="triggercheckPosition" ruau:id="triggercheckPosition" label="Please pick your favorite soccer club" disableDoubleClicks="true"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            <ui:menuList class="checkPosition" ruau:id="checkPosition" menuCollapse="{!c.menuCollapse}" menuExpand="{!c.menuExpand}" menuSelect="{!c.incrementMenuSelectFireCount}">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem class="checkPositionItem1" ruau:id="checkPositionItem1" label="Bayern München" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem class="checkPositionItem2" ruau:id="checkPositionItem2" label="FC Barcelona" click="{!c.updateTriggerLabel}" disabled="true"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem class="checkPositionItem3" ruau:id="checkPositionItem3" label="Inter Milan" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem class="checkPositionItem4" ruau:id="checkPositionItem4" label="Manchester United" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<div style="margin:20px;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    <div style="display:inline-block;width:50%;vertical-align:top;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <h2>Your favorite soccer club</h2>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:menu ruau:id="uiMenu" class="clubMenu">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            <ui:menuTriggerLink class="trigger" ruau:id="trigger" label="Please pick your favorite soccer club"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            <ui:menuList class="actionMenu" ruau:id="actionMenu">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem class="actionItem1" ruau:id="actionItem1" label="Bayern München" click="{!c.updateTriggerLabel}" hideMenuAfterSelected="{!v.hideMenuAfterSelected}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem class="actionItem2" ruau:id="actionItem2" label="FC Barcelona" click="{!c.updateTriggerLabel}" disabled="true"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem class="actionItem3" ruau:id="actionItem3" label="Inter Milan" click="{!c.updateTriggerLabel}" hideMenuAfterSelected="{!v.hideMenuAfterSelected}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem class="actionItem4" ruau:id="actionItem4" label="Manchester United" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    <div style="display:inline-block;width:50%;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:menu&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuTriggerLink ruau:id="trigger" label="Please pick your favorite soccer club"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuList ruau:id="actionMenu"&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:actionMenuItem ruau:id="actionItem1" label="Bayern München" click="{&#160;&#33;c.updateTriggerLabel}"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:actionMenuItem ruau:id="actionItem2" label="FC Barcelona" click="{&#160;&#33;c.updateTriggerLabel}"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:actionMenuItem ruau:id="actionItem3" label="Inter Milan" click="{&#160;&#33;c.updateTriggerLabel}"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:actionMenuItem ruau:id="actionItem4" label="Manchester United" click="{&#160;&#33;c.updateTriggerLabel}"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;/ui:menuList&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;/ui:menu&#62;'/>      
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<div style="margin:20px;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    <div style="display:inline-block;width:50%;vertical-align:top;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <h2>Your favorite football teams</h2>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            <ui:menuTriggerLink class="checkboxMenuLabel" ruau:id="checkboxMenuLabel" label="NFC West Teams"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            <ui:menuList ruau:id="checkboxMenu" class="checkboxMenu">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:checkboxMenuItem class="checkboxItem1" ruau:id="checkboxItem1" label="San Francisco 49ers"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:checkboxMenuItem class="checkboxItem2" ruau:id="checkboxItem2" label="Seattle Seahawks"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:checkboxMenuItem class="checkboxItem3" ruau:id="checkboxItem3" label="St. Louis Rams"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:checkboxMenuItem class="checkboxItem4" ruau:id="checkboxItem4" label="Arizona Cardinals" disabled="true" selected="true"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:button class="checkboxButton" ruau:id="checkboxButton" press="{!c.getMenuSelected}" label="Check the selected menu items"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText class="result" ruau:id="result" value="Which items get selected"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    <div style="display:inline-block;width:50%;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:menu&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuTriggerLink ruau:id="checkboxMenuLabel" label="NFC West Teams"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuList ruau:id="checkboxMenu"&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:checkboxMenuItem ruau:id="checkboxItem1" label="San Francisco 49ers"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:checkboxMnuItem ruau:id="checkboxItem2" label="Seattle Seahawks"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:checkboxMenuItem ruau:id="checkboxItem3" label="St. Louis Rams"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:checkboxMenuItem ruau:id="checkboxItem4" label="Arizona Cardinals" disabled="true" selected="true"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;/ui:menuList&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;/ui:menu&#62;'/>  
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:button ruau:id="checkboxButton" press="{&#160;!c.getMenuSelected}" label="Check the selected menu items"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:outputText ruau:id="result" value="Which items get selected"/&#62;'/>    
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<div style="margin:20px;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    <div style="display:inline-block;width:50%;vertical-align:top;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <h2>Your favorite baseball teams</h2>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            <ui:menuTriggerLink class="radioMenuLabel" ruau:id="radioMenuLabel" label="National League West"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            <ui:menuList class="radioMenu" ruau:id="radioMenu">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem class="radioItem1" ruau:id="radioItem1" label="San Francisco"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem class="radioItem2" ruau:id="radioItem2" label="LA Dodgers"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem class="radioItem3" ruau:id="radioItem3" label="Arizona"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem class="radioItem4" ruau:id="radioItem4" label="Diego" disabled="true"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem class="radioItem5" ruau:id="radioItem5" label="Colorado"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:button class="radioButton" ruau:id="radioButton" press="{!c.getRadioMenuSelected}" label="Check the selected menu items"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText class="radioResult" ruau:id="radioResult" value="Which items get selected"/> 
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    <div style="display:inline-block;width:50%;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <h2>Radio menu source codes:</h2>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:menu&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuTriggerLink ruau:id="radioMenuLabel" label="National League West"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuList ruau:id="radioMenu"&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:radioMenuItem ruau:id="radioItem1" label="San Francisco"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:radioMnuItem ruau:id="radioItem2" label="LA Dodgers"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:radioMenuItem ruau:id="radioItem3" label="Arizona"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:radioMenuItem ruau:id="radioItem4" label="Diego" disabled="true"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:radioMenuItem ruau:id="radioItem5" label="Colorado"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;/ui:menuList&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;/ui:menu&#62;'/>    
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:button ruau:id="radioButton" press="{&#160;!c.getRadioMenuSelected}" label="Check the selected menu items"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:outputText ruau:id="radioResult" value="Which items get selected"/&#62;'/>  
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<div style="margin:20px;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    <div style="display:inline-block;width:50%;vertical-align:top;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <h2>Example: Menu Item using Iteration</h2>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:					  <ui:menuTriggerLink ruau:id="iterationTrigger" label="iterationTrigger"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:					  <ui:menuList ruau:id="iterationRadioMenu">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:					    <ruau:iteration items="{!m.iterationItems}" var="item">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:					        <ui:radioMenuItem label="{!item.label}" value="{!item.value}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:					    </ruau:iteration>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:button class="radioIterationButton" ruau:id="radioIterationButton" press="{!c.getRadioIterationMenuSelected}" label="Check the selected menu items"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText class="radioIterationResult" ruau:id="radioIterationResult" value="Which items get selected"/> 
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:   	<div style="display:inline-block;width:50%;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <h2>Radio menu using Iteration source codes:</h2>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:menu&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuTriggerLink ruau:id="iterationTrigger" label="iterationTrigger"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuList ruau:id="iterationRadioMenu"&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ruau:iteration items="{&#160;!m.iterationItems}" var="item"&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#60;ui:radioMenuItem label="{&#160;!item.label}" value="{&#160;!item.type} ruau:id="{&#160;!item.ruauId}/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;/ruau:iteration&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;/ui:menuList&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;/ui:menu&#62;'/>    
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:button ruau:id="radioIterationButton" press="{&#160;!c.getRadioIterationMenuSelected}" label="Check the selected menu items"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:outputText ruau:id="radioIterationResult" value="Which items get selected"/&#62;'/>  
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<div style="margin:20px;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    <div style="display:inline-block;width:50%;vertical-align:top;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:            <ui:menuTriggerLink ruau:id="mytrigger" label="All teams"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem label="Bayern München" click="{!c.updateLabel}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem label="FC Barcelona" click="{!c.updateLabel}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem label="Inter Milan" click="{!c.updateLabel}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:actionMenuItem label="Manchester United" click="{!c.updateLabel}"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:menuItemSeparator/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:checkboxMenuItem label="San Francisco 49ers"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:checkboxMenuItem label="Seattle Seahawks"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:checkboxMenuItem label="St. Louis Rams"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:checkboxMenuItem label="Arizona Cardinals"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:menuItemSeparator/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem label="San Francisco"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem label="LA Dodgers"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem label="Arizona"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem label="San Diego"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:                <ui:radioMenuItem label="Colorado"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:    <div style="display:inline-block;width:50%;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;ui:menu&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuTriggerLink label="All teams"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;ui:menuList&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:actionMenuItem label="Bayern München" click="{&#160;&#33;c.updateLabel}"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:actionMenuItem label="FC Barcelona" click="{&#160;&#33;c.updateLabel}"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:actionMenuItem label="Inter Milan" click="{&#160;&#33;c.updateLabel}"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:actionMenuItem label="Manchester United" click="{&#160;&#33;c.updateLabel}"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:menuItemSeparator/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:checkboxMenuItem label="San Francisco 49ers"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:checkboxMnuItem label="Seattle Seahawks"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:checkboxMenuItem label="St. Louis Rams"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:checkboxMenuItem label="Arizona Cardinals"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:menuItemSeparator/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:radioMenuItem label="San Francisco 49ers"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:radioMnuItem label="San Francisco Giants"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:radioMenuItem label="Oakland As"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#160;&#160;&#60;ui:radioMenuItem label="Golden State Warriors"/&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#160;&#160;&#60;/ui:menuList&#62;'/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:        <ui:outputText value='&#60;/ui:menu&#62;'/>      
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:<div style="display:inline-block;width:50%;vertical-align:top;">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:		<h2>Extending MenuList Example</h2>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:		<ui:menu ruau:id="uiMenu" class="extendPositionMenu">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:			<ui:menuTriggerLink class="triggerLink" ruau:id="triggerLink" label="Pick your favorite soccer club"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:			<uitest:menuList_Extend ruau:id="extendMenuList" class="extendMenuList">
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:				<ui:actionMenuItem class="extendList1" ruau:id="extendList1" label="Bayern München"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:				<ui:actionMenuItem class="extendList2" ruau:id="extendList2" label="FC Barcelona" disabled="true"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:				<ui:actionMenuItem class="extendList3" ruau:id="extendList3" label="Inter Milan"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:				<ui:actionMenuItem class="extendList4" ruau:id="extendList4" label="Manchester United"/>
ruau/ruau/src/test/components/uitest/menu_Test/menu_Test.app:</ruau:application>
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/button_LabelRequiredTest/button_LabelRequiredTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:      *  Test cancel link closes datePicker and does not perform any selection of date/time.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    testCancelLink : {
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	attributes : {value: "2012-09-10 11:23", format: "MM-dd-yyyy hh:mm"},
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var input = cmp.find("dateTimePickerTest").find("inputText").getElement();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.assertNotNull(input, "input not visible");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var value = cmp.find("dateTimePickerTest").get("v.value");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.assertEquals("2012-09-10 11:23", value, "Initial value incorrect");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		this.openDatePicker(cmp);
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var datePicker = cmp.find("dateTimePickerTest").find("datePicker");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var cancelLink = datePicker.find("cancel").getElement();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.clickOrTouch(cancelLink);
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.addWaitFor(false, function(){return $A.util.hasClass(datePicker.getElement(), "visible")});
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var value = cmp.find("dateTimePickerTest").get("v.value");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.assertEquals("2012-09-10 11:23", value, "Cancel was pressed value should not have changed");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:      *  Test set link sets the appropriate date/time.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	attributes : {format: "MM/dd/yyyy hh:mm"},
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var input = cmp.find("dateTimePickerTest").find("inputText").getElement();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.assertNotNull(input, "input not visible");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var value = cmp.find("dateTimePickerTest").get("v.value");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.assertEquals(undefined, value, "Initial value incorrect");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		this.openDatePicker(cmp);
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	    var datePicker = cmp.find("dateTimePickerTest").find("datePicker");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var setLink = datePicker.find("set").getElement();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var datePicker = cmp.find("dateTimePickerTest").find("datePicker");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.addWaitFor(false, function(){return $A.util.hasClass(datePicker.getElement(), "visible")});
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var expectedDate = this.getCleanDate(null, true);
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var value = cmp.find("dateTimePickerTest").get("v.value");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var setDate = cmp.find("dateTimePickerTest").find("inputText").getElement().value;
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.assertEquals(expectedDate, setDate, "Incorrect datetime was set.");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:     * Acessibility test, making sure that any functionality added is still accessible
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	attributes : {value: "2012-09-10 11:23", format: "MM-dd-yyyy hh:mm"},
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	  			this.openDatePicker(cmp);
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	    		$A.test.assertAccessible();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:      *  If value is set for date/time when opening up dateTimePicker it opens to the date of set value.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    testCalendarWithTimeValuePreSet : {
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	attributes : {value: '09-10-2012T11:23Z', format: 'MM/dd/yyyy HH:mm', timezone: 'GMT'},
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		 this.openDatePicker(cmp);
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var expected = "September 2012";
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var datepicker = cmp.find("dateTimePickerTest").find("datePicker");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var actual = this.getTextFromElm(datepicker);
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.assertEquals(expected, actual, "Month year of datePicker is not valid");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		actual = $A.util.getText($A.test.getElementByClass("selectedDate")[0]);
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.assertEquals("10", actual, "Day of month that is not correct");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		//Grabbing timepicker values to make sure that everything is set correctly
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var timePicker = datepicker.find("time");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var hours = timePicker.find("hours").getElement().value;
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		var minutes = timePicker.find("minutes").getElement().value;
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		actual = hours +":"+minutes;
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		$A.test.assertEquals("11:23", actual, "The default value put in the inputText box, is not the value in the timePicker");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: 	 * Firing the openPicker component event should open the date picker.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js: 	testOpenDatePickerWithComponentEvent : {
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:            		var dateTimePickerTest = cmp.find("dateTimePickerTest");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:            		var openDatePickerEvt = dateTimePickerTest.getEvent("openPicker");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:            		$A.test.assertNotUndefinedOrNull(openDatePickerEvt, "Didn't find an openPicker event");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:            		openDatePickerEvt.fire();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:            		var datePicker = dateTimePickerTest.find("datePicker").getElement();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:            		$A.test.addWaitFor(true, function(){return $A.util.hasClass(datePicker, "visible")});
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:     * Method allowing us to extract whether or not we are looking at a mobile device. Extracted from two functions because 
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:     * depending on which mode we are in (Desktop or other), we either have a header with the Month Year combo or an outputText 
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:     * and a select value
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	return $A.get('$Browser.formFactor').toLowerCase() === "desktop";
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:     * We have to ways that we need to get elements. Either from a output/select combo or from a header tag  
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:        	return $A.util.getText(cmp.find("calTitle").getElement());
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	var year = cmp.find("yearTitle").getElement().value;
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	var month = $A.util.getText(cmp.find("monthTitle").getElement());
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	return month +" "+year;
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    openDatePicker : function(cmp) {
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	var opener = cmp.find("dateTimePickerTest").find("datePickerOpener").getElement();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	var inputBox = cmp.find("dateTimePickerTest").find("inputText").getElement();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:	var datePicker = cmp.find("dateTimePickerTest").find("datePicker").getElement();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:	$A.test.addWaitFor(true, function(){return $A.util.hasClass(datePicker, "visible")});
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:     *  Checking for numbers that are less than 10, if it is adding in a 0 to the front 
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    twoDigitFormat : function(num){
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    getCleanDate : function(dateValue, hasTime) {
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	var dateSep = "/";
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	var timeSep = ":";
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	var someDate = dateValue ? new Date(dateValue) : new Date();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	var retDate = this.twoDigitFormat(someDate.getMonth()+1) + dateSep +
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		this.twoDigitFormat(someDate.getDate()) + dateSep +
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    		someDate.getFullYear();
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	if (hasTime) {
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	        var mod = someDate.getHours()%12;
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:		retDate += " " + this.twoDigitFormat(mod) + timeSep + this.twoDigitFormat(someDate.getMinutes());	
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_TestTest.js:    	return retDate;
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    <ruau:attribute name="value" type="String"/>
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    <ruau:attribute name="format" type="String"/>
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:    <ui:inputDateTime ruau:id="dateTimePickerTest" label="label" displayDatePicker="true" class="date_input_box" value="{!v.value}" format="{!v.format}"/>
ruau/ruau/src/test/components/uitest/inputDateTime_Test/inputDateTime_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js:     * Verify assigning an uninitialized local variable to outputNumber's value attribute.
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js:    testUninitializedValue:{
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js:            var testOutputNumberCmp = cmp.find('uninitializedVariable');
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js:            ruau.test.assertNotNull(testOutputNumberCmp);
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValueTest.js:            ruau.test.assertEquals('', $A.test.getText(testOutputNumberCmp.find('span').getElement()), "Should have displayed a blank value.");
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    <ruau:attribute name='noVal' type='Decimal'/>
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:    <ui:outputNumber value='{!v.noVal}' ruau:id='uninitializedVariable'/>
ruau/ruau/src/test/components/uitest/outputNumber_BlankValue/outputNumber_BlankValue.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js:            var testCmp = cmp.find('inputCurrencyEmpty');
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertEquals('', testCmp.getElement().value, "Should have displayed a blank value.");
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js:            var testCmp = cmp.find('inputCurrencyNull');
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTestTest.js:            ruau.test.assertEquals('', testCmp.getElement().value, "Should have displayed a blank value.");
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:<ruau:component model="java://org.ruauframework.impl.java.model.TestJavaModel">    
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    <ui:inputCurrency ruau:id="inputCurrencyEmpty" value="{!m.stringEmpty}" /> <br/> 
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:    <ui:inputCurrency ruau:id="inputCurrencyNull" value="{!m.stringNull}" /> <br/> 
ruau/ruau/src/test/components/uitest/inputCurrency_FormattingWithNullOrEmptyStringTest/inputCurrency_FormattingWithNullOrEmptyStringTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:<ruau:component model='java://org.ruauframework.impl.java.model.TestJavaModel'>
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:    <ui:outputDateTime value='{!m.timestamp}' timezone='America/Chicago' format='M/d/yy h:m' ruau:id='NumericValueFromJava'/>
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObj.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js:    testNonDateTimeJavaObj:{
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js:            var testCmp = cmp.find('NumericValueFromJava');
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js:            ruau.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},function(){
ruau/ruau/src/test/components/uitest/outputDateTime_NumericValueFromJavaObj/outputDateTime_NumericValueFromJavaObjTest.js:                ruau.test.assertEquals("9/23/04 11:30", $A.test.getText(testCmp.find('span').getElement()), "Value should be able to work with a numeric value");
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:<ruau:component  model="java://org.ruauframework.impl.java.model.TestJavaModel">
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ruau:attribute name="isDomEventSet" type="boolean" default="false"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="blur" label="blur" class="blur" value="{!m.string}" updateOn="blur" blur="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<div id="change">
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="change" label="change" class="change" value="{!m.string}" updateOn="change"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="click" label="click" class="click" value="{!m.string}" updateOn="click" click="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="dblclick" label="dblclick" class="dblclick" value="{!m.string}" updateOn="dblclick" dblclick="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="focus" label="focus" class="focus" value="{!m.string}" updateOn="focus" focus="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="mousedown" label="mousedown" class="mousedown" value="{!m.string}" updateOn="mousedown" mousedown="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="mousemove" label="mousemove" class="mousemove" value="{!m.string}" updateOn="mousemove" mousemove="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="mouseout" label="mouseout" class="mouseout" value="{!m.string}" updateOn="mouseout" mouseout="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="mouseover" label="mouseover" class="mouseover" value="{!m.string}" updateOn="mouseover" mouseover="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="mouseup" label="mouseup" class="mouseup" value="{!m.string}" updateOn="mouseup" mouseup="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="keydown" label="keydown" class="keydown" value="{!m.string}" updateOn="keydown" keydown="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="keypress" label="keypress" class="keypress" value="{!m.string}" updateOn="keypress" keypress="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="keyup" label="keyup" class="keyup" value="{!m.string}" updateOn="keyup" keyup="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="select" label="select" class="select" value="{!m.string}" updateOn="select"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="empty" label="" class="empty" value="{!m.string}" updateOn="blur" blur="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	output: <ui:outputText value="{!m.string}"/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<div id="inspectBaseEvent"> 
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	<ui:inputText ruau:id="keyup" label="inspectBaseEvent" class="keyup" value="{!m.string}" updateOn="keyup" keypress="{!c.inspectKeyEvent}" mousedown="{!c.inspectMouseEvent}"/><br/> 
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:	outputValue: <ui:outputText ruau:id="outputValue" class="outputValue" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js:		var keyCodeValue =  event.getParam("keyCode");
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js:		$A.log("keyboard Event Fired");
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js:		cmp.find("outputValue").set("v.value", keyCodeValue);
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js:    	var buttonValue =  event.getParam("button");
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js:        cmp.find("outputValue").set("v.value", buttonValue);
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js:    	var domEvent = event.getParam("domEvent");
ruau/ruau/src/test/components/uitest/inputText_updateOnWithLabelTest/inputText_updateOnWithLabelTestController.js:    		cmp.set("v.isDomEventSet", false);
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:    limitations under the License.
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:	openDialog : function(cmp, evt) {
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:		var openEvent = $A.get("e.ui:openDialog");
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:		openEvent.setParams({
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:			dialog : cmp.find("dialogBoxId"),
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:	closeDialog : function(cmp, evt) {
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:		var value = evt.getParam("confirmClicked") ? "Data Submited" : "Data Not Submitted";
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTestController.js:		cmp.find("resultLabel").set("v.value", value);
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    <ui:dialogManager/>
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    <ruau:handler event="ui:closeDialog" action="{!c.closeDialog}"/>
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    <ui:inputText ruau:id="resultLabel" class="resultLabel" value=""/>
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    <ui:button ruau:id="1" class="launchDialogButton" label="Click for Non-Modal!" press="{!c.openDialog}" />
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    <ui:dialog ruau:id="dialogBoxId" title="BOOM!" description="Testing Non ModalDialog Box">
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:        <ruau:set attribute="buttons">
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:           <ui:dialogButtons defaultButtons="both"/>
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:    </ui:dialog> 
ruau/ruau/src/test/components/uitest/dialog_NonModalTest/dialog_NonModalTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    <ruau:attribute name="skipRender" type="Boolean"/>
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    <ruau:attribute name="skipAfterRender" type="Boolean"/>
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    <ruau:attribute name="skipRerender" type="Boolean"/>
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:    <ruau:attribute name="skipUnrerender" type="Boolean"/>
ruau/ruau/src/test/components/uitest/badRenderer/badRenderer.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js:        var skipRender = $A.util.getBooleanValue(component.get("v.skipRender"));
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js:    afterRender: function(component, helper) {
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js:        var skipAfterRender = $A.util.getBooleanValue(component.get("v.skipAfterRender"));
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js:        var skipRerender = $A.util.getBooleanValue(component.get("v.skipRerender"));
ruau/ruau/src/test/components/uitest/badRenderer/badRendererRenderer.js:        var skipUnrender = $A.util.getBooleanValue(component.get("v.skipUnrender"));
ruau/ruau/src/test/components/uitest/popupTestExtendedPopup/popupTestExtendedPopup.cmp:<ruau:component extends="ui:popup">
ruau/ruau/src/test/components/uitest/popupTestExtendedPopup/popupTestExtendedPopup.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ruau:attribute name="iconAndLabelButtonPressedMessage" type="String" default="Icon and label button NOT yet pressed"/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ruau:attribute name="labelOnlyButtonPressedMessage" type="String" default="Label only button NOT yet pressed"/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ruau:attribute name="iconOnlyButtonPressedMessage" type="String" default="Icon only button NOT yet pressed"/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:	<ruau:attribute name="isDomEventSet" type="boolean" default="{!false}"/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ui:button class="Icon_and_label" label='Icon and label' disabled='false' press="{!c.handleIconAndLabel}" iconImgSrc="/ruauFW/resources/ruau/images/checkbox_checked.gif" accesskey="i"/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ui:outputText class="Icon_and_label" value='{!v.iconAndLabelButtonPressedMessage}'/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ui:button class="Label_only" label='Label only!!' disabled='false' press="{!c.handleLabelOnly}" iconImgSrc="" labelDir="rtl"/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ui:outputText class="Label_only" value='{!v.labelOnlyButtonPressedMessage}'/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ui:button class='Icon_only' disabled='false' press="{!c.handleIconOnly}" iconImgSrc="/ruauFW/resources/ruau/images/checkbox_checked.gif" label="Icon_only" labelDisplay="false"/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ui:outputText class='Icon_only' value='{!v.iconOnlyButtonPressedMessage}'/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:    <ui:button class="testDomEventBtn" label="testDomEvent" press="{!c.checkDomEventSet}"/>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/button_Test/button_Test.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/button_Test/button_Test.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/button_Test/button_Test.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/button_Test/button_Test.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/button_Test/button_Test.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/button_Test/button_Test.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/button_Test/button_Test.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/button_Test/button_Test.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/button_Test/button_Test.css: * limitations under the License.
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js:    handleIconAndLabel : function(cmp, event){
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js:        cmp.set("v.iconAndLabelButtonPressedMessage", "Icon and label button was pressed!!!");
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js:    handleLabelOnly : function(cmp, event){
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js:        cmp.set("v.labelOnlyButtonPressedMessage", "Label only button was pressed!!!");
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js:    handleIconOnly : function(cmp, event){
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js:        cmp.set("v.iconOnlyButtonPressedMessage", "Icon only button was pressed!!!");
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js:    	var domEvent = event.getParam("domEvent");
ruau/ruau/src/test/components/uitest/button_Test/button_TestController.js:    		cmp.set("v.isDomEventSet", false);
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js:		CODument.addEventListener('touchmove', function (e) { e.preventDefault(); }, false);
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js:		var collection=[];
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js:    	for(var i=0; i<500; i++){
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js:    handleClick: function(component, event, helper){
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfController.js:    		var _c = component,
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:		attributes: {},
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        	var destroyed,
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        		totalScrollerComponentsInDOM,
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        		totalOutputURLComponentsInDOM,
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        		queryString = $A.getQueryStatement().from("component")
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        	totalScrollerComponentsInDOM  = queryString.query().groups['markup://ui:scroller'];
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        	totalOutputURLComponentsInDOM  = queryString.query().groups['markup://ui:outputURL'];
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        	if(totalScrollerComponentsInDOM && totalOutputURLComponentsInDOM){
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        		$A.test.assertEquals(2, totalScrollerComponentsInDOM.length);
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        		$A.test.assertEquals(500, totalOutputURLComponentsInDOM.length);
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        		$A.test.assert(false, "DOM query returned empty.");
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        	var body = $A.getRoot().find("scrollContainer").get("v.body");
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        	var toDestroy = body.splice(0,1);
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        	$A.getRoot().find("scrollContainer").set("v.body", body);
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        	$A.test.addWaitFor(destroyed, function(){return "7:2;a";}, function(){
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:        		totalScrollerComponentsInDOM  = queryString.query().groups['markup://ui:scroller'];
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:            	totalOutputURLComponentsInDOM  = queryString.query().groups['markup://ui:outputURL'];
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:            	$A.test.assertUndefined(totalScrollerComponentsInDOM);
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerfTest.js:            	$A.test.assertUndefined(totalOutputURLComponentsInDOM);
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: * limitations under the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: 	border: 5px solid orange;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css: 	display: inline-block;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css:.THIS .container {
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css:	border: 5px solid black;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css:.THIS .scrollWrapper { 
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css:	background:#aaa;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css:	padding:0 10px;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css:	background-color:#fafafa;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css:.THIS .scrollWrapper .miniScrollWrapper {
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css:	padding:0 10px;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.css:	background-color:#fafafa;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:<ruau:component
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:	controller="java://org.ruauframework.component.ui.UIScrollerDataProvider"
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:	description="A test scroller for testing performance.">
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:	<ruau:handler name="init" value="{!this}" action="{!c.init}"/>
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:	<ruau:attribute name="rows" type="List"/>
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:			margin: 0;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:			padding: 0;
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:	 <div class="section">
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:     	<div ruau:id="scrollContainer" class="container">
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:     		<ui:scroller ruau:id="outer" class="scrollWrapper">
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:     			<ui:scroller ruau:id="inner" class="scrollWrapper">
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:	        		<ruau:iteration var="row" items="{!v.rows}">
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:	          			<div class="item">
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:				        	<ui:outputURL value="javascript:void(0);" label="{!row.text}" click="{!c.handleClick}"></ui:outputURL>
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:	        		</ruau:iteration>
ruau/ruau/src/test/components/uitest/scroller_basicPerf/scroller_basicPerf.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css: * limitations under the License.
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css:.THIS .iconClassLink {
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css:    background-image: url("/ruauFW/resources/ruau/images/menuitem-check.png");
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.css:    background-repeat: no-repeat;
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:	<ruau:attribute name="item" type="String" default="A long time ago, in a galaxy far, far away... "/>
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:	<ui:label label="ui:outputCheckbox  checked: " /><ui:outputCheckbox value="true"/>  <br/>
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:	<ui:label label="ui:outputCheckbox  Not checked: " /><ui:outputCheckbox value="false"/>  <br/>
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:	<ui:label label="ui:outputURL   Not disabled checked: " /><ui:outputURL  iconClass="iconClassLink" label="temp" value="SomethingSomethingDarkSide"/>  <br/>
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:	<ui:label label="ui:outputTextArea  Not disabled checked: " /><ui:outputTextArea value="{!v.item}"/>  <br/>
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:	<ui:label label="ui:outputLabel  Not disabled checked: " /><ui:outputLabel value="THIS IS A LABEL"/>  <br/>
ruau/ruau/src/test/components/uitest/output_themeingTest/output_themeingTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:<ruau:component >
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputDateTime value="2004-09-23T16:30:00.000Z" timezone="GMT" ruau:id="myOutputDateTimeComp" /> <br/>
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputDateTime value="2004-09-23T16:30:00.000+0800" timezone="GMT" ruau:id="myOutputDateTimeCompGMT8" /> <br/> <!--Sep 23, 2004 8:30:00 AM-->
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    timezoneGMT+8 HongKong(No daylight saving time): <br/>
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputDateTime value="2013-11-02T16:01:00.000Z" timezone="Asia/Hong_Kong" ruau:id="myOutputDateTimeCompHongKong1" /> <br/> <!--Nov 3, 2013 12:01:00 PM-->
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputDateTime value="2013-11-02T17:01:00.000Z" timezone="Asia/Hong_Kong" ruau:id="myOutputDateTimeCompHongKong2" /> <br/> <!--Nov 3, 2013 1:01:00 PM-->
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputDateTime value="2013-11-02T18:01:00.000Z" timezone="Asia/Hong_Kong" ruau:id="myOutputDateTimeCompHongKong3" /> <br/> <!--Nov 3, 2013 2:01:00 PM-->
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    timezoneGMT-5 NewYork (GMT-4 in SummaryTime 03/10/2013 2am ~ 11/03/2013 1am): <br/>
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputDateTime value="2013-11-03T04:01:00.000Z" timezone="America/New_York" ruau:id="myOutputDateTimeCompNewYork1" /> <br/> <!-- Nov 3, 2013 12:01:00 AM -->
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputDateTime value="2013-11-03T05:01:00.000Z" timezone="America/New_York" ruau:id="myOutputDateTimeCompNewYork2" /> <br/> <!-- Nov 3, 2013 1:01:00 AM -->
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputDateTime value="2013-11-03T06:01:00.000Z" timezone="America/New_York" ruau:id="myOutputDateTimeCompNewYork3" /> <br/> <!-- again Nov 3, 2013 1:01:00 AM -->
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputDate value="2004-09-23" ruau:id="myOutputDateComp" /> <br/>
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputText value="4:30:00 PM" ruau:id="myOutputTextComp" /> <br/> 
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputNumber value="3.14159" format=".00" ruau:id="myOutputNumberComp" /> <br/>
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputPercent value="0.14566" format=".00%" ruau:id="myOutputPercentComp" /> <br/>
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:    <ui:outputCurrency value="1234567890" format="¤#,##0.00" ruau:id="myOutputCurrencyComp" /> 
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	testDisplayDuration:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        	var num = 1095957000000;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'milliseconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	        $A.test.assertEquals("35 years", $A.localizationService.displayDuration(duration, false), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	        $A.test.assertEquals("in 35 years", $A.localizationService.displayDuration(duration, true), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	testDisplayDurationInDays:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        	var num = 1095957000000;//Sep 23, 2004 4:30:00 PM
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'milliseconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(12684.6875, $A.localizationService.displayDurationInDays(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	testDisplayDurationInHours:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        	var num = 1095957000000;//Sep 23, 2004 4:30:00 PM
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'milliseconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(304432.5, $A.localizationService.displayDurationInHours(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	testDisplayDurationInMilliseconds:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        	var num = 1095957000000;//Sep 23, 2004 4:30:00 PM
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'milliseconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(num, $A.localizationService.displayDurationInMilliseconds(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	testDisplayDurationInMinutes:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        	var num = 1095957000000;//Sep 23, 2004 4:30:00 PM
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'milliseconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(18265950, $A.localizationService.displayDurationInMinutes(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	testDisplayDurationInMonths:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 1095957000000;//Sep 23, 2004 4:30:00 PM
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'milliseconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(422.8229166666667, $A.localizationService.displayDurationInMonths(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	testDisplayDurationInSeconds:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 1095957000000;//Sep 23, 2004 4:30:00 PM
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'milliseconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(num/1000, $A.localizationService.displayDurationInSeconds(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	testDisplayDurationInYears:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 1095957000000;//Sep 23, 2004 4:30:00 PM
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'milliseconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(34.75256849315068, $A.localizationService.displayDurationInYears(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testGetDaysInDuration:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 23;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'days');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(num, $A.localizationService.getDaysInDuration(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testGetHoursInDuration:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 16;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'hours');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(num, $A.localizationService.getHoursInDuration(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testGetMillisecondsInDuration:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 50;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'milliseconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(num, $A.localizationService.getMillisecondsInDuration(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testGetMinutesInDuration:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 30;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'minutes');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(num, $A.localizationService.getMinutesInDuration(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testGetMonthsInDuration:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 9;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'months');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(num, $A.localizationService.getMonthsInDuration(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testGetSecondsInDuration:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 30;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'seconds');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(num, $A.localizationService.getSecondsInDuration(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testGetYearsInDuration:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var num = 13;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			var duration = $A.localizationService.duration(num, 'years');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    		$A.test.assertEquals(num, $A.localizationService.getYearsInDuration(duration), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	        var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	        $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			$A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},function(){
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	        	var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:		        var dateObj1 = $A.localizationService.parseDateTime(outputDateStr, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:		        var dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2004 4:30:01 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isAfter(dateObj1, dateObj2, 'seconds'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isAfter(dateObj2, dateObj1, 'seconds'), "date2 is after date1.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'seconds'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2004 4:31:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isAfter(dateObj1, dateObj2, 'minutes'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isAfter(dateObj2, dateObj1, 'minutes'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'minutes'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2004 5:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isAfter(dateObj1, dateObj2, 'hours'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isAfter(dateObj2, dateObj1, 'hours'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'hours'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		//days
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Sep 24, 2004 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isAfter(dateObj1, dateObj2, 'days'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isAfter(dateObj2, dateObj1, 'days'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'days'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Oct 23, 2004 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isAfter(dateObj1, dateObj2, 'months'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isAfter(dateObj2, dateObj1, 'months'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'months'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		//years
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2005 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isAfter(dateObj1, dateObj2, 'years'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isAfter(dateObj2, dateObj1, 'years'), "date1 is not after date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'years'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    	    var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	        var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	        $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:			$A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},function(){
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	        	var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:		        var dateObj1 = $A.localizationService.parseDateTime(outputDateStr, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:		        var dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2004 4:30:01 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isBefore(dateObj1, dateObj2, 'seconds'), "date1 is before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isBefore(dateObj2, dateObj1, 'seconds'), "date2 is not before date1.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'seconds'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2004 4:31:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isBefore(dateObj1, dateObj2, 'minutes'), "date1 is before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isBefore(dateObj2, dateObj1, 'minutes'), "date1 is not before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'minutes'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2004 5:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isBefore(dateObj1, dateObj2, 'hours'), "date1 is before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isBefore(dateObj2, dateObj1, 'hours'), "date1 is not before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'hours'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		//days
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Sep 24, 2004 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isBefore(dateObj1, dateObj2, 'days'), "date1 is before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isBefore(dateObj2, dateObj1, 'days'), "date1 is not before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'days'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Oct 23, 2004 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isBefore(dateObj1, dateObj2, 'months'), "date1 is before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isBefore(dateObj2, dateObj1, 'months'), "date1 is not before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'months'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		//years
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2005 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(true, $A.localizationService.isBefore(dateObj1, dateObj2, 'years'), "date1 is before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isBefore(dateObj2, dateObj1, 'years'), "date1 is not before date2.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	    		$A.test.assertEquals(false, $A.localizationService.isSame(dateObj2, dateObj1, 'years'), "Both dates are not same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:	testIsSame:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    	    var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj1 = $A.localizationService.parseDateTime(outputDateStr, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2004 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(true, $A.localizationService.isSame(dateObj1, dateObj2), "Both dates are same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(true, $A.localizationService.isSame(dateObj1, dateObj2, 'seconds'), "Both dates are same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(true, $A.localizationService.isSame(dateObj1, dateObj2, 'minutes'), "Both dates are same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(true, $A.localizationService.isSame(dateObj1, dateObj2, 'hours'), "Both dates are same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(true, $A.localizationService.isSame(dateObj1, dateObj2, 'days'), "Both dates are same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(true, $A.localizationService.isSame(dateObj1, dateObj2, 'weeks'), "Both dates are same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(true, $A.localizationService.isSame(dateObj1, dateObj2, 'months'), "Both dates are same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(true, $A.localizationService.isSame(dateObj1, dateObj2, 'years'), "Both dates are same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj = $A.localizationService.endOf(outputDateStr, 'second');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 23, 2004 4:30:00 PM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.endOf(outputDateStr, 'minute');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 23, 2004 4:30:59 PM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.endOf(outputDateStr, 'hour');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 23, 2004 4:59:59 PM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.endOf(outputDateStr, 'day');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 23, 2004 11:59:59 PM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.endOf(outputDateStr, 'month');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 30, 2004 11:59:59 PM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.endOf(outputDateStr, 'year');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Dec 31, 2004 11:59:59 PM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testStartOf:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj = $A.localizationService.startOf(outputDateStr, 'second');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 23, 2004 4:30:00 PM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.startOf(outputDateStr, 'minute');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 23, 2004 4:30:00 PM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.startOf(outputDateStr, 'hour');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 23, 2004 4:00:00 PM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.startOf(outputDateStr, 'day');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 23, 2004 12:00:00 AM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.startOf(outputDateStr, 'month');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Sep 01, 2004 12:00:00 AM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    dateObj = $A.localizationService.startOf(outputDateStr, 'year');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals('Jan 01, 2004 12:00:00 AM', $A.localizationService.formatDateTime(dateObj, format, 'en'), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatDate:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals($A.localizationService.formatDate('Sep 23, 2004', 'MMM DD, YYYY', 'en'), outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals($A.localizationService.formatDate('Sep 23, 2004', '', 'en'), outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatDate,'','','en',"Invalid date value","testFormatDate fail, Expected:Invalid date value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatDate,'a','','en',"Invalid date value","testFormatDate fail, Expected:Invalid date value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatDateUTC:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals($A.localizationService.formatDateUTC('Sep 23, 2004', 'MMM DD, YYYY', 'en'),
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        'Sep 23, 2004', "formatDateUTC should keep the date constant");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals($A.localizationService.formatDateUTC('Sep 23, 2004', 'MMM DD, YYYY', 'en'),
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                         outputDateStr, "date should be the same as Fixed format UTC.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals($A.localizationService.formatDateUTC('Sep 23, 2004', '', 'en'), outputDateStr,
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        "date should be the same as Default [en] format UTC.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatDateUTC,'','','en',"Invalid date value","testFormatDateUTC fail, Expected:Invalid date value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatDateUTC,'a','','en',"Invalid date value","testFormatDateUTC fail, Expected:Invalid date value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatDateTime:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals($A.localizationService.formatDateTime('Sep 23, 2004 4:30:00 PM', format, 'en'), outputDateStr, "Both datetimes should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals($A.localizationService.formatDateTime('Sep 23, 2004 4:30:00 PM', '', 'en'), outputDateStr, "Both datetimes should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatDateTime,'','','en',"Invalid date time value","testFormatDateTime fail, Expected:Invalid date time value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatDateTime,'a','','en',"Invalid date time value","testFormatDateTime fail, Expected:Invalid date time value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:     * This test is excluded from ipad and iphone because safari on them treat daylight saving differently. as a result, 
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:     * we get "invalid date time" error on autobuild safari-ios (W-2123968)
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testDaylightSavingTime: {
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var expected1 = "Nov 3, 2013 12:01:00 AM";
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var expected2 = "Nov 3, 2013 1:01:00 AM";
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var expected3 = "Nov 3, 2013 2:01:00 AM";
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.verifyDateAndTime(component,"myOutputDateTimeCompHongKong1",expected1);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.verifyDateAndTime(component,"myOutputDateTimeCompHongKong2",expected2);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.verifyDateAndTime(component,"myOutputDateTimeCompHongKong3",expected3);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.verifyDateAndTime(component,"myOutputDateTimeCompNewYork1",expected1);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.verifyDateAndTime(component,"myOutputDateTimeCompNewYork2",expected2);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.verifyDateAndTime(component,"myOutputDateTimeCompNewYork3",expected2);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatDateTimeUTC24HR:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    	var lang = 'en'; 
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        var format = 'MMM DD, YYYY H:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        var dateAndTimeAMSummerTime = 'Oct 31, 2004 0:59:00 AM';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        var expectedAMSummerTime = dateAndTimeAMSummerTime;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        var actualAMSummerTime = $A.localizationService.formatDateTimeUTC(dateAndTimeAMSummerTime,format,lang);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        $A.test.assertEquals(expectedAMSummerTime,actualAMSummerTime,"get unexpected AMSummerTime in testFormatDateTimeUTC24HR of LocalizationService_TestTest");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        //test start of winter time
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        var dateAndTimeAMWinterTime = 'Oct 31, 2004 1:01:00 AM';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        var expectedAMWinterTime = dateAndTimeAMWinterTime;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        var actualAMWinterTime = $A.localizationService.formatDateTimeUTC(dateAndTimeAMWinterTime,format,lang);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        $A.test.assertEquals(expectedAMWinterTime,actualAMWinterTime,"get unexpected AMWinterTime in testFormatDateTimeUTC24HR of LocalizationService_TestTest");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatDateTimeUTC12HR:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var lang = 'en'; 
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format = 'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var dateAndTimeAMSummerTime = 'Oct 31, 2004 0:59:00 AM';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            //we parse hour=0 to 12 because moment.js->formatTokenFunctions->h does this.hours() % 12 || 12
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var expectedAMSummerTime = 'Oct 31, 2004 12:59:00 AM';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var actualAMSummerTime = $A.localizationService.formatDateTimeUTC(dateAndTimeAMSummerTime,format,lang);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals(expectedAMSummerTime,actualAMSummerTime,"get unexpected AMSummerTime in testFormatDateTimeUTC12HR of LocalizationService_TestTest");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            //test start of winter time
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var dateAndTimeAMWinterTime = 'Oct 31, 2004 1:01:00 AM';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var expectedAMWinterTime = dateAndTimeAMWinterTime;
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var actualAMWinterTime = $A.localizationService.formatDateTimeUTC(dateAndTimeAMWinterTime,format,lang);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals(expectedAMWinterTime,actualAMWinterTime,"get unexpected AMWinterTime in testFormatDateTimeUTC12HR of LocalizationService_TestTest");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatDateTimeUTC:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format = 'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var str = 'Sep 23, 2004 4:30:00 PM';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals($A.localizationService.formatDateTimeUTC(str, format, 'en'), outputDateStr, "Both datetimes should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals($A.localizationService.formatDateTimeUTC(str, '', 'en'), outputDateStr, "Both datetimes should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatDateTimeUTC,'','','en',"Invalid date time value","testFormatDateTimeUTC fail, Expected:Invalid date time value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatDateTimeUTC,'a','','en',"Invalid date time value","testFormatDateTimeUTC fail, Expected:Invalid date time value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatTime:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputTextComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals($A.localizationService.formatTime('Sep 23, 2004 4:30:00 PM', 'h:mm:ss A', 'en'), outputDateStr, "Both times should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals($A.localizationService.formatTime('Sep 23, 2004 4:30:00 PM', '', 'en'), outputDateStr, "Both times should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatTime,'','','en',"Invalid time value","testFormatTime fail, Expected:Invalid time value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatTime,'a','','en',"Invalid time value","testFormatTime fail, Expected:Invalid time value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatTimeUTC:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputTextComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals($A.localizationService.formatTimeUTC(str, 'h:mm:ss A', 'en'), outputDateStr, "Both times should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals($A.localizationService.formatTimeUTC(str, '', 'en'), outputDateStr, "Both times should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatTimeUTC,'','','en',"Invalid time value","testFormatTimeUTC fail, Expected:Invalid time value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            helper.testInvalidDateAndTime($A.localizationService.formatTimeUTC,'a','','en',"Invalid time value","testFormatTimeUTC fail, Expected:Invalid time value");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testParseDateTime:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj = $A.localizationService.parseDateTime('Sep 23, 2004 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dt = $A.localizationService.formatDateTime(dateObj, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(dt, outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(null, $A.localizationService.parseDateTime('', format, 'en'), "Expect null.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var dateObj = new Date(2004,10,23,12,30,59,123);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var expected = dateObj.getUTCFullYear() + "-" +
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                               (dateObj.getUTCMonth() + 1) + "-" +
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                               dateObj.getUTCDate() + "T" +
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                               (dateObj.getUTCHours() < 10 ? '0' + dateObj.getUTCHours() : dateObj.getUTCHours()) + ':' +
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                               dateObj.getUTCMinutes() + ':' +
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                               dateObj.getUTCSeconds() + '.' +
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                               dateObj.getUTCMilliseconds() + 'Z';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals(expected, $A.localizationService.toISOString(dateObj), "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals('', $A.localizationService.toISOString(''), "Expect ''.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals(null, $A.localizationService.toISOString(null), "Expect null.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testParseDateTimeISO8601:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:        var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj = $A.localizationService.parseDateTimeISO8601('2004-09-23T16:30:00');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dt = $A.localizationService.formatDateTime(dateObj, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(dt, outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(null, $A.localizationService.parseDateTimeISO8601(''), "Expect null.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testParseDateTimeUTC:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals(null, $A.localizationService.parseDateTimeUTC('', format, 'en'), "Expected null.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var str = 'Sep 23, 2004 4:30:00 PM';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj = $A.localizationService.parseDateTimeUTC(str, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dt = $A.localizationService.formatDateTimeUTC(dateObj, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.test.assertEquals(dt, outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testUTCToWallTime:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format = 'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj1 = $A.localizationService.parseDateTime('Sep 23, 2004 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var callback1 = function(walltime){
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        var dt = $A.localizationService.formatDateTime(walltime, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        $A.test.assertEquals(dt, outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.localizationService.UTCToWallTime(dateObj1, 'GMT', callback1);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2004 8:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var callback2 = function(walltime){
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        var dt = $A.localizationService.formatDateTime(walltime, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        $A.test.assertEquals(dt, outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.localizationService.UTCToWallTime(dateObj2, 'America/New_York', callback2);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj3 = $A.localizationService.parseDateTime('Sep 23, 2004 11:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var callback3 = function(walltime){
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        var dt = $A.localizationService.formatDateTime(walltime, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        $A.test.assertEquals(dt, outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.localizationService.UTCToWallTime(dateObj3, 'America/Los_Angeles', callback3);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testWallTimeToUTC:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var format =  'MMM DD, YYYY h:mm:ss A';
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    	    var testCmp = component.find('myOutputDateTimeComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.addWaitFor(true, function(){return $A.test.getText(testCmp.find('span').getElement()).length > 0;},
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            	var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                var dateObj1 = $A.localizationService.parseDateTime('Sep 23, 2004 4:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var callback1 = function(walltime){
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        var dt = $A.localizationService.formatDateTime(walltime, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        $A.test.assertEquals(dt, outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.localizationService.WallTimeToUTC(dateObj1, 'GMT', callback1);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj2 = $A.localizationService.parseDateTime('Sep 23, 2004 12:30:00 PM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var callback2 = function(walltime){
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        var dt = $A.localizationService.formatDateTime(walltime, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        $A.test.assertEquals(dt, outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.localizationService.WallTimeToUTC(dateObj2, 'America/New_York', callback2);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var dateObj3 = $A.localizationService.parseDateTime('Sep 23, 2004 9:30:00 AM', format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    var callback3 = function(walltime){
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        var dt = $A.localizationService.formatDateTime(walltime, format, 'en');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                        $A.test.assertEquals(dt, outputDateStr, "Both dates should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:                    $A.localizationService.WallTimeToUTC(dateObj3, 'America/Los_Angeles', callback3); 
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatNumber:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputNumberComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals('3.14', $A.test.getText(testCmp.find('span').getElement()), "Decimal part of value was not rounded up based on format.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("3.142", $A.localizationService.formatNumber(3.14159), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("3.146", $A.localizationService.formatNumber(3.14559), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("-3.142", $A.localizationService.formatNumber(-3.14159), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("-3.146", $A.localizationService.formatNumber(-3.14559), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatPercent:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputPercentComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals('14.57%', $A.test.getText(testCmp.find('span').getElement()), "Decimal part of value was not rounded up based on format.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("15%", $A.localizationService.formatPercent(0.14566), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("315%", $A.localizationService.formatPercent(3.14559), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("314%", $A.localizationService.formatPercent(3.14119), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("-315%", $A.localizationService.formatPercent(-3.14559), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("-314%", $A.localizationService.formatPercent(-3.14119), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:    testFormatCurrency:{
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            var testCmp = component.find('myOutputCurrencyComp');
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals('$1,234,567,890.00', $A.test.getText(testCmp.find('span').getElement()), "Decimal part of value was not rounded up based on format.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("($1,234,567,890.00)", $A.localizationService.formatCurrency(-1234567890), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("$1,234,567,890.32", $A.localizationService.formatCurrency(1234567890.321), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestTest.js:            $A.test.assertEquals("$1,234,567,890.33", $A.localizationService.formatCurrency(1234567890.326), "Both values should be same.");
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:	verifyDateAndTime: function(component,testCmpId,expected) {
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:                var testCmp = component.find(testCmpId);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:                $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:                $A.test.addWaitFor(true,
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:                    return ($A.test.getText(testCmp.find('span').getElement()).length > 0);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:                    	var outputDateStr = $A.test.getText(testCmp.find('span').getElement());
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:                    	$A.test.assertEquals(expected,outputDateStr,"get unexpected testDaylightSavingTime for "+testCmpId);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:     testInvalidDateAndTime: function(func, dateAndTime, format, lang, expectedErrorMsg, errorOutMsg) {
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:    		 func(dateAndTime, format, lang);
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:         } catch(e){
ruau/ruau/src/test/components/uitest/LocalizationService_Test/LocalizationService_TestHelper.js:             $A.test.assertEquals(expectedErrorMsg, e.message, errorOutMsg);
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:<ruau:component model="java://org.ruauframework.impl.java.model.TestJavaModel">
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    <ruau:attribute name="testCmpName" type="string" default="SelectMulti"/>
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    <ui:inputSelect multiple="true" ruau:id="SelectMulti" value="{!m.selectValue}" updateOn="blur">
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    	<ui:inputSelectOption name="Opt1" value="false" text="option1" label="Option1"/>
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    	<ui:inputSelectOption name="Opt2" value="false" text="option2" label="Option2"/>
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    	<ui:inputSelectOption name="Opt3" value="false" text="option3" label="Option3"/>
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:    <ruautest:baseInputTest cmpType="{!v.testCmpName}" ref="{!m.selectValue}"/>
ruau/ruau/src/test/components/uitest/inputMultiSelect_NestedOptionsTest/inputMultiSelect_NestedOptionsTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js:	openDialog : function(cmp, evt) {
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js:		var openEvent = $A.get("e.ui:openDialog");
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js:		openEvent.setParams({
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js:			dialog : cmp.find("dialogBoxId"),
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js:	closeDialog : function(cmp, evt) {
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js:		var value = evt.getParam("confirmClicked") ? "Data Submited" : "Data Not Submitted";
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTestController.js:		cmp.find("resultLabel").set("v.value", value);
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    <ui:dialogManager/>
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    <ruau:handler event="ui:closeDialog" action="{!c.closeDialog}"/>
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    <ui:inputText ruau:id="resultLabel" class="resultLabel" value=""/>
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    <ui:button ruau:id="1" class="launchDialogButton" label="Click for Modal!" press="{!c.openDialog}" />
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    <ui:dialog clickOutToClose="false" ruau:id="dialogBoxId" title="Bang!" description="Testing Modal Dialog Box" isModal="true">
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:        This is a public service announcement. Have you heard the word? No? Birds the word mate. Click ok to exit
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:    </ui:dialog>
ruau/ruau/src/test/components/uitest/dialog_ModalTest/dialog_ModalTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js:    testFormatDate:{
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js:            ruau.test.addWaitFor(true, function(){return $A.test.getText(cmp.getSuper().find('span').getElement()).length > 0;},function(){
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateTest.js:                ruau.test.assertEquals("23-9-2004", $A.test.getText(cmp.getSuper().find('span').getElement()), "Value should be the one specified in the overridden method");
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js:    formatDate: function(component) {        
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js:		var outputCmp = component.getSuper().find("span");
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDateHelper.js:        var elem = outputCmp ? outputCmp.getElement() : null;
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:<ruau:component extends="ui:outputDate">
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:	<ruau:set attribute="value" value="2004-09-23"/>		
ruau/ruau/src/test/components/uitest/outputDate_OverriddenFormatDate/outputDate_OverriddenFormatDate.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:<ruau:component model="java://org.ruauframework.impl.java.model.TestJavaModel">
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    <ruau:attribute name="testCmpName" type="string" default="SelectMulti"/>
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    <ui:inputSelect multiple="true" ruau:id="SelectMulti" updateOn="blur">
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    	<ui:inputSelectOption ruau:id="option1" name="Opt1" value="false" text="option1" label="Option1"/>
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    	<ui:inputSelectOption ruau:id="option2" name="Opt2" value="true" text="option2" label="Option2"/>
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:    	<ui:inputSelectOption ruau:id="option3" name="Opt3" value="true" text="option3" label="Option3"/>
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js:    testOverridingDefSelectedOptionsBehaviour: {
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js:        	var option1 = component.find("option1").get('v.value');
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js:        	var option2 = component.find("option2").get('v.value');
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js:            var option3 = component.find("option3").get('v.value');
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js:            $A.test.assertFalse(option1,"Option1 should not be selected by default")
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js:            $A.test.assertTrue(option2,"Option2 should be selected by default");
ruau/ruau/src/test/components/uitest/inputMultiSelect_OverridingDefBehaviorTest/inputMultiSelect_OverridingDefBehaviorTestTest.js:            $A.test.assertTrue(option3,"Option3 should be selected by default");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	expectedDataProvider1Data : [{"char":"A","index":1},{"char":"B","index":2},{"char":"C","index":3},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"D","index":4},{"char":"E","index":5},{"char":"F","index":6},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"G","index":7},{"char":"H","index":8},{"char":"I","index":9},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"J","index":10},{"char":"K","index":11},{"char":"L","index":12},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"M","index":13},{"char":"N","index":14},{"char":"O","index":15},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"P","index":16},{"char":"Q","index":17},{"char":"R","index":18},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"S","index":19},{"char":"T","index":20},{"char":"U","index":21},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"V","index":22},{"char":"W","index":23},{"char":"X","index":24},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"Y","index":25}],
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	expectedDataProvider2Data : [{"char":"Z","index":26},{"char":"A","index":27},{"char":"B","index":28},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"C","index":29},{"char":"D","index":30},{"char":"E","index":31},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"F","index":32},{"char":"G","index":33},{"char":"H","index":34},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"I","index":35},{"char":"J","index":36},{"char":"K","index":37},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"L","index":38},{"char":"M","index":39},{"char":"N","index":40},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"O","index":41},{"char":"P","index":42},{"char":"Q","index":43},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"R","index":44},{"char":"S","index":45},{"char":"T","index":46},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"U","index":47},{"char":"V","index":48},{"char":"W","index":49},
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:								 {"char":"X","index":50}],
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	expectedInlineProvideData : [{"char":"A","index":1}],
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	/** Test components load with mulitple data providers. 
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	testMultipleDataProvidersLoad : {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// waiting for intial items of list to load.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			this.waitForItems(cmp, 25);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// verify data from provder.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			this.verifyItems(cmp, this.expectedDataProvider1Data);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	/** Test load data from a second data provider. 
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	testGetDataFromAnotherDataProvider : {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// waiting for intial items of list to load.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			this.waitForItems(cmp, 25);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// get data from another provider.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// verify data from another provider.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			this.verifyItems(cmp, this.expectedDataProvider2Data);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	/** Test load empty data set from a second data provider. 
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	testEmptyDataFromAnotherDataProvider : {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// waiting for intial items of list to load.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			this.waitForItems(cmp, 25);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// get data from another provider.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// waiting for intial items of list to load.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			this.waitForItems(cmp, 25);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// get data from another provider.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// verify data from another provider.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			this.verifyItems(cmp, this.expectedInlineProvideData);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	/** Test when index for data providers is out of bound. 
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	testMulitpleDataProvidersIndexOutOfBound : {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// waiting for intial items of list to load.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			this.waitForItems(cmp, 25);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// get data from another provider.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			var errorMessage = "Index is out of bounds for list's data provider trigger.";
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:            var actual = $A.test.getRuueErrorMessage();
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:            $A.test.assertTrue($A.test.contains(actual, errorMessage),
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:                    "Expected '" + errorMessage+"', Got:'"+actual+"'");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// verify data didnt change.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			this.verifyItems(cmp, this.expectedDataProvider1Data);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			// verify no loading indicator.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			var listElement = cmp.find("list").getElement();
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			$A.test.assertFalse($A.util.hasClass(listElement, "loading"), 
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:				"Loading indicator is still present");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	pushButton : function(cmp, btnName, numItems, expectedItemChar) {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:		var btn = cmp.find(btnName);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:		this.waitForItems(cmp, numItems, expectedItemChar);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:	waitForItems : function(cmp, numItems, expectedItemChar) {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:		$A.test.addWaitFor(true, function(){
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			var finished = false;
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			var items = cmp.find("list").get("v.items");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			if (expectedItemChar && numItems>0) {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:					(items[0].char === expectedItemChar);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:		var actualItems = cmp.find("list").get("v.items");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:		$A.test.assertEquals(expectedItems.length, actualItems.length, 
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			"Number of expected items does not equal actual items");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:		for (var i=0; i<expectedItems.length; i++) {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			var found = false;
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			var expectedItem = expectedItems[i];
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			for (var j=0; i<actualItems.length; j++) {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:				var actualItem = actualItems[j];
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:				if ((expectedItem["char"] === actualItem["char"]) 
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:					&& (expectedItem.index === actualItem.index)) {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:					break;
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestTest.js:			$A.test.assertTrue(found, "Expected item not equal to actual item at index=" + i);
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js:		var list = cmp.find("list");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js:		var evt = list.get("e.refresh");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestHelper.js:		evt.setParams({"parameters" : {"index" : index}});
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js:	getDP1Data: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js:	getDP2Data: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js:		var list = cmp.find("list");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTestController.js:		var providers = list.get("v.dataProvider");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:<ruau:component implements="ui:pagingInterface">
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:	<ui:list ruau:id="list" itemVar="row" currentPage="{!v.currentPage}" pageSize="{!v.pageSize}" totalItems="{!v.totalItems}">
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:		<ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:			<uitest:infiniteDataProvider currentPage="{!v.currentPage}" pageSize="{!v.pageSize}" totalItems="{!v.totalItems}"/>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:			<uitest:infiniteDataProvider currentPage="{!v.currentPage + 1}" pageSize="{!v.pageSize}" totalItems="{!v.totalItems}"/>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:			<uitest:infiniteDataProvider currentPage="1" pageSize="0" totalItems="{!v.totalItems}"/>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:			<uitest:infiniteDataProvider currentPage="1" pageSize="1" totalItems="{!v.totalItems}"/>		
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:		</ruau:set>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:		<ruau:set attribute="itemTemplate">
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:			<div style="border: 1px solid black">{!row.index} : {!row.char}</div>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:		</ruau:set>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:	<ui:button ruau:id="btnDP1" label="Get Data From Data Provider 1" press="{!c.getDP1Data}"/> <br/>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:	<ui:button ruau:id="btnDP2" label="Get Data From Data Provider 2" press="{!c.getDP2Data}"/> <br/>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:	<ui:button ruau:id="btnEmpty" label="Get Empty List" press="{!c.getEmptyList}"/> <br/>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:	<ui:button ruau:id="btnIndex" label="Index Out Of Bound" press="{!c.getOutOfBound}"/> <br/>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:	<ui:button ruau:id="btnInline" label="Fire Provide Inline" press="{!c.fireInline}"/> <br/>
ruau/ruau/src/test/components/uitest/list_MultipleDataProvidersTest/list_MultipleDataProvidersTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js:    testFormatDateTime:{
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js:            ruau.test.addWaitFor(true, function(){return $A.test.getText(cmp.getSuper().find('span').getElement()).length > 0;},function(){
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeTest.js:                ruau.test.assertEquals("23-9-2005 4:30 PM", $A.test.getText(cmp.getSuper().find('span').getElement()), "Value should be the one specified in the overridden method");
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:<ruau:component extends="ui:outputDateTime">
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:	<ruau:set attribute="value" value="2004-09-23T16:30:00.000Z"/>		
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTime.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js:    formatDateTime: function(component) {        
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js:        var _helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/outputDateTime_OverriddenFormatDateTime/outputDateTime_OverriddenFormatDateTimeHelper.js:        _helper.displayDateTime(component.getSuper(), "23-9-2005 4:30 PM");	 
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<ruau:component model="java://org.ruauframework.component.ui.MenuTestModel">
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<!-- Mirror default label position from input.cmp -->
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<ruau:attribute default="left" type="String" name="whichPosition"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<h1>label separete from input with raw string id association</h1>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<table>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:		<ui:label ruau:id="rawStringLabel" for="myrawid" label="My Input Text" />
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:		<ui:inputText ruau:id="rawStringinput" domId="myrawid" value="I'm an inputText"/>	
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	</table>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<h1>input component contained in the label component</h1>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<ui:label>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<span>my label</span>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<ui:inputText value="my input" />
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:</ui:label>	
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<h1>label separete from input</h1>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<table>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:		<ui:label for="myinputtext" label="My Input Text" ruau:id="myinputtextLabel"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:		<ui:inputText ruau:id="myinputtext" value="I'm an inputText"/>	
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	</table>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<h1>hidden label separete from input</h1>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<table>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:		<ui:label ruau:id="myHiddenLabel" labelDisplay="false" for="myHiddeninputtext" label="My Input Text" />
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:		<ui:inputText ruau:id="myHiddeninputtext" value="I'm an inputText"/>	
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	</table>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<h1>Input's created by iteration</h1>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ruau:iteration items="{!m.iterationItems}" var="item">
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:		<ui:inputText label="{!item.label}" value="{!item.value}" ruau:id="iteration"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	</ruau:iteration>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:   <ui:inputPercent label="inputPercent" value="42"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:   <ui:inputCurrency  label="inputCurrency" value="42" labelPosition="left" ruau:id="leftPosition"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<h1>label with {!v.whichPosition} position</h1>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputCheckbox label="inputCheckbox" labelPosition="{!v.whichPosition}" value="false" ruau:id="myInputCheckbox"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputDate label="inputDate" labelPosition="{!v.whichPosition}" value="I'm an inputDate"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputDateTime label="inputDateTime" labelPosition="{!v.whichPosition}" value="I'm an inputDateTime"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputNumber label="inputNumber" labelPosition="{!v.whichPosition}" value="42"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputRadio label="inputRadio" labelPosition="{!v.whichPosition}" value="42"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputRange label="inputRange" labelPosition="{!v.whichPosition}" value="6"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputSearch label="inputSearch" labelPosition="{!v.whichPosition}" value="6"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputSelect label="inputSelect" labelPosition="{!v.whichPosition}" value="I'm an inputSelect"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputText label="inputTest" labelPosition="{!v.whichPosition}" value="I'm an inputText"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:	<ui:inputTextArea label="inputTextArea" labelPosition="{!v.whichPosition}" value="I'm an inputTextArea"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:   <ui:inputPhone label="inputPhone" labelPosition="{!v.whichPosition}" value="I'm an inputPhone"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:   <ui:inputEmail label="I'm a inputEmail" labelPosition="{!v.whichPosition}" value="I'm an inputEmail"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:   <ui:inputSecret label="I'm an inputSecret" labelPosition="{!v.whichPosition}" value="I'm an inputSecret"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:   <ui:inputURL label="I'm an inputURL" labelPosition="{!v.whichPosition}" value="I'm an inputURL"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:   <ui:inputTime label="I'm an inputTime" labelPosition="{!v.whichPosition}" value="I'm an inputTime"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:   <ui:inputPercent label="inputPercent" labelPosition="{!v.whichPosition}" value="42"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:   <ui:inputCurrency  label="inputCurrency" labelPosition="{!v.whichPosition}" value="42"/>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<h1>label with hidden position</h1>
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:<ui:inputTextArea label="inputTextArea" labelPosition="hidden" value="I'm an inputTextArea" ruau:id="hiddenPosition"/><br/> 	
ruau/ruau/src/test/components/uitest/label_Test/label_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Return labelId for label
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    getLabelIdValue: function(labelElement){
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:        return $A.test.getElementAttributeValue(labelElement,"for");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    getInputIdValue: function(inputElement){
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:        return $A.test.getElementAttributeValue(inputElement,"id");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Test label separate from input with raw string id
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testLabelSeparateFromInputWithRawStringId: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label = component.find("rawStringLabel").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input = component.find("rawStringinput").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var labelId = this.getLabelIdValue(label);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var inputId = this.getInputIdValue(input);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(labelId, inputId, "Raw Id for label and input should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * label separate from input with ruau:id
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testLabelSeparateFromInputWithRuueId: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label = component.find("myinputtextLabel").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input = component.find("myinputtext").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var labelId = this.getLabelIdValue(label);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var inputId = this.getInputIdValue(input);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(labelId, inputId, "Global Id for label and input should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * hidden label separate from input
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testHiddenLabel: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label = component.find("myHiddenLabel").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input = component.find("myHiddeninputtext").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var labelId = this.getLabelIdValue(label);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var inputId = this.getInputIdValue(input);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(labelId, inputId, "Global Id for Hidden label and input should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            //check if the child has assistiveText as className
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals("assistiveText", label.children[0].className, "Class Name should be assistiveText");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Label's created by iteration
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testLabelCreationByIteration: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input1 = component.find("iteration")[0].getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label1Element = input1.getElementsByTagName('label')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input1Element = input1.getElementsByTagName('input')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label1Id = this.getLabelIdValue(label1Element);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input1Id = this.getInputIdValue(input1Element);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(input1Id, label1Id, "Global Id for label0 and input created by iteration should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input2 = component.find("iteration")[1].getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label2Element = input2.getElementsByTagName('label')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input2Element = input2.getElementsByTagName('input')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label2Id = this.getLabelIdValue(label2Element);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input2Id = this.getInputIdValue(input2Element);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(input2Id, label2Id, "Global Id for label1 and input created by iteration should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Test label with default position
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testLabelWithDefaultPosition: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:        attributes : {whichPosition : "left"},
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var div = component.find("myInputCheckbox").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label = div.getElementsByTagName('label')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input = div.getElementsByTagName('input')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var labelId = this.getLabelIdValue(label);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var inputId = this.getInputIdValue(input);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(labelId, inputId, "Global Id for label and input in default positon should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertTrue($A.test.contains(label.className, "left"), "Class Name:" + label.className + " should contain left");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Test label with left position
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testLabelWithLeftPosition: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var div = component.find("leftPosition").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label = div.getElementsByTagName('label')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input = div.getElementsByTagName('input')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var labelId = this.getLabelIdValue(label);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var inputId = this.getInputIdValue(input);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(labelId, inputId, "Global Id for label and input in Left positon should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertTrue($A.test.contains(label.className, "left"), "Class Name:" + label.className + " should contain left");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Test label with Top position
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testLabelWithTopPosition: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:        attributes : {whichPosition : "top"},
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var div = component.find("myInputCheckbox").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label = div.getElementsByTagName('label')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input = div.getElementsByTagName('input')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var labelId = this.getLabelIdValue(label);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var inputId = this.getInputIdValue(input);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(labelId, inputId, "Global Id for label and input in top positon should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertTrue($A.test.contains(label.className, "top"), "Class Name:" + label.className + " should contain top");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            //check if label has display = block css property
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals("block", $A.test.getStyle(label,'display'), "Css property for label with positon top should be display=block");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Test label with right position
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testLabelWithRightPosition: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:        attributes : {whichPosition : "right"},
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var div = component.find("myInputCheckbox").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label = div.getElementsByTagName('label')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input = div.getElementsByTagName('input')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var labelId = this.getLabelIdValue(label);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var inputId = this.getInputIdValue(input);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(labelId, inputId, "Global Id for label and input in right positon should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertTrue($A.test.contains(label.className, "right"), "Class Name:" + label.className + " should contain right");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Test label with bottom position
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testLabelWithBottomPosition: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:        attributes : {whichPosition : "bottom"},
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var div = component.find("myInputCheckbox").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label = div.getElementsByTagName('label')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input = div.getElementsByTagName('input')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var labelId = this.getLabelIdValue(label);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var inputId = this.getInputIdValue(input);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(labelId, inputId, "Global Id for label and input in bottom positon should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertTrue($A.test.contains(label.className, "bottom"), "Class Name:" + label.className + " should contain bottom");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            //check if label has display = block css property
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals("block", $A.test.getStyle(label,'display'), "Css property for label with positon bottom should be display=block");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Test label with hidden position
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:     * Test case for W-1728057
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:    testLabelWithHiddenPosition: {
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var div = component.find("hiddenPosition").getElement();
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var label = div.getElementsByTagName('label')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var input = div.getElementsByTagName('textarea')[0];
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var labelId = this.getLabelIdValue(label);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            var inputId = this.getInputIdValue(input);
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals(labelId, inputId, "Global Id for label and textarea in hidden positon should be the same");
ruau/ruau/src/test/components/uitest/label_Test/label_TestTest.js:            $A.test.assertEquals("assistiveText", label.children[0].className, "Class Name for Label should be assistiveText");
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:<ruau:component model='java://org.ruauframework.impl.java.model.TestJavaModel'>
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:	<ruau:handler name="init" value="{!this}" action="{!c.init}"/>
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:	<ruau:attribute name="case" type="String"/>
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    <ruau:if isTrue="{!v.case == 'iteration'}">
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    	<ui:inputSelect ruau:id="ValueFromIteration">
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:	    	<ruau:iteration items="{!m.selectOptions}" var="item">
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:	    		<ui:inputSelectOption text="{!item.value}" label="{!item.label}"/>
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:	    	</ruau:iteration>	
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    </ruau:if>
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    <ruau:if isTrue="{!v.case == 'badsel'}">
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    	<ui:inputSelect ruau:id="dynamicSelect" />
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    </ruau:if>
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:    <!--Inputselect that should have no warning associated with it-->
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarnings.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	failOnWarning : true,
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	 * Making sure the the warning for this component is caught and fires when iteration is used. The body of the 
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	 * test is used only to have something there. I have noticed that some tests can sometimes fail without it,
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	 * so I added it in to be safe
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	testInputSelect_WarningForIteration : {	
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:		ruauWarningsExpectedDuringInit: ["<ruau:iteration> is currently not supported inside <ui:inputSelect> since it does not properly attach the options to the component. This will lead to undefined behavior. Please use 'v.options' to insert your option objects instead."],
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:		attributes : { "case" : "iteration"},
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	 * Check to make sure that when the user puts in invalid options (i.e. an option missing the value element)
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	testInputSelect_WarningForInvalidOption : {	
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:		ruauWarningsExpectedDuringInit: ["Option at index 1 in select component"],
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:		attributes : { "case" : "badsel"},
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	 * Verify that correct usage of InputSelect does not throw warnings
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	testInputSelect_WarningDoesNotShowUp : {	
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsTest.js:	 * Dummy function that will return true in all cases
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js:	 * When the case that we are looking at is 'badsel', we create a bad set of options, where 
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js:	 * opts[1] is missing the value attribute
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js:		if(cmp.get("v.case") === "badsel"){
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js:			var opts = [{ "label": "Option1", "value": "Option1", "class": "option" },
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js:			            { "label": "Option2", "class": "option", "selected": true },
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js:			            { "label": "Option3", "value": "Option3", "class": "option" },
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js:			            { "label": "Option4", "value": "Option4", "class": "option" }];
ruau/ruau/src/test/components/uitest/inputSelect_CheckWarnings/inputSelect_CheckWarningsController.js:			cmp.find("dynamicSelect").set("v.options", opts);
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js:      cmp.find("outputStatus").set("v.value", "Copy Event Fired");
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js:        cmp.find("outputStatus").set("v.value", "Cut Event Fired");
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js:    doPaste: function(cmp) {
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js:        $A.log('Paste Event Fired');
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js:        cmp.set("v.pasteEventFired", true);
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTestController.js:        cmp.find("outputStatus").set("v.value", "Paste Event Fired");
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:<!-- attribute that indicates that event has been called atleast once. Its set via c.doSearch -->
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:<ruau:attribute name="copyEventFired" type="boolean" default="false"/>
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:<ruau:attribute name="cutEventFired" type="boolean" default="false"/>
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:<ruau:attribute name="pasteEventFired" type="boolean" default="false"/>
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:<ruau:attribute name="value" type="string" default = "testText"/>
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:	Input Text: <ui:inputText ruau:id="inputCmp" copy="{!c.doCopy}" paste="{!c.doPaste}" cut="{!c.doCut}" value="{!v.value}"/> <br/>
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:	Event Fired: <ui:outputText ruau:id="outputStatus" value=""/> <br/><br/>
ruau/ruau/src/test/components/uitest/inputText_CutCopyPasteEventTest/inputText_CutCopyPasteEventTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testNullValue:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp1');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('', $A.test.getText(testCmp.find('div').getElement()), "Failed to handle null from Java model");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testEmptyStringValue:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp2');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('', $A.test.getText(testCmp.find('div').getElement()), "Failed to handle empty string from Java model");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValue:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp3');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Model', $A.test.getText(testCmp.find('div').getElement()), "Failed to display String from Java model");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValueWithScriptTag:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp4');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Some text from server with script tag', $A.test.getText(testCmp.find('div').getElement()), "Failed to display richtext from Java model");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(1, testCmp.find('div').getElement().getElementsByTagName("big").length, "Big tag should be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("script").length, "script tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValueWithStyleTag:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp5');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Some text from server with style tag', $A.test.getText(testCmp.find('div').getElement()), "Failed to display richtext from Java model");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(1, testCmp.find('div').getElement().getElementsByTagName("big").length, "Big tag should be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("style").length, "style tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValueWithBlacklistedTags:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp6');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var actual = $A.test.getText(testCmp.find('div').getElement());
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Some text from server with blacklisted tags', $A.util.trim(actual), "Failed to display richtext from Java model");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("script").length, "script tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("style").length, "style tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValueWithNestedBlacklistedTags:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp7');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Some text from server with nested blacklisted tags', $A.test.getText(testCmp.find('div').getElement()), "Failed to display richtext from Java model");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("script").length, "script tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("style").length, "style tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValueWithWhitelistedChildrenTags:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp8');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Some text from server with nested input in balcklisted tags', $A.test.getText(testCmp.find('div').getElement()), "Failed to display richtext from Java model");                
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("script").length, "script tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("input").length, "Input tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValueWithBlacklistedChildrenTags:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp9');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var actual = $A.test.getText(testCmp.find('div').getElement());
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Some text from server with nested blacklisted tags in div', $A.util.trim(actual), "Failed to display richtext from Java model");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(1, testCmp.find('div').getElement().getElementsByTagName("div").length, "Only the outer Div should be present");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("script").length, "script tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(0, testCmp.find('div').getElement().getElementsByTagName("style").length, "style tag should not be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:     * We remove events and IE7 handles null events differently. 
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValueWithEvent:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp10');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Some text from server with input tag with event', $A.test.getText(testCmp.find('div').getElement()), "Failed to display richtext from Java model");            
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(1, testCmp.find('div').getElement().getElementsByTagName("input").length, "Input tag should be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var ele = testCmp.find('div').getElement().getElementsByTagName("input")[0];
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertFalse($A.util.isUndefinedOrNull(ele) , "Input tag should be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var cl = ele.onclick;
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertFalse($A.util.isUndefinedOrNull(cl) , "Input tag should have onclick attribute");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertTrue($A.util.isUndefinedOrNull(cl.nodeValue) , "onclick attribute should be null");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValueWithEventInIE7:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp10');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Some text from server with input tag with event', $A.test.getText(testCmp.find('div').getElement()), "Failed to display richtext from Java model");            
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(1, testCmp.find('div').getElement().getElementsByTagName("input").length, "Input tag should be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var ele = testCmp.find('div').getElement().getElementsByTagName("input")[0];
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertFalse($A.util.isUndefinedOrNull(ele) , "Input tag should be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var cl = ele.onclick;
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertTrue($A.util.isUndefinedOrNull(cl) , "Input tag should not have onclick attribute");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:     * We remove events and IE7 handles null events differently. 
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:    testStringValueWithMultipleEvent:{
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var testCmp = cmp.find('myComp11');
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertNotNull(testCmp);
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals('Some text from server with input tags with events', $A.test.getText(testCmp.find('div').getElement()), "Failed to display richtext from Java model");            
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertEquals(2, testCmp.find('div').getElement().getElementsByTagName("input").length, "Input tags should be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var ele1 = testCmp.find('div').getElement().getElementsByTagName("input")[0];
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertFalse($A.util.isUndefinedOrNull(ele1) , "Input tag should be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var cl1 = ele1.onclick;
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertFalse($A.util.isUndefinedOrNull(cl1) , "Input tag should have onclick attribute");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertTrue($A.util.isUndefinedOrNull(cl1.nodeValue) , "onclick attribute should be null");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var ele2 = testCmp.find('div').getElement().getElementsByTagName("input")[1];
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertFalse($A.util.isUndefinedOrNull(ele2) , "Input tag should be there");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var cl21 = ele2.onclick;
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertFalse($A.util.isUndefinedOrNull(cl21) , "Input tag should have onclick attribute");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertTrue($A.util.isUndefinedOrNull(cl21.nodeValue) , "onclick attribute should be null");            
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            var cl22 = ele2.onfocus;
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertFalse($A.util.isUndefinedOrNull(cl22) , "Input tag should have onfocus attribute");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModelTest.js:            $A.test.assertTrue($A.util.isUndefinedOrNull(cl22.nodeValue) , "onfocus attribute should be null");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:<ruau:component model='java://org.ruauframework.impl.java.model.TestJavaModel'>
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    <ui:outputRichText value='{!m.stringNull}' ruau:id='myComp1'/> <br/>    
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    <ui:outputRichText value='{!m.stringEmpty}' ruau:id='myComp2'/> <br/>    
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    <ui:outputRichText value='{!m.text}' ruau:id='myComp3'/> <br/>    
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    <ui:outputRichText value='{!m.textWithScriptTag}' ruau:id='myComp4'/> <br/>
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    <ui:outputRichText value='{!m.textWithStyleTag}' ruau:id='myComp5'/> <br/>
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    <ui:outputRichText value='{!m.textWithBlacklistedTags}' ruau:id='myComp6'/> <br/>	
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    <ui:outputRichText value='{!m.textWithBlacklistedNestedTags}' ruau:id='myComp7'/> <br/>	    
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    <ui:outputRichText value='{!m.textWithWhitelistedChildrenTags}' ruau:id='myComp8'/> <br/>
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:    <ui:outputRichText value='{!m.textWithBlacklistedChildrenTags}' ruau:id='myComp9'/> <br/>  
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:  	<ui:outputRichText value='{!m.textWithEvent}' ruau:id='myComp10'/>
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:  	<ui:outputRichText value='{!m.textWithMultipleEvents}' ruau:id='myComp11'/>  	
ruau/ruau/src/test/components/uitest/outputRichText_JavaModel/outputRichText_JavaModel.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js: * Copyright (C) 2014 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js: * http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js:    hideImage1: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js:        helper.hideImage(cmp, "image1");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js:    hideImage2: function(cmp, event, helper) {
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestController.js:        helper.hideImage(cmp, "image2");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    <ui:image ruau:id="image1" title="broken image with onerror" src="/ruauFW/resources/ruau/brokenImageUrl.png" alt="broken" onerror="{!c.hideImage1}"/>
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    <ui:image ruau:id="image2" title="unbroken image with onerror" src="/ruauFW/resources/ruau/ruaulogo.png" alt="unbroken" onerror="{!c.hideImage2}"/>
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:    <ui:image ruau:id="image3" title="broken image without onerror" src="/ruauFW/resources/ruau/brokenImageUrl.png" alt="broken"/>
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js: * Copyright (C) 2014 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js: * http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:    testBrokenImageWithOnError:{
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:            var imageElement = cmp.find("image1").getElement();
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:            var isHidden = $A.util.hasClass(imageElement,"hide");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:            $A.test.assertTrue(isHidden);
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:    testUnBrokenImageWithOnError:{
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:            var imageElement = cmp.find("image2").getElement();
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:            var isHidden = $A.util.hasClass(imageElement,"hide");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:            $A.test.assertFalse(isHidden);
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:    testBrokenImageWithoutOnError:{
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:            var imageElement = cmp.find("image3").getElement();
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:            var isHidden = $A.util.hasClass(imageElement,"hide");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestTest.js:            $A.test.assertFalse(isHidden);
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js: * Copyright (C) 2014 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js: * http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js:    hideImage: function(cmp, imageName) {
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js:        var imageElement = cmp.find(imageName).getElement();
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTestHelper.js:        $A.util.addClass(imageElement, "hide");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css: * Copyright (C) 2014 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css: * http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css: * limitations under the License.
ruau/ruau/src/test/components/uitest/image_ErrorTest/image_ErrorTest.css:    display: none;
ruau/ruau/src/test/components/uitest/demoRelay/demoRelayController.js:    updateTriggerLabel : function(cmp, evt, helper){
ruau/ruau/src/test/components/uitest/demoRelay/demoRelayController.js:    	console.log(evt.source.get("v.label"));
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:            <uitest:demoMenuTrigger ruau:id="trigger" label="Select your favorite team" />
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:             <ui:menuList class="actionMenu" ruau:id="actionMenu">
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:                <ui:actionMenuItem class="actionItem1" ruau:id="actionItem1" label="Something 1" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:                <ui:actionMenuItem class="actionItem2" ruau:id="actionItem2" label="Something 2" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:                <ui:actionMenuItem class="actionItem3" ruau:id="actionItem3" label="Something 3" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:        	<uitest:demoMenuTriggerDefault ruau:id="trigger-default" label="Select another team" />
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:        	<ui:menuList class="actionMenu" ruau:id="actionMenu2">
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:        		<ui:actionMenuItem class="actionItem4" ruau:id="actionItem4" label="Something 4" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:                <ui:actionMenuItem class="actionItem5" ruau:id="actionItem5" label="Something 5" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:                <ui:actionMenuItem class="actionItem6" ruau:id="actionItem6" label="Something 6" click="{!c.updateTriggerLabel}"/>
ruau/ruau/src/test/components/uitest/demoRelay/demoRelay.cmp:</ruau:component>      
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js:    cellClickHandler : function(cmp, event, helper){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js:    headerClickHandler : function(cmp, event, helper){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestController.js:        headerClickFired = true;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with generated columns generates the correct number of column headers
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    testColumnsPresentListWithGeneratedColumns: {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-generated-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = this.getMapSize(component.get("v.items")[0]);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actual = this.getHeaderRowComponentAt(component, 0).get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "List did not contain expected number of columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that an empty list with specified columns generates the correct number of column headers
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-empty-list-specified-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = component.get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actual = this.getHeaderRowComponentAt(component, 0).get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Empty List did not contain expected number of columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with specified columns generates the correct number of column headers
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test:function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-specified-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = component.get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actual = this.getHeaderRowComponentAt(component, 0).get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Non-empty List did not contain expected number of columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with generated columns generates the correct column header titles
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    testColumnAttributesListWithGeneratedColumns: {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-generated-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // Generate expected, whose fieldName + title attrs will be the keys from the first row in items
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expectedColumnTitles = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expectedColumnFieldNames = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expectedColumnTypes = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var firstRowInItems = component.get("v.items")[0];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var key in firstRowInItems) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                if (firstRowInItems.hasOwnProperty(key)) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    expectedColumnFieldNames.push(key);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // Need to sort these, since iterating over a map does not guarantee any ordering
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            expectedColumnFieldNames.sort();
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actualColumnComponents = this.getHeaderRowComponentAt(component, 0).get("v.body");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actualColumnTitles = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actualColumnFieldNames = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actualColumnTypes = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < actualColumnComponents.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                actualColumnTitles[i] = actualColumnComponents[i].get("v.title");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                actualColumnFieldNames[i] = actualColumnComponents[i].get("v.fieldName");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                actualColumnTypes[i] = actualColumnComponents[i].get("v.type");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // Need to sort these, since the actual order columns appear in is not deterministic
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            actualColumnTitles.sort();
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            actualColumnFieldNames.sort();
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            actualColumnTypes.sort();
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expectedColumnTitles.length, actualColumnTitles.length,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Expected number of column titles should match actual number.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < expectedColumnTitles.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(expectedColumnTitles[i], actualColumnTitles[i],
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected column title did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(expectedColumnFieldNames[i], actualColumnFieldNames[i],
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected column fieldName did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(expectedColumnFieldNames[i], actualColumnFieldNames[i],
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected column type did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with specified columns generates the correct column header titles
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-specified-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // Find expected column titles, which are the title attribute from each column component
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expectedColumnTitles = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expectedColumnFieldNames = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expectedColumnTypes = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var columnComponents = component.get("v.body");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < columnComponents.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                expectedColumnFieldNames[i] = columnComponents[i].get("v.fieldName");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expectedColumnTitles.length, this.getHeaderRowComponentAt(component, 0).get("v.body").length,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Expected number of columns did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // Compare expected column attributes against actual column attributes
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < expectedColumnTitles.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(expectedColumnTypes[i], this.getHeaderCellComponentAt(component, 0, i).get("v.type"),
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected column type did not match actual.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(expectedColumnTitles[i], this.getHeaderCellComponentAt(component, 0, i).get("v.title"),
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected column title did not match actual.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(expectedColumnFieldNames[i],  this.getHeaderCellComponentAt(component, 0, i).get("v.fieldName"),
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected column title did not match actual.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Tests that a column's title attribute is used to set the column header's body attribute
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-specified-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = component.get("v.body")[0].get("v.title");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actual = $A.util.getText(this.getHeaderCellComponentAt(component, 0, 0).getElement());
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Column title is not set as the value of the column component's body attribute");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Tests that defining a column component with an unknown column type will result in an exception
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = "Text";
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var attributes =
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        type:"notarealcolumntype",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        fieldName: "column"
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "componentDef": "markup://ui:column",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "attributes": {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            "values": attributes
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.fail("Exception should have been thrown");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            catch(e) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertTrue(e.message.indexOf("Unknown type attribute specified") > -1,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected exception was not thrown for an invalid column type: " +
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        e.message);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with generated columns builds rows
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    testListBuildsRowsForGeneratedColumns: {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-generated-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = component.get("v.items").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actual = this.getTableBodyRowComponents(component).length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Expected number of rows did not match actual.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with specified columns builds rows
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-specified-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = component.get("v.items").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actual = this.getTableBodyRowComponents(component).length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Expected number of rows did not match actual.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list still builds rows when its list data does not map to any specified columns.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    testListBuildsRowsWhenDataDoesntMapToSpecifiedColumns: {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test:function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-data-does-not-map-to-specified-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = component.get("v.items").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actual = this.getTableBodyRowComponents(component).length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Expected number of rows did not match actual.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with generated columns builds the fields in each row using list data set in the
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * items attribute.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    testListBuildsFieldsInRowsFromGeneratedColumns: {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-generated-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var items = component.get("v.items");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < items.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var expectedNumFieldsInRow = this.getMapSize(items[i]);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var actualNumFieldsInRow = this.getTableBodyRowComponentAt(component, i).get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(expectedNumFieldsInRow, actualNumFieldsInRow,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected number of fields in row did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                for (var j = 0; j < expectedNumFieldsInRow; ++j) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var headerCellTitle = this.getHeaderCellComponentAt(component, 0, j).get("v.title");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var expected = items[i][headerCellTitle];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var actual = $A.util.getText(this.getTableBodyCellComponentAt(component, i, j).getElement());
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            "Expected cell value did not match actual cell value");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with specified columns builds the fields in each row using list data set in the
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * items attribute.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-specified-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var items = component.get("v.items");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var columns = component.get("v.body");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < items.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var actualNumFieldsInRow = this.getTableBodyRowComponentAt(component, i).get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(columns.length, actualNumFieldsInRow,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected number of fields in row did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                for (var j = 0; j < columns.length; ++j) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var expected, actual;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        case "Index":
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            var actual = $A.test.getText(
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                                    this.getTableBodyCellComponentAt(component, i, j).getElement());
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            break;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        case "Checkbox":
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            expected = false;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            var actual = this.getTableBodyCellComponentAt(component, i, j).getElement().getElementsByTagName('input')[0].checked;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            break;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        case "Html":
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            expected=items[i][columns[j].get("v.fieldName")];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            actual=this.getTableBodyCellComponentAt(component, i, j).getElement().innerHTML.replace(/data-ruau-rendered-by="\S+"[\s]{1}|\s{1}data-ruau-rendered-by="\S+"/,'');
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            break;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        default:
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            expected = items[i][columns[j].get("v.fieldName")];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            actual = $A.util.getText(this.getTableBodyCellComponentAt(component, i, j).getElement());
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            "Expected cell value did not match actual cell value");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that fields are populated correctly in a list whose data does not fully match specified columns
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    testListBuildsFieldsInRowsForPartiallyMatchingSpecifiedColumns: {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app){
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-data-partially-maps-to-specified-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var items = component.get("v.items");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var columns = component.get("v.body");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < items.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var actualNumFieldsInRow = this.getTableBodyRowComponentAt(component, i).get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(columns.length, actualNumFieldsInRow,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected number of fields in row did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                for (var j = 0; j < columns.length; ++j) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var expected;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var actual;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    if (items[i][columns[j].get("v.fieldName")]) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        expected = items[i][columns[j].get("v.fieldName")];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        actual = $A.util.getText(this.getTableBodyCellComponentAt(component, i, j).getElement());
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        actual = ($A.test.getText(this.getTableBodyCellComponentAt(component, i, j).getElement()));
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            "Expected cell value did not match actual cell value");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Tests that a list with nested columns builds columns and titles correctly
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test : function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-nested-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var firstRowColumnTitles = ["First Row 0", "First Row 1, Leaf 4"];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var secondRowColumnTitles = ["Second Row 0", "Second Row 1", "Second Row 2, Leaf 3"];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var thirdRowColumnTitles = ["Third Row 0, Leaf 0", "Third Row 1, Leaf 1", "Third Row 2, Leaf 2"];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var firstHeaderRowComponent = this.getHeaderRowComponentAt(component, 0);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(firstRowColumnTitles.length, firstHeaderRowComponent.get("v.body").length,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Expected number of first row columns did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < firstRowColumnTitles.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var actualColumnTitle = this.getHeaderCellComponentAt(component, 0, i).get("v.title");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(firstRowColumnTitles[i], actualColumnTitle);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var secondHeaderRowComponent = this.getHeaderRowComponentAt(component, 1);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(secondRowColumnTitles.length, secondHeaderRowComponent.get("v.body").length,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Expected number of first row columns did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < secondRowColumnTitles.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var actualColumnTitle = this.getHeaderCellComponentAt(component, 1, i).get("v.title");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(secondRowColumnTitles[i], actualColumnTitle);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var thirdHeaderRowComponent = this.getHeaderRowComponentAt(component, 2);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(thirdRowColumnTitles.length, thirdHeaderRowComponent.get("v.body").length,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Expected number of first row columns did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < thirdRowColumnTitles.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var actualColumnTitle = this.getHeaderCellComponentAt(component, 2, i).get("v.title");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                $A.test.assertEquals(thirdRowColumnTitles[i], actualColumnTitle);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with nested columns builds fields for leaf-node columns
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test : function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-nested-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var items = component.get("v.items");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var leafNodeColumns = this.getLeafNodeColumns(component);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // Look at each field in list and verify that it was mapped from a fieldName
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < items.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                for (var j = 0; j < leafNodeColumns.length; ++j) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var columnFieldName = leafNodeColumns[j].get("v.fieldName");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var expected = items[i][columnFieldName];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var actual = $A.util.getText(this.getTableBodyCellComponentAt(component,i, j).getElement());
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            "Expected table cell contents did not match actual.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that a list with nested columns where the data maps from non-leaf-node columns contains only empty fields.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    testListDoesNotBuildFieldsMappingFromNonLeafNodeColumns : {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test : function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-nested-columns-fields-map-from-non-leaf-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var items = component.get("v.items");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = '';
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // Look at each field in list and verify that each is an empty string
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < items.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var numCols = this.getTableBodyRowComponentAt(component, i).get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                for (var j = 0; j < numCols; ++j) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    actual = ($A.test.getText(this.getTableBodyCellComponentAt(component, i, j).getElement()));
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            "Expected table cell contents did not match actual.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that correct number of ruau events given a dom event fired from a table element
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test:function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-generated-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = 3;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actual = 0;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // Mock fireEvent to do something we can use to test logic in fireEvents (its caller)
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                function (component, target, eventType, listViewEventType, rawEvent, data) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    ++actual;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var cell = this.getTableBodyCellComponentAt(component, 0, 0);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var listbody = component.find("listView:body");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var mockDomEvent = { target:cell.getElement() };
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expected, actual,
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "Expected number of fired events did not match actual.");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that the correct listview events are fired in the correct order after a dom event is fired from each header
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * cell in a list
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    testFireEventsSourceComponentsHeaderCells: {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test:function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-generated-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var headerRowComponent = this.getHeaderRowComponentAt(component, 0);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var numCols = headerRowComponent.get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < numCols; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var expectedComponents = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var targetCell = this.getHeaderCellComponentAt(component, 0, i);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                expectedComponents.push(targetCell)
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                expectedComponents.push(headerRowComponent);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                expectedComponents.push(component.find("listView:header"));
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var mockDomEvent = { target:targetCell.getElement() };
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                        "Expected event source component did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that the correct listview events are fired in the correct order after dom event firing is simulated from
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * each table body cell in a list
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test:function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var component = app.find("test-list-generated-columns");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var numRows = this.getTableBodyRowComponents(component).length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var numCols = this.getTableBodyRowComponentAt(component, 0).get("v.body").length;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            for (var i = 0; i < numRows; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                var expectedRow = this.getTableBodyRowComponentAt(component, i);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                for (var j = 0; j < numCols; ++j) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var expectedComponents = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var targetCell = this.getTableBodyCellComponentAt(component, i, j);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    expectedComponents.push(targetCell);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    var mockDomEvent = { target:targetCell.getElement() };
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                            "Expected event source component did not match actual");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level click event on the table results in a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        // iOS doesn't like the click event, touch events are what we care about
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "click",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level double click event on the table results in a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "dblclick",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level mousedown event on the table results in a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "mousedown",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level mouseup event on the table results in a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "mouseup",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level mouseover event on the table results in a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "mouseover",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level mouseout event on the table results in a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "mouseout",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level keydown event on the table results in a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "keydown",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level keyup event on the table results in a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "keyup",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level keypress event on the table results in a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "keypress",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level touchstart event on the table results in a call to helper-fireEvents().
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    testTouchStartEventFired: {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "touchstart",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level touchend event on the table results in a call to helper-fireEvents().
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "touchend",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Test that simulating a DOM-level touchmove event on the table results in a call to helper-fireEvents().
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        test: function(app) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            this.verifyDomEventFiresListViewEvents(app.find("test-list-generated-columns"), "touchmove",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    "DOM event firing did not result in call to helper->fireEvents");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Verifier method for tests that validate DOM-level triggering a call to helper-fireEvents()
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    verifyDomEventFiresListViewEvents: function(component, eventName, failureMessage) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var fireEventsCalled = false;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                function (component, target, eventType, listViewEventType, rawEvent, data) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                    fireEventsCalled = true;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var element = this.getTableBodyCellComponentAt(component, 0, 0).getElement();
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        $A.test.fireDomEvent(element, eventName);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        $A.test.assertTrue(fireEventsCalled, failureMessage + ": " + eventName);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Verify that firing a dom event results in list view events fired targetting expected components.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    verifyListViewEventSourceComponents : function(component, expectedComponents, mockDomEvent, failureMessage) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var actualComponents = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var helper = component.getDef().getHelper();
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        // Mock fireEvent to do something we can use to test logic in fireEvents (its caller)
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            function (list, target, eventType, listViewEventType, rawEvent, data) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                actualComponents.push(target);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        $A.assert("expected and actual should be equal in length",
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                expectedComponents.length === actualComponents.length);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        for (var i = 0; i < expectedComponents.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var expected = expectedComponents[i];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            var actual = actualComponents[i];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            $A.test.assertEquals(expected, actual, failureMessage)
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Get the number of 'own properties' in a javascript object... aka the size of a map
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getMapSize: function(map) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var keyCount = 0;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        for (var key in map) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            if (map.hasOwnProperty(key)) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Gets a table cell component. Don't use this - use getHeaderCellComponentAt or getTableBodyCellComponentAt
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var cellComponents = rowComponent.get("v.body");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        $A.test.assertDefined(cellComponents.length, cellComponents + " should be an array");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        $A.assert(cellComponents.length > colNumber, cellComponents + " does not contain a column numbered " + colNumber)
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Gets the header cell component located at a particular header row & column numbers
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getHeaderCellComponentAt: function(listViewComponent, rowNumber, colNumber) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var rowComponent = this.getHeaderRowComponentAt(listViewComponent, rowNumber);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Gets the table body cell component located at a particular table body row & column numbers
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getTableBodyCellComponentAt: function(listViewComponent, rowNumber, colNumber) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var rowComponent = this.getTableBodyRowComponentAt(listViewComponent, rowNumber);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Gets a table row component. Don't use this - use getHeaderRowComponentAt or getTableBodyRowComponentAt
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getRowComponentAt: function(listViewComponent, rowNumber, parentContainerRuueId) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var rowComponents = this.getRowComponents(listViewComponent, parentContainerRuueId);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        $A.assert(rowComponents.length > rowNumber, rowComponents + " does not contain a row numbered " + rowNumber);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Gets the header row component located at a particular header row number
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getHeaderRowComponentAt: function(listViewComponent, rowNumber) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        return this.getRowComponentAt(listViewComponent, rowNumber, "listView:header");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Gets the table body row component located at a particular table body row number
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getTableBodyRowComponentAt: function(listViewComponent, rowNumber) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Gets all the row components of a parent container - don't use this, use getHeaderRowComponents or
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * getTableBodyRowComponents
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getRowComponents: function(listViewComponent, parentContainerRuueId) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var rowComponents = listViewComponent.find(parentContainerRuueId).get("v.body");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        $A.test.assertDefined(rowComponents.length, rowComponents + " should be an array");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Gets all the header row components
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getHeaderRowComponents: function(listViewComponent) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        return this.getRowComponents(listViewComponent, "listView:header");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Gets all the table body row components
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getTableBodyRowComponents: function(listViewComponent) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Recursively find all of the leaf-node column headers in a list
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getLeafNodeColumns: function(component) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var leafNodeColumns = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var columns = component.get("v.body");
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        var accumulator = [];
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        this.getLeafNodeColumnHelper(columns, accumulator);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        return accumulator;
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:     * Helper for function that gets all of the leaf node column headers in a list
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:    getLeafNodeColumnHelper: function(node, accumulator) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:        for (var i = 0; i < node.length; ++i) {
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // If node is a leaf node, return it.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                accumulator.push(node[i]);
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:            // Else it has other, children nodes in its body attribute; recurse for each.
ruau/ruau/src/test/components/uitest/listView_Test/listView_TestTest.js:                this.getLeafNodeColumnHelper(node[i].get("v.body"), accumulator);
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    limitations under the License.
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:<ruau:application  model="java://org.ruauframework.components.ui.listView.ListViewTestModel">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ruau:dependency resource="ui:*" type="COMPONENT" />
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    Empty list, generated columns
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-empty-list-generated-columns" ruau:id="test-empty-list-generated-columns"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    List, generated columns
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-list-generated-columns" ruau:id="test-list-generated-columns" items="{!m.generatedListData}"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-empty-list-specified-columns" ruau:id="test-empty-list-specified-columns">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="" title="Type:Empty String" fieldName="type:empty string"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column title="Type:Undefined" fieldName="type:undefined"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Text" title="Type:Text" fieldName="type:text"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Email" title="Type:Email" fieldName="type:email"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Checkbox" title="Type:Checkbox" fieldName="type:checkbox"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Link" title="Type:Link" fieldName="type:link"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Index" title="Type:Index" fieldName="type:index"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Html" title="Type:Html" fieldName="type:html"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    List, data does not map to specified columns
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-list-data-does-not-map-to-specified-columns" ruau:id="test-list-data-does-not-map-to-specified-columns" items="{!m.specifiedListData}">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Text" title="Non-matching column" fieldName="non-matching column"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    List, data partially maps to specified columns
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-list-data-partially-maps-to-specified-columns" ruau:id="test-list-data-partially-maps-to-specified-columns" items="{!m.specifiedListData}">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Text" title="Non-matching column" fieldName="non-matching column"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Text" title="Type:Text" fieldName="type:text"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    List, data fully maps to specified columns
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-list-specified-columns" ruau:id="test-list-specified-columns" items="{!m.specifiedListData}">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="" title="Type:Empty String" fieldName="type:empty string"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column title="Type:Undefined" fieldName="type:undefined"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Text" title="Type:Text" fieldName="type:text"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Email" title="Type:Email" fieldName="type:email"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Checkbox" title="Type:Checkbox" fieldName="type:checkbox"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Link" title="Type:Link" fieldName="type:link"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Index" title="Type:Index" fieldName="type:index"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column type="Html" title="Type:Html" fieldName="type:html"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    List, data fully maps to nested, specified columns
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-list-nested-columns" ruau:id="test-list-nested-columns" items="{!m.nestedColumnsListData}">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column title="First Row 0" fieldName="first row 0">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:            <ui:column title="Second Row 0"  fieldName="second row 0">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:                <ui:column title="Third Row 0, Leaf 0" fieldName="third row 0, leaf 0"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:            <ui:column title="Second Row 1" fieldName="second row 1">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:                <ui:column title="Third Row 1, Leaf 1" fieldName="third row 1, leaf 1"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:                <ui:column title="Third Row 2, Leaf 2" fieldName="third row 2, leaf 2"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:            <ui:column title="Second Row 2, Leaf 3"  fieldName="second row 2, leaf 3"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column title="First Row 1, Leaf 4" fieldName="first row 1, leaf 4"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    List, data maps from non-leaf-node columns and should not appear in list
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-list-nested-columns-fields-map-from-non-leaf-columns" ruau:id="test-list-nested-columns-fields-map-from-non-leaf-columns" items="{!m.nestedColumnsFieldsMapsFromNonLeafNodeColumnsListData}">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column title="First Row 0" fieldName="first row 0">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:            <ui:column title="Second Row 0"  fieldName="second row 0">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:                <ui:column title="Third Row 0, Leaf 0" fieldName="third row 0, leaf 0"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:            <ui:column title="Second Row 1" fieldName="second row 1">
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:                <ui:column title="Third Row 1, Leaf 1" fieldName="third row 1, leaf 1"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:                <ui:column title="Third Row 2, Leaf 2" fieldName="third row 2, leaf 2"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:            <ui:column title="Second Row 2, Leaf 3"  fieldName="second row 2, leaf 3"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        <ui:column title="First Row 1, Leaf 4" fieldName="first row 1, leaf 4"/>
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-fireEvents-number" ruau:id="test-fireEvents-number" items="{!m.generatedListData}" />
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:    <ui:listView id="test-list-events-webdriver-test" ruau:id="test-list-events-webdriver-test"
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        items="{!m.generatedListData}"
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        oncellclick="{!c.cellClickHandler}"
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:        onheaderclick="{!c.headerClickHandler}"
ruau/ruau/src/test/components/uitest/listView_Test/listView_Test.app:</ruau:application>
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js:            var element = cmp.getElement();
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js:            //element.className.indexOf does not work for IE10
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js:            $A.test.assertTrue($A.util.hasClass(element, "uiMessage"), "Expected to see a message to indicate no data.");
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItemsTest.js:            $A.test.assertEquals("No data found.", $A.util.trim($A.test.getText(element)), "Message to indicate no data is absent or incorrect");
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    <ui:dataTable ruau:id="dataTable">
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:    </ui:dataTable>
ruau/ruau/src/test/components/uitest/dataTable_EmptyItems/dataTable_EmptyItems.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js:	 * Adding default values to outputText components so we have a baseline
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js:	   cmp.find("changedEvt_ot").set("v.value", ""+cmp.find("checkbox").get("v.value"));
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js:	   cmp.find("clickedEvt_ot").set("v.value", ""+cmp.find("checkbox").get("v.value"));
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js:   changed: function(cmp) {
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js:       cmp.find("changedEvt_ot").set("v.value", ""+cmp.find("checkbox").get("v.value"));
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestController.js:       cmp.find("clickedEvt_ot").set("v.value", ""+cmp.find("checkbox").get("v.value"));
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:	 * Verifying that the change and click handler both change inputCheckboxes values
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:	 * Blocked from IOS and IPAD because clicking on an input does not seem to work when using clickOrTouch, works fine manually
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    testClickVsChanged : {
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    		//Verify that the outputTexts are set to their default value of the inputCheckbox
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    		$A.test.assertEquals("false", cmp.find("changedEvt_ot").get("v.value"), "Value of the checkbox should be 'false', since no events have been fired");
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    		$A.test.assertEquals("false", cmp.find("clickedEvt_ot").get("v.value"), "Value of the checkbox should be 'false', since no events have been fired");
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:            // v.value does not change since no change event is fired in IE7/8: W-2328667
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:            // so, focus, click, blur is required for IE to generate a change event
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:            //Change the value of the checkbox
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:            var checkbox = cmp.find("checkbox").find("checkbox").getElement();
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    		//Verify that both outputTexts are now set to true since they represent the currently value of the checkbox
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    		$A.test.addWaitForWithFailureMessage("true",function(){
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    			return cmp.find("changedEvt_ot").get("v.value");
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    		}, "Value of the checkbox should be true, when the change evt is fired");
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    		//Verify that both outputTexts are now set to true since they represent the currently value of the checkbox
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    		$A.test.addWaitForWithFailureMessage("true",function(){
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    			return cmp.find("clickedEvt_ot").get("v.value");
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_TestTest.js:    		}, "Value of the checkbox should be true, when the click evt is fired");
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    limitations under the License.   
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:	<ruau:handler name="init" value="{!this}" action="{!c.doInit}" />
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    <ui:inputCheckbox ruau:id="checkbox" label="CheckBox" change="{!c.changed}" click="{!c.clicked}"/>
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    <ui:outputText ruau:id="changedEvt_ot" value="Default Value"></ui:outputText>
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:    <ui:outputText ruau:id="clickedEvt_ot" value="Default Value"></ui:outputText>
ruau/ruau/src/test/components/uitest/inputCheckBox_Test/inputCheckBox_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:     * Basic testing of rows ability to disable and enable rows
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    testEnableDisableActions : {
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	attributes : {"pageSize" : 10},
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	//Verify row enabled <-- check css class added and that row is not clickable
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	this.verifyRowClass(rowElm, "disabled", false);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            this.verifyRowSelectIsClickable(rowElm, true);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            //disable row
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	//Verify row enabled <-- check css class added and that row is not clickable
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	this.verifyRowClass(rowElm, "disabled", true);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            this.verifyRowSelectIsClickable(rowElm, true);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	//enable row
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	//verify row enabled
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	this.verifyRowClass(rowElm, "disabled", false);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	this.verifyRowSelectIsClickable(rowElm, false);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:     * Test verifying that if I disable multiple rows and enable the one at a time, all that should still be disabled are
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    testEnableDisableMultiple : {
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	attributes : {"pageSize" : 10},
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            for(var i = 0; i < rowsUsed.length; i++){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	var rowElm = null;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	//Verify row enabled then disable a select few of them
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	 for(var i = 0; i < rowsUsed.length; i++){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	   var rowElm  = renderedRows[rowsUsed[i]];
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	   this.verifyRowClass(rowElm, "disabled", false);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:               this.verifyRowSelectIsClickable(rowElm, true);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	 //verify that row is disabled
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	 var that = this;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	 var verify = function(renderedRow, expectedClass, disabled, itemsRow, count){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:         		that.verifyRowClass(renderedRow, expectedClass, disabled);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:         		that.verifyRow(renderedRow.children, itemsRow, disabled, count);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	this.verifyRows(rowElements[1], rowsUsed, renderedRows, verify, "disabled");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:     * Testing to make sure that class toggles as expected
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    testToggleClass : {
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	attributes : {"pageSize" : 10},
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            //Verify default class
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	 this.verifyRowClass(rowElm, "error", false);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	//verify css class
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            var that = this;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	var verify = function(renderedRow, expectedClass, disabled, itemsRow, count, buttonsDisabled){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        		if($A.util.isUndefinedOrNull(buttonsDisabled)){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        			buttonsDisabled = false;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        		that.verifyRowClass(renderedRow, expectedClass, disabled);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        		that.verifyRow(renderedRow.children, itemsRow, buttonsDisabled, count);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	//Verify that the only element that has the class is the row that we expect (row 0)
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	//Make sure the class no longer exists
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	this.verifyRowClass(rowElm, "error", false);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:      * Goes through all elements and makes sure that each row is correct
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:     verifyRows : function(vItemsRows, rowsUsed, rows, verifyFunc, expectedClass){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	 var disabled = "";
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:	     var count = 0;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:	     for(var i = 0; i < rows.length; i++){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:			    disabled = true;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:			    disabled = false;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:		    verifyFunc(rows[i], expectedClass, disabled, vItemsRows[i], i+1);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:	 * Goes through a single row, and makes sure the data is what we expect 
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    verifyRow : function(domRow, cmpRow, disabled, rowQualifier){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	var expectedRow = "";
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	var keys = ["id", "subject", "name", "relatedTo", "date"];
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	var buttons = domRow[domRow.length-1].children;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	$A.test.assertEquals(domRow.length, 7, "There are elements missing in the rendered row");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	for(var i = 1; i < this.EXPECTED_ROW.length; i++){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    		expectedRow = this.EXPECTED_ROW[i] +""+rowQualifier;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            $A.test.assertEquals($A.util.getText(domRow[i+1]), ""+expectedRow, "Row element data does not match what it should be");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            $A.test.assertEquals(""+cmpRow[keys[i]], expectedRow, "Row data stored in cmp data does not match what it should be");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	if(disabled == true){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    		$A.test.assertTrue(buttons[0].disabled, "Button should be disabled and it is not");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    		$A.test.assertFalse(buttons[1].disabled,"Button should not be disabled and it is");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    		$A.test.assertTrue(buttons[2].disabled,"Button should be disabled and it is not");		
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    		$A.test.assertFalse(buttons[0].disabled,"Button should not be disabled and it is");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    		$A.test.assertTrue(buttons[1].disabled,"Button should be disabled and it is not");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    		$A.test.assertFalse(buttons[2].disabled,"Button should not be disabled and it is");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:     * Get a grid attribute
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    getGridAttribute : function( cmp, attributeName){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        return cmp.find("grid").get("v."+attributeName);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	return row.getElementsByTagName("input")[0];
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:     * Make sure the row class exists when it is supposed to, and not otherwise
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    verifyRowClass : function(row, classToLookFor, shouldClassBePresent){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	var elemClass    = (""+$A.test.getElementAttributeValue(row, "class")).replace(/\s/g,'');
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        var indexOfError = elemClass.indexOf(classToLookFor);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	//checking class and verifying that input should be checked or unchecked
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        if(shouldClassBePresent == false){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	$A.test.assertTrue((indexOfError < 0), "Row should not contain class "+classToLookFor);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	$A.test.assertTrue( indexOfError == 0, "Row should contain class "+classToLookFor);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:     * function that will only get the elements that are not comments
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	var elementArray = [];
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:	     for(var i = 0; i < elements.length; i++){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:	        if(elements[i].tagName != "!"){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:	        	elementArray.push(elements[i]);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	return elementArray;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            var tbody = CODument.getElementsByTagName("tbody")[0];
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            var trs = this.getOnlyTrs(tbody.children);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            var itemsInBody = this.getGridAttribute(cmp, "items");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            $A.test.assertEquals(colCount, trs.length, "The total amount of items on the page are incorrect");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:            $A.test.assertEquals(colCount, itemsInBody.length, "The total amount of elements in v.items is incorrect");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:     * Check to make sure that the row is clickable or not (i.e. whether the row is actually disabled)
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    verifyRowSelectIsClickable : function(row, shouldBeChecked){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	var input    = this.getCheckBox(row);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        var inputChecked = input.checked;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	//checking class and verifying that input should be checked or unchecked
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	$A.test.assertTrue(inputChecked, "Row should not contain class that disabled");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:        	$A.test.assertFalse( inputChecked, "Row should contain class that disabled");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:     * Press the button associated with the action
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    pressAction : function(buttonTr, actionPos){
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	var buttons = buttonTr[buttonTr.length-1].children;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsTest.js:    	$A.test.clickOrTouch(buttons[actionPos]);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    changeRowDisabled: function(cmp, index, disable) {
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    		.getEvent("updateRowAttributes")
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    		.setParams({
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    			className : 'disabled',
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    			classOp : disable ? 'add' : 'remove',
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    			attributes : [{name: "disabled", value: disable}]
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    changeRowClass: function(cmp, index, className, op) {
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    		.getEvent("updateRowAttributes")
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    		.setParams({
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    			className : className,
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsHelper.js:    			classOp : op
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:    <ruau:attribute name="pageSize" type="Integer" default="100"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:    <ruau:attribute name="currentPage" type="Integer" default="1"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:    <ruau:attribute name="totalPages" type="Integer" default="5"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:    <ruau:attribute name="sortBy" type="String"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:    <ruau:attribute name="totalItems" type="Integer"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:    <ruau:attribute name="mode" type="String" default="VIEW"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:    <!--ruau:handler action="{!c.init}" name="init" value="{!this}"/-->
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:    <ui:dataGrid ruau:id="grid" mode="{!v.mode}" sortBy="{!v.sortBy}">      
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:        <ruau:set attribute="columns">     
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:	        <ui:dataGridSelectionColumn/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:            <ui:dataGridColumn label="Id" name="id" editable="false" sortable="true"/>             
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:            <ui:dataGridColumn label="Subject" name="subject"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:            <ui:dataGridColumn label="Name" name="name"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:            <ui:dataGridColumn label="Related To" name="relatedTo"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:            <ui:dataGridColumn label="Due Date" name="date"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:            <ui:dataGridActionColumn label="Actions">
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:                <ui:actionButton name="disable" label="Disable" index="{!index}" disabled="{!disabled}"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:                <ui:actionButton name="enable" label="Enable" index="{!index}" disabled="{!!disabled}"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:                <ui:actionButton name="toggleClass" label="Toggle Class" index="{!index}" disabled="{!disabled}"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:            </ui:dataGridActionColumn>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:        <ruau:set attribute="actionDelegate">
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:            <ui:actionDelegate onaction="{!c.handleAction}"/>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:            <uitest:dataGrid_TestDataProvider      ruau:id="provider"
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:                                                   pageSize="{!v.pageSize}"
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:                                                   currentPage="{!v.currentPage}"
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:                                                   totalPages="{!v.totalPages}"
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:                                                   totalItems="{!v.totalItems}"
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:    </ui:dataGrid>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_Actions.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:  handleAction: function (cmp, evt, hlp) {
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:        var name = evt.getParam('name');
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:        switch (name) {
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:            case 'disable': 
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:                hlp.changeRowDisabled(cmp, evt.getParam('index'), true);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:                break;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:            case 'enable':
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:            	hlp.changeRowDisabled(cmp, evt.getParam('index'), false);
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:            	break;
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:            case 'toggleClass':
ruau/ruau/src/test/components/uitest/dataGrid_Actions/dataGrid_ActionsController.js:            	hlp.changeRowClass(cmp, evt.getParam('index'), "error", "toggle");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestController.js:	handleApplyPressed: function(cmp, list, helper){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestController.js:		helper.handleApplyPressed(cmp, list, "defaultListSorterResult");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestController.js:	handleApplyPressedForLargeList: function(cmp, list, helper){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestController.js:		helper.handleApplyPressed(cmp, list, "largeListSorterResult");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestController.js:	handleCancelPressed: function(cmp){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestController.js:		cmp.set("v.cancelEventFired", true);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js:	handleApplyPressed: function(cmp, list, outCmpName) {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js:		// sort order prefix "-" means descending order
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js:		var desc = "-";
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js:		var sortOrder;
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js:		//ascending order
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestHelper.js:		cmp.find(outCmpName).set("v.value", sortOrder);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:<ruau:component>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    <ruau:attribute name="cancelEventFired" type="boolean" default="false"/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    <ruau:attribute name="title" type="String" default="Sort" description="The title of this component." />
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    <ui:listSorter ruau:id="defaultListSorter" class="defaultListSorter" onApply="{!c.handleApplyPressed}" onCancel="{!c.handleCancelPressed}" title="{!v.title}" rowVar="item">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        <ruau:set attribute="dataProvider">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            <uitest:listSorterDataProvider />
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        <ruau:set attribute="rowDef">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            <ui:radioToggleMenuItem  value="{!item.fieldName}" label="{!item.label}" ruau:id="defaultRadioToggleMenuItem"/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        <ruau:set attribute="trigger">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            <ui:menuTriggerLink class="defaultListSorterTrigger" label="Default List Sorter" ruau:id="defaultListSorterTrigger"/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    Which Sort got Appplied:<ui:outputText ruau:id="defaultListSorterResult" value=""/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    <ui:listSorter ruau:id="largeListSorter" onApply="{!c.handleApplyPressedForLargeList}" onCancel="{!c.handleCancelPressed}" rowVar="item">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        <ruau:set attribute="dataProvider" >
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            <uitest:listSorterDataProvider dataType="largeList"/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        <ruau:set attribute="rowDef">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            <ui:radioToggleMenuItem  value="{!item.fieldName}" label="{!item.label}"/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        <ruau:set attribute="trigger">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            <ui:menuTriggerLink label="Large List Sorter" ruau:id="largeListSorterTrigger"/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    Which Sort got Appplied:<ui:outputText ruau:id="largeListSorterResult" value=""/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:    <ui:listSorter ruau:id="emptyListSorter" rowVar="item">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        <ruau:set attribute="dataProvider" >
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            <uitest:listSorterDataProvider dataType="emptyList"/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        <ruau:set attribute="rowDef">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            <ui:radioToggleMenuItem  value="{!item.fieldName}" label="{!item.label}"/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        <ruau:set attribute="trigger">
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:            <ui:menuTriggerLink label="Empty List Sorter" ruau:id="emptyListSorterTrigger"/>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:        </ruau:set>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_Test.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:      *  Test cancel button closes UISorterList.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    testCancelButton : {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.listSorter = cmp.find("defaultListSorter");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.trigger = cmp.find("defaultListSorterTrigger");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertUISorterPresent(this.listSorter, false);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            //Use cancel button to close the sorter
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertCancelEventFired(cmp);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.listSorter = cmp.find("defaultListSorter");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.trigger = cmp.find("defaultListSorterTrigger");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertUISorterPresent(this.listSorter, false);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var defaultSortOrder = this.defaultSortOrder(this.listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var sortApplied = this.getSortOrderApplied(cmp, "defaultListSorter");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            $A.test.assertEquals(defaultSortOrder, sortApplied, "Sort not applied correctly after apply button was pressed.");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Test title of Sort modal
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    testTitleOfSortPanel: {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        attributes : {title: 'Sort Panel'},
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.listSorter = cmp.find("defaultListSorter");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            $A.test.assertEquals("Sort Panel", $A.test.getText(this.listSorter.find("title").getElement()));
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:      *  Test sortOrderPicker and output(selectedItemOutput,selectedSortOrderOutput) of listSort dialog
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.listSorter = cmp.find("defaultListSorter");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.trigger = cmp.find("defaultListSorterTrigger");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertUISorterPresent(this.listSorter, false);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.selectSortByColumnAndAssert(this.listSorter, 1, "asc");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.selectSortByColumnAndAssert(this.listSorter, 4, "asc");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var expectedSortOrder = "Column4 : A-Z";
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var sortApplied = this.getSortOrderApplied(cmp,"defaultListSorter");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            $A.test.assertEquals(expectedSortOrder, sortApplied, "Sort not applied correctly after apply button was pressed.");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Test to verify all sortable columns present in the Sort dialog
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * and none of the hidden column visible
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    testAllSortableColumnsPresent : {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.listSorter = cmp.find("defaultListSorter");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.trigger = cmp.find("defaultListSorterTrigger");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertUISorterPresent(this.listSorter, false);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            //verify all sortable fields present on the dialog
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            //Use cancel button to close the sorter
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertCancelEventFired(cmp);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Test to check after pressing cancel and reopening list sorter resets
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * sorter state to default behavior.
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    testPressCancelResetsSorterToDefaultState : {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.listSorter = cmp.find("defaultListSorter");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.trigger = cmp.find("defaultListSorterTrigger");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertUISorterPresent(this.listSorter, false);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            //Use cancel button to close the sorter
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertCancelEventFired(cmp);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            //make sure the selected Column and order reset's to default selected column from model
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.verifyDefaultBehviour(this.listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            //Use cancel button to close the sorter
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertCancelEventFired(cmp);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Verify default Sort order and default Column is selected when
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Also make sure column selected is the active element on the page
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    testDefaultSortOrderSelection : {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.listSorter = cmp.find("defaultListSorter");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.trigger = cmp.find("defaultListSorterTrigger");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertUISorterPresent(this.listSorter, false);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.verifyDefaultBehviour(this.listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            //Use cancel button to close the sorter
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            this.assertCancelEventFired(cmp);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Verify default Sort order and default Column is selected when
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Also make sure column selected is the active element on the page
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    verifyDefaultBehviour: function(listSorter){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var menuItems =  this.getDisplayedColumns(listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var selectedColumnAndSortOrder = this.getSelectedColumnsAndSortOrder(menuItems);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var selectedColumn = selectedColumnAndSortOrder.split(":")[0];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var selectedSortOrder = selectedColumnAndSortOrder.split(":")[1];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var defaultCoumn = "Column 2";
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var defaultOrder = "Z-A";
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        //verify by default column2 Z-A is selected
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.assertEquals(defaultCoumn, selectedColumn, "Default Column selected is not correct");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.assertEquals(defaultOrder, selectedSortOrder, "Default Sort Order selected is not correct");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        //active element should be column 2
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var activeElement = $A.test.getActiveElementText();
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.assertTrue(activeElement.indexOf(defaultCoumn) >= 0, "By Default column 2 should be active element");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * select sortBy column and Sort order and make sure its checked on the sort menu
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * pass in sortOrder ="asc" for A-Z and "desc" for Z-A
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var menuItem = this.getMenuItemByColumnNumber(listSorter,columnNumber);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var menuItems =  this.getDisplayedColumns(listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var selectedColumnAndSortOrder = this.getSelectedColumnsAndSortOrder(menuItems);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var expectedColumn = "Column " + columnNumber;
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.addWaitForWithFailureMessage(expectedColumn, function(){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var selectedColumn = selectedColumnAndSortOrder.split(":")[0];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        }, "Wrong Selected field displayed on Dialog");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var expectedSortOrder;
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var isAscending = $A.util.getBooleanValue(menuItem.get("v.isAscending"));
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:                //fire event so that it would change it to descending
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:                //fire event on the item so that it will change it to ascending
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        menuItems =  this.getDisplayedColumns(listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.addWaitForWithFailureMessage(expectedSortOrder, function(){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var actualSortOrder = selectedColumnAndSortOrder.split(":")[1];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            return actualSortOrder;
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Return the field name and order which got applied after apply button was pressed
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var output = cmp.find(resultCmpId+"Result");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        return output.get("v.value");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Click on trigger so that sorter is visible
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        this.assertUISorterPresent(listSorter, true);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var applyButton = listSorter.find("set").getElement();
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.clickOrTouch(applyButton);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        this.assertUISorterPresent(listSorter, false);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Close the sorter by clicking on cancel
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var cancelButton = listSorter.find("cancel").getElement();
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.clickOrTouch(cancelButton);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        this.assertUISorterPresent(listSorter, false);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Verify cancel event did get fired
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    assertCancelEventFired : function(cmp)    {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.assertTrue(cmp.get('v.cancelEventFired'),"Cancel event did not get fired");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * check if sorter is visible on the page
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    assertUISorterPresent : function(listSorter, isPresent)    {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            $A.test.addWaitForWithFailureMessage(isPresent, function(){return $A.util.hasClass(listSorter.find("sorterContainer").getElement(),"open");}, "List Sorter should be visible");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            $A.test.addWaitForWithFailureMessage(isPresent, function(){return $A.util.hasClass(listSorter.find("sorterContainer").getElement(),"open");}, "List Sorter should not be visible");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:     * Get all display columns including hidden one from the model
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        return listSorter.get("v.dataProvider")[0].get("m.columns");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    getDefaultOrderByListFromModel: function(listSorter){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        return listSorter.get("v.dataProvider")[0].get("m.defaultOrderByList");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    defaultSortOrder: function(listSorter){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var defaultOrderObj = this.getDefaultOrderByListFromModel(listSorter)
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var defaultOrder = [];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        for (var i = 0; i < defaultOrderObj.length; i++) {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var defaultField = defaultOrderObj[i];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var fieldName = defaultField.fieldName;
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var sortOrder = defaultField.ascending ? "A-Z" : "Z-A";
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            defaultOrder.push(defaultField.fieldName + " : " +sortOrder);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        return defaultOrder.join(",");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    getDisplayedColumns: function(listSorter){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var menuCmp = listSorter.find("sorterMenuList");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var menuItems = menuCmp.get("v.childMenuItems");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var values = [];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        for (var i = 0; i < menuItems.length; i++) {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var item = menuItems[i];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:                var label = item.get("v.label");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:                var selectedSortOrder = item.get("v.isAscending") ? "A-Z" : "Z-A";
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:                values.push(label + ":" + selectedSortOrder);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        return values.join(",");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    getAllColumnsLabel: function(menuItems){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var values = [];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        for (var i = 0; i < menuItems.length; i++) {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var item = menuItems[i];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            values.push(item.get("v.label"));
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        return values;
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var menuItems = this.getDisplayedColumns(listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.fail("Test fail! Column not present in the Sort Menu");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:    getOnlySortableColumnsFromModel: function(listSorter){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var columns = this.getColumnsFromModel(listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var sortableColumns = [];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        for (var i = 0; i < columns.length; i++) {
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var column = columns[i];
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            var isSortable = column.isSortable;
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            if(isSortable === true){
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:                sortableColumns.push(column.label);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        return sortableColumns;
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var sortableColumnsFromModel = this.getOnlySortableColumnsFromModel(listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var menuItems = this.getDisplayedColumns(listSorter);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var columnsFromUI = this.getAllColumnsLabel(menuItems);
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        var hiddenColumnLabel = "Hidden Column";
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.assertEquals(sortableColumnsFromModel.join(","), columnsFromUI.join(","),
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            "Some columns are missing in UI Sorter which are sortable");
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:        $A.test.assertFalse(hiddenColumnLabel.indexOf(columnsFromUI.join(",")) >= 0,
ruau/ruau/src/test/components/uitest/listSorter_Test/listSorter_TestTest.js:            "Hidden Column should not be displayed on the page, list of columns diplayed:" + columnsFromUI.join(","));
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js:    	var elem = cmp.getElement();
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js:    		$A.util.removeClass(cmp, "invisible");
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionHelper.js:    		$A.util.addClass(cmp, "invisible");
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:<ruau:component extends="ui:autocompleteOption">
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:	<ruau:attribute name="visible" type="Boolean"/>
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:	<!-- has to be an HTML element that can be focusable so that autocomplete can 
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:		 function properly, or else using key down/up will not navigate to next
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:	<div class="customOption"><a ruau:id="option">{!v.label}</a></div>
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOption.cmp:</ruau:component>
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js:    	var ret = this.superRerender();
ruau/ruau/src/test/components/uitest/autoComplete_CustomOption/autoComplete_CustomOptionRenderer.js:    afterRender: function(cmp, helper) {
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js: * limitations under the License.
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js:    handleScrollTo : function(scrollEvt, dest, time, x, y) {
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js:    	scrollEvt.setParams({
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js:    		destination : dest,
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js:    handleScrollBy : function(scrollEvt, deltaX, deltaY, time) {
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js:    	scrollEvt.setParams({
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js:    		deltaX : deltaX,
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_TestHelper.js:    		deltaY : deltaY,
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css: * you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css: * You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css: * Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css: * See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css: * limitations under the License.
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.css:	margin: 8px;
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:    Copyright (C) 2013 salesforce.com, inc.
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:    Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:    you may not use this file except in compliance with the License.
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:    You may obtain a copy of the License at
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:            http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:    Unless required by applicable law or agreed to in writing, software
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:    distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:    See the License for the specific language governing permissions and
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:    limitations under the License.
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:<ruau:component model="java://org.ruauframework.impl.java.model.TestJavaModel">
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:	<ruau:attribute name="scrollToBottomCount" type="Integer" default="0"/>
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:    <div class="test">
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:        <ui:scroller ruau:id="basic">
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:            <img ruau:id="dynamicImage"/>
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:            When I walk on by, girls be looking like damn he fly
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:            I pimp to the beat, walking down the street in my new lafreak, yeah
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:            This is how I roll, animal print, pants out control,
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:            It's RedFoo with the big afro
ruau/ruau/src/test/components/uitest/scroller_Test/scroller_Test.cmp:            And like Bruce Lee I've got the claw
