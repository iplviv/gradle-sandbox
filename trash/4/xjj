ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:                    // more information there, or we successfully finished, in which
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:                    // case it is rather unclear how this could happen.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:            TextTokenizer tt = TextTokenizer.tokenize(contents, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:            tt.addExpressionRefs(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:            return createDefinition(map);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        } catch (QuickFixException qfe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:            return createDefinition(qfe);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        } catch (JsonParseException pe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:            return createDefinition(new RuueRuntimeException(pe, getLocation()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:            return createDefinition(new RuueRuntimeException(e, getLocation()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:     * create the definition from the parsed source
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:     * @param map the source that was read in
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:    protected abstract T createDefinition(Map<String, Object> map) throws QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:     * create the definition from a parse error.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:     * @param error the parse error.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:    protected abstract T createDefinition(Throwable error);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:    public static String getCompressedSource(Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        // TODO: this should be a typed exception
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:        throw new RuueRuntimeException("Expressions are not allowed inside a " + descriptor.getDefType()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptHandler.java:                + " definition", propRefs.iterator().next().getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:package org.ruauframework.impl.javascript.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:import org.ruauframework.def.RendererDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:import org.ruauframework.impl.javascript.renderer.JavascriptRendererDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java: * happy happy render render TODO: this class needs to validate stuff about the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:public class JavascriptRendererDefHandler extends JavascriptHandler<RendererDef, RendererDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:    private final JavascriptRendererDef.Builder builder = new JavascriptRendererDef.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:    public JavascriptRendererDefHandler(DefDescriptor<RendererDef> descriptor, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:    protected RendererDef createDefinition(Map<String, Object> map) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:        builder.render = (JsFunction) map.get("render");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:            builder.render.setName(String.format("render_%s_%s", descriptor.getNamespace(), descriptor.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:        builder.afterRender = (JsFunction) map.get("afterRender");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:        if (builder.afterRender != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:            builder.afterRender.setName(String.format("afterRender_%s_%s", descriptor.getNamespace(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:                    descriptor.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:        builder.rerender = (JsFunction) map.get("rerender");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:            builder.rerender.setName(String.format("rerender_%s_%s", descriptor.getNamespace(), descriptor.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:        builder.unrender = (JsFunction) map.get("unrender");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:            builder.unrender.setName(String.format("unrender_%s_%s", descriptor.getNamespace(), descriptor.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:        builder.expressionRefs.addAll(propRefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:    protected RendererDef createDefinition(Throwable error) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptRendererDefHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:package org.ruauframework.impl.javascript.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import java.io.StringReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.def.IncludeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.impl.root.library.IncludeDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.util.json.JsonStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:import org.ruauframework.util.json.JsonStreamReader.JsonParseException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:public class JavascriptIncludeDefHandler extends JavascriptHandler<IncludeDef, IncludeDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:    private final IncludeDefImpl.Builder builder = new IncludeDefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:    public JavascriptIncludeDefHandler(DefDescriptor<IncludeDef> descriptor, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:    // json-ify the js so we can have basic validation and ensure well-formed output
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:        JsonStreamReader in = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:        in = new JsonStreamReader(new StringReader(contents), getHandlerProvider());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:            JsFunction function = (JsFunction) in.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:        } catch (JsonParseException pe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:            // EVIL: JsonStreamReader doesn't handle js regex during parse, so we can end up here unexpectedly
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:            // TODO: will have to find better impl to sanitize and validate library content
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:            // until then, at least strip out multi-line comments
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:            code = code.trim().replaceAll("(?s)/\\*.*?\\*/", "");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:        } catch (IOException ioe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:            return createDefinition(new RuueRuntimeException(ioe, getLocation()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:            } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:                // We are in a very confusing state here, don't throw an exception. Either we've already had an
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:                // exception, in which case we have more information there, or we successfully finished, in which case
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:                // it is rather unclear how this could happen.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:    protected IncludeDef createDefinition(Throwable error) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:    protected IncludeDef createDefinition(Map<String, Object> map) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptIncludeDefHandler.java:        // work done in getDefinition instead
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:package org.ruauframework.impl.javascript.parser.handler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import java.util.ArrayList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import java.util.Collections;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import java.util.Map.Entry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.impl.javascript.testsuite.JavascriptTestCaseDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.impl.javascript.testsuite.JavascriptTestSuiteDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.impl.javascript.testsuite.JavascriptTestSuiteDef.Builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import com.google.common.base.Strings;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java: * Javascript handler for test suite defs
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:public class JavascriptTestSuiteDefHandler extends JavascriptHandler<TestSuiteDef, TestSuiteDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:    private final Builder builder = new Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:    public JavascriptTestSuiteDefHandler(DefDescriptor<TestSuiteDef> descriptor, Source<?> source) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:    private void putMocks(Map<String,Object> mocksMap, List<Object> mocks) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:            @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:            Map<String,Object> mock = (Map<String,Object>)obj;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:            mocksMap.put((String)mock.get("type") + "@@@" + (String)mock.get("descriptor"), mock);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:    protected JavascriptTestSuiteDef createDefinition(Map<String, Object> map) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        builder.setLocation(getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        builder.caseDefs = new ArrayList<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        DefDescriptor<? extends BaseComponentDef> compDesc = DefDescriptorImpl
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                .getAssociateDescriptor(descriptor, ComponentDef.class,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        Map<String, Object> suiteAttributes = (Map<String, Object>) map.get("attributes");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        List<String> suiteLabels = (List<String>) map.get("labels");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        String suiteScrumTeam = (String) map.get("scrumTeam");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        String suiteOwner = (String) map.get("owner");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        List<String> suiteBrowsers = (List<String>) (List<?>) map.get("browsers");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        // Verify that we can parse.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        List<Object> suiteMocks = (List<Object>) map.get("mocks");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        Map<String, Object> suiteMocksMap = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        for (Entry<String, Object> entry : map.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:            if (key.startsWith("test")) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                Map<String, Object> value = (Map<String, Object>) entry.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                Object t = value.get("test");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                if (!(t instanceof JsFunction)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    if (t instanceof List) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                            if (!(i instanceof JsFunction)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                                throw new RuueRuntimeException(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                                        key + " 'test' must be a function or an array of functions");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                        throw new RuueRuntimeException(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                                key + " 'test' must be a function or an array of functions");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                Map<String, Object> caseAttributes = (Map<String, Object>) value.get("attributes");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                Map<String, Object> attributes = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    attributes.putAll(suiteAttributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                if (caseAttributes != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    attributes.putAll(caseAttributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                List<String> caseLabels = (List<String>) (List<?>) value.get("labels");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                Set<String> labels = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                if (suiteLabels != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    labels.addAll(suiteLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                if (caseLabels != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    labels.addAll(caseLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                String caseScrumTeam = (String) value.get("scrumTeam");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                String caseOwner = (String) value.get("owner");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                String scrumTeam = "";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                //For scrumTeam
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                if (!Strings.isNullOrEmpty(suiteScrumTeam)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    scrumTeam = suiteScrumTeam;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                if (!Strings.isNullOrEmpty(caseScrumTeam)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    scrumTeam = caseScrumTeam;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                if (!Strings.isNullOrEmpty(caseOwner)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    owner = caseOwner;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                List<String> caseBrowsers = (List<String>) (List<?>) value.get("browsers");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                Set<String> browsers = caseBrowsers == null ? (suiteBrowsers == null ? Collections.EMPTY_SET
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                        : Sets.newHashSet(suiteBrowsers))
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                        : Sets.newHashSet(caseBrowsers);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                List<String> ruauErrorsExpectedDuringInitList = (List<String>) (List<?>) value
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                        .get("ruauErrorsExpectedDuringInit");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                Set<String> ruauErrorsExpectedDuringInit = ruauErrorsExpectedDuringInitList == null ? Collections.EMPTY_SET
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                        : Sets.newHashSet(ruauErrorsExpectedDuringInitList);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    compDesc = DefDescriptorImpl.getAssociateDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                            descriptor, ApplicationDef.class,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                List<Object> caseMocks = (List<Object>) value.get("mocks");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    mocks = caseMocks;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                } else if (caseMocks == null || caseMocks.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    Map<String, Object> mocksMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    if (suiteMocksMap == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                        suiteMocksMap = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                        putMocks(suiteMocksMap, suiteMocks);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    mocksMap = Maps.newHashMap(suiteMocksMap);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    putMocks(mocksMap, caseMocks);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                    mocks = Lists.newArrayList(mocksMap.values());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                builder.caseDefs.add(new JavascriptTestCaseDef(descriptor, key, null, attributes, defType, labels,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:                        browsers, mocks, ruauErrorsExpectedDuringInit, scrumTeam, owner));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:    public void addExpressionReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:    protected TestSuiteDef createDefinition(Throwable error) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/parser/handler/JavascriptTestSuiteDefHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:package org.ruauframework.impl.javascript.testsuite;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import java.io.ObjectInputStream;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.def.TestCaseDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:public class JavascriptTestCaseDef extends DefinitionImpl<TestCaseDef> implements TestCaseDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public JavascriptTestCaseDef(DefDescriptor<TestSuiteDef> suiteDescriptor, String name, Location location,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:            Map<String, Object> attributes, DefType defType, Set<String> testLabels, Set<String> browsers,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:            List<Object> mocks, Set<String> ruauErrorsExpectedDuringInit, String scrumTeam, String owner) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        super(DefDescriptorImpl.getInstance(suiteDescriptor.getQualifiedName() + "/" + DefType.TESTCASE + "$" + name,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:                TestCaseDef.class), location, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        this.attributes = RuueUtil.immutableMap(attributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        this.testLabels = RuueUtil.immutableSet(testLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        this.browsers = RuueUtil.immutableSet(browsers);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        this.mocks = RuueUtil.immutableList(mocks);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:            tMockDefs = parseMocks();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        } catch (QuickFixException t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        this.name = name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        this.ruauErrorsExpectedDuringInit = ruauErrorsExpectedDuringInit;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        this.scrumTeam = scrumTeam;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        super.validateDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEntry("name", getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEntry("descriptor", descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEntry("attributes", attributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEntry("defType", defType);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEntry("testLabels", testLabels);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEntry("browsers", browsers);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEntry("ruauErrorsExpectedDuringInit", ruauErrorsExpectedDuringInit);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEntry("scrumTeam", scrumTeam);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEntry("owner", owner);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public String getScrumTeam() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        return scrumTeam;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public String getName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        return name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public Map<String, Object> getAttributeValues() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        return attributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public Set<String> getTestLabels() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        return testLabels;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public List<Definition> getLocalDefs() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public Set<String> getRuueErrorsExpectedDuringInit() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        return ruauErrorsExpectedDuringInit;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    public String getQualifiedName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:                return this.getDescriptor().getQualifiedName() + ":BROWSERTYPE" + cb;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:                return this.getDescriptor().getQualifiedName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private String getCurrentBrowser() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private static Definition parseMock(DefDescriptor<? extends BaseComponentDef> compDesc,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:            Map<String, Object> map) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        DefType mockType = DefType.valueOf((String) map.get("type"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        case MODEL:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:            return new JavascriptMockModelHandler(compDesc, map).getDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        case ACTION:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:            return new JavascriptMockActionHandler(compDesc, map).getDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        case PROVIDER:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:            return new JavascriptMockProviderHandler(compDesc, map).getDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        default:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private List<Definition> parseMocks() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        DefDescriptor<? extends BaseComponentDef> compDesc = DefDescriptorImpl
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:                .getAssociateDescriptor(suiteDescriptor, ComponentDef.class,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        List<Definition> building = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:                @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:                Definition mockDef = parseMock(compDesc, (Map<String, Object>) mock);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:                    building.add(mockDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        in.defaultReadObject();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:            tMockDefs = parseMocks();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:        } catch (QuickFixException t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private String currentBrowser = "";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private static final long serialVersionUID = -5460410624026635318L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final Map<String, Object> attributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final DefType defType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final Set<String> testLabels;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final Set<String> browsers;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final List<Object> mocks;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final Set<String> ruauErrorsExpectedDuringInit;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final String name;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final String scrumTeam;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final String owner;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    private final DefDescriptor<TestSuiteDef> suiteDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    transient private List<Definition> mockDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestCaseDef.java:    transient private QuickFixException mockException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:package org.ruauframework.impl.javascript.testsuite;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import java.lang.reflect.Method;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import java.lang.reflect.Proxy;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.instance.Action.State;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.test.Resettable;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.test.mock.Answer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.test.mock.DelegatingStubHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.test.mock.Invocation;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.test.mock.MockAction;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.test.mock.Stub;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import org.ruauframework.impl.javascript.controller.JavascriptControllerDef.Builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:import com.google.common.collect.ImmutableList;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java: * Parse JSTEST mock Actions.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:public class JavascriptMockActionHandler extends JavascriptMockHandler<ControllerDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    private ControllerDef controllerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    private ActionDef actionDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    public JavascriptMockActionHandler(DefDescriptor<? extends BaseComponentDef> targetDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            Map<String, Object> map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        super(targetDescriptor, map);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    protected ControllerDef createDefinition(Map<String, Object> map) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        controllerDef = getBaseDefinition((String) map.get("descriptor"), ControllerDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        List<Stub<?>> stubs = getStubs(map.get("stubs"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        return (ControllerDef) Proxy.newProxyInstance(this.getClass().getClassLoader(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:                new Class<?>[] { ControllerDef.class, Resettable.class}, new DelegatingStubHandler(controllerDef, stubs));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    protected ControllerDef getDefaultBaseDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        for (DefDescriptor<ControllerDef> desc : getTargetDescriptor().getDef().getControllerDefDescriptors()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            if ("java".equals(desc.getPrefix())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        throw new InvalidDefinitionException("Unable to locate the server controller", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    protected Invocation getDefaultInvocation() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        throw new InvalidDefinitionException("A mock action must specify the name of the action", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    protected Invocation getInvocation(Object object) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        if (object instanceof Map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            Map<?, ?> methodMap = (Map<?, ?>) object;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            String name = (String) methodMap.get("name");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            if (name == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:                throw new InvalidDefinitionException("A mock action must specify the name of the action", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            String typeStr = (String) methodMap.get("type");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            Class<?> type = Object.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:                    type = classForSimpleName(typeStr);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:                } catch (ClassNotFoundException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            actionDef = controllerDef.getSubDefinition(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            return new ActionInvocation("createAction", ImmutableList.of(name), type);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        return super.getInvocation(object);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    protected <T> Answer<T> getAnswer(Object object, Class<T> retClass) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        if (object instanceof Map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            Map<?, ?> map = (Map<?, ?>) object;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            T value = getValue(map.get("value"), retClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            String error = (String) map.get("error");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            if (value != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:                            actionDef.getDescriptor(), State.SUCCESS, value));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:                        new ThrowsExceptionClass<T>(error).answer();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:                    } catch (Throwable e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:                                actionDef.getDescriptor(), State.ERROR, null,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:                                null, null, ImmutableList.<Object> of(e)));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        throw new InvalidDefinitionException("Mock answer must specify either 'value' or 'error'", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:     * Matches invocations where the first param, action name, is equal.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    public class ActionInvocation extends Invocation {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        public ActionInvocation(String methodName, List<?> parameters, Class<?> returnType) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            super(methodName, parameters, returnType);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        public boolean matches(Method method, Object[] args) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            List<?> parameters = getParameters();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:            return method.getName().equals(getMethodName()) && parameters.get(0).equals(args[0]);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:    protected ControllerDef createDefinition(Throwable error) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockActionHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:package org.ruauframework.impl.javascript.testsuite;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import java.lang.reflect.Array;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import java.util.regex.Matcher;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import java.util.regex.Pattern;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.system.Location;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.test.mock.Answer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.test.mock.Invocation;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.test.mock.Stub;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import com.google.common.collect.ImmutableMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:import com.google.common.collect.ImmutableMap.Builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * Parse JSTEST mock definitions into mocks to be applied when running tests.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java: * @param <D> the type of Definition being modified in the registry
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:public abstract class JavascriptMockHandler<D extends Definition> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    private final Map<String, Object> sourceMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    private final DefDescriptor<? extends BaseComponentDef> compDesc;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected JavascriptMockHandler(DefDescriptor<? extends BaseComponentDef> targetDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Map<String, Object> map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        this.sourceMap = map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        this.compDesc = targetDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected DefDescriptor<? extends BaseComponentDef> getTargetDescriptor() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            return createDefinition(sourceMap);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        } catch (QuickFixException qfe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            return createDefinition(qfe);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * Mocks will have handlers to parse their respective mock objects.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected abstract D createDefinition(Map<String, Object> map) throws QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * Mocks will have handlers to parse their respective mock objects.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected abstract D createDefinition(Throwable t);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param descStr
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param defClass
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected D getBaseDefinition(String descStr, Class<D> defClass)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            return Ruue.getDefinitionService().getDefinition(descStr, defClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        D ret = getDefaultBaseDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            throw new RuueRuntimeException("Descriptor not specified, and default definition not found for " +
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                getTargetDescriptor() /*, Location */);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected abstract D getDefaultBaseDefinition() throws QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected <T extends Definition> DefDescriptor<T> getDescriptor(String descStr, Class<T> defClass) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            return Ruue.getDefinitionService().getDefDescriptor(descStr, defClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * Read a single or list of Stubs
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     *            the parsed json representation
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @return a list of Stubs
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        if (!(object instanceof List)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            object = Lists.newArrayList(object);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Stub<?> answer = getStub(item);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            if (answer != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                stubs.add(answer);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * Read a Stub that has an optional Invocation definition, "method"; and a list
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * of Answers, "answers".
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param <T>
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     *            the parsed json representation
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @return a Stub object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        if (object instanceof Map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Invocation invocation = getInvocation(((Map<?, ?>) object).get("method"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            @SuppressWarnings("rawtypes")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Class retType = invocation.getReturnType();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            List<Answer<Object>> answers = getAnswers(((Map<?, ?>) object).get("answers"), retType);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            return new Stub<>(invocation, answers);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected abstract Invocation getDefaultInvocation() throws QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * Read an Invocation, which must have a "name" and, optionally,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * a "params" list of the input parameters to the method.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     *            the parsed json representation
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @return an Invocation object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected Invocation getInvocation(Object object) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            return getDefaultInvocation();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        } else if (object instanceof Map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Map<?, ?> methodMap = (Map<?, ?>) object;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            String name = (String) methodMap.get("name");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            if (name == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                throw new InvalidDefinitionException("A mock's stubbed method must specify 'name'", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            List<?> params = (List<?>) methodMap.get("params");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            String typeStr = (String) methodMap.get("type");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Class<?> type = Object.class;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                    type = classForSimpleName(typeStr);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                } catch (ClassNotFoundException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            return new Invocation(name, params, type);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected Location getLocation() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * Read a single or list of answers
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     *            the parsed json representation
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param retClass
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @return a list of Answers
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected <T> List<Answer<T>> getAnswers(Object object, Class<T> retClass) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        List<Answer<T>> answers = Lists.newLinkedList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        if (!(object instanceof List)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            object = Lists.newArrayList(object);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Answer<T> answer = getAnswer(item, retClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            if (answer != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                answers.add(answer);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        return answers;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * Read an Answer, which must have either a 'value' or 'error',
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * corresponding to Returns or ThrowsExceptionClass instances.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     *            the parsed json representation
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param retClass
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @return an Answer object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected <T> Answer<T> getAnswer(Object object, Class<T> retClass) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        if (object instanceof Map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Map<?, ?> map = (Map<?, ?>) object;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            T value = getValue(map.get("value"), retClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            String error = (String) map.get("error");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            if (value != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                    return new Returns<>(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                    return new ThrowsExceptionClass<>(error);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        throw new InvalidDefinitionException("Mock answer must specify either 'value' or 'error'", null /* getLocation() */);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * Read a value. Usually, this will be returned by an Answer and/or may
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * contain nested Answers.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param object
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     *            the parsed json representation
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param retClass
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     *            the expected type of the value
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @return the value
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    protected <T> T getValue(Object object, Class<T> retClass) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * Gets the Class from a simple name representation. Classes from the java.lang package may omit the package name.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * For example, "java.lang.String[][]" and "String[][]" will return the same Class object.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @param simpleName
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @return the Class, if found
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * @throws ClassNotFoundException
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    public Class<?> classForSimpleName(String simpleName) throws ClassNotFoundException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        Matcher matcher = arrayPattern.matcher(simpleName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        if (matcher.matches()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            int dims = (simpleName.length() - matcher.end(1)) / 2;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            String className = matcher.group(1);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Class<?> clazz = primitiveMap.get(className);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            if (clazz == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                    // allow convenience of shorter Object alternatives
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                    clazz = Class.forName("java.lang." + className);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                } catch (ClassNotFoundException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                    clazz = Class.forName(className);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            return (dims == 0) ? clazz : Array.newInstance(clazz, new int[dims]).getClass();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        throw new ClassNotFoundException("Unknown type: " + simpleName);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    private static final Pattern arrayPattern = Pattern.compile("^([\\w\\.]+?)(\\[\\])*\\z");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    private static final Map<String, Class<?>> primitiveMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    static {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        Builder<String, Class<?>> builder = ImmutableMap.builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        for (Class<?> c : new Class[] { boolean.class, byte.class, char.class, int.class, long.class, double.class,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                float.class, short.class, void.class }) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            builder.put(c.getCanonicalName(), c);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        primitiveMap = builder.build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * An Answer that just returns a value.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    public class Returns<T> implements Answer<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        private T value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        public Returns(T value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            this.value = value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        public T answer() throws Throwable {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            return value;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:     * An Answer that throws a Throwable.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:    public class ThrowsExceptionClass<T> implements Answer<T> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        private Class<? extends Throwable> toThrow;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        public ThrowsExceptionClass(String className) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                this.toThrow = Class.forName(className).asSubclass(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                        Throwable.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            } catch (ClassNotFoundException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:        public T answer() throws Throwable {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            // try to instantiate the class with no args, or with a string
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            Throwable t;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                t = toThrow.newInstance();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:            } catch (Exception e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockHandler.java:                t = toThrow.getConstructor(String.class).newInstance("MOCKED");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:package org.ruauframework.impl.javascript.testsuite;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:import org.ruauframework.def.TestCaseDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:import org.ruauframework.def.TestSuiteDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:public class JavascriptTestSuiteDef extends DefinitionImpl<TestSuiteDef> implements TestSuiteDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:    private static final long serialVersionUID = -6488304738447278299L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:    private final String code;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:    private final List<TestCaseDef> caseDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:    protected JavascriptTestSuiteDef(Builder builder) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:        this.caseDefs = builder.caseDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:        json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:        json.writeMapEntry("descriptor", descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:        json.writeMapEntry("cases", caseDefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:        json.writeMapEntry("code", code);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:        json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:    public List<TestCaseDef> getTestCaseDefs() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:        return caseDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:    public static class Builder extends DefinitionImpl.BuilderImpl<TestSuiteDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:            super(TestSuiteDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:        public List<TestCaseDef> caseDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:        public JavascriptTestSuiteDef build() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptTestSuiteDef.java:            return new JavascriptTestSuiteDef(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:package org.ruauframework.impl.javascript.testsuite;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import java.lang.reflect.Proxy;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.def.ComponentConfigProvider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.impl.javascript.provider.JavascriptProviderDef.Builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.test.Resettable;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.test.mock.Answer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.test.mock.DelegatingStubHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.test.mock.Invocation;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.test.mock.Stub;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java: * Parse JSTEST mock Providers.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:public class JavascriptMockProviderHandler extends JavascriptMockHandler<ProviderDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:    public JavascriptMockProviderHandler(DefDescriptor<? extends BaseComponentDef> targetDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:            Map<String, Object> map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        super(targetDescriptor, map);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:    protected ProviderDef createDefinition(Map<String, Object> map) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        ProviderDef baseDef = getBaseDefinition((String) map.get("descriptor"), ProviderDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        List<Stub<?>> stubs = getStubs(map.get("stubs"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        return (ProviderDef) Proxy.newProxyInstance(this.getClass()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                .getClassLoader(), new Class<?>[] { ProviderDef.class, Resettable.class },
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                new DelegatingStubHandler(baseDef, stubs));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:    protected <T> T getValue(Object object, Class<T> retClass) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        if (object != null && ComponentConfig.class.equals(retClass)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:            if (!(object instanceof Map)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                throw new InvalidDefinitionException("Mock Provider expects (descriptor and/or attributes) or (configProvider)", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:            String configProvider = (String)((Map<?, ?>) object).get("configProvider");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:            //If a config provider is specified, defer provide until later
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                DefDescriptor<ComponentDef> cdd = getDescriptor((String) ((Map<?, ?>) object).get("descriptor"),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                        ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                Map<String, Object> attributes = (Map<String, Object>) ((Map<?, ?>) object).get("attributes");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                if (attributes != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                    config.setAttributes(attributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:            return super.getValue(object, retClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:    protected <T> Answer<T> getAnswer(Object object, Class<T> retClass) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        if (object instanceof Map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:            Map<?, ?> map = (Map<?, ?>) object;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:            final String configProvider = (String)((Map<?, ?>)map.get("value")).get("configProvider");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                    public T answer() throws Throwable {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                        if(configProvider.startsWith("java://")){
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                            mockProvider = configProvider.substring("java://".length());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                            Class<?> providerClass = Class.forName(mockProvider);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                            if(!ComponentConfigProvider.class.isAssignableFrom(providerClass)){
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                                throw new InvalidDefinitionException("Class specified as configProvider should implement ComponentConfigProvider", getLocation()); 
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                            ComponentConfigProvider provider = (ComponentConfigProvider)providerClass.newInstance(); 
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                        }catch(ClassNotFoundException e){
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                            throw new InvalidDefinitionException("Could not locate class specified as configProvider:"+configProvider, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                        }catch(IllegalAccessException e){
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                            throw new InvalidDefinitionException("Constructor is inaccessible for "+ configProvider, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                        }catch (InstantiationException ie) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                            throw new InvalidDefinitionException("Cannot instantiate " + configProvider, getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:                return super.getAnswer(object, retClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        throw new InvalidDefinitionException("Mock answer must specify either 'value' or 'error'", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:    protected ProviderDef getDefaultBaseDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        return getTargetDescriptor().getDef().getLocalProviderDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:    protected Invocation getDefaultInvocation() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        return new Invocation("provide", null, ComponentConfig.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:    protected ProviderDef createDefinition(Throwable error) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockProviderHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:package org.ruauframework.impl.javascript.testsuite;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import java.lang.reflect.Proxy;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.def.ModelDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.impl.javascript.model.JavascriptModelDef.Builder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.instance.Model;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.test.Resettable;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.test.mock.DelegatingStubHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.test.mock.Invocation;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.test.mock.MockModel;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.test.mock.Stub;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java: * Parse JSTEST mock Models.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:public class JavascriptMockModelHandler extends JavascriptMockHandler<ModelDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:    private DefDescriptor<ModelDef> modelDefDescriptor = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:    public JavascriptMockModelHandler(DefDescriptor<? extends BaseComponentDef> targetDescriptor,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:            Map<String, Object> map) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:        super(targetDescriptor, map);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:    protected ModelDef createDefinition(Map<String, Object> map)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:        ModelDef baseDef = getBaseDefinition((String) map.get("descriptor"), ModelDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:        modelDefDescriptor = baseDef.getDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:        List<Stub<?>> stubs = getStubs(map.get("stubs"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:        return (ModelDef) Proxy.newProxyInstance(this.getClass().getClassLoader(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:                new Class<?>[] { ModelDef.class, Resettable.class }, new DelegatingStubHandler(baseDef, stubs));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:    protected <T> T getValue(Object object, Class<T> retClass) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:        if (object != null && Model.class.equals(retClass)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:            if (!(object instanceof Map)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:                throw new InvalidDefinitionException(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:                        "Mock Model expects a map of property names to Answers.", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:            Map<String, Object> properties = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:            Map<?, ?> propMap = (Map<?, ?>) object;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:            for (Object key : propMap.keySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:                        getAnswer(propMap.get(key), Object.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:            return super.getValue(object, retClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:    protected ModelDef getDefaultBaseDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:        return getTargetDescriptor().getDef().getModelDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:    protected Invocation getDefaultInvocation() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:        return new Invocation("newInstance", null, Model.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:    protected ModelDef createDefinition(Throwable error) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/javascript/testsuite/JavascriptMockModelHandler.java:        builder.setParseError(error);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:package org.ruauframework.impl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import java.lang.ref.WeakReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import java.util.concurrent.ConcurrentLinkedQueue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.def.ActionDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.impl.system.SubDefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.service.ContextService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.service.DefinitionService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.system.SourceListener;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.throwable.ClientOutOfSyncException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * The public access to definitions inside Ruue.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * This class manages all of the permissions checking and fetching of implementations
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java: * for consumers of ruau definitions.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:public class DefinitionServiceImpl implements DefinitionService {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    private static final long serialVersionUID = -2488984746420077688L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    private static final ConcurrentLinkedQueue<WeakReference<SourceListener>> listeners = new ConcurrentLinkedQueue<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public <T extends Definition> DefDescriptor<T> getDefDescriptor(String qualifiedName, Class<T> defClass) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        return getDefDescriptor(qualifiedName, defClass, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public <T extends Definition, B extends Definition> DefDescriptor<T> getDefDescriptor(String qualifiedName,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            Class<T> defClass, DefDescriptor<B> bundle) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        if (defClass == ActionDef.class) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            return SubDefDescriptorImpl.getInstance(qualifiedName, defClass, ControllerDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        return DefDescriptorImpl.getInstance(qualifiedName, defClass, bundle);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            Class<T> defClass) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        return DefDescriptorImpl.getAssociateDescriptor(desc, defClass, prefix);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        contextService.assertEstablished();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        if (def != null && descriptor.getDefType() == DefType.APPLICATION && def.getAccess().requiresAuthentication() && 
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        		context.getAccess() != Authentication.AUTHENTICATED) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public <T extends Definition> T getDefinition(String qualifiedName, Class<T> defClass) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        return getDefinition(DefDescriptorImpl.getInstance(qualifiedName, defClass));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public Definition getDefinition(String qualifiedName, DefType... defTypes) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        contextService.assertEstablished();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            throw new RuueRuntimeException("defType is required");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            desc = getDefDescriptor(qualifiedName, defType.getPrimaryInterface());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            } catch (DefinitionNotFoundException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * @return the master def registry.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * @throws RuntimeException if the context has not been initialized.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public MasterDefRegistry getDefRegistry() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        ContextService cs = Ruue.getContextService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        cs.assertEstablished();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public <D extends Definition> Set<DefDescriptor<D>> find(DefDescriptor<D> matcher) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        return context.getDefRegistry().find(matcher);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public Set<DefDescriptor<?>> find(DescriptorFilter matcher) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        Ruue.getContextService().assertEstablished();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        return context.getDefRegistry().find(matcher);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public void save(Definition def) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        MasterDefRegistry defRegistry = Ruue.getContextService().getCurrentContext().getDefRegistry();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        contextService.assertEstablished();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        def.validateDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:		defRegistry.save(def);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * Take in the information off the context and sanitize, populating dependencies.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * This routine takes in the current descriptor, It then expands out dependencies and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * cleans up the set of explicitly loaded descriptors by removing descriptors that are
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * implicitly loaded by others in the set.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * Note that the client out of sync exception has higher 'precedence' than
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * the quick fix exception. This allows the servlet to correctly refresh a
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * fact that the server side code changed). This is because quick fix exceptions
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * are thrown and swallowed during posts to avoid circular qfes, which cause
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * Once this routine has completed, the master def registiry should have a
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * valid set of dependencies for the descriptor on the context.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * Note that removing things from the 'loaded' set should send them back to
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * the client, and allow our future requests to be smaller.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * @param loading The descriptor we think we are loading.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * @throws ClientOutOfSyncException if the uid on something is a mismatch
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:     * @throws QuickFixException if a definition can't be compiled.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public void updateLoaded(DefDescriptor<?> loading) throws QuickFixException, ClientOutOfSyncException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        RuueContext context;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        MasterDefRegistry mdr;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        Set<DefDescriptor<?>> loaded = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        Set<DefDescriptor<?>> prev = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        contextService.assertEstablished();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        if (context.getPreloadedDefinitions() == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            // TODO (optimize): we could reverse this set randomly to try
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            // to sanitize the list in opposite directions. No need to be
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            // exact (hard to test though).
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            for (Map.Entry<DefDescriptor<?>, String> entry : context.getClientLoaded().entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                if (loaded.contains(descriptor)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                    context.dropLoaded(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                    // validate the uid.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                    String uid = entry.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                        // If we are given a null, bounce out.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                    } catch (QuickFixException broke) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                        // See note above. This is how we enforce precedence of ClientOutOfSyncException
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                    if (!uid.equals(tuid)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                        throw new ClientOutOfSyncException(descriptor + ": mismatched UIDs " + uid + " != " + tuid);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                    loaded.addAll(deps);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                        if (deps.contains(x)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                                remove = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                            remove.add(x);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                    prev.add(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            context.setPreloadedDefinitions(loaded);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            loaded = context.getPreloadedDefinitions();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                context.dropLoaded(x);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        // Now make sure that our current definition is somewhere there
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        // If this fails, we will throw an exception, and all will be
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        if (loading != null && !loaded.contains(loading) && !context.getLoaded().containsKey(loading)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:            String uid = mdr.getUid(null, loading);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                throw new DefinitionNotFoundException(loading, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:                context.addLoaded(loading, uid);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public void onSourceChanged(DefDescriptor<?> source, SourceListener.SourceMonitorEvent event, String filePath) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        for (WeakReference<SourceListener> i : listeners) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        Ruue.getCachingService().notifyDependentSourceChange(listeners, source, event, filePath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public void subscribeToChangeNotification(SourceListener listener) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        listeners.add(new WeakReference<>(listener));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:    public void unsubscribeToChangeNotification(SourceListener listener) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/DefinitionServiceImpl.java:        for (WeakReference<SourceListener> i : listeners) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:package org.ruauframework.impl.source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import java.util.HashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import java.util.HashSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.adapter.ConfigAdapter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.system.PrivilegedNamespaceSourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.system.SourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * Locates source code and produces Source objects that can be used to read that
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * code and associated metadata. Source creation is delegated to a SourceLoader
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java: * that has registered to load Source for a particular namespace.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:public final class SourceFactory {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:     * Immutable map of namespaces to loaders for this factory to use to load
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    private final Map<LoaderKey, SourceLoader> loaders;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    private static final String WILD = "*";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    private final Set<String> namespaces;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    public SourceFactory(Collection<SourceLoader> loaders) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        Map<LoaderKey, SourceLoader> mutableLoaderMap = new HashMap<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        Set<String> mutableNamespaces = new HashSet<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        ConfigAdapter configAdapter = Ruue.getConfigAdapter();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        for (SourceLoader loader : loaders) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            for (String namespace : loader.getNamespaces()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                mutableNamespaces.add(namespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                // Track and system/privileged namespaces
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                // This code is rather broken, as this now assumes that we build source factories for every
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                // loader. It is not fully compatible with having compiled registries, and we now have a hack
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                // to make it work.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                if (loader instanceof PrivilegedNamespaceSourceLoader) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                	PrivilegedNamespaceSourceLoader privilegedLoader = (PrivilegedNamespaceSourceLoader)loader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:	                if (privilegedLoader.isPrivilegedNamespace(namespace)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:	                	configAdapter.addPrivilegedNamespace(namespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                for (String prefix : loader.getPrefixes()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                    LoaderKey key = new LoaderKey(namespace, prefix);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                    if (mutableLoaderMap.containsKey(key)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                        throw new RuueRuntimeException(String.format(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                                "Namespace/Prefix combination %s claimed by 2 SourceLoaders : %s and %s", key
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                                        .toString(), mutableLoaderMap.get(key).getClass().getName(), loader.getClass()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                                        .getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                    mutableLoaderMap.put(key, loader);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        this.namespaces = RuueUtil.immutableSet(mutableNamespaces);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        this.loaders = RuueUtil.immutableMap(mutableLoaderMap);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    public Set<String> getNamespaces() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        return namespaces;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        LoaderKey key = new LoaderKey(descriptor.getNamespace(), descriptor.getPrefix());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        SourceLoader loader = loaders.get(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        if (loader == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        return loader.getSource(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    public <T extends Definition> Set<DefDescriptor<T>> find(DefDescriptor<T> matcher) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        String namespace = matcher.getNamespace();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        Class<T> primaryInterface = (Class<T>) matcher.getDefType().getPrimaryInterface();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        if (WILD.equals(namespace)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            Set<DefDescriptor<T>> ret = new HashSet<DefDescriptor<T>>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            for (String ns : namespaces) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                ret.addAll(find(primaryInterface, matcher.getPrefix(), ns));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            return find(primaryInterface, matcher.getPrefix(), namespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    public Set<DefDescriptor<?>> find(DescriptorFilter matcher) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        Set<DefDescriptor<?>> ret = new HashSet<DefDescriptor<?>>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        for (Map.Entry<LoaderKey, SourceLoader> entry : this.loaders.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            if (matcher.matchPrefix(entry.getKey().getPrefix())
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                    && matcher.matchNamespace(entry.getKey().getNamespace())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                ret.addAll(entry.getValue().find(matcher));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    private <T extends Definition> Set<DefDescriptor<T>> find(Class<T> primaryInterface, String prefix, String namespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        LoaderKey key = new LoaderKey(namespace, prefix);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        SourceLoader loader = loaders.get(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        if (loader == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            throw new RuueRuntimeException(String.format("Loader not found for %s", key));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        return loader.find(primaryInterface, prefix, namespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:    private static class LoaderKey {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        private final String namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        private final String prefix;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        private LoaderKey(String namespace, String prefix) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            this.namespace = namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            this.hashCode = RuueUtil.hashCode(namespace != null ? namespace.toLowerCase() : null, prefix.toLowerCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:         * @see java.lang.Object#hashCode()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        public int hashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            return hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:         * @see java.lang.Object#equals(java.lang.Object)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        public boolean equals(Object obj) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            if (obj instanceof LoaderKey) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                LoaderKey l = (LoaderKey) obj;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                if (prefix.equalsIgnoreCase(l.prefix) && l.namespace != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:                    return l.namespace.equalsIgnoreCase(namespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:         * @see java.lang.Object#toString()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            return prefix + "://" + namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:         * Gets the namespace for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:         * @return The namespace.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:        public String getNamespace() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:            return this.namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/SourceFactory.java:         * Gets the prefix for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:package org.ruauframework.impl.source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import org.ruauframework.system.Parser.Format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import org.ruauframework.system.SourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java: * Abstract superclass to {@link SourceLoader} implementations, providing common descriptor and filename utilities.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:public class DescriptorFileMapper {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    public static final String FILE_SEPARATOR = System.getProperty("file.separator");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    public enum NameFormat {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        BUNDLE, // ! A 'bundle' file like controller, component, app, helper.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        BUNDLED_EXTRA, // ! An 'extra' file e.g. library include js file
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        NAMESPACE // ! a namespace .xml file (deprecated)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    protected static final class ExtensionInfo {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        public final String extension;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        public final NameFormat nameFormat;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        public final String prefix;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        public final DefType defType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        public final Format format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        public ExtensionInfo(String extension, NameFormat nameFormat, String prefix, DefType defType, Format format) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            this.nameFormat = nameFormat;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            this.format = format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            return "ExtensionInfo{" + this.extension + ", " + this.prefix + ", " + this.nameFormat
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                    + ", " + this.defType + ", " + this.format + "}";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    protected final static Map<String, ExtensionInfo> byExtension = Maps.newHashMapWithExpectedSize(32);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    private final static Map<String, Map<DefType, ExtensionInfo>> byCompound = Maps.newHashMapWithExpectedSize(8);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    private final static Set<DefType> defTypes = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    private final static Set<String> prefixes = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    protected synchronized static void addExtension(String extension, NameFormat nameFormat,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            String prefix, DefType defType, Format format) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        ExtensionInfo ei = new ExtensionInfo(extension, nameFormat, prefix, defType, format);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        byExtension.put(ei.extension.toLowerCase(), ei);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        Map<DefType, ExtensionInfo> defTypeMap = byCompound.get(ei.prefix.toLowerCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        if (defTypeMap == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            defTypeMap = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            byCompound.put(ei.prefix.toLowerCase(), defTypeMap);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        defTypeMap.put(defType, ei);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        defTypes.add(defType);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        prefixes.add(ei.prefix);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    private boolean havePrefix(DefDescriptor<?> desc) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        return byCompound.get(desc.getPrefix().toLowerCase()) != null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        Map<DefType, ExtensionInfo> defTypeMap = byCompound.get(desc.getPrefix().toLowerCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        if (defTypeMap != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            return defTypeMap.get(desc.getDefType());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    static {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".app", NameFormat.BUNDLE, "markup", DefType.APPLICATION, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".cmp", NameFormat.BUNDLE, "markup", DefType.COMPONENT, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".evt", NameFormat.BUNDLE, "markup", DefType.EVENT, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".lib", NameFormat.BUNDLE, "markup", DefType.LIBRARY, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".intf", NameFormat.BUNDLE, "markup", DefType.INTERFACE, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".xml", NameFormat.NAMESPACE, "markup", DefType.NAMESPACE, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".theme", NameFormat.BUNDLE, "markup", DefType.THEME, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".ruauCOD", NameFormat.BUNDLE, "markup", DefType.DOCUMENTATION, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".design", NameFormat.BUNDLE, "markup", DefType.DESIGN, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".svg", NameFormat.BUNDLE, "markup", DefType.SVG, Format.SVG);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Layouts.xml", NameFormat.BUNDLE, "markup", DefType.LAYOUTS, Format.XML);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Controller.js", NameFormat.BUNDLE, "js", DefType.CONTROLLER, Format.JS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Renderer.js", NameFormat.BUNDLE, "js", DefType.RENDERER, Format.JS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Provider.js", NameFormat.BUNDLE, "js", DefType.PROVIDER, Format.JS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Helper.js", NameFormat.BUNDLE, "js", DefType.HELPER, Format.JS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Model.js", NameFormat.BUNDLE, "js", DefType.MODEL, Format.JS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Resource.js", NameFormat.BUNDLE, "js", DefType.RESOURCE, Format.JS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Test.js", NameFormat.BUNDLE, "js", DefType.TESTSUITE, Format.JS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".js", NameFormat.BUNDLED_EXTRA, "js", DefType.INCLUDE, Format.JS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".css", NameFormat.BUNDLE, "templateCss", DefType.STYLE, Format.TEMPLATE_CSS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Resource.css", NameFormat.BUNDLE, "templateCss", DefType.RESOURCE, Format.TEMPLATE_CSS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension(".css", NameFormat.BUNDLE, "css", DefType.STYLE, Format.CSS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        addExtension("Resource.css", NameFormat.BUNDLE, "css", DefType.RESOURCE, Format.CSS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    protected static DefDescriptor<? extends Definition> getDescriptor(String filename) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    	return getDescriptor(filename, FILE_SEPARATOR);    	
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    protected static DefDescriptor<? extends Definition> getDescriptor(String filename, String separator) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        List<String> names = RuueTextUtil.splitSimple(separator, filename);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        if (names.size() < 3) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        String last = names.get(names.size() - 1);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        String name = names.get(names.size() - 2);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        String ns = names.get(names.size() - 3);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        if (last.startsWith(name)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            ext = last.substring(name.length());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            ei = byExtension.get(ext.toLowerCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                String format = DefDescriptor.MARKUP_PREFIX.equals(ei.prefix) ? "%s://%s:%s" : "%s://%s.%s";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                return Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                        String.format(format, ei.prefix, ns, name), ei.defType.getPrimaryInterface());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        List<String> ext = RuueTextUtil.splitSimple(".", last);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            ei = byExtension.get(ext.get(1).toLowerCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                if (ei.nameFormat == NameFormat.BUNDLED_EXTRA) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                    String format = DefDescriptor.MARKUP_PREFIX.equals(ei.prefix) ? "%s://%s:%s" : "%s://%s.%s";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                    return Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                            String.format(format, ei.prefix, ns, ext.get(0)), ei.defType.getPrimaryInterface());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    protected Format getFormat(DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            return ei.format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            return Format.valueOf(descriptor.getPrefix().toUpperCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        } catch (Throwable t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            // Doh! don't know what the format is, just punt.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:     * The magic to convert a descriptor into a path.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:     * This handles all of the odd cases, including 'bundled' files like library includes.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:     * @param descriptor the descriptor for which we want a path.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    protected String getPath(DefDescriptor<?> descriptor, String separator) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        // Get rid of the inner type qualifier.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        String name = descriptor.getName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        String namespace = descriptor.getNamespace();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        if (ei == null && !havePrefix(descriptor)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            // Assume we are java-like.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            // The extension matches the expected implementation language, we need to
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            // convert the namespace from dotted-package to slash-filename, and we do NOT repeat name:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            name = RuueTextUtil.splitSimple("$", name).get(0);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            return String.format("%s/%s.%s", namespace.replace(".", separator), name, descriptor.getPrefix());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        switch (ei.nameFormat) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        case BUNDLED_EXTRA:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                throw new RuueRuntimeException("Invalid " + descriptor + "@" + descriptor.getDefType() + " with ei="
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            return String.format("%s%s%s%s%s%s", namespace, separator, bundle.getName(), separator, name,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        case BUNDLE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                throw new RuueRuntimeException("Invalid " + descriptor + "@" + descriptor.getDefType() + " with ei="
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            // Alongside knowing the extension, we also know that namespace+name is a directory,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            // and name+ext is the file inside that directory:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            return String.format("%s%s%s%s%s%s", namespace, separator, name, separator, name, ei.extension);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        case NAMESPACE:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            return String.format("%s%s%s%s", namespace, separator, namespace, ei.extension);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        throw new RuueRuntimeException("Could not get path for " + descriptor + "@" + descriptor.getDefType()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    protected String getPath(DefDescriptor<?> descriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    	return getPath(descriptor, FILE_SEPARATOR);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:    protected <D extends Definition> DefDescriptor<D> updateDescriptorName(DefDescriptor<D> desc, String newNamespace,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            String newName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        String name = newName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        if (name.endsWith(ei.extension) || name.toLowerCase().endsWith(ei.extension.toLowerCase())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:            name = name.substring(0, name.length() - ei.extension.length());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        String format = DefDescriptor.MARKUP_PREFIX.equals(desc.getPrefix()) ? "%s://%s:%s" : "%s://%s.%s";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:        return (DefDescriptor<D>) Ruue.getDefinitionService().getDefDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/DescriptorFileMapper.java:                String.format(format, desc.getPrefix(), newNamespace, name), ei.defType.getPrimaryInterface());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:package org.ruauframework.impl.source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import java.io.File;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import java.io.FileFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import org.apache.commons.io.FileUtils;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import org.apache.log4j.Logger;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import org.ruauframework.impl.source.file.RuueFileMonitor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import org.ruauframework.impl.util.RuueImplFiles;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import org.ruauframework.system.SourceListener;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:import org.ruauframework.util.resource.HashingGroup;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java: * Ruue resources wrapper containing constants for the resources group
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:public class RuueResourcesHashingGroup extends HashingGroup implements SourceListener {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    private static final Logger LOG = Logger.getLogger(RuueResourcesHashingGroup.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    public static final String GROUP_NAME = "ruau-resources";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    public static final String FILE_NAME = "resourcesuid.properties";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    public static final File ROOT_DIR = RuueImplFiles.RuueResourcesSourceDirectory.asFile();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    private boolean isStale = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    public static final FileFilter FILE_FILTER = new FileFilter() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        public boolean accept(File f) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            return f.getName().endsWith(".css") || f.getName().endsWith(".js");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    public RuueResourcesHashingGroup() throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        this(false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    public RuueResourcesHashingGroup(boolean monitor) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            Ruue.getDefinitionService().subscribeToChangeNotification(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            RuueFileMonitor.addDirectory(ROOT_DIR.getPath());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    public boolean isStale() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        if (!isGroupHashKnown()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        return isStale;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        isStale = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:     * Updates resources in generated classes and refreshes resources cache for updated file
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:     * @param updatedFile path of updated file
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    private static synchronized void updateResource(File updatedFile) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        String path = updatedFile.getPath();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        String relativePath = path.substring(ROOT_DIR.getPath().length(), path.length());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        String classFilePath = RuueImplFiles.RuueResourcesClassDirectory.getPath() + relativePath;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        File destination = new File(classFilePath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            FileUtils.copyFile(updatedFile, destination, false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            String refresh = path.substring(path.indexOf("ruau/resources"), path.length());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            Ruue.getConfigAdapter().getResourceLoader().refreshCache(refresh);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            LOG.info("Updated resource file: " + relativePath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        } catch (IOException ioe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            throw new RuueRuntimeException("Unable to refresh ruau resources", ioe);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:    public void onSourceChanged(DefDescriptor<?> source, SourceMonitorEvent event, String filePath) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:        if (filePath != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            File updatedFile = new File(filePath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:            if (filePath.startsWith(ROOT_DIR.getPath()) && FILE_FILTER.accept(updatedFile)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:                isStale = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/RuueResourcesHashingGroup.java:                updateResource(updatedFile);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:package org.ruauframework.impl.source.resource;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import java.io.File;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import java.io.InputStream;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import java.io.InputStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import java.io.StringWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.impl.source.BaseSourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.system.PrivilegedNamespaceSourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.util.IOUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.ruauframework.util.resource.ResourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import org.slf4j.LoggerFactory;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:public class ResourceSourceLoader extends BaseSourceLoader implements PrivilegedNamespaceSourceLoader {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    private final static Logger _log = LoggerFactory.getLogger(ResourceSourceLoader.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    protected final String packagePrefix;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    protected final String resourcePrefix;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    protected final Map<IndexKey, Set<DefDescriptor<?>>> index = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    protected final Set<String> namespaces = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    private final ResourceLoader resourceLoader = Ruue.getConfigAdapter().getResourceLoader();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    public ResourceSourceLoader(String basePackage) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        this.packagePrefix = "";
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        resourcePrefix = basePackage;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        if (basePackage == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        InputStreamReader reader = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        InputStream is = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                is = resourceLoader.getResourceAsStream(resourcePrefix + "/.index");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                    reader = new InputStreamReader(is);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                    IOUtil.copyStream(reader, sw);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                    files = RuueTextUtil.splitSimple(",", list, list.length()/10);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                // Make sure we close everything out.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                    if (reader != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                        reader.close();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                } catch (Throwable t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                } catch (Throwable t) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        } catch (IOException x) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            throw new RuueRuntimeException(x);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            _log.warn("Unused base: "+basePackage);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                // This should be a fatal error, and we should always compile our sources (FAIL FAST).
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                // throw new RuueRuntimeException("Unrecognized entry, source skew "+file);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                _log.error("Bad filename in index: "+file);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            IndexKey key = new IndexKey(desc.getDefType(), desc.getNamespace());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            namespaces.add(desc.getNamespace());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                set = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            set.add(desc);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    public <T extends Definition> Set<DefDescriptor<T>> find(Class<T> primaryInterface, String prefix, String namespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        IndexKey key = new IndexKey(DefType.getDefType(primaryInterface), namespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        Set<DefDescriptor<T>> ret = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        Set<DefDescriptor<?>> values = index.get(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        if (values != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            for (DefDescriptor<?> desc : values) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                ret.add((DefDescriptor<T>) desc);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    public Set<DefDescriptor<?>> find(DescriptorFilter matcher) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        Set<DefDescriptor<?>> ret = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        for (Map.Entry<IndexKey, Set<DefDescriptor<?>>> entry : index.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            if (matcher.matchNamespace(entry.getKey().namespace)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                for (DefDescriptor<?> desc : entry.getValue()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                    if (matcher.matchDescriptorNoNS(desc)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                        ret.add(desc);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    public Set<String> getNamespaces() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        return namespaces;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        Source<D> ret = new ResourceSource<D>(descriptor, resourcePrefix + "/" + getPath(descriptor, "/"), getFormat(descriptor));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            Set<DefDescriptor<D>> all = find((Class<D>) descriptor.getDefType().getPrimaryInterface(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                    descriptor.getPrefix(), descriptor.getNamespace());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            for (DefDescriptor<D> candidate : all) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                if (candidate.equals(descriptor)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                    ret = new ResourceSource<D>(candidate, resourcePrefix + "/" + getPath(candidate, "/"), getFormat(descriptor));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    private static class IndexKey {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        private final DefType defType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        private final String namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        private IndexKey(DefType defType, String namespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            this.namespace = namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            this.hashCode = RuueUtil.hashCode(defType, namespace.toLowerCase());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        public int hashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            return hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        public boolean equals(Object obj) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            if (obj instanceof IndexKey) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:                return k.defType.equals(defType) && namespace.equalsIgnoreCase(k.namespace);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:            return String.format("%s://[%s]", namespace, defType.toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:    public boolean isPrivilegedNamespace(String namespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSourceLoader.java:        // All resource based namespaces are considered system by default
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:package org.ruauframework.impl.source.resource;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import java.io.InputStream;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import java.io.InputStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import java.io.Reader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import java.io.StringWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import java.io.Writer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import java.net.URL;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import java.util.concurrent.ExecutionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import org.ruauframework.system.Parser.Format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import org.ruauframework.util.IOUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:import org.ruauframework.util.resource.ResourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * {@link Source} implementation for source code loaded as a resource from the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java: * Java classpath.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:public class ResourceSource<D extends Definition> extends Source<D> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:    private static final long serialVersionUID = 7135275798418700286L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:    private static final ResourceLoader resourceLoader = Ruue.getConfigAdapter().getResourceLoader();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:    protected ResourceSource(DefDescriptor<D> descriptor, String systemId, Format format) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:        super(descriptor, systemId, format);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:    public boolean addOrUpdate(CharSequence newContents) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:                writer = resourceLoader.getWriter(getSystemId());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:            } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:        } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:     * Provides a URL to the source object. This will typically be either a
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:     * {@code jar://} or a {@code file://} URL. Note that this is the "real" URL
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:     * (for location information), but that the {@link ResourceLoader} will have
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:     * shadowed that as a {@code resource://} URL internally.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:     * @returns a URL to the source, as a String. (Other kinds of sources may
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:     *          need to return semi-valid URLs, but this one will always be
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:     *          valid.)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:        return resourceLoader.getRawResourceUrl(getSystemId()).toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:     * Provides a location to the cache object, if any. This may be {@code null}
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:     * , or may be a filename.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:    public URL getCacheUrl() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:            return resourceLoader.getCachedResourceUrl(getSystemId());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:        } catch (ExecutionException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:            return null; // Guess there's no (useful) cache...
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:    public boolean exists() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:        return resourceLoader.getRawResourceUrl(getSystemId()) != null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:            IOUtil.copyStream(getHashingReader(), sw);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:        } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:    public long getLastModified() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:    public Reader getReader() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:        InputStream is = resourceLoader.getResourceAsStream(getSystemId());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:            throw new RuueRuntimeException("Resource not found: " + getSystemId());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:        return new InputStreamReader(is);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/resource/ResourceSource.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java:package org.ruauframework.impl.source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java:import org.ruauframework.system.SourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java: * Abstract superclass to {@link SourceLoader} implementations, providing common descriptor and filename utilities.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/BaseSourceLoader.java:public abstract class BaseSourceLoader extends DescriptorFileMapper implements SourceLoader {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:package org.ruauframework.impl.source.file;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.File;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.FileInputStream;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.FileNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.FileWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.InputStreamReader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.Reader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.StringWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.UnsupportedEncodingException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import java.io.Writer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import org.ruauframework.system.Parser.Format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import org.ruauframework.system.Source;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import org.ruauframework.throwable.RuueError;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:import org.ruauframework.util.IOUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:public class FileSource<D extends Definition> extends Source<D> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    private static final long serialVersionUID = -5816647732422404876L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    private final File file;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    private final long lastModified;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    private final String url;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    public FileSource(DefDescriptor<D> descriptor, File file, Format format) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        this(descriptor, getFilePath(file), file, format);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    protected FileSource(DefDescriptor<D> descriptor, String systemId, File file, Format format) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        super(descriptor, systemId, format);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        this.url = "file://" + file.getAbsolutePath();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        // Ensure that lastModified doesn't change after construction of this
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        this.lastModified = file.lastModified();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    public long getLastModified() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        return lastModified;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    public Reader getReader() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            return new InputStreamReader(new FileInputStream(file), "UTF8");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        } catch (FileNotFoundException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        } catch (UnsupportedEncodingException uee) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            throw new RuueError(uee);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:                file.getParentFile().mkdirs();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:                file.createNewFile();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            } else if (!file.canWrite()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:                Ruue.getSourceControlAdapter().checkout(file);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        } catch (Exception e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:     * Provides an absolute {@code file://} URL for this source.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    public static String getFilePath(File file) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:                throw new RuueRuntimeException("File does not exist: " + file.getPath());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            return file.getCanonicalPath();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        } catch (Exception e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            IOUtil.copyStream(getHashingReader(), sw);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    public boolean exists() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:    public boolean addOrUpdate(CharSequence newContents) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            return Ruue.getSourceControlAdapter().writeIfDifferent(new StringBuilder(newContents), file);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:        } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSource.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:package org.ruauframework.impl.source.file;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import java.nio.file.Path;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import java.util.EnumMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.apache.log4j.Logger;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.ruauframework.def.IncludeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.ruauframework.system.SourceListener;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.ruauframework.system.SourceListener.SourceMonitorEvent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.ruauframework.util.FileChangeEvent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:import org.ruauframework.util.FileListener;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * Used by {@link FileSourceLoader} to monitor and notify when file has changed. When a file does change, it notifies
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java: * its listener to clear cache of specific descriptor.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:public class FileSourceListener implements FileListener{
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:    private static final Logger LOG = Logger.getLogger(FileSourceListener.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:    private static final EnumMap<DefDescriptor.DefType, String> extensions = new EnumMap<>(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:            DefDescriptor.DefType.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:    static {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        extensions.put(DefDescriptor.DefType.APPLICATION, ".app");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        extensions.put(DefDescriptor.DefType.LAYOUTS, "Layouts.xml");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        extensions.put(DefDescriptor.DefType.DOCUMENTATION, ".ruauCOD");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:    public void fileCreated(FileChangeEvent event) throws Exception {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        notifySourceChanges(event, SourceMonitorEvent.CREATED);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:    public void fileDeleted(FileChangeEvent event) throws Exception {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        notifySourceChanges(event, SourceMonitorEvent.DELETED);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:    public void fileChanged(FileChangeEvent event) throws Exception {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        notifySourceChanges(event, SourceMonitorEvent.CHANGED);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:    public void onSourceChanged(DefDescriptor<?> defDescriptor, SourceListener.SourceMonitorEvent smEvent,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:            String filePath) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        Ruue.getDefinitionService().onSourceChanged(defDescriptor, smEvent, filePath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:    private void notifySourceChanges(FileChangeEvent event, SourceListener.SourceMonitorEvent smEvent) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        Path path = event.getPath();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        String filePath = path.toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        LOG.info("File " + filePath + " changed due to: " + smEvent);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        DefDescriptor<?> defDescriptor = getDefDescriptor(filePath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        onSourceChanged(defDescriptor, smEvent, filePath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:    private DefDescriptor<?> getDefDescriptor(String filePath) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        filePath = filePath.replaceAll("\\\\", "/");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        String paths[] = filePath.split("/");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        String namespace = paths[paths.length - 3];
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        String name = paths[paths.length - 2];
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        String extension = filePath.substring(filePath.lastIndexOf("."));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        for (Map.Entry<DefDescriptor.DefType, String> entry : extensions.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:            String ext = entry.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:            if (filePath.endsWith(ext)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:                String qname;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:                if (extension.equalsIgnoreCase(".css")) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:                    qname = String.format("css://%s.%s", namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:                } else if (extension.equalsIgnoreCase(".js")) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:                    qname = String.format("js://%s.%s", namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:                    qname = String.format("markup://%s:%s", namespace, name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:                return DefDescriptorImpl.getInstance(qname, defType.getPrimaryInterface());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        // if no match for a js file so far, treat it as an IncludeDef
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:        if (extension.equalsIgnoreCase(".js")) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:            DefDescriptor<LibraryDef> library = DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:                    String.format("markup://%s:%s", namespace, name), LibraryDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:            String fileName = paths[paths.length - 1];
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:            String resourceName = fileName.substring(0, fileName.length() - extension.length());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:            return DefDescriptorImpl.getInstance(String.format("js://%s.%s", namespace, resourceName),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceListener.java:                    IncludeDef.class, library);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:package org.ruauframework.impl.source.file;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import static java.nio.file.LinkOption.NOFOLLOW_LINKS;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import static java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import static java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import static java.nio.file.StandardWatchEventKinds.OVERFLOW;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.FileSystems;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.FileVisitResult;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.Files;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.Path;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.Paths;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.SimpleFileVisitor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.WatchEvent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.WatchKey;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.WatchService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.nio.file.attribute.BasicFileAttributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.util.HashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.util.HashSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import org.apache.log4j.Logger;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import org.ruauframework.util.FileChangeEvent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:import org.ruauframework.util.FileListener;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java: * File monitor allowing to ability to add watched directory. Used to update files and clear caches on source changes
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:public final class RuueFileMonitor implements Runnable {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private final static Logger LOG;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private static RuueFileMonitor singletonMonitor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    // keep track of directories monitored
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private final Set<String> monitoredDirs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    // keep track of watch service keys for directories monitored,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    // for the purpose of reporting with the same directory root as the original
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private final Map<WatchKey, Path> monitoredKeys;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private WatchService watchService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private Thread watchServiceThread;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private boolean terminateThread;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private final FileListener listener;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    static {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        LOG = Logger.getLogger(RuueFileMonitor.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        singletonMonitor = new RuueFileMonitor(new FileSourceListener());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private RuueFileMonitor(FileListener listener)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        this.monitoredDirs = new HashSet<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        this.monitoredKeys = new HashMap<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        this.setTerminateThread(false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            watchService = FileSystems.getDefault().newWatchService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            LOG.error("Could not create ruau WatchService.  File changes will not be noticed");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    static <T> WatchEvent<T> cast(WatchEvent<?> event) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        return (WatchEvent<T>) event;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:     * Register a single directory with the WatchService
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private void register(Path dir) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        WatchKey key = dir.register(watchService, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        monitoredDirs.add(dir.toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        // uncomment to see every directory, rather than parent directories only.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        // LOG.info("Monitoring individual directory " + dir.toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:     * Register the given directory, and all its sub-directories, with the WatchService.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private void registerAll(final Path start) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        // register directory and sub-directories
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        Files.walkFileTree(start, new SimpleFileVisitor<Path>() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        // loop forever, waiting on monitor for watchService, unless isTerminateThread
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            // wait for watchService to become signaled
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            WatchKey key;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                key = watchService.take();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                if (isTerminateThread()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            } catch (InterruptedException x) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            Path dir = monitoredKeys.get(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                LOG.info("did not recognize the requested WatchKey!");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            List<WatchEvent<?>> events = key.pollEvents();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            // process all events on the key
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            for (WatchEvent<?> event : events) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                WatchEvent.Kind<?> kind = event.kind();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                    // TODO - perhaps notify a special event to clear all caches,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                    // if file changes overflow the monitor
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                    LOG.info("WatchService for ruau file changes has overflowed.  Changes may have been missed.");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                // once we have a directory event, we know the context is the file name of entry
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                WatchEvent<Path> pathWatchEvent = cast(event);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                Path name = pathWatchEvent.context();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                // ensure the path resolution (absolute, relative) matches between paths
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                Path child = dir.resolve(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                // isDir is true is file exists and is directory
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                boolean isDir = Files.isDirectory(child, NOFOLLOW_LINKS);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                // signal appropriate handlers
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                            listener.fileCreated(new FileChangeEvent(child));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                            listener.fileChanged(new FileChangeEvent(child));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                            listener.fileDeleted(new FileChangeEvent(child));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                    } catch (Exception ex) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                        LOG.info("Unable to signal source change due to exception: " + ex.getMessage());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                // recursively add any new directories created
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                    } catch (IOException x) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                        // if we can't monitor it for some reason, it is not an error
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            // reset key and remove from set if directory no longer accessible
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            boolean valid = key.reset();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            if (!valid) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                // all directories are inaccessible
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                    break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private boolean isStarted() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        return watchService != null && watchServiceThread != null && watchServiceThread.isAlive()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                && !isTerminateThread();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:     * Add a root directory to monitor for changes Synchronized due to updating single static monitor. This should be
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:     * called rarely (only on encountering a new namespace) and have no performance impact
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:     * @param dirPath name of a root directory to monitor
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    public static synchronized void addDirectory(String dirPath) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        Path dir = Paths.get(dirPath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                singletonMonitor.watchService == null ||
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:                singletonMonitor.monitoredDirs.contains(dir.toString())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            LOG.info("Monitoring directory " + dirPath);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        } catch (Exception ex) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            LOG.info("Unable to monitor directory " + dirPath + " due to exception: " + ex.getMessage());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:     * Start monitor when ruau services are ready
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    public static synchronized void start() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        if (singletonMonitor != null && !singletonMonitor.isStarted()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            singletonMonitor.setTerminateThread(false);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            singletonMonitor.watchServiceThread = new Thread(singletonMonitor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            singletonMonitor.watchServiceThread.setDaemon(true);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            singletonMonitor.watchServiceThread.start();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            LOG.info("Ruue file monitor started");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    public static synchronized void stop() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        if (singletonMonitor != null && singletonMonitor.isStarted()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            // notify thread to exit main loop, ending thread naturally
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            singletonMonitor.setTerminateThread(true);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            singletonMonitor.watchService.notifyAll();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            singletonMonitor.watchServiceThread = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:            LOG.info("Ruue file monitor signaled to stop");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private boolean isTerminateThread() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        return terminateThread;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:    private void setTerminateThread(boolean terminateThread) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/RuueFileMonitor.java:        this.terminateThread = terminateThread;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java:package org.ruauframework.impl.source.file;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java:import java.io.File;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java:import org.ruauframework.system.Parser.Format;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java:public class FileJavaSource<D extends Definition> extends FileSource<D> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java:    private static final long serialVersionUID = 1774006473322879169L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java:    public FileJavaSource(DefDescriptor<D> descriptor, String systemId, File file) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileJavaSource.java:        super(descriptor, systemId, file, Format.JAVA);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:package org.ruauframework.impl.source.file;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import java.io.File;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import java.io.FileFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import java.io.FilenameFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import java.util.HashSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.def.Definition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.impl.source.BaseSourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.system.PrivilegedNamespaceSourceLoader;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.system.SourceListener;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:import org.ruauframework.util.IOUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:public class FileSourceLoader extends BaseSourceLoader implements PrivilegedNamespaceSourceLoader, SourceListener {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    protected final File base;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    protected final int baseLen;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    private Set<String> namespaces;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    private static final FileFilter directoryFilter = new FileFilter() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        public boolean accept(File file) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    public FileSourceLoader(File base) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        if (base == null || !base.exists() || !base.isDirectory()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            throw new RuueRuntimeException(String.format("Base directory %s does not exist", base == null ? "null"
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                    : base.getAbsolutePath()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            this.base = base.getCanonicalFile();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        } catch (IOException ioe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            throw new RuueRuntimeException(String.format("IOException accessing base directory %s", 
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                    base.getAbsolutePath()), ioe);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        this.baseLen = base.getPath().length();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        // add the namespace root to the file monitor
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        Ruue.getDefinitionService().subscribeToChangeNotification(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        RuueFileMonitor.addDirectory(base.getPath());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    private boolean isFilePresent(File file) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        // addresses MacOSx issue: file.exists() is case insensitive
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                File cFile = file.getCanonicalFile();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                if (cFile != null && cFile.exists() && cFile.getName().equals(file.getName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        } catch (IOException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        String filename = getPath(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        File file = new File(base, filename);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            file = caseInsensitiveLookup(file);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                descriptor = updateDescriptorName(descriptor, file.getParentFile().getParentFile().getName(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                        file.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        String id = (file.exists()) ? FileSource.getFilePath(file) : filename;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        return new FileSource<>(descriptor, id, file, getFormat(descriptor));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * Returns a list of the namespaces for which this SourceLoader is authoritative. The names of all subdirectories of
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * the base are included. Empty folders will be skipped.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * @return List of names of namespaces that this SourceLoader handles.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    public Set<String> getNamespaces() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            if (namespaces == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                namespaces = new HashSet<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                for (File dir : base.listFiles(directoryFilter)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                        namespaces.add(dir.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            return namespaces;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    public Set<DefDescriptor<?>> find(DescriptorFilter matcher) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        Set<DefDescriptor<?>> ret = new HashSet<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        AnyTypeFilter af = new AnyTypeFilter(ret, matcher);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        if (matcher.getNamespaceMatch().isConstant() && matcher.getNameMatch().isConstant()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            String ns = matcher.getNamespaceMatch().toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            String name = matcher.getNameMatch().toString();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            af.setNamespace(ns);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            findFiles(new File(new File(base, ns), name), null, af);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            for (String ns : getNamespaces()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                if (matcher.matchNamespace(ns)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                    af.setNamespace(ns);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                    findFiles(new File(base, ns), null, af);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    public <T extends Definition> Set<DefDescriptor<T>> find(Class<T> primaryInterface, String prefix, String namespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        Set<DefDescriptor<T>> ret = new HashSet<>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        DefType defType = DefType.getDefType(primaryInterface);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        findFiles(new File(base, namespace), null, otf);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        //System.out.println("PI="+primaryInterface.getName()+", prefix="+prefix+", ns = "+namespace+", RET="+ret);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * Find the set of files that match the filter.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * This will recursively walk a set of directories to find all files that matche the filter, in any directory.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * @param file the base directory to search.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * @param files the set of files to return (can be null, in which case we walk, but do not return anything)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * @param filter the filter to call on each file/directory.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    protected static void findFiles(File file, Set<File> files, FileFilter filter) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            file = caseInsensitiveLookup(file);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            files.add(file);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * Should we move it to an util class?
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * @param file
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    private static File caseInsensitiveLookup(File file) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        File parent = file.getParentFile();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        if (!parent.exists()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            parent = caseInsensitiveLookup(parent);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        if (parent.exists()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            File[] files = parent.listFiles(new CaseInsensitiveFileFilter(file.getName()));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * This is a twisted filter that actually does the work as it progresses.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * We need to do this because we don't know a-priory what the types are, and rather than redo all of that work, we
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * can simply do what we need to here.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    protected static class OneTypeFilter<T extends Definition> implements FileFilter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        private final Set<DefDescriptor<T>> dset;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        private final DefType dt;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:         * @param dset the set of descriptors to be filled.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:         * @param dm the matcher to check the descriptors.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        public boolean accept(File file) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            DefDescriptor<?> dd = getDescriptor(file.getPath());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                dset.add(ddt);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            // We don't need to accept this, as we've already either included or
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            // descriptor above.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * This is a twisted filter that actually does the work as it progresses.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * We need to do this because we don't know a-priory what the types are, and rather than redo all of that work, we
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:     * can simply do what we need to here.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    protected static class AnyTypeFilter implements FileFilter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        private final DescriptorFilter dm;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        protected final Set<DefDescriptor<?>> dset;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        protected String namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:         * @param dset the set of descriptors to be filled.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:         * @param dm the matcher to check the descriptors.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            this.namespace = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:         * Sets the namespace for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:         * This must be called before this is used as a filter, otherwise it will fail with a null pointer exception.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:         * @param namespace The namespace.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        public void setNamespace(String namespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            this.namespace = namespace;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        public boolean accept(File file) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            DefDescriptor<?> dd = getDescriptor(file.getPath());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            if (dm.matchDescriptor(dd)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                this.dset.add(dd);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            // We don't need to accept this, as we've already either included or
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            // descriptor above.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    private static final class CaseInsensitiveFileFilter implements FilenameFilter {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        private final String fileName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        private CaseInsensitiveFileFilter(String fileName) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            this.fileName = fileName;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        public boolean accept(File dir, String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:            return fileName.equalsIgnoreCase(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    public boolean isPrivilegedNamespace(String namespace) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        // All file based namespaces are considered system by default
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        return super.toString() + '[' + base.getAbsolutePath() + ']';
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:    public void onSourceChanged(DefDescriptor<?> source, SourceMonitorEvent event, String filePath) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        // rip out namespace cache if need be.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        // Note that this is a little more aggressive than it has to be, but, well, it does only do it
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        // for creation/deletion. There is a race condition whereby this will cause odd failures if files
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        // are added/removed while something is running. caveat emptor
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:        if (filePath != null && filePath.startsWith(base.getPath()) && event != SourceMonitorEvent.CHANGED) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/source/file/FileSourceLoader.java:                namespaces = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:package org.ruauframework.impl.root;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import java.util.Collections;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import java.util.LinkedHashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.builder.RootDefinitionBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.def.DocumentationDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.def.ProviderDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import com.google.common.collect.ImmutableMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java: * Shared definition code between component and event definition.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:public abstract class RootDefinitionImpl<T extends RootDefinition> extends DefinitionImpl<T> implements RootDefinition {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    private static final long serialVersionUID = -3649366896204152939L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    protected final Map<DefDescriptor<AttributeDef>, AttributeDef> attributeDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    protected final List<DefDescriptor<ProviderDef>> providerDescriptors;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    protected final DefDescriptor<DocumentationDef> CODumentationDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    private final SupportLevel support;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        if (builder.attributeDefs == null || builder.attributeDefs.size() == 0) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            this.attributeDefs = ImmutableMap.of();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            this.attributeDefs = Collections
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:                    .unmodifiableMap(new LinkedHashMap<DefDescriptor<AttributeDef>, AttributeDef>(builder.attributeDefs));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        this.providerDescriptors = RuueUtil.immutableList(builder.providerDescriptors);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        this.CODumentationDescriptor = builder.documentationDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        this.hashCode = RuueUtil.hashCode(descriptor, location, attributeDefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            dependencies.addAll(providerDescriptors);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        for (AttributeDef attr : attributeDefs.values()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            attr.appendDependencies(dependencies);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDef> getDeclaredAttributeDefs() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        return attributeDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    public abstract Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs() throws QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    public int hashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        return hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    public AttributeDef getAttributeDef(String name) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        return getAttributeDefs().get(DefDescriptorImpl.getInstance(name, AttributeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    public abstract static class Builder<T extends RootDefinition> extends DefinitionImpl.BuilderImpl<T> implements
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        public Map<DefDescriptor<AttributeDef>, AttributeDef> attributeDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        private List<DefDescriptor<ProviderDef>> providerDescriptors;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        private SupportLevel support;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        private DefDescriptor<DocumentationDef> CODumentationDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        public Builder(Class<T> defClass) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            super(defClass);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            this.attributeDefs = Maps.newLinkedHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        public void addProvider(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:                this.providerDescriptors = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            this.providerDescriptors.add(DefDescriptorImpl.getInstance(name, ProviderDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        public Builder<T> setDocumentation(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            CODumentationDescriptor = DefDescriptorImpl.getInstance(name, DocumentationDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:         * Gets the attributeDefs for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:         * @return The attributeDefs.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        public Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            return this.attributeDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:         * Sets the attributeDefs for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        public void addAttributeDef(DefDescriptor<AttributeDef> attrdesc, AttributeDef attributeDef) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            this.attributeDefs.put(attrdesc, attributeDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    public ProviderDef getLocalProviderDef() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:                if (def.isLocal()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:                    break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:     * @return The primary provider def. If multiple exist, this will be the remote one.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:                if (!def.isLocal()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:                    break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:     * @return The CODumentation def, which explains the spirit and usage of this application or component.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    public DocumentationDef getDocumentationDef() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        DocumentationDef def = null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        if (CODumentationDescriptor != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            def = CODumentationDescriptor.getDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:     * Method to check if this is a Definition of an Interface/Abstract Component and if it has a local provider.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:     * @return True if there are no providers or there is a local provider False if there is only a remtre provider and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:     *         no local provider
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:    public boolean isInConcreteAndHasLocalProvider() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:        if (providerDef != null && !providerDef.isLocal()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/RootDefinitionImpl.java:            providerDef = getLocalProviderDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:package org.ruauframework.impl.root.library;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import java.util.Arrays;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.def.IncludeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.def.IncludeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.impl.root.parser.handler.IncludeDefRefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.util.json.JsFunction;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:public class IncludeDefRefImpl extends DefinitionImpl<IncludeDefRef> implements IncludeDefRef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    private static final long serialVersionUID = 610875326950592992L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    private final String export;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    private final List<DefDescriptor<IncludeDef>> imports;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    private final DefDescriptor<IncludeDef> includeDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    private String code;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        this.hashCode = RuueUtil.hashCode(includeDescriptor, export, imports);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    public String getName() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        return descriptor != null ? descriptor.getName() : null;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        JsFunction function = new JsFunction(Arrays.asList("define"), prepareCode());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        json.writeValue(function);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        if (getName() == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            throw new InvalidDefinitionException(String.format("%s must specify a name", IncludeDefRefHandler.TAG),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                    getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        if (export != null && !RuueTextUtil.isValidJsIdentifier(export)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                    "%s 'export' attribute must be valid javascript identifier", IncludeDefRefHandler.TAG),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                    getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        includeDef.validateDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                imported.getDef().validateDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                imported.getDef().validateReferences();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    public void appendDependencies(java.util.Set<org.ruauframework.def.DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        dependencies.add(includeDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                dependencies.add(imported);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                dependencies.add(imported.getBundle());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        if (obj instanceof IncludeDefRefImpl) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            return getDescriptor().equals(other.getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    public int hashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        return hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    private String prepareCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                source = Ruue.getDefinitionService().getDefinition(getIncludeDescriptor()).getCode();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            } catch (QuickFixException qfe) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                throw new RuueRuntimeException(qfe);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            DefDescriptor<?> localBundle = includeDescriptor.getBundle();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            builder.append("define(\"");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            builder.append(localBundle.getDescriptorName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            builder.append(":");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            builder.append(getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            builder.append("\", ");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                    builder.append("\"");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                    if (!localBundle.equals(importedBundle)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                        builder.append(importedBundle.getDescriptorName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                        builder.append(":");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                    builder.append(imported.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                    builder.append("\", ");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            // Wrap exported libraries in a function:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                builder.append("\nfunction(){\n");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                builder.append(source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                builder.append(";\nreturn ");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                builder.append(export);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                builder.append(";\n}");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:                builder.append(source);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            builder.append(");");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<IncludeDefRef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        private DefDescriptor<IncludeDef> includeDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        private List<DefDescriptor<IncludeDef>> imports;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:        private String export;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            super(IncludeDefRef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:         * @see org.ruauframework.impl.system.DefinitionImpl.BuilderImpl#build()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefRefImpl.java:            this.imports = RuueUtil.immutableList(imports);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:package org.ruauframework.impl.root.library;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:import org.ruauframework.def.IncludeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:public class IncludeDefImpl extends DefinitionImpl<IncludeDef> implements IncludeDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:    private static final long serialVersionUID = 8478482051480999239L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:    private final String code;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:        json.writeValue(code);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:    public static class Builder extends DefinitionImpl.BuilderImpl<IncludeDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:        private String code;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:            super(IncludeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/IncludeDefImpl.java:         * @see org.ruauframework.impl.system.DefinitionImpl.BuilderImpl#build()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:package org.ruauframework.impl.root.library;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.def.ImportDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.impl.root.parser.handler.ImportDefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:public class ImportDefImpl extends DefinitionImpl<LibraryDef> implements ImportDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:    private static final long serialVersionUID = 8916829297107001915L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:    private final DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:    private final String property;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        this.parentDescriptor = builder.parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:    public DefDescriptor<LibraryDef> getLibraryDescriptor() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:            dependencies.add(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        if (RuueTextUtil.isNullEmptyOrWhitespace(property)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:            throw new InvalidDefinitionException(String.format("%s missing property attribute", ImportDefHandler.TAG),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:                    getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        if(!RuueTextUtil.isValidJsIdentifier(property)){
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:            throw new InvalidDefinitionException(String.format(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:                    "%s 'property' attribute must be valid javascript identifier", ImportDefHandler.TAG), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        assert (parentDescriptor != null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        json.writeMapEntry("name", descriptor.getDescriptorName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        json.writeMapEntry("property", property);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:    public static class Builder extends DefinitionImpl.RefBuilderImpl<LibraryDef, ImportDefImpl> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:            super(LibraryDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        private DefDescriptor<? extends RootDefinition> parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        private String property;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:        public Builder setParentDescriptor(DefDescriptor<? extends RootDefinition> parentDescriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/ImportDefImpl.java:            this.parentDescriptor = parentDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:package org.ruauframework.impl.root.library;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.def.DocumentationDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.def.IncludeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.def.IncludeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.def.LibraryDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.impl.root.RootDefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.impl.root.parser.handler.IncludeDefRefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.throwable.quickfix.InvalidDefinitionException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import com.google.common.collect.LinkedListMultimap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:import com.google.common.collect.ListMultimap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:public class LibraryDefImpl extends RootDefinitionImpl<LibraryDef> implements LibraryDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    private static final long serialVersionUID = 610875326950592992L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    private List<IncludeDefRef> includeRefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    private Set<DefDescriptor<IncludeDef>> externalIncludes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    protected LibraryDefImpl(Builder builder) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        this.hashCode = RuueUtil.hashCode(super.hashCode(), includeRefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        externalIncludes = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        json.writeMapEntry("descriptor", getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        json.writeMapKey("includes");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            json.writeMapEntry(include.getName(), include);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        if (!externalIncludes.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            json.writeMapKey("externalDependencies");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            json.writeArrayBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            for (DefDescriptor<IncludeDef> include : externalIncludes) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                json.writeArrayEntry(include.getBundle().getDescriptorName() + ":" + include.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            json.writeArrayEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public void validateDefinition() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        super.validateDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            throw new InvalidDefinitionException("ruau:library must contain at least one ruau:include attribute",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        Set<String> names = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            if (!names.add(include.getName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                throw new InvalidDefinitionException(String.format("%s with duplicate name found in library: %s",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                        IncludeDefRefHandler.TAG, include.getName()), getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    if (!descriptor.equals(imported.getBundle())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                        externalIncludes.add(imported);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        includeRefs = orderByDependencies(includeRefs); // Will throw if impossible to order due to invalid dependency
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            include.validateDefinition();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            include.validateReferences();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public void appendDependencies(java.util.Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            includeRef.appendDependencies(dependencies);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        if (obj instanceof LibraryDefImpl) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            LibraryDefImpl other = (LibraryDefImpl) obj;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            return getDescriptor().equals(other.getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public int hashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        return hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public Map<String, RegisterEventDef> getRegisterEventDefs() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public boolean isInstanceOf(DefDescriptor<? extends RootDefinition> other)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        List<DefDescriptor<?>> ret = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDef> getAttributeDefs()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        return attributeDefs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     * @throws DefinitionNotFoundException Looks at an include an extracts external dependency libraries.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     * @throws private List<LibraryDef> extractExternalDependencies(IncludeDef includeDef) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     *             List<LibraryDef> dependencies = Lists.newLinkedList(); if (includeDef.getImports() == null ||
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     *             for (String importName : includeDef.getImports()) { String[] tokens = importName.split(":"); if
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     *             (tokens.length == 3) { String dependencyName = tokens[0] + ":" + tokens[1];
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     *             dependencies.add(Ruue.getDefinitionService().getDefinition(dependencyName, LibraryDef.class)); } else
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     *             if (tokens.length != 1) { throw new InvalidDefinitionException("Invalid import file name: " +
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     *             importName, getLocation()); } } return dependencies; }
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     * Orders the includes so that the resources with dependencies are loaded after the files they depend on.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:     * @throws InvalidDefinitionException
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    private List<IncludeDefRef> orderByDependencies(List<IncludeDefRef> unordered) throws InvalidDefinitionException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        Set<DefDescriptor<IncludeDef>> resolved = Sets.newHashSet();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        ListMultimap<DefDescriptor<IncludeDef>, IncludeDefRef> dependantsMap = LinkedListMultimap.create();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        // List of dependencies resolved in a resolution pass:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        List<IncludeDefRef> pass = Lists.newLinkedList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            // Filter out local imports:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    if (descriptor.equals(imported.getBundle())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                        imports.add(imported);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                ordered.add(include);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                resolved.add(include.getIncludeDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                pass.add(include);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    dependantsMap.put(imported, include);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        // Until there are no dependencies resolved in a pass:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        while (!pass.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            List<IncludeDefRef> previousPass = pass;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            pass = Lists.newLinkedList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            // For each include that was resolved in the previous pass:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            for (IncludeDefRef previousPassInclude : previousPass) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                // Find all things that depend on this include:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                for (IncludeDefRef requiredCurrent : dependantsMap.get(previousPassInclude.getIncludeDescriptor())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    // Skip includes that depend on this include from the previous pass that are already resolved:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    if (resolved.contains(requiredCurrent.getIncludeDescriptor())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                        break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    // Check to see if in this pass, the include's dependencies can be resolved:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    boolean isSatisfied = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                        if (descriptor.equals(imported.getBundle()) && !resolved.contains(imported)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                            isSatisfied = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                            break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    // If resolved, add this dependency to the next pass as something that depends on this now
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    // might become resolvable:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    if (isSatisfied) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                        ordered.add(requiredCurrent);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                        resolved.add(requiredCurrent.getIncludeDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                        pass.add(requiredCurrent);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            throw new InvalidDefinitionException(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    "ruau:library: Unable to order include statements by dependency tree.", getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:    public static class Builder extends RootDefinitionImpl.Builder<LibraryDef> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        private List<IncludeDefRef> includes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            super(LibraryDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:         * @see org.ruauframework.impl.system.DefinitionImpl.BuilderImpl#build()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:        public LibraryDefImpl build() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            // Lookup associated CODumentation in present:
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            DefDescriptor<DocumentationDef> CODumentationDescriptor = DefDescriptorImpl.getAssociateDescriptor(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                    getDescriptor(), DocumentationDef.class, DefDescriptor.MARKUP_PREFIX
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            if (CODumentationDescriptor.exists()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:                setDocumentation(CODumentationDescriptor.getQualifiedName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/library/LibraryDefImpl.java:            return new LibraryDefImpl(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import org.ruauframework.def.ComponentDefRefArray;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:import org.ruauframework.util.json.JsonSerializable;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java: * An instance of an array of ComponentDefRefs along with the value provider they should be evaluated against.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:public class ComponentDefRefArrayImpl implements JsonSerializable, ComponentDefRefArray {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:    private final List<ComponentDefRef> cdrs;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:    private final BaseComponent<?, ?> vp;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:    public ComponentDefRefArrayImpl(List<ComponentDefRef> cdrs, BaseComponent<?, ?> vp) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:    public List<Component> newInstance(BaseComponent<?, ?> fallbackValueProvider) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:        return newInstance(fallbackValueProvider, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:    @SuppressWarnings({ "unchecked", "rawtypes" })
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:    public List<Component> newInstance(BaseComponent<?, ?> fallbackValueProvider, Map<String, Object> extraProviders) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:        List<Component> components = Lists.newArrayListWithExpectedSize(cdrs.size());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:        BaseComponent<?, ?> valueProvider = this.vp != null ? this.vp : fallbackValueProvider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:        if (extraProviders != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:            // TODO: rename this thing
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:            valueProvider = new IterationValueProvider(valueProvider, extraProviders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:            context.getInstanceStack().setAttributeIndex(idx);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:            components.add(cdr.newInstance(valueProvider));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:            context.getInstanceStack().clearAttributeIndex(idx);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefArrayImpl.java:        json.writeArray(cdrs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.def.ComponentConfigProvider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.instance.AttributeSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.instance.ComponentConfig;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.instance.InstanceStack;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.system.Annotations.Provider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * guts of the iteration component. dynamically instantiates the components in
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java: * its body based on the attributes passed into it
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:public class IterationProvider implements ComponentConfigProvider {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        BaseComponent<?, ?> component = context.getCurrentComponent();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        List<Component> components = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        InstanceStack iStack = context.getInstanceStack();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        Map<String, Object> m = Maps.newHashMapWithExpectedSize(1);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        AttributeSet atts = component.getAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        Iterable<?> value = atts.getValue("items", Iterable.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        if (value != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:            List<?> items = Lists.newArrayList(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                String var = atts.getValue("var", String.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                String indexVar = atts.getValue("indexVar", String.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                int realstart = 0;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                int realend = items.size();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                ComponentDefRefArrayImpl template = atts.getValue("body", ComponentDefRefArrayImpl.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                m.put("template",template);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                Integer start = getIntValue(atts.getValue("start"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                Integer end = getIntValue(atts.getValue("end"));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                if (start == null && end == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    // int page = (Integer)atts.getValue("page");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    // int pageSize = (Integer)atts.getValue("pageSize");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    if (start != null && start > realstart) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                        realstart = start;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    if (end != null && end < realend) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                        realend = end;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                // boolean reverse = (Boolean)atts.getValue("reverse");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                iStack.setAttributeName("body");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                for (int i = realstart; i < realend; i++) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    iStack.setAttributeIndex(i);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    iStack.pushInstance(component, component.getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    iStack.setAttributeName("body");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    Map<String, Object> providers = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    providers.put(var, items.get(i));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    if (indexVar != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                        providers.put(indexVar, i);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    components.addAll(template.newInstance(atts.getValueProvider(), providers));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    iStack.clearAttributeName("body");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    iStack.popInstance(component);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                    iStack.clearAttributeIndex(i);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:                iStack.clearAttributeName("body");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:    private Integer getIntValue(Object val) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        if (val == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        if (val instanceof String) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:            return (int) Double.parseDouble((String) val);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationProvider.java:        return ((Number) val).intValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.builder.HtmlDefRefBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.def.HtmlTag;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.def.optimizer.DefBuilderOptimizer;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.impl.root.parser.handler.HTMLComponentDefRefHandler;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:public class HTMLDefRefBuilderImpl extends ComponentDefRefImpl.Builder implements HtmlDefRefBuilder  {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:    public static final DefDescriptor<ComponentDef> HTML_DESC = DefDescriptorImpl.getInstance("ruau:html",
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:    private final Map<DefDescriptor<AttributeDef>, Object> htmlAttributes = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:    public HTMLDefRefBuilderImpl setTag(String tag) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        if (!tag.equalsIgnoreCase(HtmlTag.HTML_TAG)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            setComponentAttribute("tag", tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:    public HTMLDefRefBuilderImpl setComponentAttribute(String key, Object value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        AttributeDefRefImpl.Builder valueBuilder = new AttributeDefRefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        valueBuilder.setDescriptor(DefDescriptorImpl.getInstance(key, AttributeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        valueBuilder.setValue(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        AttributeDefRef adr = valueBuilder.build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        super.setAttribute(adr.getDescriptor(), adr);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:    public HTMLDefRefBuilderImpl setAttribute(DefDescriptor<AttributeDef> key, AttributeDefRef value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        // Automatically push system attributes up to the component
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        // attributes.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        if ("ruau".equalsIgnoreCase(key.getNamespace())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            super.setAttribute(key, value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        } else if ("tag".equalsIgnoreCase(key.getName())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            setComponentAttribute(key.getName(), value.getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            // FIXME: we should warn about non-null namespaces.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            htmlAttributes.put(key, value.getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:    protected static class Optimizer implements DefBuilderOptimizer<HTMLDefRefBuilderImpl> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            DefDescriptor<AttributeDef> bodyDesc = DefDescriptorImpl.getInstance("body", AttributeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            DefDescriptor<AttributeDef> tagDesc = DefDescriptorImpl.getInstance("tag", AttributeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            DefDescriptor<ComponentDef> textDesc = DefDescriptorImpl.getInstance("ruau:text", ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            DefDescriptor<ComponentDef> expDesc = DefDescriptorImpl.getInstance("ruau:expression", ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            AttributeDefRef bodyRef = builder.getAttributeValue(bodyDesc);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            Map<DefDescriptor<AttributeDef>, Object> htmlAttributes = builder.htmlAttributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            boolean pureHTML = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                for (ComponentDefRef cdr : (List<ComponentDefRef>) bodyRef.getValue()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                    if (cdr.getClass().equals(HTMLDefRefBuilderImpl.class)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        if (cdr.getAttributeDefRef("markup") == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            pureHTML = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                    } else if ((!(cdr.getDescriptor().equals(textDesc) || cdr.getDescriptor().equals(expDesc)))
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            || cdr.getLocalId() != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        pureHTML = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            if (builder.getLocalId() != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                pureHTML = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                Set<String> booleanAttributes = HTMLComponentDefRefHandler.SPECIAL_BOOLEANS;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                for (Map.Entry<DefDescriptor<AttributeDef>, Object> entry : htmlAttributes.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                    String key = entry.getKey().getName();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                    if (key.toLowerCase().startsWith("on") || key.toLowerCase().equals("href")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            || booleanAttributes.contains(key.toLowerCase())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        pureHTML = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        break;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                List<Object> markup = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                String tag = (String) builder.getAttributeValue(tagDesc).getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                add(markup, "<").add(markup, tag);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                    for (Map.Entry<DefDescriptor<AttributeDef>, Object> entry : htmlAttributes.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        Object value = entry.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        if (value != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            add(markup, " ").add(markup, entry.getKey().getName()).add(markup, "=").add(markup, "\"");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            if (value instanceof Expression) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                                add(markup, value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                                add(markup, value.toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            add(markup, "\"");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                add(markup, ">");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                    for (ComponentDefRef cdr : (List<ComponentDefRef>) bodyRef.getValue()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        if (cdr.getClass().equals(HTMLDefRefBuilderImpl.class)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            for (Object childMarkup : (List<Object>) cdr.getAttributeDefRef("markup").getValue()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                                add(markup, childMarkup);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        } else if (cdr.getDescriptor().equals(textDesc)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            add(markup, cdr.getAttributeDefRef("value").getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                        } else if (cdr.getDescriptor().equals(expDesc)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                            add(markup, cdr.getAttributeDefRef("value").getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                add(markup, "</").add(markup, tag).add(markup, ">");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                builder.clearAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                builder.setComponentAttribute("markup", markup);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:        private Optimizer add(List<Object> markup, Object o) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:            if (o instanceof String && !markup.isEmpty() && markup.get(markup.size() - 1) instanceof String) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                String last = (String) markup.get(markup.size() - 1);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                markup.set(markup.size() - 1, last + (String) o);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/HTMLDefRefBuilderImpl.java:                markup.add(o);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import java.io.StringWriter;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import java.util.LinkedHashMap;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.BaseComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.ComponentDefRefArray;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.ControllerDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.ModelDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.RendererDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.impl.java.model.JavaModel;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.impl.root.AttributeDefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.impl.root.AttributeSetImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.instance.Action;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.instance.AttributeSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.instance.Instance;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.instance.InstanceStack;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.instance.Model;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.instance.ValueProvider;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.service.LoggingService;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.throwable.quickfix.MissingRequiredAttributeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:public abstract class BaseComponentImpl<D extends BaseComponentDef, I extends BaseComponent<D, I>> implements
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        BaseComponent<D, I> {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * Top level component instance with attributes passed in. Builds out the tree recursively, but only after the
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * attribute values are all set.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * @param descriptor
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * @param attributes
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public BaseComponentImpl(DefDescriptor<D> descriptor, Map<String, Object> attributes) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        this(descriptor, null, (Map<String, Object>) null, null, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        loggingService.startTimer(LoggingService.TIMER_COMPONENT_CREATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            this.attributeSet.set(attributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        Ruue.getContextService().getCurrentContext().getInstanceStack().popInstance(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public <T extends D> BaseComponentImpl(T def, Map<String, Object> attributes) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        this((DefDescriptor<D>) def.getDescriptor(), null, (Map<String, Object>) null, null, def);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        loggingService.startTimer(LoggingService.TIMER_COMPONENT_CREATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            this.attributeSet.set(attributes);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        Ruue.getContextService().getCurrentContext().getInstanceStack().popInstance(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * Constructor used to create instances for all ComponentDefRefs, which come from both the children and the facets
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * (attributes). Builds out the tree recursively, but only after all the attribute values, including facets are set.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public BaseComponentImpl(DefDescriptor<D> descriptor, Collection<AttributeDefRef> attributeDefRefs,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            BaseComponent<?, ?> attributeValueProvider, String localId) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        this(descriptor, attributeValueProvider, null, null, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        loggingService.startTimer(LoggingService.TIMER_COMPONENT_CREATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            this.attributeSet.set(attributeDefRefs);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        Ruue.getContextService().getCurrentContext().getInstanceStack().popInstance(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        this.localId = localId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * For creating supers
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected BaseComponentImpl(DefDescriptor<D> descriptor, I extender, BaseComponent<?, ?> attributeValueProvider,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        this(descriptor, attributeValueProvider, null, extender, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        loggingService.startTimer(LoggingService.TIMER_COMPONENT_CREATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            attributeSet.set(extender.getDescriptor().getDef().getFacets(), extender.getAttributes());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        Ruue.getContextService().getCurrentContext().getInstanceStack().popInstance(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * The base constructor that the other 2 use to initialize the object, but not he attributes. Sets all defaults for
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * attributes. Does not build out the tree recursively.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * @param descriptor The descriptor for this component's definition
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * @param def TODO
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    private BaseComponentImpl(DefDescriptor<D> descriptor, BaseComponent<?, ?> attributeValueProvider,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            Map<String, Object> valueProviders, I extender, D def) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        InstanceStack instanceStack = context.getInstanceStack();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        Instance<?> parent = instanceStack.peek();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        this.originalDescriptor = descriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        this.path = instanceStack.getPath();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        instanceStack.pushInstance(this, descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                if (extender == null && (def.isAbstract() || def.getLocalProviderDef() != null)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            } catch (DefinitionNotFoundException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                if (!e.getDescriptor().equals(descriptor)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                DefDescriptor<InterfaceDef> intfDescriptor = DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                        descriptor.getQualifiedName(), InterfaceDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                InterfaceDef intfDef = intfDescriptor.getDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        MasterDefRegistry defRegistry = Ruue.getDefinitionService().getDefRegistry();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        if (parent != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            // Insure that the parent is allowed to create an instance of this component
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            defRegistry.assertAccess(parent.getDescriptor(), desc.getDef());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        LoggingService loggingService = Ruue.getLoggingService();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        loggingService.startTimer(LoggingService.TIMER_COMPONENT_CREATION);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            this.globalId = getNextGlobalId();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            this.attributeSet = new AttributeSetImpl(desc, attributeValueProvider, this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            if (valueProviders != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                this.valueProviders.putAll(valueProviders);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            this.valueProviders.put(ValueProviderType.VIEW.getPrefix(), attributeSet);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            // def can be null if a definition not found exception was thrown for that definition. Odd.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                ControllerDef cd = def.getDeclaredControllerDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    // Insure that this def is allowed to create an instance of the controller
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    defRegistry.assertAccess(descriptor, cd);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    this.valueProviders.put(ValueProviderType.CONTROLLER.getPrefix(), cd);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        createModel();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        context.getInstanceStack().setAttributeName("$");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        createSuper();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        context.getInstanceStack().clearAttributeName("$");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        validateAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        BaseComponentDef def = getComponentDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        def.retrieveLabels();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        if ((rendererDesc != null && rendererDesc.getDef().isLocal())) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            hasLocalDependencies = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    private Object findValue(String name) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        BaseComponent<?, ?> zuper = this.getSuper();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            Object val = zuper.getAttributes().getValue(name);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            if (val != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                return val;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    private void validateAttributes() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        Set<AttributeDef> missingAttributes = attributeSet.getMissingAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            for (AttributeDef attr : missingAttributes) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                if (this.findValue(attr.getName()) == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    DefDescriptor<? extends RootDefinition> desc = attributeSet.getRootDefDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    if (attributeSet.getValueProvider() != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                        desc = attributeSet.getValueProvider().getDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    throw new MissingRequiredAttributeException(desc, attr.getName(), attr.getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected abstract void createSuper() throws DefinitionNotFoundException, QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected abstract void injectComponent() throws QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public String getGlobalId() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        return globalId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public String getLocalId() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        return localId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        return attributeSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * this is only to serialize the general shape and ids, to ensure that we generate the same stuff in the client
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        BaseComponent<?, ?> oldComponent = context.setCurrentComponent(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            BaseComponentDef def = getComponentDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            // Be very careful here. descriptor != def.getDescriptor().
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            // This is 'case normalizing', as the client is actually case
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            json.writeMapEntry("componentDef", def.getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            if (!descriptor.equals(originalDescriptor)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                json.writeMapEntry("original", originalDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            json.writeMapEntry("creationPath", getPath());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            if ((attributeSet.getValueProvider() == null || hasProvidedAttributes) && !attributeSet.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                json.writeMapEntry("attributes", attributeSet);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                if (rendererDef.isLocal()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    // Not writing directly to json.appendable because then it wouldn't get escaped.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    // ideally Json would have a FilterWriter that escapes that we could use here.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    json.writeMapEntry("rendering", sw.toString());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            if (model != null && model.getDescriptor().getDef().hasMembers()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                json.writeMapEntry("model", model);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        } catch (QuickFixException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * @see java.lang.Object#toString()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        return String.format("%s {%s}", descriptor.toString(), getGlobalId());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * instantiates the model
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    private void createModel() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        context.pushCallingDescriptor(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        BaseComponent<?, ?> oldComponent = context.setCurrentComponent(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                Ruue.getDefinitionService().getDefRegistry().assertAccess(descriptor, modelDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                model = modelDef.newInstance();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                if (modelDef.hasMembers()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    hasLocalDependencies = true;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    valueProviders.put(ValueProviderType.MODEL.getPrefix(), model);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            context.popCallingDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:     * @return the next id to use, the ordering must match exactly what is generated client side
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    private static String getNextGlobalId() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        String num = Ruue.getContextService().getCurrentContext().getNum();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        Action action = context.getCurrentAction();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        if (action != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            id = action.getInstanceStack().getNextId();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            suffix = action.getId();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        String globalId = String.valueOf(id);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            globalId = String.format("%s:%s", globalId, suffix);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        return globalId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public boolean hasLocalDependencies() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        return hasLocalDependencies;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public Object getValue(PropertyReference expr) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        BaseComponent<?, ?> oldComponent = context.setCurrentComponent(this);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            if ("c".equals(prefix)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            Object root = valueProviders.get(prefix);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                ValueProviderType vpt = ValueProviderType.getTypeByPrefix(prefix);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    root = context.getGlobalProviders().get(vpt);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    if (root instanceof ValueProvider) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                        return ((ValueProvider) root).getValue(stem);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                        return JavaModel.getValue(root, stem, null);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                        // no throw error at runtime even though expression
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    // they asked for just the root.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    // TODO: this should only work for foreach, shouldn't be
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    // able to {!m}
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        } finally {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        String id = component.getLocalId();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        if (!RuueTextUtil.isNullEmptyOrWhitespace(id)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            List<String> globalIds = index.get(id);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            if (globalIds == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                globalIds = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                index.put(id, globalIds);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            globalIds.add(component.getGlobalId());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public String getPath() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        return path;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    static private DefDescriptor<TypeDef> componentArrType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    static private DefDescriptor<TypeDef> componentDefRefArrayType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    public void reinitializeModel() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        // This is a visitor pattern, implemented here with a hardwire.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        BaseComponentDef def = descriptor.getDef();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            componentArrType = Ruue.getDefinitionService().getDefDescriptor("ruau://Ruue.Component[]", TypeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        if(componentDefRefArrayType == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        	componentDefRefArrayType = Ruue.getDefinitionService().getDefDescriptor("ruau://Ruue.ComponentDefRef[]", TypeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        createModel();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            zuper.reinitializeModel();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        // Walk all attributes, pushing the reinitialize model in to those as well.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:        for (Map.Entry<DefDescriptor<AttributeDef>, AttributeDef> foo : def.getAttributeDefs().entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            AttributeDef attr = foo.getValue();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            if (attr instanceof AttributeDefImpl) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                AttributeDefImpl attri = (AttributeDefImpl) attr;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                typeDesc = attri.getTypeDesc();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                // bad.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                typeDesc = attr.getTypeDef().getDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            if (componentArrType.equals(typeDesc)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                Object val = getAttributes().getValue(foo.getKey().getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                if (val instanceof List) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    @SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    List<BaseComponent<?, ?>> facet = (List<BaseComponent<?, ?>>) val;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    for (BaseComponent<?, ?> c : facet) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                        c.reinitializeModel();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            else if (componentDefRefArrayType.equals(typeDesc)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:            	ComponentDefRefArray val = getAttributes().getValue(foo.getKey().getName(), ComponentDefRefArray.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                if (val != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    //@SuppressWarnings("unchecked")
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    //List<BaseComponent<?, ?>> facet = (List<BaseComponent<?, ?>>) val;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    for (Object c : val.getList()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    	if(c instanceof BaseComponent) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:                    		((BaseComponent<?, ?>)c).reinitializeModel();                    		
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected final DefDescriptor<D> originalDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    private final String globalId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    private final String path;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected String localId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected final AttributeSet attributeSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    private Model model;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected boolean remoteProvider = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    private final Map<String, List<String>> index = Maps.newLinkedHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    // FIXME - the values should be ValueProviders, but first we need to wrap non-m/v/c providers.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected final Map<String, Object> valueProviders = new LinkedHashMap<String, Object>();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected boolean hasLocalDependencies = false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/BaseComponentImpl.java:    protected boolean hasProvidedAttributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:import org.ruauframework.builder.ComponentDefBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * The definition of a component. Holds all information about a given type of
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * component. ComponentDefs are immutable singletons per type of ComponentDef.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java: * Once they are created, they can only be replaced, never changed.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:public class ComponentDefImpl extends BaseComponentDefImpl<ComponentDef> implements ComponentDef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:    private static final long serialVersionUID = 6449560899515044182L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:     * The Descriptor for the component that all non-root components eventually
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:     * must extend. Similar to java.lang.Object in java.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:    public static final DefDescriptor<ComponentDef> PROTOTYPE_COMPONENT = DefDescriptorImpl.getInstance(
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:            "markup://ruau:component", ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:    public static class Builder extends BaseComponentDefImpl.Builder<ComponentDef> implements ComponentDefBuilder {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:            super(ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:    public DefDescriptor<ComponentDef> getDefaultExtendsDescriptor() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefImpl.java:    protected void serializeFields(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import java.util.Collection;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import java.util.List;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import java.util.Map;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import java.util.Map.Entry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import java.util.Set;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.builder.ComponentDefRefBuilder;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.def.AttributeDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.def.AttributeDef.SerializeToType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.def.AttributeDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.def.ComponentDefRef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.def.InterfaceDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.def.RegisterEventDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.def.RootDefinition;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.impl.root.AttributeDefRefImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.impl.system.DefDescriptorImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.impl.system.DefinitionImpl;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.impl.util.RuueUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.instance.BaseComponent;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.throwable.quickfix.AttributeNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.throwable.quickfix.DefinitionNotFoundException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.util.json.Json.Serialization;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import org.ruauframework.util.json.Json.Serialization.ReferenceType;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * An immutable reference to a ComponentDef, containing only instance-specific
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * properties, like the Attributes and body. All other definition-level
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * information about the ComponentDefRef can be found in the corresponding
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java: * DefinitionImpl<ComponentDefRef> and getComponentDescriptor should be an
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:@Serialization(referenceType = ReferenceType.NONE)
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:public class ComponentDefRefImpl extends DefinitionImpl<ComponentDef> implements ComponentDefRef {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    private static final long serialVersionUID = 4650210933042431716L;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    protected final Map<DefDescriptor<AttributeDef>, AttributeDefRef> attributeValues;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    private final DefDescriptor<InterfaceDef> intfDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    private final int hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    private final String localId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    protected final Load load;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        this.attributeValues = RuueUtil.immutableMap(builder.attributeValues);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        this.hashCode = RuueUtil.hashCode(descriptor, location);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        this.localId = builder.localId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        this.load = builder.load;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public Map<DefDescriptor<AttributeDef>, AttributeDefRef> getAttributeValues() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        return attributeValues;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    protected List<AttributeDefRef> getAttributeValueList() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        Collection<AttributeDef> defs = def.getAttributeDefs().values();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        List<AttributeDefRef> ret = Lists.newArrayList();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        for (AttributeDef at : defs) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            AttributeDefRef ref = attributeValues.get(at.getDescriptor());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                ret.add(ref);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * Recursively adds the ComponentDescriptors of all components in this
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * ComponentDef's children to the provided set. The set may then be used to
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * analyze freshness of all of those types to see if any of them should be
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * @param dependencies A Set that this method will append RootDescriptors to
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     *            for every RootDef that this ComponentDefDef requires
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public void appendDependencies(Set<DefDescriptor<?>> dependencies) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        super.appendDependencies(dependencies);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            dependencies.add(intfDescriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            dependencies.add(descriptor);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        for (AttributeDefRef attributeDefRef : attributeValues.values()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            attributeDefRef.appendDependencies(dependencies);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public void validateReferences() throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        RuueContext context = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        DefDescriptor<?> referencingDesc = context.getCurrentCallingDescriptor();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:	        MasterDefRegistry registry = Ruue.getDefinitionService().getDefRegistry();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:	    	registry.assertAccess(referencingDesc, getComponentDef());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        validateAttributesValues(referencingDesc);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        // validateMissingAttributes();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        // TODO LOTS of validation here folks #W-689596
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * Validate attributes that were specified in the component instantiation.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * Does not validate missing attributes. Example: in the component
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * instantiation of myMS:widget validates the specified attributes foo and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * bar <myNS:uberWidget foo="123" bar="blah"/>
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * @param rootDef the element being instantiated
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * @param specifiedAttributes the attributes specified in the comp
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    private void validateAttributesValues(DefDescriptor<?> referencingDesc) throws QuickFixException, AttributeNotFoundException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        Map<DefDescriptor<AttributeDef>, AttributeDef> atts = rootDef.getAttributeDefs();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        Map<String, RegisterEventDef> registeredEvents = rootDef.getRegisterEventDefs();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        MasterDefRegistry registry = Ruue.getDefinitionService().getDefRegistry();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        for (Entry<DefDescriptor<AttributeDef>, AttributeDefRef> entry : getAttributeValues().entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            DefDescriptor<AttributeDef> attributeDefDesc = entry.getKey();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            AttributeDef attributeDef = atts.get(attributeDefDesc);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            if (attributeDef == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                // didn't find an attribute by that name, check if there's an
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                RegisterEventDef registeredEvent = registeredEvents.get(attributeDefDesc.getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                    throw new AttributeNotFoundException(rootDef.getDescriptor(), attributeDefDesc.getName(),
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                            getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            	registry.assertAccess(referencingDesc, registeredEvent);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:	            	// Validate that the referencing component has access to the attribute
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:	            	registry.assertAccess(referencingDesc, attributeDef);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                // so it was an attribute, make sure to parse it
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                entry.getValue().parseValue(attributeDef.getTypeDef());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            entry.getValue().validateReferences();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            // heres where some type validation would go
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public boolean equals(Object obj) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        if (obj instanceof ComponentDefRefImpl) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            // TODO: factor attributeDefs into this? #W-689622
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            return descriptor.equals(other.getDescriptor()) && location.equals(other.getLocation());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public int hashCode() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        return hashCode;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:     * Used by Json.serialize()
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            json.writeMapEntry("componentDef", getComponentDef());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            json.writeMapEntry("localId", localId);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            if (load != Load.DEFAULT) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                json.writeMapEntry("load", load);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            if (!attributeValues.isEmpty()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                json.writeMapKey("attributes");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                json.writeMapKey("values");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                json.writeMapBegin();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                for (Map.Entry<DefDescriptor<AttributeDef>, AttributeDefRef> entry : attributeValues.entrySet()) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                    AttributeDef attributeDef = def.getAttributeDef(entry.getKey().getName());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                    if (attributeDef == null || attributeDef.getSerializeTo() != SerializeToType.SERVER) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                        json.writeMapEntry(entry.getKey(), entry.getValue());
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            json.writeMapEnd();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        } catch (QuickFixException e) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            throw new RuueRuntimeException(e);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public AttributeDefRef getAttributeDefRef(String name) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        return getAttributeValues().get(DefDescriptorImpl.getInstance(name, AttributeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public String getLocalId() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        return localId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public Load getLoad() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        return load;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public Component newInstance(BaseComponent<?, ?> valueProvider) throws QuickFixException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        return new ComponentImpl(getDescriptor(), getAttributeValueList(), valueProvider, localId);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:    public static class Builder extends DefinitionImpl.RefBuilderImpl<ComponentDef, ComponentDefRef> implements
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        private Map<DefDescriptor<AttributeDef>, AttributeDefRef> attributeValues;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        private String localId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        private DefDescriptor<InterfaceDef> intfDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        private Load load = Load.DEFAULT;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            super(ComponentDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        public Builder clearAttributes() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            if (this.attributeValues != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                this.attributeValues.clear();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        public Builder setAttribute(String key, Object value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            if (value != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                AttributeDefRefImpl.Builder valueBuilder = new AttributeDefRefImpl.Builder();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                valueBuilder.setDescriptor(DefDescriptorImpl.getInstance(key, AttributeDef.class));
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                valueBuilder.setValue(value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                AttributeDefRef adr = valueBuilder.build();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                setAttribute(adr.getDescriptor(), adr);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            } else if (attributeValues != null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                DefDescriptor<AttributeDef> attr = DefDescriptorImpl.getInstance(key, AttributeDef.class);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                attributeValues.remove(attr);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        public ComponentDefRefBuilder setLocalId(String localId) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            if (!RuueTextUtil.isNullEmptyOrWhitespace(localId)) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                this.localId = localId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:         * Gets the attributeValues for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:         * @return The attributeValues.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        public AttributeDefRef getAttributeValue(DefDescriptor<AttributeDef> key) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            return this.attributeValues.get(key);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        public Builder setAttribute(DefDescriptor<AttributeDef> desc, AttributeDefRef value) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            if (value == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                throw new NullPointerException("Value cannot be null");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            if (attributeValues == null) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:                attributeValues = Maps.newHashMap();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            attributeValues.put(desc, value);
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:         * Gets the localId for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:         * @return The localId.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        public String getLocalId() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            return this.localId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:         * Sets the intfDescriptor for this instance.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:         * @param intfDescriptor The intfDescriptor.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        public ComponentDefRefBuilder setIntfDescriptor(DefDescriptor<InterfaceDef> intfDescriptor) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:        public ComponentDefRefBuilder setLoad(Load load) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ComponentDefRefImpl.java:            this.load = load;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: * limitations under the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:package org.ruauframework.impl.root.component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:import java.io.IOException;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:import org.ruauframework.instance.AttributeSet;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:import org.ruauframework.instance.Component;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:import org.ruauframework.instance.Model;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java: * proto-component is used by providers, when the real component isn't known
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:public class ProtoComponentImpl implements Component {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    private final DefDescriptor<ComponentDef> descriptor;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    private final AttributeSet attributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    private final String globalId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    public ProtoComponentImpl(DefDescriptor<ComponentDef> descriptor, String globalId, AttributeSet attributes) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        this.attributes = attributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        this.globalId = globalId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        return attributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    public String getGlobalId() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        return globalId;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    public String getLocalId() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    public Object getValue(PropertyReference key) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        // only the view is accessible through this component, and that is
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        // accessed directly by calling getAttributes
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        if (key.getRoot().equalsIgnoreCase("v")) {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:            return attributes;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    public void serialize(Json json) throws IOException {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        throw new UnsupportedOperationException();
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    public boolean hasLocalDependencies() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:        return false;
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:    public String getPath() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/ProtoComponentImpl.java:	public void reinitializeModel() {
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationValueProvider.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationValueProvider.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationValueProvider.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationValueProvider.java: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/java/org/ruauframework/impl/root/component/IterationValueProvider.java: *         http://www.apache.org/licenses/LICENSE-2.0
