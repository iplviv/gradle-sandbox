ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!attribute)return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var match=context.Match;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.IsType(Function,match))return attribute==match||attribute.constructor==match;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        match=match.Name||match.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return attribute.Name==match||Function.GetName(attribute.constructor)==match;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.Script.ScriptLoadStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoadStrategy.ILoadStrategy=new function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Import=function(path,callback){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.ImportJson=function(path,callback){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Load=function(source){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.Script");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoader=new function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _strategyManager;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Strategies;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function ScriptLoader(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Strategies=_strategyManager=new System.Script.Strategy.StrategyManager();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    ScriptLoader.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // ILoadStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Import=function(path,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.Script.ScriptLoader.Import: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=path.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(arguments.length>1){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!Object.IsType(Function,callback))throw new Error("System.Script.ScriptLoader.Import: 'callback' must be a valid Function pointer.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return _strategyManager.Get(this).Import(path,callback);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            throw new Error(String.Format("System.Script.ScriptLoader.Import: There was an error importing script '{0}'.\nError: {1}",path,e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.ImportJson=function(path,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.Script.ScriptLoader.ImportJson: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=path.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(arguments.length>1){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!Object.IsType(Function,callback))throw new Error("System.Script.ScriptLoader.ImportJson: 'callback' must be a valid Function pointer.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return _strategyManager.Get(this).ImportJson(path,callback);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            throw new Error(String.Format("System.Script.ScriptLoader.ImportJson: There was an error importing json '{0}'.\nError: {1}",path,e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Load=function(source){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(source==undefined||!Object.IsType(Function,source.toString))throw new Error("System.Script.ScriptLoader.Load: 'source' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return _strategyManager.Get(this).Load(source);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            throw new Error(String.Format("System.Script.ScriptLoader.Load: There was an error loading script.\nError: {0}",e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoader.constructor.Implement(System.Script.ScriptLoadStrategy.ILoadStrategy,'System.Script.ScriptLoader');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.Script");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:if(!System.Script.ScriptLoader)throw new Error("Required dependency 'System.Script.ScriptLoader' was not found. Are you missing a script reference?");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.Script.ScriptLoader.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoader.Attributes.ImportAttribute=function(path,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.Script.ScriptLoader.Attributes.ImportAttribute: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    path=System.IO.Path.Normalize(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    System.Script.ScriptLoader.Import.apply(System.Script.ScriptLoader,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoader.Attributes.ImportAttribute.Inherit(System.Script.Attributes.Attribute); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.Script");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:if(!System.Script.ScriptLoader)throw new Error("Required dependency 'System.Script.ScriptLoader' was not found. Are you missing a script reference?");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.Script.ScriptLoader.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoader.Attributes.ImportJsonAttribute=function(path,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.Script.ScriptLoader.Attributes.ImportJsonAttribute: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    path=System.IO.Path.Normalize(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    System.Script.ScriptLoader.ImportJson(path,callback);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoader.Attributes.ImportJsonAttribute.Inherit(System.Script.Attributes.Attribute); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.Script.ScriptLoadStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoadStrategy.Dom=function(){    
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // ILoadStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Import=function(path,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var script=document.createElement('script');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var loadDelegate=Function.GetDelegate(Script_OnLoad,this,path,callback);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var errorDelegate=Function.GetDelegate(Script_OnError,this,path,callback);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Object.Set(script,{type:'text/javascript',onload:loadDelegate,onerror:errorDelegate,src:path});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return document.body.appendChild(script);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.ImportJson=function(path,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var target=document.createElement('iframe');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var loadDelegate=Function.GetDelegate(Frame_OnLoad,this,path,callback,target);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var errorDelegate=Function.GetDelegate(Frame_OnError,this,path,callback,target);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Object.Set(script,{onload:loadDelegate,onerror:errorDelegate,src:path});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        document.body.appendChild(target);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Load=function(source){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var script=document.createElement('script');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Object.Set(script,{type:'text/javascript',text:source});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return document.body.appendChild(script);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function Frame_OnLoad(path,callback,frame){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        frame.parentNode.removeChild(frame);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var frameContent=frame.contentWindow.documentElement;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var script=frameContent.textContent||frameContent.innerText;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var serializer=new System.Script.ObjectSerializer();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var result=serializer.Deserialize(String.Format("return false||({0})",script));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(callback)callback(path,result);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function Frame_OnError(path,callback,frame,error){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        frame.parentNode.removeChild(frame);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var errorMessage=String.Format("System.Script.ScriptLoadStrategy.Dom.ImportJson: There was an error loading '{0}'. Error: {1}.",path,error||"Unknown");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(callback)callback(path,null,errorMessage);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        else throw new Error(errorMessage);        
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function Script_OnLoad(path,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(callback)callback(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function Script_OnError(path,callback,error){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var errorMessage=String.Format("System.Script.ScriptLoadStrategy.Dom.ImportJson: There was an error loading '{0}'. Error: {1}.",path,error||"Unknown");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(callback)callback(path,errorMessage);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        else throw new Error(errorMessage);        
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoadStrategy.Dom.Implement(System.Script.ScriptLoadStrategy.ILoadStrategy,'System.Script.ScriptLoadStrategy.Dom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoadStrategy.Dom.Implement(System.Script.Strategy.IStrategySpecification,'System.Script.ScriptLoadStrategy.Dom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoader.Strategies.Add(System.Script.ScriptLoadStrategy.Dom); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.Script.ScriptLoadStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoadStrategy.Generic=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _hasIndirectEval=false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _needsReturnStatement=true;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _collapseRegex=/\{[^\{\}]*\}/g;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _identifierRegex=/(;?\s*)(var|function)(\s+)([^\s=(){}]+)(\s*=|\()/gm;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.Global()===eval.call(null,"this")){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _hasIndirectEval=true;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                eval.call(null,"return {}");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                _needsReturnStatement=false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // ILoadStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Import=function(path,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var script=System.IO.File.GetFile(System.IO.Path.GetFullPath(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(script==null)throw new Error(String.Format("System.Script.ScriptLoadStrategy.Generic.Import: There was an error loading '{0}'.\nError: File not found.",path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        script=String.Format("{0}\n//@ sourceURL={1}",script,path.replace(/\s/g,'_'));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var result=this.Load(script);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(callback)callback(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.ImportJson=function(path,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var script=System.IO.File.GetFile(System.IO.Path.GetFullPath(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(script==null)throw new Error(String.Format("System.Script.ScriptLoadStrategy.Generic.ImportJson: There was an error loading '{0}'.\nError: File not found.",path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var result=this.Load(String.Format("{1}false||({0});\n//@ sourceURL={2}",script,_needsReturnStatement?"return ":"",path.replace(/\s/g,'_')));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(callback)callback(path,result);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Load=function(source){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(_hasIndirectEval){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return eval.call(null,source);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategSpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var identifiers=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var collapsedSource=source;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        while(String.Contains(collapsedSource,'{')&&String.Contains(collapsedSource,'}')){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            collapsedSource=collapsedSource.replace(_collapseRegex,'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        collapsedSource.replace(_identifierRegex,addIdentifier);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return [source].concat(identifiers).join('\n');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        function addIdentifier(fullMatch,leadingSpace,keyword,keywordSpace,identifier,trailingSpace){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            identifiers.push(String.Format("try{ {0}; Object.Global()[\"{0}\"]={0};}catch(e){ }",identifier));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return fullMatch;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoadStrategy.Generic.Implement(System.Script.ScriptLoadStrategy.ILoadStrategy,'System.Script.ScriptLoadStrategy.Generic');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoadStrategy.Generic.Implement(System.Script.Strategy.IStrategySpecification,'System.Script.ScriptLoadStrategy.Generic');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoader.Strategies.Add(System.Script.ScriptLoadStrategy.Generic); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.Script.ScriptLoadStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoadStrategy.SpiderMonkey=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    SpiderMonkey.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // ILoadStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Load=function(source){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var lines=source.split("\n");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var path=String.Trim(lines[lines.length-1].split("//@ sourceURL=")[1]||'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return evaluate(source,{fileName:path});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategSpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (typeof(system)!='undefined' && typeof(version)!='undefined' && typeof(snarf)!="undefined" && typeof(evaluate)!="undefined");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoadStrategy.SpiderMonkey.Inherit(System.Script.ScriptLoadStrategy.Generic,"System.Script.ScriptLoadStrategy.SpiderMonkey");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Script.ScriptLoader.Strategies.Add(System.Script.ScriptLoadStrategy.SpiderMonkey,0); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _currentPath;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _events;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _skipped;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _data;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _currentPath=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _data=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    Engine.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Enumerate=function(target,trait,negativeTrait){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(target!=undefined&&!Object.IsType(Function,target.toString))throw new Error("xUnit.js.Attributes.Engine.Enumerate: 'target' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(trait!=undefined&&!Object.IsType(Function,trait.toString))throw new Error("xUnit.js.Attributes.Engine.Enumerate: 'trait' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(negativeTrait!=undefined&&!Object.IsType(Function,negativeTrait.toString))throw new Error("xUnit.js.Attributes.Engine.Enumerate: 'negativeTrait' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        target=(target||'').toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        trait=(trait||'').toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        negativeTrait=(negativeTrait||'').toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var traits=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var targets=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(trait.length>0){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            targets=getTargets(this,target);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            traits=Array.ForEach(targets,findTraits,null,{Expand:true,Trait:trait,Traits:[]}).Traits;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(negativeTrait.length>0){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(traits!=null){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                traits=Array.ForEach(traits,addTrait,matchNegativeTrait,{Trait:negativeTrait,Traits:[]}).Traits;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                if(!targets)targets=getTargets(this,target);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                traits=Array.ForEach(targets,findTraits,null,{Expand:true,IsNegativeMatch:true,Trait:negativeTrait,Traits:[]}).Traits;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(traits)return traits;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(target.length>0)return getTargets(this,target);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return this.base.Enumerate();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.InstantiateFixture=function(fixture){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _currentPath.push(fixture.Name);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            instantiateFixture(fixture.Method);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }finally{
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _currentPath.pop();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.RegisterFixture=function(targetMethod){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,targetMethod))throw new Error("xUnit.js.Attributes.Engine.RegisterFixture: 'targetMethod' must be a valid Function pointer.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var name=getName(targetMethod);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fixture=new xUnit.js.Attributes.Model.Fixture(name,null,targetMethod);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base.RegisterFixture(fixture,_currentPath.join('.'));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(targetMethod.GetDecoration)fixture.Asynchronous=targetMethod.GetDecoration().GetAttributes(xUnit.js.Attributes.AsyncAttribute).length>0;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.RegisterFact=function(targetMethod){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,targetMethod))throw new Error("xUnit.js.Attributes.Engine.RegisterFact: 'targetMethod' must be a valid Function pointer.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fact=new xUnit.js.Model.Fact(targetMethod,getName(targetMethod));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        fact.File=this.CurrentFile;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base.RegisterFact(fact,_currentPath.join('.'));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(targetMethod.GetDecoration)fact.Asynchronous=targetMethod.GetDecoration().GetAttributes(xUnit.js.Attributes.AsyncAttribute).length>0;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return fact;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Run=function(target,trait,negativeTrait){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        updateComponents(this);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(trait!=undefined||negativeTrait!=undefined){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Array.ForEach(this.Enumerate(target,trait,negativeTrait),runTrait);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(target!=undefined&&!Object.IsType(Function,target.toString))throw new Error("xUnit.js.Attributes.Engine.Run: 'target' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            target=(target||'').toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(target.length>0){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var targets=target.split(',');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                for(var i=0;i<targets.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    var currentTarget=String.Trim(targets[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    if(currentTarget.length>0)this.base.Run(currentTarget);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                this.base.Run();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SetData=function(targetMethod,data){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,targetMethod))throw new Error("xUnit.js.Attributes.Engine.SetData: 'targetMethod' must be a valid Function pointer.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var name=getName(targetMethod);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var path=_currentPath.slice(0);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path.push(name);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _data.push({
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Path:path.join('.'),
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Data:data
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Skip=function(targetMethod,reason){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,targetMethod))throw new Error("xUnit.js.Attributes.Engine.Skip: 'targetMethod' must be a valid Function pointer.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var name=getName(targetMethod);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var path=_currentPath.slice(0);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path.push(name);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Path:path.join('.'),
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Reason:reason
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Privates
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getName(targetMethod){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var decoration=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var target=targetMethod;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.IsType(Function,target.GetDecoration)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            decoration=target.GetDecoration();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(Object.IsType(Function,decoration&&decoration.GetMethod))target=decoration.GetMethod();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return String.Trim(decoration&&decoration.Name||Function.GetName(target));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getTargets(engine,target){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var targets=target.split(',');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var targetComponents=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<targets.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            targetComponents=targetComponents.concat(engine.Get(targets[i]));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return targetComponents;            
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function instantiateFixture(target){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            target();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            throw new Error(String.Format("xUnit.js.Attributes.Engine.instantiate: unable to instantiate the targeted fixture '{0}'.\nError: {1}",getName(target),e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function updateComponents(engine){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(_skipped,markSkipped,null,{Engine:engine});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(_data,setData,null,{Engine:engine});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    //Predicates
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function addFixtures(fixture,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(fixture.GetFixtures(),addFixtures,null,{Traits:context.Traits});            
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(fixture.GetFacts(),addTrait,null,{Traits:context.Traits});            
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function addModel(model,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            addFixtures(model,context);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            addTrait(model,context);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function addTrait(fact,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.IsType(Array,context&&context.Traits))context.Traits.push(fact);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function findTraits(model,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var traitContext={IsNegativeMatch:context.IsNegativeMatch,Trait:context.Trait,Traits:context.Traits};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(matchTrait(model,context)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!context.IsNegativeMatch){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                addModel(model,context);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                Array.ForEach(model.GetFixtures(),findTraits,null,traitContext);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                Array.ForEach(model.GetFacts(),findTraits,null,traitContext);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                if(context.IsNegativeMatch){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    addModel(model,context);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return context.Traits;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function setData(data,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var components=context.Engine.Get(data.Path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Array,components))components=[components];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(components,setDataOnComponent,null,{Data:data.Data});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function markSkipped(skip,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var components=context.Engine.Get(skip.Path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Array,components))components=[components];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(components,skipComponent,null,{Reason:skip.Reason});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function matchNegativeTrait(model,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(matchTrait(model,context))return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            model=model.Parent;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function matchTrait(model,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var traitAttributes=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.IsType(xUnit.js.Attributes.Model.Fixture,model)||Object.IsType(xUnit.js.Model.Fact,model)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            traitAttributes=model.Method.GetDecoration().GetAttributes(xUnit.js.Attributes.TraitAttribute);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var traits=context.Trait.split(',');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var i=0;i<traitAttributes.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                for(var j=0;j<traits.length;j++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    if(String.Equals(String.Trim(traits[j]),traitAttributes[i].Trait))return true;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function runTrait(fact,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        fact.Run();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function setDataOnComponent(component,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!component.Data)component.Data=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            component.Data=component.Data.concat(context.Data);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(component)component.Skip(context.Reason);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.Engine.Instance=new function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.FactAttribute=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Fact=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function FactAttribute(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base("Fact");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,this.Target))throw new Error("xUnit.js.Attributes.FactAttribute.ctor: unable to locate attribute target.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Fact=xUnit.js.Attributes.Engine.Instance.RegisterFact(this.Target);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        addModelDecoration(this);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    FactAttribute.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function addModelDecoration(attribute){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var target=attribute.Target;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.IsType(Function,target.GetDecoration))target=target.GetDecoration().GetMethod();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        target.GetModel=Function.GetDelegate(getModel,attribute);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return this.Fact;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.FactAttribute.Inherit(System.Script.Attributes.Attribute,"xUnit.js.Attributes.FactAttribute"); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base("Fixture");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,this.Target))throw new Error("xUnit.js.Attributes.FixtureAttribute.ctor: unable to locate attribute target.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Fixture=xUnit.js.Attributes.Engine.Instance.RegisterFixture(this.Target);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        addModelDecoration(this);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        xUnit.js.Attributes.Engine.Instance.InstantiateFixture(this.Fixture);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    FixtureAttribute.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function addModelDecoration(attribute){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var target=attribute.Target;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.IsType(Function,target.GetDecoration))target=target.GetDecoration().GetMethod();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        target.GetModel=Function.GetDelegate(getModel,attribute);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.MockedImportAttribute=function(path,mock,callback){    
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function MockedImportAttribute(path,mock,callback){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,mock))throw new Error("xUnit.js.Attributes.MockedImportAttribute.ctor: 'mock' must be a valid Function pointer.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var target=this;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            target.base(path,callback);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    return System.Script.DelayedConstructor(this,xUnit.js.Attributes.MockedImportAttribute,MockedImportAttribute,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.MockedImportAttribute.Inherit(System.Script.ScriptLoader.Attributes.ImportAttribute);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.SkipAttribute=function(reason){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Public Members (Can't declare, this is global scope!)
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // this.Reason;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function SkipAttribute(reason){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base("Skip");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,this.Target))throw new Error("xUnit.js.Attributes.SkipAttribute.ctor: unable to locate attribute target.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Reason=reason;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        xUnit.js.Attributes.Engine.Instance.Skip(this.Target,reason);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    return System.Script.DelayedConstructor(this,xUnit.js.Attributes.SkipAttribute,SkipAttribute,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.TraitAttribute=function(trait,invert){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Public Members (Can't declare, this is global scope!)
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // this.Trait;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function TraitAttribute(trait){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base("Trait");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,this.Target))throw new Error("xUnit.js.Attributes.TraitAttribute.ctor: unable to locate attribute target.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Trait=trait;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    return System.Script.DelayedConstructor(this,xUnit.js.Attributes.TraitAttribute,TraitAttribute,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.TraitAttribute.Inherit(System.Script.Attributes.Attribute);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base("Async");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,this.Target))throw new Error("xUnit.js.Attributes.AsyncAttribute.ctor: unable to locate attribute target.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    AsyncAttribute.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Attributes");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.DataAttribute=function(data){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Public Members (Can't declare, this is global scope!)
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // this.Data
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function DataAttribute(data1,data2,data3,dataN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base("Data");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,this.Target))throw new Error("xUnit.js.Attributes.DataAttribute.ctor: unable to locate attribute target.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Data=arguments.length==1&&Object.IsType(Array,arguments[0])?arguments[0]:Array.Copy(arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        xUnit.js.Attributes.Engine.Instance.SetData(this.Target,this.Data);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    return System.Script.DelayedConstructor(this,xUnit.js.Attributes.DataAttribute,DataAttribute,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.DataAttribute.Inherit(System.Script.Attributes.Attribute);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:// Global Attribute Convenience Mapping
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Import=System.Script.ScriptLoader.Attributes.ImportAttribute;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:ImportJson=System.Script.ScriptLoader.Attributes.ImportJsonAttribute;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Data=xUnit.js.Attributes.DataAttribute;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Fact=xUnit.js.Attributes.FactAttribute;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Trait=xUnit.js.Attributes.TraitAttribute; 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Attributes.Model");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Attributes.Model.Fixture=function(name,parent,method){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function Fixture(name,parent,method){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Function,method))throw new Error("xUnit.js.Attributes.Model.Fixture.ctor: 'method' must be a valid Function pointer.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.base(name,parent);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    Fixture.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.IEnvironmentStrategy=new function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.WriteError=function(message1,message2,messageN){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _strategyManager;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Strategies;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Strategies=_strategyManager=new System.Script.Strategy.StrategyManager();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    Environment.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return _strategyManager.Get(this).Execute(command,parameters,voidOutput);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return _strategyManager.Get(this).Exit(errorCode);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return _strategyManager.Get(this).GetNewLine();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return _strategyManager.Get(this).GetParameters();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return _strategyManager.Get(this).GetWorkingDirectory();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var strategy=_strategyManager.Get(this);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return strategy.Write.apply(strategy,Array.prototype.slice.call(arguments,0));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.WriteError=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var strategy=_strategyManager.Get(this);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return strategy.WriteError.apply(strategy,Array.prototype.slice.call(arguments,0));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.constructor.Implement(System.EnvironmentStrategy.IEnvironmentStrategy,'System.Environment'); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Dom=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _newLine=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _outputDiv;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _oldUnload;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    new function DomStrategy(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.IsType(Function,window.onunload))_oldUnload=window.onunload;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        window.onunload=dispose;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        throw new Error("System.EnvironmentStrategy.Dom.Execute: Not Implemented. Sandbox violations are not allowed.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var container=document.createElement("div");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        container.innerHTML="<br/>";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return _newLine=(container.textContent||container.innerText);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var args={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            named:{},
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            unnamed:[]
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var params=((document.location+'').split('?')[1]||'').split('&');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<params.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(String.Contains(params[i],'=')){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var param=params[i].split('=');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                args.named[param[0].toLowerCase()]=param.slice(1).join(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }else args.unnamed.push(params[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return args;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Path.GetPath(location.href);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<arguments.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            writeLine(arguments[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.WriteError=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<arguments.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            writeLine(arguments[i]).className="Error";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var line=document.createElement('div');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        line.appendChild(document.createTextNode(text));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return _outputDiv.appendChild(line);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var outputDiv=document.createElement('div');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Object.Set(outputDiv,{className:'Output'});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        document.body.appendChild(outputDiv);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var unload=_oldUnload;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _outputDiv=_oldUnload=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(unload)unload();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Dom.Implement(System.EnvironmentStrategy.IEnvironmentStrategy,'System.EnvironmentStrategy.Dom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Dom.Implement(System.Script.Strategy.IStrategySpecification,'System.EnvironmentStrategy.Dom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(System.EnvironmentStrategy.Dom); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Rhino=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _newline=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return runCommand.apply(Object.Global(),[command].concat(parameters))+'';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return _newline=java.lang.System.getProperty("line.separator")+'';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var args={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            named:{},
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            unnamed:[]
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var params=Object.Global().arguments;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<params.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var param=String.Trim(params[i]+'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(String.StartsWith(param,'/')&&String.Contains(param,':')){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                param=String.TrimStart(param,'/').split(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                args.named[param[0].toLowerCase()]=param.slice(1).join(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }else args.unnamed.push(param);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return args;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Path.Normalize(java.lang.System.getProperty("user.dir")+'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        java.lang.System.out.print(Array.prototype.slice.call(arguments,0).join(''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.WriteError=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        java.lang.System.err.print(Array.prototype.slice.call(arguments,0).join(''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (typeof(java)!='undefined' && typeof(environment)!='undefined' && typeof(defineClass)=="function" && typeof(loadClass)=="function");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Rhino.Implement(System.EnvironmentStrategy.IEnvironmentStrategy,'System.EnvironmentStrategy.Rhino');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Rhino.Implement(System.Script.Strategy.IStrategySpecification,'System.EnvironmentStrategy.Rhino');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(System.EnvironmentStrategy.Rhino);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.SpiderMonkey=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        throw new Error("System.EnvironmentStrategy.SpiderMonkey.Execute: Not Implemented. This method is abstract and must be overridden.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        throw new Error("System.EnvironmentStrategy.SpiderMonkey.GetNewLine: Not Implemented. This method is abstract and must be overridden.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var args={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            named:{},
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            unnamed:[]
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var params=Object.Global().arguments||Object.Global().scriptArgs;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<params.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var param=String.Trim(params[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(String.StartsWith(param,'/')&&String.Contains(param,':')){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                param=String.TrimStart(param,'/').split(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                args.named[param[0].toLowerCase()]=param.slice(1).join(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }else args.unnamed.push(param);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return args;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        throw new Error("System.EnvironmentStrategy.SpiderMonkey.GetWorkingDirectory: Not Implemented. This method is abstract and must be overridden.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        putstr(Array.prototype.slice.call(arguments,0).join(''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.WriteError=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        (Object.Global().printErr||this.Write).call(this,Array.prototype.slice.call(arguments,0).join(''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (typeof(system)!='undefined' && typeof(version)!='undefined' && typeof(snarf)!="undefined");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.SpiderMonkey.Implement(System.EnvironmentStrategy.IEnvironmentStrategy,'System.EnvironmentStrategy.SpiderMonkey');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.SpiderMonkey.Implement(System.Script.Strategy.IStrategySpecification,'System.EnvironmentStrategy.SpiderMonkey'); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:if(!System.EnvironmentStrategy.SpiderMonkey)throw new Error("System.EnvironmentStrategy.SpiderMonkey.Posix: Required dependency 'System.EnvironmentStrategy.SpiderMonkey' was not found. Are you missing a script reference?");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.SpiderMonkey.Posix=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _outputFileName="SpiderMonkey_CommandOutput.tmp";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.base();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var fullCommand=[command].concat(parameters||[]).join(' ');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var exitCode=system(voidOutput?fullCommand:[fullCommand,">",_outputFileName].join(' '));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(exitCode!=0)throw new Error(String.Format("Command '{0}' exited with code {1}.",fullCommand,exitCode));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!voidOutput)return read(_outputFileName);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }finally{
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            system(String.Format("rm -f {0}",_outputFileName));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Path.Normalize(String.Trim(this.Execute("pwd")));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.base.IsSatisfiedBy(candidate)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var exitCode=system("uname > NUL 2>&1");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.SpiderMonkey.Posix.Inherit(System.EnvironmentStrategy.SpiderMonkey,'System.EnvironmentStrategy.SpiderMonkey.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(System.EnvironmentStrategy.SpiderMonkey.Posix);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:if(!System.EnvironmentStrategy.SpiderMonkey)throw new Error("System.EnvironmentStrategy.SpiderMonkey.Windows: Required dependency 'System.EnvironmentStrategy.SpiderMonkey' was not found. Are you missing a script reference?");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.SpiderMonkey.Windows=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _outputFileName="SpiderMonkey_CommandOutput.tmp";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.base();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var fullCommand=[command].concat(parameters||[]).join(' ');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var exitCode=system(voidOutput?fullCommand:[fullCommand,">",_outputFileName].join(' '));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(exitCode!=0)throw new Error(String.Format("Command '{0}' exited with code {1}.",fullCommand,exitCode));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!voidOutput)return read(_outputFileName);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }finally{
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            system(String.Format("IF EXIST \"{0}\" del /F \"{0}\"",_outputFileName));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Path.Normalize(String.Trim(this.Execute("cd")));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.base.IsSatisfiedBy(candidate)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var exitCode=system("ver > NUL 2>&1");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    System.IO.Path.DirectorySeparator="\\";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.SpiderMonkey.Windows.Inherit(System.EnvironmentStrategy.SpiderMonkey,'System.EnvironmentStrategy.SpiderMonkey.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(System.EnvironmentStrategy.SpiderMonkey.Windows);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy.V8");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.V8=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command, parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var result=os.system(command,parameters);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        throw new Error("System.EnvironmentStrategy.SpiderMonkey.GetNewLine: Not Implemented. This method is abstract and must be overridden.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var args={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            named:{},
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            unnamed:[]
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var params=Object.Global().arguments;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<params.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var param=String.Trim(params[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(String.StartsWith(param,'/')&&String.Contains(param,':')){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                param=String.TrimStart(param,'/').split(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                args.named[param[0].toLowerCase()]=param.slice(1).join(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }else args.unnamed.push(param);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return args;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        throw new Error("System.EnvironmentStrategy.SpiderMonkey.GetWorkingDirectory: Not Implemented. This method is abstract and must be overridden.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        write.apply(Object.Global(),arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.V8.Implement(System.EnvironmentStrategy.IEnvironmentStrategy,'System.EnvironmentStrategy.V8');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.V8.Implement(System.Script.Strategy.IStrategySpecification,'System.EnvironmentStrategy.V8');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:if(!System.EnvironmentStrategy.V8)throw new Error("System.EnvironmentStrategy.V8.Posix: Required dependency 'System.EnvironmentStrategy.V8' was not found. Are you missing a script reference?");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.V8.Posix=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.base();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Path.Normalize(String.Trim(os.system("pwd")));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.base.IsSatisfiedBy(candidate)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                os.system("uname");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.V8.Posix.Inherit(System.EnvironmentStrategy.V8,'System.EnvironmentStrategy.V8.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(System.EnvironmentStrategy.V8.Posix); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:if(!System.EnvironmentStrategy.V8)throw new Error("System.EnvironmentStrategy.V8.Windows: Required dependency 'System.EnvironmentStrategy.V8' was not found. Are you missing a script reference?");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.V8.Windows=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.base();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Path.Normalize(String.Trim(os.system("cd")));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.base.IsSatisfiedBy(candidate)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                System.IO.Path.DirectorySeparator="\\";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.V8.Windows.Inherit(System.EnvironmentStrategy.V8,'System.EnvironmentStrategy.V8.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(System.EnvironmentStrategy.V8.Windows); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Wscript=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _outputFileName="WScript_CommandOutput.tmp";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _useStdIo=true;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var fullCommand=[command].concat(parameters||[]).join(' ');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var shell=WScript.CreateObject("WScript.Shell");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var exitCode=shell.Run(voidOutput?fullCommand:[fullCommand,">",_outputFileName].join(' '),0,true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(exitCode!=0)throw new Error(String.Format("Command '{0}' exited with code {1}.",fullCommand,exitCode));            
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!voidOutput)return System.IO.File.Strategies.Get(Object.Global()).GetFile(_outputFileName);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }finally{
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            System.IO.File.DeleteFile(_outputFileName);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var args={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            named:{},
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            unnamed:[]
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var params=WScript.Arguments;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<params.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var param=String.Trim(params(i));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(String.StartsWith(param,'/')&&String.Contains(param,':')){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                param=String.TrimStart(param,'/').split(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                args.named[param[0].toLowerCase()]=param.slice(1).join(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }else args.unnamed.push(param);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return args;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Path.Normalize(WScript.CreateObject("WScript.Shell").CurrentDirectory);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(Array.prototype.slice.call(arguments,0),writeHandlerPredicate(WScript.StdOut));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.WriteError=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(Array.prototype.slice.call(arguments,0),writeHandlerPredicate(WScript.StdErr));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    //Private methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function writeHandlerPredicate(pipe){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return function(message,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    pipe.Write(message);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    _useStdIo=false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            WScript.Echo(message);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Wscript.Implement(System.EnvironmentStrategy.IEnvironmentStrategy,'System.EnvironmentStrategy.Wscript');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Wscript.Implement(System.Script.Strategy.IStrategySpecification,'System.EnvironmentStrategy.Wscript');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(System.EnvironmentStrategy.Wscript); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Path=new function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _driveMarker=":";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _protocolMarker="://";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _root;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _webSeparator="/";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DirectorySeparator=_webSeparator;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Combine=function(path1,path2){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path1==undefined||!Object.IsType(Function,path1.toString))throw new Error("System.IO.Path.Combine: 'path1' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path2==undefined||!Object.IsType(Function,path2.toString))throw new Error("System.IO.Path.Combine: 'path2' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path1=this.Normalize(path1);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path2=this.Normalize(path2);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(String.EndsWith(path1,this.DirectorySeparator))path1=path1.slice(0,-1);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(String.StartsWith(path2,this.DirectorySeparator))path2=path2.slice(1);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return [path1,path2].join(path1&&path2&&this.DirectorySeparator||'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFileName=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.Path.GetFileName: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=this.Normalize(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return path.substring(path.lastIndexOf(this.DirectorySeparator)+1,path.length);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFullPath=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.Path.GetFullPath: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var pathHasProtocol=String.Contains(path,_protocolMarker);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=this.Normalize(path,pathHasProtocol&&_webSeparator);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var root=this.GetRoot();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var rootHasProtocol=String.Contains(root,_protocolMarker);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(rootHasProtocol)root=this.Normalize(root,_webSeparator);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(String.Contains(root,_driveMarker)||rootHasProtocol||String.StartsWith(root,this.DirectorySeparator)||!String.StartsWith(path,root)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!String.Contains(path,_driveMarker)&&!pathHasProtocol&&!String.StartsWith(path,this.DirectorySeparator)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                return this.Combine(root,path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return path;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetPath=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.Path.GetPath: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=this.Normalize(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path.lastIndexOf(this.DirectorySeparator)>-1)return path.substr(0,path.lastIndexOf(this.DirectorySeparator));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return path;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Normalize=function(path,separator){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.Path.Normalize: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return path.toString().replace(/[\\\/]/gm,separator||this.DirectorySeparator);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SetRoot=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.Path.SetRoot: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=this.Normalize(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var separator=this.DirectorySeparator;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path.indexOf(separator)>-1){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var parts=path.split(separator);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var last=parts[parts.length-1];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!last||(last.indexOf('.')>-1&&!System.IO.Directory.Exists(path)))parts.length--;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _root=parts.join(separator)+separator;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }else _root=path+separator;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.IDirectoryStrategy=new function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _strategyManager;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Strategies;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Strategies=_strategyManager=new System.Script.Strategy.StrategyManager();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    Directory.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.Directory.Exists: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=path.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return _strategyManager.Get(this).Exists(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            throw new Error(String.Format("System.IO.Directory.Exists: {0}",e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.Directory.GetFiles: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=path.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                return sort(_strategyManager.Get(this).GetFiles(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                throw new Error(String.Format("System.IO.Directory.GetFiles: {0}",e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.Directory.GetDirectories: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=path.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                return sort(_strategyManager.Get(this).GetDirectories(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                throw new Error(String.Format("System.IO.Directory.GetDirectories: {0}",e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function pathSorter(a,b){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!a)return -1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        a=a.toLowerCase();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        b=b.toLowerCase();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!a||a<b)return -1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!b||a>b)return 1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function sort(paths){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Array,paths))return paths;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return paths.sort(pathSorter);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.constructor.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.Directory');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.FileSystemObject=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!path)return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fso=new ActiveXObject("Scripting.FileSystemObject");    
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return fso.FolderExists(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fso=new ActiveXObject("Scripting.FileSystemObject");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var directory=fso.GetFolder(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var files=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var fileList=new Enumerator(directory.Files);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(; !fileList.atEnd(); fileList.moveNext())files.push(fileList.item().Path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fso=new ActiveXObject("Scripting.FileSystemObject");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var directory=fso.GetFolder(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var directories=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var directoryList=new Enumerator(directory.SubFolders);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(; !directoryList.atEnd(); directoryList.moveNext())directories.push(directoryList.item().Path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.FileSystemObject.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.DirectoryStrategy.FileSystemObject');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.FileSystemObject.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.DirectoryStrategy.FileSystemObject');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(System.IO.DirectoryStrategy.FileSystemObject); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Rhino=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!!path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var file=new java.io.File(System.IO.Path.Normalize(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var files=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var directory=new java.io.File(System.IO.Path.Normalize(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var fileList=directory.listFiles();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var i=0;i<fileList.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    files.push(fileList[i].getAbsolutePath()+'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var directories=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var directory=new java.io.File(System.IO.Path.Normalize(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var directoryList=directory.listFiles();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var i=0;i<directoryList.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    directories.push(directoryList[i].getAbsolutePath()+'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (typeof(java)!='undefined' && typeof(environment)!='undefined' && typeof(defineClass)=="function" && typeof(loadClass)=="function");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Rhino.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.DirectoryStrategy.Rhino');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Rhino.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.DirectoryStrategy.Rhino');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(System.IO.DirectoryStrategy.Rhino); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy.SpiderMonkey");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.SpiderMonkey.Posix=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return !!path&&System.Environment.Execute("sh",["-c",String.Format("\"test -d {0} && echo 1 || echo 0\"",normalizePath(path))])==1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return String.Trim(System.Environment.Execute("find", [normalizePath(path),"-maxdepth","1","-type","f","-print"])).split("\n");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var directories=String.Trim(System.Environment.Execute("find", [normalizePath(path),"-maxdepth","1","-type","d","-print"])).split("\n");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<directories.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(directories[i]==path)directories.splice(i--,1);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(typeof(system)!='undefined' && typeof(version)!='undefined' && typeof(snarf)!="undefined"){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var exitCode=system("uname > NUL 2>&1");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function normalizePath(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return String.Format("'{0}'",path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.SpiderMonkey.Posix.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.DirectoryStrategy.SpiderMonkey.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.SpiderMonkey.Posix.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.DirectoryStrategy.SpiderMonkey.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(System.IO.DirectoryStrategy.SpiderMonkey.Posix); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy.SpiderMonkey");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.SpiderMonkey.Windows=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!path||System.Environment.Execute("cmd", ["/C",String.Format("IF NOT EXIST \"{0}\" (ECHO 1)",path)])==1)return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.Environment.Execute("cmd", ["/C",String.Format("\"2>NUL PUSHD \"\"{0}\"\" && (POPD&ECHO 1) || (ECHO 0)\"",escapePath(path))])==1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return get(path, false);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return get(path, true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(typeof(system)!='undefined' && typeof(version)!='undefined' && typeof(snarf)!="undefined"){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var exitCode=system("ver > NUL 2>&1");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    System.IO.Path.DirectorySeparator="\\";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function escapePath(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (path||'').replace(/\&/g,"^&");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function get(path,directories){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=System.IO.Path.GetFullPath(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var items=String.Trim(System.Environment.Execute("cmd", ["/C",String.Format("for {1}%a in (\"{0}\") do @echo %a",System.IO.Path.Combine(path,"*"),directories?"/d ":'')])).split("\n");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<items.length;i++)items[i]=String.Trim(items[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.SpiderMonkey.Windows.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.DirectoryStrategy.SpiderMonkey.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.SpiderMonkey.Windows.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.DirectoryStrategy.SpiderMonkey.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(System.IO.DirectoryStrategy.SpiderMonkey.Windows); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy.V8");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.V8.Posix=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return !!path&&System.Environment.Execute("sh", ["-c",String.Format("test -d \"{0}\" && echo 1 || echo 0",path)])==1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return String.Trim(System.Environment.Execute("find", [path,"-maxdepth","1","-type","f","-print"])).split("\n");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var directories=String.Trim(System.Environment.Execute("find", [path,"-maxdepth","1","-type","d","-print"])).split("\n");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<directories.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(directories[i]==path)directories.splice(i--,1);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                os.system("uname");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.V8.Posix.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.DirectoryStrategy.V8.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.V8.Posix.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.DirectoryStrategy.V8.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(System.IO.DirectoryStrategy.V8.Posix); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy.V8");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.V8.Windows=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!path||System.Environment.Execute("cmd", ["/C",String.Format("IF NOT EXIST \"{0}\" (ECHO 1)",escapePath(path))])==1)return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.Environment.Execute("cmd", ["/C",String.Format("2>NUL PUSHD \"{0}\" && (POPD&ECHO 1) || (ECHO 0)",escapePath(path))])==1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return get(path, false);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return get(path, true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                System.IO.Path.DirectorySeparator="\\";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function escapePath(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (path||'').replace(/\&/g,"^&");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function get(path,directories){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=System.IO.Path.GetFullPath(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var items=String.Trim(System.Environment.Execute("cmd", ["/C",String.Format("for {1}%a in (\"{0}\") do @echo %a",System.IO.Path.Combine(path,"*"),directories?"/d ":'')])).split("\n");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<items.length;i++)items[i]=String.Trim(items[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.V8.Windows.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.DirectoryStrategy.V8.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.V8.Windows.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.DirectoryStrategy.V8.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(System.IO.DirectoryStrategy.V8.Windows); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Xhr=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=System.IO.Path.GetFullPath(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var transport=getTransport();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.open('HEAD',String.Format("{0}?type=directory&path={1}",getTarget(),encodeURIComponent(path)),false);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.send();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!transport.status||transport.status==200)return true;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getList("files",path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getList("directories",path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getTransport()!=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getList(type,path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=System.IO.Path.GetFullPath(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var transport=getTransport();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(transport.overrideMimeType)transport.overrideMimeType("text/plain");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.open('GET',String.Format("{0}?type={1}&path={2}",getTarget(),encodeURIComponent(type),encodeURIComponent(path)),false);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.send();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!transport.status||transport.status==200){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var list=String.Trim(transport.responseText).split('\n');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var i=list.length-1;i>=0;i--){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getTarget(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!System.IO.DirectoryStrategy.Xhr.ResourceUri)throw new Error("'System.IO.DirectoryStrategy.Xhr.ResourceUri' must be set before invoking IDirectoryStrategy methods. Choose a resource type (.aspx, .jsp, .php) from XhrResource.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.DirectoryStrategy.Xhr.ResourceUri;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getTransport(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Xhr.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.DirectoryStrategy.Xhr');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Xhr.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.DirectoryStrategy.Xhr');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(System.IO.DirectoryStrategy.Xhr); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.IFileStrategy=new function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _strategyManager;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Strategies;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Strategies=_strategyManager=new System.Script.Strategy.StrategyManager();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    File.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.File.DeleteFile: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=path.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                return _strategyManager.Get(this).DeleteFile(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                throw new Error(String.Format("System.IO.File.DeleteFile: {0}",e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.File.Exists: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=path.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return _strategyManager.Get(this).Exists(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            throw new Error(String.Format("System.IO.File.Exists: {0}",e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.File.GetFile: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=path.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return _strategyManager.Get(this).GetFile(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            throw new Error(String.Format("System.IO.File.GetFile: {0}",e));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(path==undefined||!Object.IsType(Function,path.toString))throw new Error("System.IO.File.SaveFile: 'path' must be convertible to String.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        path=path.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _strategyManager.Get(this).SaveFile(path,text+'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.constructor.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.File'); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.FileSystemObject=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _unicodeRegex=/[^\u0000-\u00ff]/;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fso=new ActiveXObject("Scripting.FileSystemObject");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return fso.DeleteFile(path,true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fso=new ActiveXObject("Scripting.FileSystemObject");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return fso.FileExists(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var text=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fso=new ActiveXObject("Scripting.FileSystemObject");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var file=fso.FileExists(path)&&fso.GetFile(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var stream=file.OpenAsTextStream(1);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var BOM='';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                if(!stream.AtEndOfStream)BOM=stream.Read(3);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                if(!stream.AtEndOfStream)BOM=stream.ReadAll();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            switch(BOM.charCodeAt(0)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                case 0xFF:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    if(BOM.charCodeAt(1)==0xFE){ 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        //UTF-16 little-endian
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        stream.Close();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        stream=file.OpenAsTextStream(1,-1);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                case 0xFE:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    if(BOM.charCodeAt(1)==0xFF){ 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        //UTF-16 big-endian
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        stream.Close();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        stream=file.OpenAsTextStream(1,-1);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                case 0xEF:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    if(BOM.charCodeAt(1)==0xBB&&BOM.charCodeAt(2)==0xBF){ 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        stream.Close();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        stream=new ActiveXObject("ADODB.Stream");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        stream.CharSet="UTF-8";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        stream.Open();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        stream.LoadFromFile(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        text=stream.ReadText();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                default: 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(typeof(stream.ReadAll)!="undefined"&&!stream.AtEndOfStream){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                text=(text||'')+stream.ReadAll();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            stream.Close();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fso=new ActiveXObject("Scripting.FileSystemObject");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var file=fso.CreateTextFile(path, true, _unicodeRegex.test(text));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.FileSystemObject.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.FileStrategy.FileSystemObject');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.FileSystemObject.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.FileStrategy.FileSystemObject');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(System.IO.FileStrategy.FileSystemObject); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Rhino=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _unicodeRegex=/[^\u0000-\u00ff]/;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var file=new java.io.File(System.IO.Path.Normalize(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!!path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var file=new java.io.File(System.IO.Path.Normalize(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return readFile(System.IO.Path.Normalize(path),"UTF-8")+'';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fileWriter=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                fileWriter=new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(System.IO.Path.Normalize(path)), "UTF-8"));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                fileWriter=new java.io.FileWriter(new java.io.File(System.IO.Path.Normalize(path)));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e) {
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }finally{
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (typeof(java)!='undefined' && typeof(environment)!='undefined' && typeof(defineClass)=="function" && typeof(loadClass)=="function");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Rhino.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.FileStrategy.Rhino');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Rhino.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.FileStrategy.Rhino');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(System.IO.FileStrategy.Rhino); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy.SpiderMonkey");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.SpiderMonkey.Posix=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _bufferSize=100000;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _unicodeRegex=/[^\u0000-\u00ff]/;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return system(String.Format("rm -f '{0}'",escapePath(path)));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.Environment.Execute("sh", ["-c",String.Format("\"test -f '{0}' && echo 1 || echo 0\"",escapePath(path))])==1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return read(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.DeleteFile(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return System.Environment.Execute("touch",[String.Format("'{0}'",escapePath(path))],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var chunks=Math.ceil(text.length/_bufferSize);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<chunks;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var index=i*_bufferSize;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var chunk=text.slice(index,index+_bufferSize);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                System.Environment.Execute("sh", ["-c",String.Format("\"printf '\\{1}'\" >> '{0}'",escapePath(path),convertToUtf8(chunk).join("\\"))],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                System.Environment.Execute("sh", ["-c",String.Format("cat >> '{0}' << '_EOF_'\n{1}\n_EOF_",escapePath(path),chunk)],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                System.Environment.Execute("perl", ["-pi","-e","'chomp if eof'",String.Format("'{0}'",escapePath(path))],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(typeof(system)!='undefined' && typeof(version)!='undefined' && typeof(snarf)!="undefined"){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var exitCode=system("uname > NUL 2>&1");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var output=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<text.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var char=text.charCodeAt(i);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(char<0x80)output.push(char.toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            else if(char<0x800){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                output.push((0xC0|(char>>6)).toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                output.push((0x80|(char&0x3F)).toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }else if(char<0xD800||char>=0xE000){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                output.push((0xE0|(char>>12)).toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                output.push((0x80|((char>>6)&0x3F)).toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                output.push((0x80|(char&0x3F)).toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                char=((char&0x3FF)<<10)|(text.charCodeAt(++i)&0x3FF)+0x10000;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                output.push((0xF0|(char>>18)).toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                output.push((0x80|((char>>12)&0x3F)).toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                output.push((0x80|((char>>6)&0x3F)).toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                output.push((0x80|(char&0x3F)).toString(8));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function escapePath(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (path||'').replace(/'/g,"'\\''");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.SpiderMonkey.Posix.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.FileStrategy.SpiderMonkey.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.SpiderMonkey.Posix.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.FileStrategy.SpiderMonkey.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(System.IO.FileStrategy.SpiderMonkey.Posix); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy.SpiderMonkey");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.SpiderMonkey.Windows=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _bufferSize=7900;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return system("del /F "+String.Format("\"{0}\"",System.IO.Path.Normalize(path)));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(System.Environment.Execute("cmd", ["/C",String.Format("IF NOT EXIST \"{0}\" (ECHO 1)",path)])==1)return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.Environment.Execute("cmd", ["/C",String.Format("\"2>NUL PUSHD \"\"{0}\"\" && (POPD&ECHO 0) || (echo 1)\"",escapePath(path))])==1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return read(System.IO.Path.Normalize(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:// Unicode BOM attempt
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js://                System.Environment.Execute("cmd", ["/D","/A","/C",String.Format("CHCP 1252 >NUL & (SET/P={0}{1})<NUL >\"{2}\" 2>NUL",String.fromCharCode(0xFF),String.fromCharCode(0xFE),path)],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js://            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.DeleteFile(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(text==undefined||String.IsEmpty(text))return System.Environment.Execute("cmd", ["/C",String.Format("ECHO. 2>\"{0}\">NUL",path)],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var chunks=Math.ceil(text.length/_bufferSize);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<chunks;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var index=i*_bufferSize;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var chunk=text.slice(index,index+_bufferSize);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var lines=chunk.split(System.Environment.GetNewLine());
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var j=0;j<lines.length;j++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    if(j)System.Environment.Execute("cmd", ["/C",String.Format("ECHO.>>\"{0}\"",path)],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    System.Environment.Execute("cmd", ["/C",String.Format("ECHO|SET /P=\"{0}\">>\"{1}\"",lines[j].replace(/"/g,'""'),path)],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(typeof(system)!='undefined' && typeof(version)!='undefined' && typeof(snarf)!="undefined"){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var exitCode=system("ver > NUL 2>&1");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    System.IO.Path.DirectorySeparator="\\";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function escapePath(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (path||'').replace(/\&/g,"^&");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.SpiderMonkey.Windows.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.FileStrategy.SpiderMonkey.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.SpiderMonkey.Windows.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.FileStrategy.SpiderMonkey.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(System.IO.FileStrategy.SpiderMonkey.Windows); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy.V8");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.V8.Posix=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _bufferSize=100000;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return System.Environment.Execute("rm",["-f",path]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.Environment.Execute("sh", ["-c",String.Format("test -f \"{0}\" && echo 1 || echo 0",path)])==1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return read(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.DeleteFile(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return System.Environment.Execute("touch",[path],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var chunks=Math.ceil(text.length/_bufferSize);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<chunks;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var index=i*_bufferSize;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            System.Environment.Execute("sh", ["-c",String.Format("cat >> \"{0}\" <<'_EOF_'\n{1}\n_EOF_",path,text.slice(index,index+_bufferSize))]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            System.Environment.Execute("perl", ["-pi","-e","chomp if eof",path]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                os.system("uname");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.V8.Posix.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.FileStrategy.V8.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.V8.Posix.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.FileStrategy.V8.Posix');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(System.IO.FileStrategy.V8.Posix); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy.V8");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.V8.Windows=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _bufferSize=7900;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _unicodeRegex=/[^\u0000-\u00ff]/;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return System.Environment.Execute("del",["/F",String.Format("\"{0}\"",System.IO.Path.Normalize(escapePath(path)))]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(System.Environment.Execute("cmd", ["/C",String.Format("IF NOT EXIST \"{0}\" (ECHO 1)",escapePath(path))])==1)return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.Environment.Execute("cmd", ["/C",String.Format("2>NUL PUSHD \"{0}\" && (POPD&ECHO 0) || (echo 1)",escapePath(path))])==1;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return read(System.IO.Path.Normalize(path));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:// Unicode BOM attempt
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js://                System.Environment.Execute("cmd", ["/D","/A","/C",String.Format("CHCP 1252 >NUL & (SET/P={0}{1})<NUL >\"{2}\" 2>NUL",String.fromCharCode(0xFF),String.fromCharCode(0xFE),path)],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js://            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.DeleteFile(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(text==undefined||String.IsEmpty(text))return System.Environment.Execute("cmd", ["/C",String.Format("ECHO. 2>\"{0}\">NUL",escapePath(path))],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var chunks=Math.ceil(text.length/_bufferSize);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<chunks;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var index=i*_bufferSize;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var chunk=text.slice(index,index+_bufferSize);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var lines=chunk.split(System.Environment.GetNewLine());
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var j=0;j<lines.length;j++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                if(j)System.Environment.Execute("cmd", ["/C",String.Format("ECHO.>>\"{0}\"",escapePath(path))],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        System.Environment.Execute("cmd", ["/U /C",String.Format("<NUL SET /P =\"{0}\" >> \"{1}\"",escapeLine(lines[j]),escapePath(path))],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        System.Environment.Execute("cmd", ["/C",String.Format("<NUL SET /P =\"{0}\" >> \"{1}\"",escapeLine(lines[j]),escapePath(path))],true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                System.IO.Path.DirectorySeparator="\\";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function escapeLine(line){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (line||'').replace(/\^/g,'^^^').replace(/([|<>])/g,'^$1').replace(/"/g,"\"\"")
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function escapePath(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (path||'').replace(/\^/g,'^^').replace(/&/g,'^&');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.V8.Windows.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.FileStrategy.V8.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.V8.Windows.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.FileStrategy.V8.Windows');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(System.IO.FileStrategy.V8.Windows); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Xhr=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var transport=getTransport();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(transport.overrideMimeType)transport.overrideMimeType("text/plain");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.open('DELETE',getTarget(),false);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.send(String.Format("path={0}",encodeURIComponent(System.IO.Path.GetFullPath(path))));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!transport.status||transport.status==200)return transport.responseText;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var transport=getTransport();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.open('HEAD',String.Format("{0}?type=file&path={1}",getTarget(),encodeURIComponent(System.IO.Path.GetFullPath(path))),false);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.send();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!transport.status||transport.status==200)return true;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var transport=getTransport();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(transport.overrideMimeType)transport.overrideMimeType("text/plain");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.open('GET',String.Format("{0}?type=file&path={1}",getTarget(),encodeURIComponent(System.IO.Path.GetFullPath(path))),false);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.send();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!transport.status||transport.status==200)return transport.responseText;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var transport=getTransport();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(transport.overrideMimeType)transport.overrideMimeType("text/plain");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.open('POST',getTarget(),false);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        transport.send(String.Format("type=file&path={0}&content={1}",encodeURIComponent(System.IO.Path.GetFullPath(path)),encodeURIComponent(text)||''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!transport.status||transport.status==200)return transport.responseText;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getTransport()!=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getTarget(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!System.IO.FileStrategy.Xhr.ResourceUri)throw new Error("'System.IO.FileStrategy.Xhr.ResourceUri' must be set before invoking IFileStrategy methods.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.FileStrategy.Xhr.ResourceUri;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getTransport(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Xhr.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.FileStrategy.Xhr');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Xhr.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.FileStrategy.Xhr');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(System.IO.FileStrategy.Xhr); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.ScriptLoader=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _attributeParser;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _events=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _defaultExtensions=['.js'];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function ScriptLoader(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _attributeParser=new System.Script.Attributes.AttributeParser();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Events=_events=new System.Event.EventManager("Loading","Success","Error","Loaded");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    ScriptLoader.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetScriptList=function(pathList,extensions){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Array,pathList))throw new Error("xUnit.js.Console.ScriptLoader.GetScriptList: 'pathList' must be an array of valid file or Directory paths.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Array,extensions))extensions=_defaultExtensions;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var context={Extensions:extensions,ScriptList:[]}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(pathList,addDirectory,directoryPredicate,context);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(pathList,addScript,scriptPredicate,context);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.LoadScripts=function(scriptList){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Array,scriptList))throw new Error("xUnit.js.Console.ScriptLoader.LoadScripts: 'scriptList' must be an array of valid file paths.");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(scriptList,loadScript);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _events.Fire("Loaded",{ScriptList:scriptList});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function addDirectory(path,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var directoryContext={Extensions:context.Extensions,ScriptList:context.ScriptList};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var directories=System.IO.Directory.GetDirectories(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(directories)Array.ForEach(directories,addDirectory,null,directoryContext);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var files=System.IO.Directory.GetFiles(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(files)Array.ForEach(files,addScript,scriptPredicate,directoryContext);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function addScript(path,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        context.ScriptList.push(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function loadScript(path,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var filePath=System.IO.Path.GetFullPath(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!System.IO.File.Exists(filePath))return;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var root=System.IO.Path.GetRoot();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.IO.Path.SetRoot(System.IO.Path.GetPath(filePath));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var timeStamp=new Date();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _events.Fire("Loading",{Path:filePath});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var scriptText=System.IO.File.GetFile(filePath);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            scriptText=_attributeParser.Parse(scriptText);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            scriptText=String.Format("{0}\n//@ sourceURL={1}",scriptText,filePath.replace(/\s/g,'_'));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            System.Script.ScriptLoader.Load(scriptText);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _events.Fire("Success",{Path:filePath,Duration:new Date()-timeStamp});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _events.Fire("Error",{Path:filePath,Duration:new Date()-timeStamp,Error:e});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.IO.Path.SetRoot(root);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Predicates
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function directoryPredicate(path,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Directory.Exists(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function scriptPredicate(path,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<context.Extensions.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(String.EndsWith(path,context.Extensions[i]))return !directoryPredicate(path,context);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _count=0;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _durations;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _engine;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _exitCode;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _finished=false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _globalState={};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _isStrict;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _knownPollution={};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _output;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _scriptLoader;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _startTime;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _results={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        failures:[],
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _durations=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader=new xUnit.js.Console.ScriptLoader();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.Events.Add("Loading",ScriptLoader_Loading);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.Events.Add("Success",ScriptLoader_Success);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.Events.Add("Error",ScriptLoader_Error);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output=xUnit.js.Console.Output.OutputFormatter;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _engine=xUnit.js.Attributes.Engine.Instance;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.IO.Path.DirectorySeparator=System.Environment.GetWorkingDirectory().indexOf('\\')>-1?'\\':'/';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    if(this.constructor==xUnit.js.Console.Runner)Runner.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IRunnable Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var parameters=System.Environment.GetParameters();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _isStrict=parameters.named.strict!="false";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(parameters.unnamed.length>0){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                loadDependency(parameters.named.dependency);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                _output.SetLevel(_output.OutputLevels[parameters.named.verbose=="true"&&"verbose"]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                _output.SetType(parameters.named.output);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    setGlobalState();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    _finished=false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    loadScripts(parameters.unnamed,parameters.named.extensions);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    runAction(parameters.named.action,parameters.named.target||null,parameters.named.trait||null,parameters.named["-trait"]||null);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                }catch(error){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    _exitCode=0xBAE1; // BAIL: Runtime exception during script load or test run.
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    completeRun(true,String.Format("\nSystem Error:\n\t{0}\n",error));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                usage();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(criticalError){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _exitCode=0xDEAD; // DEAD: Game over, man.
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            completeRun(false,String.Format("\nCritical Error: {0}\n",criticalError));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function collectState(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var bothersomeMembers=["setTimeout","clearTimeout"];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return Object.GetKeys(Object.Global()).concat(bothersomeMembers);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!error)_output.CompleteRun(_results.success,_results.failures,_results.errors,_results.skipped,new Date()-_startTime);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function enumerateTests(target,trait,negativeTrait){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(_engine.Enumerate(target,trait,negativeTrait),enumerate);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function enumerate(model){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.Enumerate(model);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function factCompleted(fact){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var run={Component:fact,State:fact.State};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        switch(fact.State.Result){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Error:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                _exitCode=0xBAD; // BAD: Your test is bad and you should feel bad.
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Failure:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                _results.failures.push(run);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                _exitCode=0xFAE1; // FAIL: Your test has failed. Get well soon.
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Skipped:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Success:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    var pollution=findPollution();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        fact.State.Result=xUnit.js.Model.Result.Error;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        fact.State.Message=String.Format("Global state pollution detected: {0}", pollution.join(', '));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                        return factCompleted(fact);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var pollution=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var currentState=collectState();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<currentState.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var key=currentState[i];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(!_globalState[key]&&!_knownPollution[key]){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    _globalState[key]=true;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var entry=Object.Global()[key];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Function.IsNamespace(entry))return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var model=entry.GetModel();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(Object.IsType(xUnit.js.Model.Fixture,model)||Object.IsType(xUnit.js.Model.Fact,model))return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function loadDependency(dependency){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.Events.Remove("Success",ScriptLoader_Success);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.Events.Remove("Error",ScriptLoader_Error);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.Events.Add("Loaded",ScriptLoader_DependencyLoaded);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.IO.Path.SetRoot(System.Environment.GetWorkingDirectory());
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var dependencies=_scriptLoader.GetScriptList(dependency.split(','));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.LoadScripts(dependencies);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function loadScripts(pathList,extensions){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var timeStamp=new Date();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.BeginFileLoad();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.IO.Path.SetRoot(System.Environment.GetWorkingDirectory());
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var scriptList=_scriptLoader.GetScriptList(pathList,extensions);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var errors=_scriptLoader.LoadScripts(scriptList);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.CompleteFileLoad(scriptList,new Date()-timeStamp);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function runAction(action,target,trait,negativeTrait){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(String,action))action='';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        switch(action.toLowerCase()){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case 'enumerate':
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                enumerateTests(target,trait,negativeTrait);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case 'runtests':
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            default:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                runTests(target,trait,negativeTrait);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function runTests(target,trait,negativeTrait){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _startTime=new Date();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _durations.length=_results.success.length=_results.failures.length=_results.errors.length=_results.skipped.length=0;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _engine.Run(target,trait,negativeTrait);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function setGlobalState(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var keys=collectState();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var i=0;i<keys.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                _globalState[keys[i]]=true;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function usage(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var message=[
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "Usage:",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<environment> xUnit.js.Console.js [/action:<action>] [/extensions:<extensions>] [/output:<output>] [/strict:<strict>] [/target:<name>] [/-target:<name>] [/trait:<name>] [/-trait:<name>] [/verbose:<verbose>] [/dependency:<dependency>] <path>[ <path>...] ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<environment> The environment in which the tests are to be run.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "                - Google's V8 developer console (D8 executable)",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "                - Mozilla's SpiderMonkey console (js executable)",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "                - Mozilla's Rhino console (js.jar)",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<action>      The action to perform. Optional. Valid actions are ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              [Enumerate|RunTests]. If omitted, defaults to 'RunTests'.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<extensions>  A comma separated list of file extensions to include while",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              searching <path> for files to load. If omitted, defaults ", 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<output>      The desired output type. Optional. Valid outputs are ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              [Text|Xml|Json]. If omitted, defaults to 'Text'.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<strict>      Toggles strict mode on or off. Valid options are [true|false].",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              Optional. If 'true', fails files and facts that violate ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              Single-Assert or pollute the global namespace. If 'false', allows",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              multiple asserts per fact, and ignores global variables set in",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              files or facts. If omitted, defaults to 'true'.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<target>      The name of a fact, fixture, or partial namespace to run. ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              Optional. If omitted, runs all facts and fixtures found and ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              registered at <path>.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<trait>       The name, or comma separated list of names, of traits to run. ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              Optional. If omitted, runs all facts and fixtures found and ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              registered at <path>. If specified, runs only targets designated ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              with the matching trait attribute, e.g. '[Trait(\"trait\")]'.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<-trait>      The name, or comma separated list of names, of traits to skip. ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              Optional. If omitted, runs all facts and fixtures found and ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              registered at <path>. If specified, runs only targets not ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              designated with a matching trait attribute.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<verbose>     Toggles verbose mode on or off. Valid options are [true|false].",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              Optional. If 'true', includes additional information in output,",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              such as stack traces and file names. Defaults to false.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<dependency>  The path or comma separated list of paths to a script file or ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              directory containing dependencies to load before beginning the ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              test run. These files will load before any files in <path>,",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              and before any output is written.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<path>        The path or space separated list of paths to a script file or ",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "              directory containing files to load and parse for tests.",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "Examples:",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "  cscript xUnit.js.Console.js /action:Enumerate xUnit.js/Tests",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "  d8 - xUnit.js.Console.js -- /target:Test.xUnit.js.Console xUnit.js/Tests",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "  java -jar js.jar xUnit.js.Console.js /output:Xml xUnit.js/Tests",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(message.join('\n'));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.IsType(xUnit.js.Model.Fact,context.Component)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            factCompleted(context.Component);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.CompleteComponent(context.Component,new Date()-_durations.pop());
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _durations.push(new Date());
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.IsType(xUnit.js.Model.Fact,context.Component))_count++;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function ScriptLoader_DependencyLoaded(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.Events.Remove("Loaded",ScriptLoader_DependencyLoaded);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.Events.Add("Success",ScriptLoader_Success);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _scriptLoader.Events.Add("Error",ScriptLoader_Error);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function ScriptLoader_Error(context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _exitCode=0x10AD; // LOAD: script failed to load.
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.Error(String.Format("xUnit.js.Console.ScriptLoader.js: There was an error loading script '{0}'.\nError: {1}\n",context.Path,context.Error));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function ScriptLoader_Loading(context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _engine.CurrentFile=context.Path;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function ScriptLoader_Success(context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var pollution=findPollution();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                _output.Error(String.Format("Global state pollution detected in {0}: {1}", context.Path, pollution.join(', ')));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.FileLoadSuccess(context.Path,context.Duration);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Runner.Implement(xUnit.js.IRunnable,'xUnit.js.Console.Runner'); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.EnvironmentStrategy.JsdbStrategy=function(globalScope){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var result=system.execute(command,parameters);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var args={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            named:{},
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            unnamed:[]
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var params=system.arguments;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<params.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var param=String.Trim(params[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(String.StartsWith(param,'/')&&String.Contains(param,':')){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                param=String.TrimStart(param,'/').split(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                args.named[param[0].toLowerCase()]=param[1];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }else args.unnamed.push(param);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return args;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=0;i<arguments.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            write(arguments[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return typeof(system)!="undefined" && system.hasOwnProperty("release") && typeof(jsArguments)!="undefined";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.EnvironmentStrategy.JsdbStrategy.Implement(System.EnvironmentStrategy.IEnvironmentStrategy,'xUnit.js.Console.EnvironmentStrategy.JsdbStrategy');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.EnvironmentStrategy.JsdbStrategy.Implement(System.Script.Strategy.IStrategySpecification,'xUnit.js.Console.EnvironmentStrategy.JsdbStrategy');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(xUnit.js.Console.EnvironmentStrategy.JsdbStrategy); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Node=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var result=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        process.exec([command].concat(parameters).join(' '), function(error, stdout, stderr) { 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        process.reallyExit(errorCode);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var args={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            named:{},
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            unnamed:[]
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var params=process.argv;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        // First arg is node, second is js file
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=2;i<params.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var param=String.Trim(params[i]+'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(String.StartsWith(param,'/')&&String.Contains(param,':')){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                param=String.TrimStart(param,'/').split(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                args.named[param[0].toLowerCase()]=param.slice(1).join(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }else args.unnamed.push(param);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return args;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Path.Normalize(process.cwd());
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        process.stdout.write(Array.prototype.slice.call(arguments,0).join(''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.WriteError=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        process.stderr.write(Array.prototype.slice.call(arguments,0).join(''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return (Object.Global()==Object.Global().global&&typeof(process)!="undefined"&&typeof(require)=="function");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Node.Implement(System.EnvironmentStrategy.IEnvironmentStrategy,'System.EnvironmentStrategy.Node');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Node.Implement(System.Script.Strategy.IStrategySpecification,'System.EnvironmentStrategy.Node');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(System.EnvironmentStrategy.Node);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.EnvironmentStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Phantom=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var system=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var process=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IEnvironmentStrategy members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Execute=function(command,parameters,voidOutput){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var result=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        process.execFile(command, parameters, null, function (err, stdout, stderr){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        phantom.exit(errorCode);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetParameters=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var args={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            named:{},
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            unnamed:[]
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var params=system.args;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        // First arg is js file
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var i=1;i<params.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var param=String.Trim(params[i]+'');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(String.StartsWith(param,'/')&&String.Contains(param,':')){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                param=String.TrimStart(param,'/').split(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                args.named[param[0].toLowerCase()]=param.slice(1).join(':');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            }else args.unnamed.push(param);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return args;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return System.IO.Path.Normalize(require('fs').workingDirectory);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Write=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        system.stdout.write(Array.prototype.slice.call(arguments,0).join(''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.WriteError=function(message1,message2,messageN){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        system.stderr.write(Array.prototype.slice.call(arguments,0).join(''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(typeof(phantom)!="undefined"&&typeof(require)=="function"){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            System.Script.ScriptLoader.Strategies.Remove(System.Script.ScriptLoadStrategy.Dom);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Phantom.Implement(System.EnvironmentStrategy.IEnvironmentStrategy,'System.EnvironmentStrategy.Phantom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.EnvironmentStrategy.Phantom.Implement(System.Script.Strategy.IStrategySpecification,'System.EnvironmentStrategy.Phantom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.Environment.Strategies.Add(System.EnvironmentStrategy.Phantom,0);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console.IO.DirectoryStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.IO.DirectoryStrategy.Jsdb=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Delete=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return system.remove(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var attributes=system.attributes(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(attributes)attributes=attributes.attributes;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return String.Contains(attributes||'','directory',true);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:		var files=system.files(System.IO.Path.Combine(path,'*.*'));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:		for(var i=0;i<files.length;i++)files[i]=System.IO.Path.Combine(path,files[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:		var directories=system.folders(System.IO.Path.Combine(path,'*'));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:		for(var i=0;i<directories.length;i++)directories[i]=System.IO.Path.Combine(path,directories[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return typeof(system)!="undefined" && system.hasOwnProperty("release") && typeof(jsArguments)!="undefined";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.IO.DirectoryStrategy.Jsdb.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'xUnit.js.Console.IO.DirectoryStrategy.Jsdb');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.IO.DirectoryStrategy.Jsdb.Implement(System.Script.Strategy.IStrategySpecification,'xUnit.js.Console.IO.DirectoryStrategy.Jsdb');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(xUnit.js.Console.IO.DirectoryStrategy.Jsdb); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Node=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var fs=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!!path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return fs.existsSync(path)&&fs.statSync(path).isDirectory();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var files=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var fileList=fs.readdirSync(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var i=0;i<fileList.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var absolutePath=System.IO.Path.Combine(path,fileList[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                if(fs.statSync(absolutePath).isFile()){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    files.push(absolutePath);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var directories=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var directoryList=fs.readdirSync(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var i=0;i<directoryList.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var absolutePath=System.IO.Path.Combine(path,directoryList[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                if(fs.statSync(absolutePath).isDirectory()){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    directories.push(absolutePath);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.Global()==Object.Global().global&&typeof(process)!="undefined"&&typeof(require)=="function"){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Node.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.DirectoryStrategy.Node');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Node.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.DirectoryStrategy.Node');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(System.IO.DirectoryStrategy.Node); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.DirectoryStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Phantom=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var fs=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IDirectoryStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!!path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return fs.exists(path)&&fs.isDirectory(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFiles=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var files=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var fileList=fs.list(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var i=0;i<fileList.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var absolutePath=System.IO.Path.Combine(path,fileList[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                if(fs.isFile(absolutePath)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    files.push(absolutePath);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetDirectories=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var directories=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var directoryList=fs.list(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            for(var i=0;i<directoryList.length;i++){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                var absolutePath=System.IO.Path.Combine(path,directoryList[i]);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                if(fs.isDirectory(absolutePath)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                    directories.push(absolutePath);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(typeof(phantom)!="undefined"&&typeof(require)=="function"){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Phantom.Implement(System.IO.DirectoryStrategy.IDirectoryStrategy,'System.IO.DirectoryStrategy.Phantom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.DirectoryStrategy.Phantom.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.DirectoryStrategy.Phantom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.Directory.Strategies.Add(System.IO.DirectoryStrategy.Phantom,0); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Node=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _bufferSize=1024*1024;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var fs=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            fs.unlinkSync(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!!path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return fs.existsSync(path)&&fs.statSync(path).isFile();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return fs.readFileSync(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        fs.writeFileSync(path,text);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(Object.Global()==Object.Global().global&&typeof(process)!="undefined"&&typeof(require)=="function"){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Node.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.FileStrategy.Node');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Node.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.FileStrategy.Node');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(System.IO.FileStrategy.Node); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("System.IO.FileStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Phantom=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var fs=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:           fs.remove(path);        
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!!path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return fs.exists(path)&&fs.isFile(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(this.Exists(path)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            return fs.read(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        fs.write(path,text,"w");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(typeof(phantom)!="undefined"&&typeof(require)=="function"){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return false;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Phantom.Implement(System.IO.FileStrategy.IFileStrategy,'System.IO.FileStrategy.Phantom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.FileStrategy.Phantom.Implement(System.Script.Strategy.IStrategySpecification,'System.IO.FileStrategy.Phantom');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(System.IO.FileStrategy.Phantom,0); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console.IO.FileStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.IO.FileStrategy.Stream=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(input.charCodeAt(1)==0xBB&&input.charCodeAt(2)==0xBF){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IFileStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.DeleteFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return system.remove(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Exists=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return system.exists(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.GetFile=function(path){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fileText=null;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var file=new Stream(path);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                fileText=file.readText();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        }catch(e){}
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.SaveFile=function(path,text){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:		var file=new Stream(path,"wt+");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return typeof(Stream)!='undefined';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.IO.FileStrategy.Stream.Implement(System.IO.FileStrategy.IFileStrategy,'xUnit.js.Console.IO.FileStrategy.Stream');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.IO.FileStrategy.Stream.Implement(System.Script.Strategy.IStrategySpecification,'xUnit.js.Console.IO.FileStrategy.Stream');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:System.IO.File.Strategies.Add(xUnit.js.Console.IO.FileStrategy.Stream); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console.Output");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.IOutputStrategy=new function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.BeginFileLoad=function(){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.FileLoadSuccess=function(file,duration){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteFileLoad=function(files,duration){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteRun=function(successes,failures,errors,skipped,duration){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteComponent=function(component,duration){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Enumerate=function(component){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console.Output");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputFormatter=new function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _candidate;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _level;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _levels={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        compact:"compact",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _strategyManager;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _types={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Strategies;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function OutputFormatter(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _candidate=_types.text;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _level=_levels.compact;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Strategies=_strategyManager=new System.Script.Strategy.StrategyManager();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    OutputFormatter.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            level=level.toString().toLowerCase();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            type=type.toString().toLowerCase();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(_types[type])_candidate=_types[type];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IOutputStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().Prologue();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().Epilogue();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.BeginFileLoad=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().BeginFileLoad();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.FileLoadSuccess=function(file,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().FileLoadSuccess(file,duration);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteFileLoad=function(files,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().CompleteFileLoad(files,duration);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().BeginRun();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteRun=function(successes,failures,errors,skipped,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().CompleteRun(successes,failures,errors,skipped,duration);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().BeginComponent(component);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteComponent=function(component,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().CompleteComponent(component,duration);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Enumerate=function(component){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().Enumerate(component);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return getOutputStrategy().Error(error);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getOutputStrategy(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return _strategyManager.Get(_candidate,false,{OutputLevel:_level});
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputFormatter.constructor.Implement(xUnit.js.Console.Output.IOutputStrategy,'xUnit.js.Console.Output.OutputFormatter'); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console.Output.OutputStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputStrategy.Json=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _output;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IOutputStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            facts:[]
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(new System.Script.ObjectSerializer().Serialize(_output));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.BeginFileLoad=function(){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.FileLoadSuccess=function(file,duration){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteFileLoad=function(files,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(files,listFile);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.files.duration=duration/1000;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.facts.length=0;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            failures:0,
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            duration:0,
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            timestamp:new Date()
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteRun=function(successes,failures,errors,skipped,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var count=successes.length+failures.length+errors.length+skipped.length;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.run.failures=failures.length;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.run.duration=duration/1000;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Array.ForEach(errors,listError);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(failures.length){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            _output.run.failures=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Array.ForEach(failures,listFailure);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Array.ForEach(skipped,listSkipped);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteComponent=function(component,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(xUnit.js.Model.Fact,component))return;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.facts.push({
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            path:getPath(component),
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            result:getResult(component.State.Result),
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            message:component.State.Message||'',
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            duration:duration/1000
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Enumerate=function(component){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.facts.push({
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            path:getPath(component)
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var output={message:error+''};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(error.stackTrace||error.stack||error.getStack)output.stack=error.stackTrace||error.stack||error.getStack();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return String.Equals(xUnit.js.Console.Output.OutputFormatter.OutputTypes.json,candidate);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getPath(fact){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return fact.GetPath().split('.').slice(1).join('.');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Error:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Failure:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                return "Failure";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Skipped:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Success:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return this.OutputLevel==xUnit.js.Console.Output.OutputFormatter.OutputLevels.verbose;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    isVerbose=Function.GetDelegate(isVerbose,this);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            index:run.State.Index,
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            path:getPath(run.Component),
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            type:run.State.Message&&run.State.Message.name||"Exception",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            message:run.State.Message||"[no message]"
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            path:file
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function listFailure(run,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.run.failures.push({
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            index:run.State.Index,
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            path:getPath(run.Component),
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            type:run.State.Message&&run.State.Message.name||"Exception",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            message:run.State.Message||"[no message]"
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        _output.run.failures.push({
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            path:getPath(run.Component),
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            message:run.State.Message||"[no message]"
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputStrategy.Json.Implement(xUnit.js.Console.Output.IOutputStrategy,'xUnit.js.Console.Output.OutputStrategy.Json');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputStrategy.Json.Implement(System.Script.Strategy.IStrategySpecification,'xUnit.js.Console.Output.OutputStrategy.Json');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputFormatter.Strategies.Add(xUnit.js.Console.Output.OutputStrategy.Json);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console.Output.OutputStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputStrategy.Text=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _errors=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IOutputStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.BeginFileLoad=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var startTime=new Date();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write("\nLoading Scripts:\n");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.FileLoadSuccess=function(file,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteFileLoad=function(files,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("Finished Loading Scripts in {0}.\n",formatDuration(duration)));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteRun=function(successes,failures,errors,skipped,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(failures.length){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            System.Environment.Write("\nFailed Tests:\n");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Array.ForEach(failures,reportFailure);            
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Array.ForEach(errors,reportFailure);            
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Array.ForEach(_errors,reportError);            
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            Array.ForEach(skipped,reportSkipped);            
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var count=successes.length+failures.length+errors.length+skipped.length;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var issues=failures.length+errors.length+_errors.length;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("Total tests: {0}, Errors: {1}, Failures: {2}, Skipped: {3}, Time: {4}\n\n",count,errors.length+_errors.length,failures.length,skipped.length,formatDuration(duration)));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteComponent=function(component,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(xUnit.js.Model.Fact,component))return;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var result='';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        switch(component.State.Result){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Error:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Failure:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Skipped:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Success:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                break;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Enumerate=function(component){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(getPath(component));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return String.Equals(xUnit.js.Console.Output.OutputFormatter.OutputTypes.text,candidate);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods    
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function formatDuration(duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(Number,duration))return "an unknown amount of time";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        duration=duration/1000;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var components={
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                format:"{0} hour{1}",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                value:Math.floor(duration/60/60)
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                format:"{0} minute{1}",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                value:Math.floor(duration/60)%60
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                format:"{0} second{1}",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                value:duration%60
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var result=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        for(var x in components){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            var value=components[x].value;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(value||x=="seconds"&&!result.length)result.push(String.Format(components[x].format,value,value!=1?'s':''));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function formatError(error){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var errorText=error+'';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(error.line)errorText=String.Format("\n{0} (line: {1})",errorText,error.line);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(error.lineNumber)errorText=String.Format("\n{0} (line: {1})",errorText,error.lineNumber);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(error.number)errorText=String.Format("\n{0} (number: {1})",errorText,error.number);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(error.stackTrace||error.stack||error.getStack)errorText=String.Format("{0}\n\nStackTrace: {1}",errorText,error.stackTrace||error.stack||error.getStack());
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return errorText||"[no message]";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getPath(fact){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return fact.GetPath().split('.').slice(1).join('.');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return this.OutputLevel==xUnit.js.Console.Output.OutputFormatter.OutputLevels.verbose;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    isVerbose=Function.GetDelegate(isVerbose,this);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var fileName=file;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(String.StartsWith(fileName,workingDirectory)){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            fileName=fileName.substr(workingDirectory.length+1);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write('\n\t',fileName);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.WriteError(String.Format("\t{0}) {1}\n\n",context.Index+1,formatError(error)));    
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function reportFailure(run,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var msg=[
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            String.Format("{0}{1} -- {2}",getPath(run.Component),run.Component.Data?String.Format(":[{0}]",run.State.Index):'',run.State.Message&&run.State.Message.name||"Exception"),
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            isVerbose()?String.Format(" ({0}): ",run.Component.File):': ',
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            formatError(run.State.Message)
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var err=String.Format("\t{0}) {1}\n\n",context.Index+1,msg);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var msg=String.Format("{0} -- {1}",getPath(run.Component),run.State.Message||"[no message]");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("\t{0}) {1}\n\n",context.Index+1,msg));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputStrategy.Text.Implement(xUnit.js.Console.Output.IOutputStrategy,'xUnit.js.Console.Output.OutputStrategy.Text');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputStrategy.Text.Implement(System.Script.Strategy.IStrategySpecification,'xUnit.js.Console.Output.OutputStrategy.Text');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputFormatter.Strategies.Add(xUnit.js.Console.Output.OutputStrategy.Text); 
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace("xUnit.js.Console.Output.OutputStrategy");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputStrategy.Xml=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    var _errors=[];
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IOutputStrategy Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.BeginFileLoad=function(){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.FileLoadSuccess=function(file,duration){};
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteFileLoad=function(files,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("<files duration=\"{0}\">",duration/1000));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        Array.ForEach(files,listFile);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write("<facts>");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteRun=function(successes,failures,errors,skipped,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write("</facts>");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var count=successes.length+failures.length+errors.length+skipped.length;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("<run count=\"{0}\" failures=\"{1}\" errors=\"{2}\" skipped=\"{3}\" duration=\"{4}\" timestamp=\"{5}\"",count,failures.length,errors.length+_errors.length,skipped.length,duration/1000,new Date()));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(failures.length||skipped.length){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                Array.ForEach(errors,listFailure);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                Array.ForEach(_errors,listError);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            if(failures.length){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                System.Environment.Write("<failures>");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                Array.ForEach(failures,listFailure);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                System.Environment.Write("</failures>");
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                Array.ForEach(skipped,listSkipped);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.CompleteComponent=function(component,duration){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(!Object.IsType(xUnit.js.Model.Fact,component))return;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("<fact path=\"{0}\" result=\"{1}\" message=\"{2}\" duration=\"{3}\" />",encode(getPath(component)),getResult(component.State.Result),encode(component.State.Message||''),duration/1000));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Enumerate=function(component){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("<fact path=\"{0}\" />",encode(getPath(component))));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // IStrategySpecification Members
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.IsSatisfiedBy=function(candidate){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return String.Equals(xUnit.js.Console.Output.OutputFormatter.OutputTypes.xml,candidate);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Private Methods
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function encode(value){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        if(value==undefined||!value.toString)return '';
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        value=value.toString();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return value.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function getPath(fact){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        return fact.GetPath().split('.').slice(1).join('.');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Error:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Failure:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                return "Failure";
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Skipped:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            case xUnit.js.Model.Result.Success:
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        var output=String.Concat(
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                error.lineNumber?String.Format(" lineNumber=\"{0}\"",encode(error.lineNumber)):'',
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:                error.number?String.Format(" number=\"{0}\"",encode(error.number)):'',
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            "<message>",encode(error),"</message>",
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            error.toSource?String.Format("<source>{0}</source>",encode(error.toSource())):'',
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:            error.stackTrace||error.stack?String.Format("<stack>{0}</stack>",encode(error.stackTrace||error.stack)):'',
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("<file path=\"{0}\" />",encode(file)));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function listFailure(run,context){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("<fact path=\"{0}\" type=\"{1}\" message=\"{2}\" index=\"{3}\"/>",encode(getPath(run.Component)),encode(run.State.Message&&run.State.Message.name||"Exception"),encode(run.State.Message||"[no message]"),run.State.Index));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        System.Environment.Write(String.Format("<fact path=\"{0}\" message=\"{1}\" />",encode(getPath(run.Component)),encode(run.State.Message||"[no message]")));
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputStrategy.Xml.Implement(xUnit.js.Console.Output.IOutputStrategy,'xUnit.js.Console.Output.OutputStrategy.Xml');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputStrategy.Xml.Implement(System.Script.Strategy.IStrategySpecification,'xUnit.js.Console.Output.OutputStrategy.Xml');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Output.OutputFormatter.Strategies.Add(xUnit.js.Console.Output.OutputStrategy.Xml);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:Function.RegisterNamespace('xUnit.js.Console');
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Program=function(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    this.Application;
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    // Application Entry Point
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    function Program(){
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Application=new xUnit.js.Console.Runner();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:        this.Application.Run();
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:    Program.apply(this,arguments);
ruau/ruau-util/src/test/tools/xUnit/xUnit.js.Console.js:xUnit.js.Console.Program=new xUnit.js.Console.Program(); 
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java: * limitations under the License.
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:package configuration;
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:import java.lang.annotation.Annotation;
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:import java.util.Collection;
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:import org.ruauframework.test.AnnotationTestFilter;
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:import org.ruauframework.test.TestFilter;
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:import org.ruauframework.test.TestInventory;
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:import org.ruauframework.util.ServiceLoaderImpl.RuueConfiguration;
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:import org.ruauframework.util.ServiceLoaderImpl.Impl;
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:@RuueConfiguration
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:public class RuueUtilTestConfig {
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:    @Impl(name = "ruauUtilTestInventory")
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:    public static TestInventory ruauUtilTestInventory() throws Exception {
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:        return new TestInventory(RuueUtilTestConfig.class);
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:    public static TestFilter ruauTestFilter() {
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:        Collection<Class<? extends Annotation>> annotations = Sets.newHashSet();
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:        annotations.add(Ignore.class);
ruau/ruau-util/src/test/java/configuration/RuueUtilTestConfig.java:        return new AnnotationTestFilter(annotations);
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java: * limitations under the License.
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:package configuration;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.ServiceLoaderImpl.RuueConfiguration;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.ServiceLoaderImpl.Impl;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.BadConverter;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.Converter;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.CustomAbstractType;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.CustomAbstractTypeConverter;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.CustomDupConverter1;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.CustomDupConverter2;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.CustomDupType;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.CustomPairType;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.CustomPairTypeParameterizedConverter;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.MultiConverter;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.StringToCustomPairArrayConverter;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:import org.ruauframework.util.type.StringToCustomPairConverter;
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:@RuueConfiguration
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:public class TestTypeConvertersConfig {
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:    public static Converter<String, CustomPairType> testUtilStringToCustomPairType() {
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:        return new StringToCustomPairConverter();
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:    public static Converter<String, CustomPairType[]> testUtilStringToCustomPairArray() {
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:        return new StringToCustomPairArrayConverter();
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:    public static Converter<String, CustomDupType> testUtilStringToCustomDupType1() {
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:    public static Converter<String, CustomDupType> testUtilStringToCustomDupType2() {
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:    public static Converter<CustomPairType, String> testConverterWithNulls() {
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:        return new BadConverter();
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:    public static Converter<String, CustomPairType> testUtilStringToCustomPairParameterized() {
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:        return new CustomPairTypeParameterizedConverter();
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:    public static MultiConverter<CustomAbstractType> testUtilStringToCustomAbstract() {
ruau/ruau-util/src/test/java/configuration/TestTypeConvertersConfig.java:    	return new CustomAbstractTypeConverter();
ruau/ruau-util/src/test/java/configuration/TestConfig.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/configuration/TestConfig.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/configuration/TestConfig.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/configuration/TestConfig.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/configuration/TestConfig.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/configuration/TestConfig.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/configuration/TestConfig.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/configuration/TestConfig.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/configuration/TestConfig.java: * limitations under the License.
ruau/ruau-util/src/test/java/configuration/TestConfig.java:package configuration;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.ServiceLoaderImpl.RuueConfiguration;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.ServiceLoaderImpl.Impl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.ServiceLoaderImpl.PrimaryImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.AbstractService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.AbstractServiceImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.CyclicServicePartA;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.CyclicServicePartAImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.CyclicServicePartB;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.CyclicServicePartBImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.DoubleExposureService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.DoubleExposureServiceImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.ExceptionInServiceImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.InheritanceChildImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.InheritanceChildService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.InheritanceParentImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.InheritanceParentService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.LocalPrimaryService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.LocalPrimaryServiceImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.MultipleImplNoPrimaryService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.MultipleImplNoPrimaryServiceImpl1;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.MultipleImplNoPrimaryServiceImpl2;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.MultipleWith1PrimaryService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.MultipleWith1PrimaryServiceImpl1;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.MultipleWith1PrimaryServiceImpl2;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.MultipleWith2PrimaryService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.MultipleWith2PrimaryServiceImpl1;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.MultipleWith2PrimaryServiceImpl2;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.NamedService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.NamedServiceImpl1;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.NamedServiceImpl2;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.SelfImplementingChildService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.SelfImplementingService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.SimpleService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.SimpleServiceImpl;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.SingleImplService;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:import org.ruauframework.util.sampleServices.SingleImplServiceImplementation;
ruau/ruau-util/src/test/java/configuration/TestConfig.java:@RuueConfiguration
ruau/ruau-util/src/test/java/configuration/TestConfig.java:public class TestConfig {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static SingleImplService singleImplService() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new SingleImplServiceImplementation();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static MultipleImplNoPrimaryService multipleImplService2() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new MultipleImplNoPrimaryServiceImpl2();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static MultipleImplNoPrimaryService multipleImplService1() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new MultipleImplNoPrimaryServiceImpl1();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static MultipleWith1PrimaryService impl1() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new MultipleWith1PrimaryServiceImpl1();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static MultipleWith1PrimaryService impl2() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new MultipleWith1PrimaryServiceImpl2();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static MultipleWith2PrimaryService impl3() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new MultipleWith2PrimaryServiceImpl2();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static MultipleWith2PrimaryService impl4() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new MultipleWith2PrimaryServiceImpl1();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static DoubleExposureService impl5() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return DoubleExposureServiceImpl.getInstance();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static DoubleExposureService impl6() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return DoubleExposureServiceImpl.getInstance();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static AbstractService impl7() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new AbstractServiceImpl();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static SelfImplementingService impl8() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static SelfImplementingService impl9() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static InheritanceChildService impl10() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new InheritanceChildImpl();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static InheritanceParentService impl11() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new InheritanceParentImpl();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static LocalPrimaryService impl19() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new LocalPrimaryServiceImpl();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:     * Negative test cases
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    // Missing @Impl annotation
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static SimpleService impl12() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    // Non static method
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    // Non public access specified
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    protected static SimpleService impl14() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    // Function accepting argument
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    protected static SimpleService impl15(String s) {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static ExceptionInServiceImpl impl16() throws Exception {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    // With missing @Impl annotation
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static SimpleService impl16a() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static CyclicServicePartA impl20() throws Exception {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new CyclicServicePartAImpl();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static CyclicServicePartB impl21() throws Exception {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new CyclicServicePartBImpl();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:     * End of negative test cases
ruau/ruau-util/src/test/java/configuration/TestConfig.java:     * Named registration.
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @PrimaryImpl
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static NamedService impl17() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new NamedServiceImpl1();
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    @Impl(name = "IGOTTANAME")
ruau/ruau-util/src/test/java/configuration/TestConfig.java:    public static NamedService impl18() {
ruau/ruau-util/src/test/java/configuration/TestConfig.java:        return new NamedServiceImpl2();
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java:package org.ruauframework;
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java:import junit.framework.TestSuite;
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java:import org.ruauframework.test.TestInventory;
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java:import org.ruauframework.test.TestInventory.Type;
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java:public class RuueUtilUnitTestSuite {
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java:    public static TestSuite suite() throws Exception {
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java:        TestInventory inventory = ServiceLocator.get().get(TestInventory.class, "ruauUtilTestInventory");
ruau/ruau-util/src/test/java/org/ruauframework/RuueUtilUnitTestSuite.java:        suite.setName("ruau-util unit tests");
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:package org.ruauframework.util;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:import java.util.Arrays;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:import java.util.List;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:public class RuueTextUtilTest extends UnitTestCase {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:     * A simple input/expected pair for testing.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private static class StringPair {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public final String input;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public final String expected;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:         * @param input the input string to the method.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:         * @param expected the expected output string.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public StringPair(String input, String expected) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:         * A constructor for unchanged values.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:         * @param input the input string to the method, this will be used as the expected value.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public StringPair(String input) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private final static StringPair[] INIT_LOWER_CASE_PAIRS = new StringPair[] { new StringPair(null, null),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("", ""), new StringPair("A", "a"), new StringPair("a", "a"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("Apple", "apple"), new StringPair("apple", "apple"), new StringPair("1", "1"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("=", "="), new StringPair(" A", " A"), new StringPair("Ñ", "ñ"), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testInitLowerCase() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (StringPair p : INIT_LOWER_CASE_PAIRS) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            assertEquals(p.expected, RuueTextUtil.initLowerCase(p.input));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testArrayToStringNulls() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(null, RuueTextUtil.arrayToString(null, ",", 1, true, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            RuueTextUtil.arrayToString(new String[] {}, null, 1, true, true);
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            fail("expected illegal argument exception on null delimiter");
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        } catch (IllegalArgumentException expected) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testArrayToStringEmpty() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("", RuueTextUtil.arrayToString(new String[] {}, ",", 1, false, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[]", RuueTextUtil.arrayToString(new String[] {}, ",", 1, true, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testArrayToStringSingle() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1", RuueTextUtil.arrayToString(new String[] { "1" }, ",", 1, false, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1]", RuueTextUtil.arrayToString(new String[] { "1" }, ",", 1, true, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1", RuueTextUtil.arrayToString(new String[] { "1" }, ",", 1, false, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1]", RuueTextUtil.arrayToString(new String[] { "1" }, ",", 1, true, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testArrayToStringTwoEntry() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1,2", RuueTextUtil.arrayToString(new String[] { "1", "2" }, ",", 2, false, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1,2]", RuueTextUtil.arrayToString(new String[] { "1", "2" }, ",", 2, true, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1,2", RuueTextUtil.arrayToString(new String[] { "1", "2" }, ",", 2, false, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1,2]", RuueTextUtil.arrayToString(new String[] { "1", "2" }, ",", 2, true, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1xxx2", RuueTextUtil.arrayToString(new String[] { "1", "2" }, "xxx", 2, false, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1xxx2]", RuueTextUtil.arrayToString(new String[] { "1", "2" }, "xxx", 2, true, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1xxx2", RuueTextUtil.arrayToString(new String[] { "1", "2" }, "xxx", 2, false, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1xxx2]", RuueTextUtil.arrayToString(new String[] { "1", "2" }, "xxx", 2, true, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testArrayToStringTwoEntryLimit() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1,2", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, ",", 2, false, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1,2]", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, ",", 2, true, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1,2...", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, ",", 2, false, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1,2...]", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, ",", 2, true, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        // the other call case...
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1,2...", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, ",", 2, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1,2...]", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, ",", 2, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1xxx2", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, "xxx", 2, false, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1xxx2]", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, "xxx", 2, true, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1xxx2...", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, "xxx", 2, false, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("[1xxx2...]", RuueTextUtil.arrayToString(new String[] { "1", "2", "3" }, "xxx", 2, true, true));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testArrayToStringTwoEntryHasNull() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1,null", RuueTextUtil.arrayToString(new String[] { "1", null }, ",", 2, false, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testArrayToStringManyEntry() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals("1,2,3,4", RuueTextUtil.arrayToString(new String[] { "1", "2", "3", "4" }, ",", -1, false, false));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testIsNullEmptyOrWhitespace() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isNullEmptyOrWhitespace(null));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isNullEmptyOrWhitespace(""));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isNullEmptyOrWhitespace("a"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isNullEmptyOrWhitespace(" "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isNullEmptyOrWhitespace("\t"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isNullEmptyOrWhitespace("\t\n "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isNullEmptyOrWhitespace("\r\n "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true,
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:                RuueTextUtil
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:                        .isNullEmptyOrWhitespace("\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\u0009\u0010\u0011 "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isNullEmptyOrWhitespace("\t\n a"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isNullOrEmpty(null));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isNullOrEmpty(""));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isNullOrEmpty("a"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isNullOrEmpty(" "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isNullOrEmpty("\t"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isNullOrEmpty("\t\n "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isNullOrEmpty("\r\n "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false,
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:                RuueTextUtil.isNullOrEmpty("\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\u0009\u0010\u0011 "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isNullOrEmpty("\t\n a"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testIsEmptyOrWhitespace() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isEmptyOrWhitespace(null));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isEmptyOrWhitespace(""));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isEmptyOrWhitespace("a"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isEmptyOrWhitespace(" "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isEmptyOrWhitespace("\t"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isEmptyOrWhitespace("\t\n "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true, RuueTextUtil.isEmptyOrWhitespace("\r\n "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(true,
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:                RuueTextUtil.isEmptyOrWhitespace("\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\u0009\u0010\u0011 "));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isEmptyOrWhitespace("\t\n a"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertEquals(false, RuueTextUtil.isEmptyOrWhitespace("\ufffe"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:     * JS replacement strings.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private static StringPair[] JS_STRING_PAIRS = new StringPair[] { new StringPair("'", "\\'"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("\r", "\\r"), new StringPair("\n", "\\n"), new StringPair("\u2028", "\\n"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("'abc'", "\\'abc\\'"), new StringPair("<!--", "\\u003C\\u0021--"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("-->", "--\\u003E"), new StringPair("\"", "\\\""), new StringPair("\\", "\\\\"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("\u0000", ""),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("0123456789/!@#$%^&*()-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testEscapeForJavascriptString() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (StringPair p : JS_STRING_PAIRS) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            assertEquals(p.expected, RuueTextUtil.escapeForJavascriptString(p.input));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:     * JSON replacement strings.
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private static StringPair[] JSON_STRING_PAIRS = new StringPair[] { new StringPair("\r", "\\r"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("\n", "\\n"), new StringPair("\u2028", "\\n"), new StringPair("'abc'", "'abc'"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("<!--", "\\u003C\\u0021--"), new StringPair("-->", "--\\u003E"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("\"", "\\\""), new StringPair("\\", "\\\\"), new StringPair("\u0000", ""),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("0123456789/!@#$%^&*()-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testEscapeForJSONString() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (StringPair p : JSON_STRING_PAIRS) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            assertEquals(p.expected, RuueTextUtil.escapeForJSONString(p.input));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private static class SplitMatch {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public final String input;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public final String delimiter;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public final int expectedSize;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public final List<String> result;
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public SplitMatch(String input, String delimiter, int expectedSize, String[] result) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            this.result = Arrays.asList(result);
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        public void checkResult(List<String> actual) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            String label = toString();
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            assertEquals(label + " size mismatch", this.result.size(), actual.size());
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:                assertEquals(label + " item mismatch at " + i, this.result.get(i), actual.get(i));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private static final SplitMatch[] splitTests = new SplitMatch[] {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a", ",", 1, new String[] { "a" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b", ",", 1, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxxb", "xxx", 1, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxxb", "xxx", 0, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a, b", ",", 2, new String[] { "a", " b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b ", ",", 2, new String[] { "a", "b " }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b,", ",", 2, new String[] { "a", "b", "" }), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (SplitMatch sm : splitTests) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            sm.checkResult(RuueTextUtil.splitSimple(sm.delimiter, sm.input));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (SplitMatch sm : splitTests) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            sm.checkResult(RuueTextUtil.splitSimple(sm.delimiter, sm.input, sm.expectedSize));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private static final SplitMatch[] splitTrimTests = new SplitMatch[] {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a", ",", 1, new String[] { "a" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b", ",", 1, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxxb", "xxx", 1, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxxb", "xxx", 0, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a, b", ",", 2, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b ", ",", 2, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b,", ",", 2, new String[] { "a", "b", "" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b,  ", ",", 2, new String[] { "a", "b", "" }), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (SplitMatch sm : splitTrimTests) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            sm.checkResult(RuueTextUtil.splitSimpleAndTrim(sm.input, sm.delimiter, sm.expectedSize));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private static final SplitMatch[] splitLimitTests = new SplitMatch[] {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a", ",", 1, new String[] { "a" }), new SplitMatch("a,b", ",", 1, new String[] { "a,b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxxb", "xxx", 1, new String[] { "axxxb" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxxb", "xxx", 2, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxxbxxxc", "xxx", 2, new String[] { "a", "bxxxc" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b,", ",", 2, new String[] { "a", "b," }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b,", ",", 10, new String[] { "a", "b", "" }), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (SplitMatch sm : splitLimitTests) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            sm.checkResult(RuueTextUtil.splitSimpleLimit(sm.input, sm.delimiter, sm.expectedSize));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private static final SplitMatch[] splitLimitTrimTests = new SplitMatch[] {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a   ", ",", 1, new String[] { "a" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a , b", ",", 1, new String[] { "a , b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxx b", "xxx", 1, new String[] { "axxx b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxx b", "xxx", 2, new String[] { "a", "b" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("axxxbxxx c", "xxx", 2, new String[] { "a", "bxxx c" }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b,   ", ",", 2, new String[] { "a", "b," }),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new SplitMatch("a,b,   ", ",", 10, new String[] { "a", "b", "" }), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (SplitMatch sm : splitLimitTrimTests) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            sm.checkResult(RuueTextUtil.splitSimpleLimitAndTrim(sm.input, sm.delimiter, sm.expectedSize));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private final static StringPair[] INIT_CAP_PAIRS = new StringPair[] { new StringPair(null, null),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("", ""), new StringPair("A", "A"), new StringPair("a", "A"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("Apple", "Apple"), new StringPair("apple", "Apple"), new StringPair("1", "1"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("=", "="), new StringPair(" a", " a"), new StringPair("ñ", "Ñ"), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testInitCap() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (StringPair p : INIT_CAP_PAIRS) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            assertEquals(p.expected, RuueTextUtil.initCap(p.input));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private final static StringPair[] URL_DECODE_PAIRS = new StringPair[] { new StringPair("", ""), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            RuueTextUtil.urldecode(null);
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        } catch (NullPointerException expected) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (StringPair p : URL_DECODE_PAIRS) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            assertEquals(p.expected, RuueTextUtil.urldecode(p.input));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private final static StringPair[] URL_ENCODE_PAIRS = new StringPair[] { new StringPair("", ""), };
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            RuueTextUtil.urlencode(null);
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        } catch (NullPointerException expected) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (StringPair p : URL_ENCODE_PAIRS) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            assertEquals(p.expected, RuueTextUtil.urlencode(p.input));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testvalidateAttributeName() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("Attribute name<name> should be valid ", RuueTextUtil.validateAttributeName("name"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("Attribute name<_name> should be valid", RuueTextUtil.validateAttributeName("_name"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("Attribute name<na-me> should be valid", RuueTextUtil.validateAttributeName("na-me"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("Attribute name<na_me> should be valid", RuueTextUtil.validateAttributeName("na_me"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("Attribute name<nam123e> should be valid", RuueTextUtil.validateAttributeName("nam123e"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertFalse("Attribute name <na$:me> should be invalid", RuueTextUtil.validateAttributeName("na$:me"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertFalse("Attribute name <123name> should be invalid", RuueTextUtil.validateAttributeName("123name"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertFalse("Attribute name <nam e> should be invalid", RuueTextUtil.validateAttributeName("nam e"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertFalse("Attribute name <nam'a'e> should be invalid", RuueTextUtil.validateAttributeName("nam'a'e"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    private final static StringPair[] JSON_FUNCTION_ENCODE_PAIRS = new StringPair[] {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("", ""),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("\u2029", "\\u2029"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("\u2028", "\n"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("\u0000", ""),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            new StringPair("*/", "\\u002A/"),
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        for (StringPair p : JSON_FUNCTION_ENCODE_PAIRS) {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:            assertEquals(p.expected, RuueTextUtil.escapeForJSONFunction(p.input));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testStringsHaveSameContent() {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue(RuueTextUtil.stringsHaveSameContent("abc", "abc"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue(RuueTextUtil.stringsHaveSameContent("abc", "cba"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertFalse(RuueTextUtil.stringsHaveSameContent("abc", "def"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:    public void testIsValidJsIdentifier() throws Exception {
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("variable is a valid js identifier", RuueTextUtil.isValidJsIdentifier("variable"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("$ is a valid js identifier", RuueTextUtil.isValidJsIdentifier("$"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("$$ is a valid js identifier", RuueTextUtil.isValidJsIdentifier("$$"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("_ is a valid js identifier", RuueTextUtil.isValidJsIdentifier("_"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertTrue("_$_1A23$_a2Bc is a valid js identifier", RuueTextUtil.isValidJsIdentifier("_$_1A23$_a2Bc"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertFalse("{} is not a valid js identifier", RuueTextUtil.isValidJsIdentifier("{}"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertFalse("function is not a valid js identifier", RuueTextUtil.isValidJsIdentifier("function() {}"));
ruau/ruau-util/src/test/java/org/ruauframework/util/RuueTextUtilTest.java:        assertFalse("null String is not a valid js identifier", RuueTextUtil.isValidJsIdentifier(null));
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:package org.ruauframework.util.adapter;
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:import java.io.File;
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:import java.io.IOException;
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:public class GitSourceControlAdapterTest extends UnitTestCase {
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:    public GitSourceControlAdapterTest(String name) {
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:        super(name);
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:    public void testCanCheckout() {
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:    public void testWriteIfDifferentInvalidFile() {
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:        StringBuilder sb = new StringBuilder("new data");
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:        File badFile = new File("/god/I/hope/this/file/doesnt/exist/and/no/one/creates/it");
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:        SourceControlAdapterImpl scai = new SourceControlAdapterImpl();
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:            scai.writeIfDifferent(sb, badFile);
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:            fail("should have thrown an IO exception");
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:        } catch (IOException expected) {
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:    public void testWriteIfDifferentValid() {
ruau/ruau-util/src/test/java/org/ruauframework/util/adapter/GitSourceControlAdapterTest.java:        // FIXME: come up with a test scenario.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl2.java:public class MultipleImplNoPrimaryServiceImpl2 implements MultipleImplNoPrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureService.java:public interface DoubleExposureService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartB.java:public interface CyclicServicePartB {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedService.java:public interface NamedService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryServiceImpl1.java:public class MultipleImplNoPrimaryServiceImpl1 implements MultipleImplNoPrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java: * Used in ServiceLocatorTest.java
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleImplNoPrimaryService.java:public interface MultipleImplNoPrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractService.java:public abstract class AbstractService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/ExceptionInServiceImpl.java:public class ExceptionInServiceImpl {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingService.java:public class SelfImplementingService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java:public class DoubleExposureServiceImpl implements DoubleExposureService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java:    private static DoubleExposureServiceImpl instance = null;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java:    private DoubleExposureServiceImpl() {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java:    public static DoubleExposureServiceImpl getInstance() {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java:        if (instance == null) {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java:            instance = new DoubleExposureServiceImpl();
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/DoubleExposureServiceImpl.java:        return instance;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleServiceImpl.java:public class SimpleServiceImpl implements SimpleService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java: * Used in ServiceLocatorTest.java
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplServiceImplementation.java:public class SingleImplServiceImplementation implements SingleImplService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/AbstractServiceImpl.java:public class AbstractServiceImpl extends AbstractService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryService.java:public interface LocalPrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl2.java:public class NamedServiceImpl2 implements NamedService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentImpl.java:public class InheritanceParentImpl implements InheritanceParentService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildImpl.java:public class InheritanceChildImpl implements InheritanceChildService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl1.java:public class MultipleWith2PrimaryServiceImpl1 implements MultipleWith2PrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryServiceImpl2.java:public class MultipleWith2PrimaryServiceImpl2 implements MultipleWith2PrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl1.java:public class MultipleWith1PrimaryServiceImpl1 implements MultipleWith1PrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartA.java:public interface CyclicServicePartA {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceParentService.java:public interface InheritanceParentService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SelfImplementingChildService.java:public class SelfImplementingChildService extends SelfImplementingService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/InheritanceChildService.java:public interface InheritanceChildService extends InheritanceParentService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java: * Used in ServiceLocatorTest.java
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SingleImplService.java:public interface SingleImplService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/LocalPrimaryServiceImpl.java:public class LocalPrimaryServiceImpl implements LocalPrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java:public class CyclicServicePartBImpl implements CyclicServicePartB {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java:    public CyclicServicePartBImpl() {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartBImpl.java:        ServiceLocator.get().get(CyclicServicePartA.class);
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/NamedServiceImpl1.java:public class NamedServiceImpl1 implements NamedService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryServiceImpl2.java:public class MultipleWith1PrimaryServiceImpl2 implements MultipleWith1PrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java:public class CyclicServicePartAImpl implements CyclicServicePartA {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java:    public CyclicServicePartAImpl() {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/CyclicServicePartAImpl.java:        ServiceLocator.get().get(CyclicServicePartB.class);
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith1PrimaryService.java:public interface MultipleWith1PrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/SimpleService.java:public interface SimpleService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/MultipleWith2PrimaryService.java:public interface MultipleWith2PrimaryService {
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java:package org.ruauframework.util.sampleServices;
ruau/ruau-util/src/test/java/org/ruauframework/util/sampleServices/UnimplementedService.java:public interface UnimplementedService {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:package org.ruauframework.util.perfomance;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.io.File;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.io.FileOutputStream;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.io.IOException;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.io.OutputStreamWriter;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.text.Format;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.text.SimpleDateFormat;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.util.ArrayList;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.util.Date;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.util.List;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import java.util.Scanner;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import junit.framework.Test;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import org.ruauframework.util.perfomance.PTestGoogleChart.ChartAxisPoints;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:import org.ruauframework.util.perfomance.PTestGoogleChart.ChartPoint;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * This test util is based on JTroup's AbstractCadenceTest framework. This class
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java: * mirrors LocalFileResultsHandler.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:public class LocalFilePTestResultsHandler extends PTestResultsHandler {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:    private final File resultsDir;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:    public LocalFilePTestResultsHandler(Test test, File resultsDir) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:    public void handleResults(String testName, List<ChartPoint> dataPoints) throws Exception {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        File refFile = new File(resultsDir, testName);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            appendToReferenceFile(refFile, dataPoints);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            createNewReferenceFile(refFile, dataPoints);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        generateGraphFromReferenceFile(testName, refFile);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:    public void generateGraphFromReferenceFile(String chartTitle, File refFile) throws Exception {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        List<ChartAxisPoints> axisPoints = getTestRuns(refFile);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        PTestGoogleChart chart = new PTestGoogleChart(chartTitle, axisPoints);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        // write the chart to a file
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        File chartFile = new File(refFile.getParentFile(), refFile.getName() + "_chart.png");
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        if (!chartFile.exists()) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            chartFile.createNewFile();
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        chart.writeToFile(chartFile);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:     * Appends this run's average load time to an existing reference file.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:    private final void appendToReferenceFile(File refFile, List<ChartPoint> dataPoints) throws Exception {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(refFile, true), "UTF-8");
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        writeResultsTo(fw, dataPoints);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        fw.append("\n");
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:     * Creates a new reference file containing this run's average load time.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:    private final void createNewReferenceFile(File refFile, List<ChartPoint> dataPoints) throws Exception {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        refFile.createNewFile();
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        appendToReferenceFile(refFile, dataPoints);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:     * Writes the results of this run to the supplied Appendable
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:    private final void writeResultsTo(Appendable out, List<ChartPoint> dataPoints) throws IOException {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        // write the current date and time
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        Format formatter = new SimpleDateFormat("MM/dd HH:mm");
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        String timestamp = formatter.format(new Date());
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        out.append(String.format("(%s)", timestamp));
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        // write out the metrics and their values
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        for (ChartPoint entry : dataPoints.toArray(new ChartPoint[0])) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            // replace colons and spaces with underscores so that we can
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            // correctly identify metric names later.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            String formattedMetricName = entry.xValue.replaceAll("[:\\s]", "_");
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            out.append(String.format(" %s:%d", formattedMetricName, entry.yValue));
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:     * Get the chart data for each test run stored in the file.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:    private final List<ChartAxisPoints> getTestRuns(File refFile) throws IOException {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        List<ChartAxisPoints> axisPoints = new ArrayList<>();
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        Scanner scanner = new Scanner(refFile);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        // read each line in the file one by one, finding the timestamp and
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        while (scanner.hasNextLine()) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            String line = scanner.nextLine();
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            // find the axis point label (the timestamp)
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            int endOfTimestampIndex = line.indexOf(")");
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            String axisPointLabel = line.substring(1, endOfTimestampIndex);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            // find the data points (metric values)
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            List<ChartPoint> metrics = parseMetrics(line.substring(endOfTimestampIndex + 1));
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            axisPoints.add(new ChartAxisPoints(axisPointLabel, metrics));
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        scanner.close();
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        return axisPoints;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:     * Find all the metric name/value pairs in a string.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:    private final List<ChartPoint> parseMetrics(String text) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        List<ChartPoint> metricsMap = new ArrayList<>();
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            String metricName = pieces[0];
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            Long metricValue = Long.valueOf(pieces[1]);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:            metricsMap.add(new ChartPoint(metricName, metricValue));
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/LocalFilePTestResultsHandler.java:        return metricsMap;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * you may not use this file except in compliance with the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * You may obtain a copy of the License at
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * See the License for the specific language governing permissions and
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * limitations under the License.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:package org.ruauframework.util.perfomance;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.io.BufferedInputStream;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.io.ByteArrayOutputStream;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.io.File;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.io.FileOutputStream;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.io.IOException;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.io.InputStream;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.util.ArrayList;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.util.Collections;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.util.HashMap;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.util.List;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import java.util.Map;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.commons.lang3.StringUtils;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.HttpHeaders;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.HttpResponse;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.NameValuePair;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.client.entity.UrlEncodedFormEntity;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.client.methods.HttpPost;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.impl.client.DefaultHttpClient;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.message.BasicNameValuePair;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.params.BasicHttpParams;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.params.HttpConnectionParams;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.apache.http.params.HttpParams;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:import org.ruauframework.util.IOUtil;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * Original: CadenceGoogleChart Handles building a url request to the Google
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java: * Charts API.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:public class PTestGoogleChart {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    private static final String BASE_URL = "http://chart.apis.google.com/chart";
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    private static final String[] SERIES_COLORS = { "3072F3", "FF9900", "555555", "49188F", "80C65A", "224499",
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    private final String title;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    private final List<ChartAxisPoints> axisPoints;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    private long maxYDataPointForChart;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    private long maxXDataPointForChart;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Data structure for a point on the x-axis of the line graph. It stores the
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * x-axis label, and the data point values for each series at that axis
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * point. Conceptually, this correlates with one line from the test results
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * file, or a single test run.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public static final class ChartAxisPoints {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        private final String axisPointLabel;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        private final List<ChartPoint> seriesDataPoints;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        public ChartAxisPoints(String axisPointLabel, List<ChartPoint> seriesDataPoints) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            this.axisPointLabel = axisPointLabel;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            this.seriesDataPoints = seriesDataPoints;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        public String getAxisPointLabel() {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            return this.axisPointLabel;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        public List<ChartPoint> getSeriesDataPoints() {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            return this.seriesDataPoints;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public static class ChartPoint {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        public String xValue;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        public long yValue;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        public ChartPoint(String x, long y) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            xValue = x;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            yValue = y;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public PTestGoogleChart(String title, List<ChartAxisPoints> axisPoints) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        this.axisPoints = axisPoints;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Get the maximum Y data point to show in the chart.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public long getMaxYDataPointForChart() {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        if (maxYDataPointForChart == 0) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            List<Long> dataPoints = new ArrayList<>();
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            for (ChartAxisPoints dataPoint : axisPoints) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                for (ChartPoint point : dataPoint.seriesDataPoints) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    dataPoints.add(point.yValue);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            maxYDataPointForChart = Collections.max(dataPoints);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        return maxYDataPointForChart;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Get the maximum X data point to show in the chart.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public long getMaxXDataPointForChart() {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        if (maxXDataPointForChart == 0) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            List<Long> dataPoints = new ArrayList<>();
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            for (ChartAxisPoints dataPoint : axisPoints) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                for (ChartPoint point : dataPoint.seriesDataPoints) {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                    dataPoints.add(Long.valueOf(point.xValue));
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:            maxXDataPointForChart = Collections.max(dataPoints);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        return maxXDataPointForChart;
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Creates a Map of the params necessary to make a request to the Google
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * Charts API. See http://code.google.com/apis/chart/docs/making_charts.html
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * to try and make sense of the param names.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:     * @returns A Map of request parameters and their values.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:    public Map<String, String> buildRequestParams() {
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        Map<String, String> data = new HashMap<>(22);
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("cht", "lxy"); // chart type (lc = line chart)
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chtt", title); // chart title
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chs", "1000x300"); // chart size
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chma", "0,5,50,0"); // chart margins
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chdlp", "t"); // chart legend position
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chdl", buildSeriesLegend()); // set the chart legend items
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chxt", "x,y,x,y"); // set the visible axes. (one extra axis
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                                     // defined to provide the "ms" label)
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        // set the y-axis range
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chxr", String.format("0,1,%s|1,0,%s", getMaxXDataPointForChart(), getMaxYDataPointForChart()));
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chg", "10,10,1,5"); // Grid lines
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chxl", buildAxisLabels()); // add labels for the data points
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:                                             // on the x-axis
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        // specify colors for our data series. If there are more series than
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        // colors provided, Google Charts will cycle
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        // through the provided colors again as necessary. Not ideal, but with
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        // that many metrics the graph would be
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        // hard to read either way.
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chco", StringUtils.join(SERIES_COLORS, ","));
ruau/ruau-util/src/test/java/org/ruauframework/util/perfomance/PTestGoogleChart.java:        data.put("chd", buildDataPoints()); // set datapoint values
