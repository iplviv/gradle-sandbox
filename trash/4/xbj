ruau/ruau-impl-expression/pom.xml:                            <dfa>false</dfa>
ruau/ruau-impl-expression/pom.xml:                            <nfa>false</nfa>
ruau/ruau-impl-expression/pom.xml:                            <messageFormat>antlr</messageFormat>
ruau/ruau-impl-expression/pom.xml:                            <outputDirectory>target/src-gen/main/java</outputDirectory>
ruau/ruau-impl-expression/pom.xml:                            <printGrammar>false</printGrammar>
ruau/ruau-impl-expression/pom.xml:                            <profile>false</profile>
ruau/ruau-impl-expression/pom.xml:                            <report>false</report>
ruau/ruau-impl-expression/pom.xml:                            <sourceDirectory>src/main/config/grammar</sourceDirectory>
ruau/ruau-impl-expression/pom.xml:                            <trace>false</trace>
ruau/ruau-impl-expression/pom.xml:                        </configuration>
ruau/ruau-impl-expression/.project:  <name>ruau-impl-expression</name>
ruau/ruau-impl-expression/.project:  <comment>NO_M2ECLIPSE_SUPPORT: Project files created with the maven-eclipse-plugin are not supported in M2Eclipse.</comment>
ruau/ruau-impl-expression/.project:    <project>ruau</project>
ruau/ruau-impl-expression/.project:    <project>ruau-util</project>
ruau/ruau-impl-expression/.project:    <buildCommand>
ruau/ruau-impl-expression/.project:      <name>org.eclipse.jdt.core.javabuilder</name>
ruau/ruau-impl-expression/.project:    </buildCommand>
ruau/ruau-impl-expression/.project:  <natures>
ruau/ruau-impl-expression/.project:    <nature>org.eclipse.jdt.core.javanature</nature>
ruau/ruau-impl-expression/.project:  </natures>
ruau/ruau-impl-expression/build.gradle:    compile(group: 'org.antlr', name: 'antlr', version:'3.3') {
ruau/ruau-impl-expression/build.gradle:exclude(module: 'stringtemplate')
ruau/ruau-impl-expression/build.gradle:  compile project(':ruau')
ruau/ruau-impl-expression/build.gradle:  testCompile project(':ruau')
ruau/ruau-impl-expression/build.gradle:  testCompile project(':ruau-util')
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:package configuration;
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:import org.ruauframework.adapter.ExpressionAdapter;
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:import org.ruauframework.adapter.JsonSerializerAdapter;
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:import org.ruauframework.impl.expression.ExpressionAdapterImpl;
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:import org.ruauframework.impl.expression.adapter.ExpressionJsonSerializerAdapterImpl;
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:import org.ruauframework.util.ServiceLoaderImpl.RuueConfiguration;
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:import org.ruauframework.util.ServiceLoaderImpl.Impl;
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java: * config for expression module, provides an expression adapter
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:@RuueConfiguration
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:public class RuueImplExpressionConfig {
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:    public static ExpressionAdapter ruauImplExpressionExpressionAdapter() {
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:        return new ExpressionAdapterImpl();
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:    public static JsonSerializerAdapter ruauImplExpressionJsonSerializationAdapter() {
ruau/ruau-impl-expression/src/main/java/configuration/RuueImplExpressionConfig.java:        return new ExpressionJsonSerializerAdapterImpl();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:package org.ruauframework.impl.expression.adapter;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:import java.util.Collections;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:import java.util.Map;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:import org.ruauframework.adapter.JsonSerializerAdapter;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:import org.ruauframework.impl.expression.FunctionCallImpl;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:import org.ruauframework.impl.expression.LiteralImpl;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:import org.ruauframework.impl.expression.PropertyReferenceImpl;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:import org.ruauframework.util.json.JsonSerializer;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:import com.google.common.collect.Maps;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java: * direct serializers for expression implementations
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:public class ExpressionJsonSerializerAdapterImpl implements JsonSerializerAdapter {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:    public Map<String, JsonSerializer<?>> lookupSerializers() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:        Map<String, JsonSerializer<?>> m = Maps.newHashMap();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:        m.put(PropertyReferenceImpl.class.getName(), PropertyReferenceImpl.SERIALIZER);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:        m.put(LiteralImpl.class.getName(), LiteralImpl.SERIALIZER);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:        m.put(FunctionCallImpl.class.getName(), FunctionCallImpl.SERIALIZER);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:    public Map<Class<?>, JsonSerializer<?>> instanceofSerializers() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/adapter/ExpressionJsonSerializerAdapterImpl.java:        return Collections.emptyMap();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:package org.ruauframework.impl.expression;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import java.io.IOException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import java.util.Set;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import org.ruauframework.expression.ExpressionType;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import org.ruauframework.expression.Literal;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import org.ruauframework.instance.ValueProvider;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:import org.ruauframework.util.json.JsonSerializer.NoneSerializer;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java: * a literal number, string, boolean, or null
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:public class LiteralImpl implements Literal {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    private static final long serialVersionUID = 2255827488061408651L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    private final Object value;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    private final Location l;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    public LiteralImpl(Object value, Location l) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:        this.value = value;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:        // TODO: get typedef from value
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    public final Location getLocation() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    public Object evaluate(ValueProvider vp) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:        return getValue();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    public Object getValue() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:        return value;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    public void gatherPropertyReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    public static final Serializer SERIALIZER = new Serializer();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:    private static class Serializer extends NoneSerializer<LiteralImpl> {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:        public void serialize(Json json, LiteralImpl value) throws IOException {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/LiteralImpl.java:            json.writeValue(value.getValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:package org.ruauframework.impl.expression;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import java.io.IOException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import java.util.List;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import java.util.Set;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.Ruue;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.expression.ExpressionType;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.instance.ValueProvider;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.instance.ValueProviderType;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.system.RuueContext;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.util.RuueTextUtil;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import org.ruauframework.util.json.JsonSerializer.NoneSerializer;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:import com.google.common.collect.ImmutableList;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java: * an expression in ruau
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:public class PropertyReferenceImpl implements PropertyReference {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    private static final long serialVersionUID = -6332112591620619082L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    private final List<String> pieces;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    private final Location l;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public PropertyReferenceImpl(String expr, Location l) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        // TODO: delete this constructor, splitting should be done by the parser
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        this(RuueTextUtil.splitSimple(".", expr), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public PropertyReferenceImpl(Iterable<String> pieces, Location l) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        this(ImmutableList.copyOf(pieces), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    protected PropertyReferenceImpl(List<String> pieces, Location l) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public final Location getLocation() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public Object evaluate(ValueProvider vp) throws QuickFixException {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:            ret = vp.getValue(this);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:            RuueContext lc = Ruue.getContextService().getCurrentContext();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:            ValueProviderType vpt = ValueProviderType.getTypeByPrefix(root);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:                ret = lc.getGlobalProviders().get(vpt).getValue(getStem());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        return size() == 1 ? null : new PropertyReferenceImpl(pieces.subList(1, size()), getLocation());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public PropertyReference getSub(int start, int end) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:            return new PropertyReferenceImpl(pieces.subList(start, end), getLocation());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        } catch (IndexOutOfBoundsException ioe) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public String getLeaf() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        return toString(false);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public String toString(boolean curlyBang) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        return RuueTextUtil.collectionToString(pieces, ".", null, curlyBang ? "{!" : null, curlyBang ? "}" : null);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public void gatherPropertyReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        propRefs.add(this);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    // equals and hashcode don't use location
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public boolean equals(Object o) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        if (o instanceof PropertyReferenceImpl) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:            return pieces.equals(((PropertyReferenceImpl) o).pieces);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        return false;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public int hashCode() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        return pieces.hashCode();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    public static final Serializer SERIALIZER = new Serializer();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:    private static class Serializer extends NoneSerializer<PropertyReferenceImpl> {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:        public void serialize(Json json, PropertyReferenceImpl value) throws IOException {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/PropertyReferenceImpl.java:            json.writeString(value.toString(true));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:package org.ruauframework.impl.expression;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.AND;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.NOT;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.OR;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.TERNARY;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MathFunctions.ABSOLUTE;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MathFunctions.DIVIDE;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MathFunctions.MODULUS;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MathFunctions.MULTIPLY;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MathFunctions.NEGATE;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MathFunctions.SUBTRACT;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.ADD;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.EQUALS;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.NOTEQUALS;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.GREATER_THAN;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.GREATER_THAN_OR_EQUAL;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.LESS_THAN;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.LESS_THAN_OR_EQUAL;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import java.util.LinkedList;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import java.util.List;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import java.util.Map;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import org.ruauframework.impl.expression.functions.Function;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import org.ruauframework.system.Location;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import com.google.common.collect.ImmutableList;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import com.google.common.collect.ImmutableMap;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:import com.google.common.collect.ImmutableMap.Builder;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java: * factory used by the parser to create the expression objects
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:public class ExpressionFactory {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    private static final Map<String, Function> functionsByName;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    static {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(ADD);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(SUBTRACT);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(MULTIPLY);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(DIVIDE);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(MODULUS);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(GREATER_THAN);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(GREATER_THAN_OR_EQUAL);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(LESS_THAN);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(LESS_THAN_OR_EQUAL);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(AND);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(OR);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(NOT);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(NEGATE);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(ABSOLUTE);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(EQUALS);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(NOTEQUALS);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        l.add(TERNARY);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        Builder<String, Function> b = ImmutableMap.builder();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        functionsByName = b.build();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    private static Function lookup(String name) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return functionsByName.get(name);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    private final Location l;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    // TODO: advance locations based on token positions
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public ExpressionFactory(Location l) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public Expression createBool(String s) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return new LiteralImpl(Boolean.valueOf(s), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public Expression createNumber(String s) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return new LiteralImpl(Double.parseDouble(s), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public Expression createNull() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return new LiteralImpl(null, l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public Expression createString(String s) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return new LiteralImpl(s.substring(1, s.length()-1), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public PropertyReference createPropertyReference(List<String> path) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return new PropertyReferenceImpl(path == null ? ImmutableList.<String> of() : ImmutableList.copyOf(path), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:     * for unary ops
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public Expression createFunction(Function ft, Expression e1) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return new FunctionCallImpl(ft, ImmutableList.of(e1), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:     * for binary ops
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public Expression createFunction(Function ft, Expression e1, Expression e2) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return new FunctionCallImpl(ft, ImmutableList.of(e1, e2), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:     * for ternary op
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public Expression createTernaryFunction(Expression e1, Expression e2, Expression e3) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return new FunctionCallImpl(TERNARY, ImmutableList.of(e1, e2, e3), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:     * for calling a function by name()
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:    public Expression createFunction(String name, List<Expression> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        Function f = lookup(name);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:            throw new RuueRuntimeException("No function found for key: " + name, l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionFactory.java:        return new FunctionCallImpl(f, args == null ? ImmutableList.<Expression> of() : ImmutableList.copyOf(args), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:package org.ruauframework.impl.expression;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import java.io.IOException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import java.io.Reader;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import java.io.StringReader;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.antlr.runtime.ANTLRReaderStream;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.antlr.runtime.BaseRecognizer;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.antlr.runtime.CharStream;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.antlr.runtime.CommonTokenStream;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.antlr.runtime.Lexer;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.antlr.runtime.MismatchedTokenException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.antlr.runtime.NoViableAltException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.antlr.runtime.RecognitionException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.antlr.runtime.Token;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.ruauframework.adapter.ExpressionAdapter;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.ruauframework.impl.expression.parser.ExpressionLexer;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.ruauframework.impl.expression.parser.ExpressionParser;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.ruauframework.throwable.quickfix.RuueValidationException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:import org.ruauframework.throwable.quickfix.InvalidExpressionException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java: * adapter that calls our expression factory
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:public class ExpressionAdapterImpl implements ExpressionAdapter {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:    public Expression buildExpression(String s, Location l) throws RuueValidationException {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            lexer = new ExpressionLexer(new CaseInsensitiveReaderStream(new StringReader(s)));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        } catch (IOException x) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            throw new RuueRuntimeException(x);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        CommonTokenStream cts = new CommonTokenStream(lexer);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        ExpressionFactory ef = new ExpressionFactory(l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        ExpressionParser parser = new ExpressionParser(cts);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        parser.setExpressionFactory(ef);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            return parser.expression();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        } catch (RuueLexerException x) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            throw generateException(s, lexer, x.re, l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        } catch (RecognitionException x) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            throw generateException(s, parser, x, l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:    private static InvalidExpressionException generateException(String exp, BaseRecognizer antlr,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            RecognitionException re, Location l) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        String[] names = antlr.getTokenNames();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        if (re.token != null && re.token.getType() == ExpressionParser.EOF) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            errorMsg.append("unexpected end of expression");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        } else if (re instanceof MismatchedTokenException) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            MismatchedTokenException mte = (MismatchedTokenException) re;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            // bleh same exception class has different fields set depending on
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            if (antlr instanceof Lexer) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                Lexer lexer = (Lexer) antlr;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                txt = lexer.getCharErrorDisplay(re.c);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                expecting = lexer.getCharErrorDisplay(mte.expecting);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                    txt = names[mte.token.getType()];
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                if (mte.expecting < names.length && mte.expecting >= 0) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                    expecting = ExpressionParser.FRIENDLY_NAMES[mte.expecting];
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                errorMsg.append("expecting ").append(expecting).append(", found ").append(txt);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                errorMsg.append("unexpected token: ").append(txt);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        } else if (re instanceof NoViableAltException) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                char ch = exp.charAt(re.charPositionInLine);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                if (re.charPositionInLine == 0 && ch == '{') {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                    errorMsg.append("unclosed brace");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                    errorMsg.append("unexpected token: ").append("'").append(ch).append("'");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                errorMsg.append("unexpected token: ").append(ExpressionParser.FRIENDLY_NAMES[token.getType()]);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            errorMsg.append(antlr.getErrorMessage(re, names));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            errorMsg.append(" at line ").append(re.line).append(", column ").append(re.charPositionInLine + 1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            errorMsg.append(" at column ").append(re.charPositionInLine + 1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        errorMsg.append(" of expression: ");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        errorMsg.append(exp);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        return new InvalidExpressionException(errorMsg.toString(), l);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:     * stream that allows case insensitive tokenization code copied directly
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:     * from antlr wiki
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:    private static class CaseInsensitiveReaderStream extends ANTLRReaderStream {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:        private CaseInsensitiveReaderStream(Reader script) throws IOException {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                i++; // e.g., translate LA(-1) to use offset 0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:                return CharStream.EOF;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/ExpressionAdapterImpl.java:            return Character.toLowerCase(data[p + i - 1]);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java:package org.ruauframework.impl.expression.functions;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java:import java.io.Serializable;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java:import java.util.List;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java: * the thing that actually executes some function in the formula engine
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java:public interface Function extends Serializable {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java:    // void validate(List<TypeDef> types);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/Function.java:    Object evaluate(List<Object> args);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:package org.ruauframework.impl.expression.functions;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:import java.util.List;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java: * functions that do mathy stuff
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:public class MathFunctions {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static final Function SUBTRACT = new Subtract();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static final Function MULTIPLY = new Multiply();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static final Function DIVIDE = new Divide();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static final Function MODULUS = new Modulus();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static final Function NEGATE = new Negate();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static final Function ABSOLUTE = new Absolute();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    private static abstract class BinaryNumberFunction implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        private static final long serialVersionUID = -1225813696832918245L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        private final boolean allowString;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        protected BinaryNumberFunction(boolean allowString) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            this.allowString = allowString;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        public Object evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            Object o1 = args.get(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            Object o2 = args.get(1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            Number a1, a2;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            if (allowString && (o1 instanceof String || o2 instanceof String)
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:                    && !(o1 instanceof Number || o2 instanceof Number)) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:                String s1 = JavascriptHelpers.stringify(o1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:                String s2 = JavascriptHelpers.stringify(o2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:                a1 = s1.compareTo(s2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:                a2 = Double.valueOf(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:                a1 = JavascriptHelpers.convertToNumber(o1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:                a2 = JavascriptHelpers.convertToNumber(o2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return evaluate(a1, a2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        public abstract Object evaluate(Number n1, Number n2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static class Subtract extends BinaryNumberFunction {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        private static final long serialVersionUID = -4919030498212099039L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        public Subtract() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            super(false);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        public Object evaluate(Number n1, Number n2) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return Double.valueOf(n1.doubleValue() - n2.doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return new String[] { "sub", "subtract" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static class Multiply extends BinaryNumberFunction {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        private static final long serialVersionUID = 4968808865180541660L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            super(false);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        public Object evaluate(Number n1, Number n2) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return Double.valueOf(n1.doubleValue() * n2.doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static class Divide extends BinaryNumberFunction {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        private static final long serialVersionUID = 5462087077577056734L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            super(false);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        public Object evaluate(Number n1, Number n2) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return Double.valueOf(n1.doubleValue() / n2.doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static class Modulus extends BinaryNumberFunction {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        private static final long serialVersionUID = 3014329349472542278L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            super(false);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        public Object evaluate(Number n1, Number n2) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return Double.valueOf(n1.doubleValue() % n2.doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static class Negate implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        private static final long serialVersionUID = -8356257901220555636L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        public Object evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            Number a1 = JavascriptHelpers.convertToNumber(args.get(0));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return Double.valueOf(-a1.doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return new String[] { "neg", "negate" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:    public static class Absolute implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        private static final long serialVersionUID = 3242148581747160277L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:        public Object evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            Number a1 = JavascriptHelpers.convertToNumber(args.get(0));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return Double.valueOf(Math.abs(a1.doubleValue()));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MathFunctions.java:            return new String[] { "abs" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:package org.ruauframework.impl.expression.functions;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:import java.util.List;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java: * An implementation of the boolean functions to mimic JS.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:public class BooleanFunctions {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:    public static final Function AND = new And();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:    public static final Function OR = new Or();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:    public static final Function NOT = new Not();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:    public static final Function TERNARY = new Ternary();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * get a true/false similar to the way JS evaluates things.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:    public static boolean isTruthy(Object obj) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            return false;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        if (obj instanceof Boolean) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            return ((Boolean) obj).booleanValue();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        if (obj instanceof String) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            return !"".equals(obj);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        if (obj instanceof Number) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            return !(n.doubleValue() == 0 || Double.isNaN(n.doubleValue()));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * And is a short circuit. If the first value is falsy, return it, otherwise return the second
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * value. This means that the return value is not really a boolean, but will evaluate as one correctly
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * if isTruthy is used. If you need a boolean, use a !!
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:    public static class And implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        private static final long serialVersionUID = -6827790391366942300L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        public Object evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            if (!isTruthy(args.get(0))) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:                return args.get(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            return args.get(1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            return new String[] { "and" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * Or as in JS.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * And is a short circuit. If the first value is truthy, return it, otherwise return the second
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * value. This means that the return value is not really a boolean, but will evaluate as one correctly
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * if isTruthy is used. If you need a boolean, use a !!
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:    public static class Or implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        private static final long serialVersionUID = 5302839029031364114L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        public Object evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            if (isTruthy(args.get(0))) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:                return args.get(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            return args.get(1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * Not is meant to match JS not.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * Not will always return a boolean, and evaluates using isTruthy.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:    public static class Not implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        private static final long serialVersionUID = 2749177700513718436L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        public Object evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            return Boolean.valueOf(!isTruthy(args.get(0)));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * Ternary function as in JS.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * This function is very close to Java, with the only deviation being that the first
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:     * value is evaluated for truthiness.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:    public static class Ternary implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        private static final long serialVersionUID = 7767941492912263247L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:        public Object evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/BooleanFunctions.java:            return isTruthy(args.get(0)) ? args.get(1) : args.get(2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:package org.ruauframework.impl.expression.functions;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:import java.util.List;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java: * functions that can have multiple different types of arguments
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:public class MultiFunctions {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static final Function ADD = new Add();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static final Equals EQUALS = new Equals();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static final Function NOTEQUALS = new NotEquals();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static final Function GREATER_THAN = new GreaterThan();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static final Function GREATER_THAN_OR_EQUAL = new GreaterThanOrEqual();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static final Function LESS_THAN = new LessThan();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static final Function LESS_THAN_OR_EQUAL = new LessThanOrEqual();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    private static abstract class BinaryComparisonFunction implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        private static final long serialVersionUID = -1225813696832918245L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        public Object evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            Object o1 = args.get(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            Object o2 = args.get(1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            Number a1, a2;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            if ((o1 instanceof String || o2 instanceof String) && !(o1 instanceof Number || o2 instanceof Number)) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                String s1 = JavascriptHelpers.stringify(o1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                String s2 = JavascriptHelpers.stringify(o2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                a1 = s1.compareTo(s2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                a2 = Double.valueOf(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                a1 = JavascriptHelpers.convertToNumber(o1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                a2 = JavascriptHelpers.convertToNumber(o2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return compareNumbers(a1, a2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        public abstract Boolean compareNumbers(Number n1, Number n2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:     * add is special because it can also be used to concatenate 2 strings
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static class Add implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        private static final long serialVersionUID = -2912682621623213084L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        public Object evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            Object a1 = args.get(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            Object a2 = args.get(1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            if ((a1 instanceof Number || a1 == null)  && (a2 instanceof Number || a2 == null)) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                if (a1 == null) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                    a1 = Double.valueOf(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                if (a2 == null) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                    a2 = Double.valueOf(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                return JavascriptHelpers.getNumber(((Number) a1).doubleValue() + ((Number) a2).doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                return JavascriptHelpers.stringify(a1)+JavascriptHelpers.stringify(a2);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return new String[] { "add", "concat" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static class Equals implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        private static final long serialVersionUID = 8488913551076190333L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        public Boolean evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            Object o1 = args.get(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            Object o2 = args.get(1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                return Boolean.TRUE;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            } else if (o1 instanceof Number && o2 instanceof Number) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                return Boolean.valueOf(((Number)o1).doubleValue() == ((Number)o2).doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:                return Boolean.valueOf(o1.equals(o2));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return Boolean.FALSE;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return new String[] { "eq", "equals" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static class NotEquals implements Function {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        private static final long serialVersionUID = -3069271109822863820L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        public Boolean evaluate(List<Object> args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return Boolean.valueOf(!EQUALS.evaluate(args).booleanValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return new String[] { "ne", "notequals" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static class GreaterThan extends BinaryComparisonFunction {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        private static final long serialVersionUID = 3074104624547345817L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        public Boolean compareNumbers(Number n1, Number n2) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return Boolean.valueOf(n1.doubleValue() > n2.doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return new String[] { "gt", "greaterthan" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static class GreaterThanOrEqual extends BinaryComparisonFunction {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        private static final long serialVersionUID = 3829111446062691280L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        public Boolean compareNumbers(Number n1, Number n2) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return Boolean.valueOf(n1.doubleValue() >= n2.doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return new String[] { "ge", "greaterthanorequal" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static class LessThan extends BinaryComparisonFunction {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        private static final long serialVersionUID = 6388516633368411081L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        public Boolean compareNumbers(Number n1, Number n2) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return Boolean.valueOf(n1.doubleValue() < n2.doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return new String[] { "lt", "lessthan" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:    public static class LessThanOrEqual extends BinaryComparisonFunction {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        private static final long serialVersionUID = 5236251545372152801L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:        public Boolean compareNumbers(Number n1, Number n2) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return Boolean.valueOf(n1.doubleValue() <= n2.doubleValue());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/MultiFunctions.java:            return new String[] { "le", "lessthanorequal" };
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:package org.ruauframework.impl.expression.functions;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java: * Helper functions to match javascript
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:public class JavascriptHelpers {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * Convert doubles into whatever fits best.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * This mimics the behaviour of JS when turning a number into a string.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * Other that this corner case, we leave numbers as doubles to preserve sign
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * bizarreness.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * @param value the double value to wrap.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * @return one of Double, Integer or Long that maps the double into the most appropriate value.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:    public static Number getNumber(double value) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:        if (value == (int)Math.round(value)) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:            return Integer.valueOf((int)value);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:        } else if (value == Math.round(value)) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:            return Long.valueOf((long)value);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:            return Double.valueOf(value);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * This tries to track the behaviour of JS, including -0.0 being preserved as -0. We do have a hard
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * limit on the depth of the stack, but that is generally irrelevant. In fact, we maybe want to throw
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * @param o the object to turn into a string.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * @param depth the current stack depth.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:    private static String stringifyHelper(Object o, int depth) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:        if (o instanceof Number) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:                // Oh fun. Don't know of another way to detect this.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:        	if (n.doubleValue() == 0 && (1.0/n.doubleValue() == Double.NEGATIVE_INFINITY)) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:            return String.valueOf(getNumber(n.doubleValue()));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:        } else if (o instanceof Iterable) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:            String comma = "";
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:            for (Object x : ((Iterable<?>)o)) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:                sb.append(comma);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:                sb.append(stringifyHelper(x, depth+1));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:                comma = ",";
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:        } else if (o instanceof String) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * The public method to strigify an object JS style.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * @param o the object to stringify.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * @return the string version approximating JS.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:    public static String stringify(Object o) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * Convert an object into a number by JSs conversion rules.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * @param o the object to convert.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:     * @return a number.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:    public static Number convertToNumber(Object o) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:        if (o == null || "".equals(o)) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:            return Double.valueOf(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:        if (o instanceof Number) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:        } else if (o instanceof Boolean) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:            if (((Boolean)o).booleanValue()) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:                return Double.valueOf(1);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:                return Double.valueOf(0);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:                return new Double(Double.parseDouble(s));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:            } catch (NumberFormatException nfe) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/functions/JavascriptHelpers.java:                return Double.NaN;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:package org.ruauframework.impl.expression;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import java.io.IOException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import java.util.ArrayList;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import java.util.List;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import java.util.Set;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.def.TypeDef;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.expression.ExpressionType;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.expression.FunctionCall;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.impl.expression.functions.Function;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.instance.ValueProvider;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.system.Location;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.util.json.Json;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:import org.ruauframework.util.json.JsonSerializer.NoneSerializer;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java: * function calling expression
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:public class FunctionCallImpl implements FunctionCall {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    private static final long serialVersionUID = -6285228439395661727L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    private final List<Expression> args;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    private final Function f;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    private final Location l;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    public FunctionCallImpl(Function f, List<Expression> args, Location l) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:        this.args = args;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    public final Location getLocation() {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    public Object evaluate(ValueProvider vp) throws QuickFixException {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:        List<Object> list = new ArrayList<Object>(args.size());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:        for (Expression e : args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:            list.add(e.evaluate(vp));
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:        return f.evaluate(list);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    public void gatherPropertyReferences(Set<PropertyReference> propRefs) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:        for (Expression e : args) {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:            e.gatherPropertyReferences(propRefs);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    public static final Serializer SERIALIZER = new Serializer();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:    private static class Serializer extends NoneSerializer<FunctionCallImpl> {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:        public void serialize(Json json, FunctionCallImpl value) throws IOException {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:            json.writeMapBegin();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:            json.writeMapEntry("exprType", value.getExpressionType());
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:            json.writeMapEntry("key", value.f.getKeys()[0]);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:            json.writeMapEntry("args", value.args);
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/FunctionCallImpl.java:            json.writeMapEnd();
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: * limitations under the License.
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java:package org.ruauframework.impl.expression;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java:import org.antlr.runtime.RecognitionException;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java: * Workaround for antlr's lexer not allowing a checked exception to be thrown
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java:public class RuueLexerException extends RuntimeException {
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java:    private static final long serialVersionUID = 6067199284491857917L;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java:    final RecognitionException re;
ruau/ruau-impl-expression/src/main/java/org/ruauframework/impl/expression/RuueLexerException.java:    public RuueLexerException(RecognitionException re) {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * limitations under the License.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * the grammar for ruaus expression engine
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:grammar Expression;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:@lexer::header {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * limitations under the License.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:package org.ruauframework.impl.expression.parser;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:import org.ruauframework.impl.expression.RuueLexerException;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:import org.antlr.runtime.UnwantedTokenException;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        throw new RuueLexerException(e);
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    private String hexToString(String c1, String c2, String c3, String c4) {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        String concat = c1+c2+c3+c4;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:            c = Integer.parseInt(concat, 16);
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        } catch (NumberFormatException nfe) {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        return new StringBuilder().appendCodePoint(c).toString();
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:@parser::header {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g: * limitations under the License.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:package org.ruauframework.impl.expression.parser;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:import org.ruauframework.expression.Expression;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:import org.ruauframework.impl.expression.ExpressionFactory;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:import org.ruauframework.impl.expression.functions.Function;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:import org.ruauframework.impl.expression.functions.BooleanFunctions;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:import static org.ruauframework.impl.expression.functions.MathFunctions.*;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:import static org.ruauframework.impl.expression.functions.MultiFunctions.*;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:import java.util.LinkedList;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:@parser::members {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    private ExpressionFactory factory;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    public void setExpressionFactory(ExpressionFactory f) {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        this.factory = f;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) throws RecognitionException {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        throw new MismatchedTokenException(ttype, input);
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow) throws RecognitionException {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        return t.getCharPositionInLine() + 1;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    public static final String[] FRIENDLY_NAMES = new String[tokenNames.length];
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    static {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[QUESTION] = "a question mark";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[COLON] = "a colon";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[OR] = "a double pipe";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[AND] = "a field or entity name";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[EQ] = "an equals sign";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[NEQ] = "an equals sign";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[LT] = "a left angle bracket";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[GT] = "a right angle bracket";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[LE] = "an exclamation point";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[GE] = "a map literal assignment";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[MINUS]= "a question mark";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[PLUS] = "a plus";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[STAR] = "a multiplication";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[SLASH] = "a division";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[PERCENT] = "a modulus";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[NOT] = "an exclamation point";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[LPAREN] = "a left parenthesis";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[RPAREN] = "a right parenthesis";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[DOT] = "a period";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[ID] = "an identifier";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[LBRAK] = "a left square bracket";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[INT] = "a positive integer";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[RBRAK] = "a right square bracket";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[FLOAT] = "a floating point number";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[BOOL] = "either true or false";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[STRING] = "a single quoted string";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[COMMA] = "a comma";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[EXPONENT] = "an exponent";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[WS] = "whitespace";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[ESC_SEQ] = "an escape sequence";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        FRIENDLY_NAMES[HEX_DIGIT] = "a hexadecimal number";
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:@rulecatch {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    catch (RecognitionException re) {
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:// here be the start rule matey.
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    :   e=ternaryExpr { $expr = e; } EOF
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:// lowest precedence operator
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:ternaryExpr returns [Expression ret]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        (QUESTION t=ternaryExpr COLON f=ternaryExpr { $ret = factory.createTernaryFunction($ret, t, f); })?
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    :   e=andExpr { $ret = e; } (OR e=andExpr { $ret = factory.createFunction(BooleanFunctions.OR, $ret, e); })*
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:andExpr returns [Expression ret]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    :   e=comparisonExpr { $ret = e; } (AND e=comparisonExpr { $ret = factory.createFunction(BooleanFunctions.AND, $ret, e); })*
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:comparisonExpr returns [Expression ret]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    :   e=addSubExpr { $ret = e; }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        (fn=comparisonOp val=addSubExpr { $ret = factory.createFunction(fn, e, val); })?
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:comparisonOp returns [Function fn]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:addSubExpr returns [Expression ret]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:            // needs to be disambiguated from unary minus
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:            ((MINUS) => MINUS e=multDivExpr { $ret =factory.createFunction(SUBTRACT, $ret, e);}
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:            | PLUS e=multDivExpr { $ret = factory.createFunction(ADD, $ret, e);})*
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    :   e=unaryExpr { $ret = e; }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        (STAR e=unaryExpr { $ret = factory.createFunction(MULTIPLY, $ret, e);} |
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:         SLASH e=unaryExpr { $ret = factory.createFunction(DIVIDE, $ret, e);} |
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:         PERCENT e=unaryExpr { $ret = factory.createFunction(MODULUS, $ret, e);})*
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:unaryExpr returns [Expression ret]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    :   MINUS e=unaryExpr { $ret = factory.createFunction(NEGATE, e); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    |   NOT e=unaryExpr { $ret = factory.createFunction(BooleanFunctions.NOT, e); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    |   LPAREN e=ternaryExpr RPAREN { $ret = e; }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    |   e=value { $ret = e; }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:value returns [Expression expr]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    :   p=valuePath { $expr = factory.createPropertyReference(p); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    |   l=literal { $expr = l; }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:valuePath returns [List<String> path]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    path = new LinkedList<String>();
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    : maybeArray[path] (DOT maybeArray[path])*
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:maybeArray [List<String> path]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    : ID { path.add($ID.getText()); }(LBRAK INT RBRAK  { path.add($INT.getText()); })*
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:literal returns [Expression expr]
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    : INT { $expr = this.factory.createNumber($INT.text); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:      | FLOAT { $expr = factory.createNumber($FLOAT.text); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:      | BOOL { $expr = factory.createBool($BOOL.text); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:      | NULL { $expr = factory.createNull(); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:      | STRING { $expr = factory.createString($STRING.text); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    List<Expression> args = new ArrayList<Expression>();
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    :   ID LPAREN (e=ternaryExpr { args.add(e); } (COMMA e2=ternaryExpr { args.add(e2); })*)? RPAREN {  $ret = factory.createFunction($ID.text, args); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:BOOL : 'true' | 'false';
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    '\'' { buf.append("'"); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    ( ESC_SEQ[buf] | n=NORMAL_STRING { buf.append(n.getText()); } )*
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    '\'' { buf.append("'"); setText(buf.toString()); };
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:fragment
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:ID  : ('a'..'z'|'$'|'_') ('a'..'z'|'0'..'9'|'_')* ;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:fragment
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:fragment
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:HEX_DIGIT : ('0'..'9'|'a'..'f') ;
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:fragment
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    ( 'b' { buf.append("\b"); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    | 't' { buf.append("\t"); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    | 'n' { buf.append("\n"); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    | 'f' { buf.append("\f"); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    | 'r' { buf.append("\r"); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    | '\"' { buf.append("\""); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    | '\'' { buf.append("\'"); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:    | '\\' { buf.append("\\"); }
ruau/ruau-impl-expression/src/main/config/grammar/org/ruauframework/impl/expression/parser/Expression.g:        { String s = hexToString(c1.getText(), c2.getText(), c3.getText(), c4.getText()); buf.append(s); } )
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java: * limitations under the License.
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java:package configuration;
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java:import org.ruauframework.test.TestInventory;
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java:import org.ruauframework.util.ServiceLoaderImpl.RuueConfiguration;
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java:import org.ruauframework.util.ServiceLoaderImpl.Impl;
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java:@RuueConfiguration
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java:public class RuueImplExpressionTestConfig {
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java:    @Impl(name = "ruauImplExpressionTestInventory")
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java:    public static TestInventory ruauImplExpressionTestInventory() throws Exception {
ruau/ruau-impl-expression/src/test/java/configuration/RuueImplExpressionTestConfig.java:        return new TestInventory(RuueImplExpressionTestConfig.class);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java: * limitations under the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java:package org.ruauframework;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java:import junit.framework.TestSuite;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java:import org.ruauframework.test.TestInventory;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java:import org.ruauframework.test.TestInventory.Type;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java:import org.ruauframework.util.ServiceLocator;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java:public class RuueImplExpressionUnitTestSuite {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java:    public static TestSuite suite() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java:        TestInventory inventory = ServiceLocator.get().get(TestInventory.class, "ruauImplExpressionTestInventory");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/RuueImplExpressionUnitTestSuite.java:        suite.setName("ruau-impl-expression unit tests");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java: * limitations under the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:package org.ruauframework.impl.expression;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:import java.util.List;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:import org.ruauframework.system.Location;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:public class PropertyReferenceImplTest extends UnitTestCase {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:    public PropertyReferenceImplTest(String name) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        super(name);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        Location loc = new Location("expressionism", 456);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertSame(loc, pr.getLocation());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals("root was not correct", "test", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals(3, pr.size());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals("test", l.get(0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals("yo", l.get(1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals("self", l.get(2));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertSame(loc, pr2.getLocation());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals("root was not correct", "yo", pr2.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertSame(loc, pr3.getLocation());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals("root was not correct", "self", pr3.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals(1, pr3.size());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        Location loc = new Location("expressionism", 92);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        PropertyReferenceImpl pr = new PropertyReferenceImpl("inohaveanydots", loc);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertSame(loc, pr.getLocation());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals("root was not correct", "inohaveanydots", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals(1, pr.size());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertNull("stem should have been null", pr.getStem());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        Location loc = new Location("expressionism", 92);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals("{!test.yo.self}", pr.toString(true));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/PropertyReferenceImplTest.java:        assertEquals("test.yo.self", pr.toString());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * limitations under the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:package org.ruauframework.impl.expression;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.AND;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.NOT;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.OR;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import static org.ruauframework.impl.expression.functions.MathFunctions.SUBTRACT;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.ADD;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import java.math.BigDecimal;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import org.ruauframework.expression.ExpressionType;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import org.ruauframework.instance.ValueProvider;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import org.ruauframework.system.Location;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:import com.google.common.collect.ImmutableList;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * Tests of expression evaluation
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * @hierarchy Ruue.Runtime.Expression.Server.Evaluation
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java: * @userStory a07B0000000EdAC
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:public class ExpressionTest extends RuueImplExpressionTestCase {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    private static final Location l = new Location("test", -1);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    private static final PropertyReference i314 = new PropertyReferenceImpl("i314", l);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    private static final PropertyReference i235325 = new PropertyReferenceImpl("i235325", l);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    private static final PropertyReference bTrue = new PropertyReferenceImpl("bTrue", l);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    private static final PropertyReference bFalse = new PropertyReferenceImpl("bFalse", l);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    private static ValueProvider values = new ValueProvider() {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        public Object getValue(PropertyReference key) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:                return Integer.valueOf(314);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:                return Integer.valueOf(235325);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:                return Boolean.TRUE;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:            } else if (key == bFalse) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:                return Boolean.FALSE;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    public ExpressionTest(String name) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        super(name);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        Expression e = new FunctionCallImpl(ADD, ImmutableList.<Expression> of(i314, i235325), l);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        Object o = e.evaluate(values);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        assertEquals(314 + 235325, o);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        e = new FunctionCallImpl(SUBTRACT, ImmutableList.<Expression> of(e,
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:                new FunctionCallImpl(ADD, ImmutableList.<Expression> of(i314, i314), l)), l);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        o = e.evaluate(values);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        assertEquals((314.0 + 235325) - (314 + 314), o);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        e = new FunctionCallImpl(SUBTRACT, ImmutableList.<Expression> of(e, new LiteralImpl(new BigDecimal(17), l)), l);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        o = e.evaluate(values);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        assertEquals(((314.0 + 235325) - (314 + 314)) - 17, o);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    public void testBooleanComplex() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        // true && (false || !true)
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        e = new FunctionCallImpl(AND, ImmutableList.<Expression> of(
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:                new FunctionCallImpl(OR, ImmutableList.<Expression> of(new LiteralImpl(false, l), new FunctionCallImpl(
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:                        NOT, ImmutableList.<Expression> of(new LiteralImpl(true, l)), l)), l)), l);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        o = e.evaluate(values);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        assertFalse("Expected boolean expression to be false", o);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    public void testLiteralNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("null", ExpressionType.LITERAL, null, null);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    public void testPropertyEvaluatesToNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        ValueProvider vp = new ValueProvider() {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:            public Object getValue(PropertyReference key) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("nullprop", ExpressionType.PROPERTY, vp, null);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("nullarray[0]", ExpressionType.PROPERTY, vp, null);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("nothing.here == null", ExpressionType.FUNCTION, vp, true);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("nothing.here != null", ExpressionType.FUNCTION, vp, false);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        ValueProvider vp = new ValueProvider() {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:            public Object getValue(PropertyReference key) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("array[66]", ExpressionType.PROPERTY, vp, "null? no!");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("something.here == null", ExpressionType.FUNCTION, vp, false);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("something.here != null", ExpressionType.FUNCTION, vp, true);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    public void testFunctionWithNullOperands() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("true && null", ExpressionType.FUNCTION, null, null);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("null + 1", ExpressionType.FUNCTION, null, 1);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("'null' == null", ExpressionType.FUNCTION, null, false);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // @TestLabels(IgnoreFailureReason.IN_DEV)
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // public void testPropertyWithNoValueProvider() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // verifyEvaluateException("undefined", "??????????");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // currently throws IndexOutOfBoundsException, catch during parse?
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // @TestLabels(IgnoreFailureReason.IN_DEV)
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // public void testFunctionMissingOperands() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // verifyEvaluateException("add()", "??????????");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    public void testFunctionMismatchedOperands() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("3 + ' little piggies'", ExpressionType.FUNCTION, null, "3 little piggies");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("'5' + 6", ExpressionType.FUNCTION, null, "56");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("'2' == 2", ExpressionType.FUNCTION, null, false);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    public void testFunctionEvaluatesToNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("0 / 0", ExpressionType.FUNCTION, null, Double.NaN);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    public void testFunctionEvaluatesToInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("-2 / -0.0", ExpressionType.FUNCTION, null, Double.POSITIVE_INFINITY);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("-5 / 0", ExpressionType.FUNCTION, null, Double.NEGATIVE_INFINITY);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        verifyEvaluateResult("5 +\r\n1\r\n!=\r\n'null'", ExpressionType.FUNCTION, null, true);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    private void verifyEvaluateResult(String expression, ExpressionType type, ValueProvider vp, Object result)
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        assertEquals("Unexpected expression type when parsing <" + expression + ">", type, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:        assertEquals("Unexpected evaluation of <" + expression + ">", result, e.evaluate(vp));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // private void verifyEvaluateException(String expression, String
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // messageStartsWith) throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // Object result = e.evaluate(null);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // fail("No Exception thrown for <" + expression + ">. Instead, got: " +
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // } catch (Exception ex) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // if (ex.getMessage() != null &&
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // ex.getMessage().startsWith(messageStartsWith)) return;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // failNotEquals("Unexpected exception for <" + expression + "> ",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/ExpressionTest.java:    // messageStartsWith, ex);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: * limitations under the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:package org.ruauframework.impl.expression.parser;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:import org.ruauframework.expression.ExpressionType;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:import org.ruauframework.expression.PropertyReference;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:import org.ruauframework.impl.expression.RuueImplExpressionTestCase;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:import org.ruauframework.impl.expression.LiteralImpl;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:import org.ruauframework.impl.expression.PropertyReferenceImpl;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:import org.ruauframework.test.annotation.UnAdaptableTest;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:import org.ruauframework.throwable.RuueRuntimeException;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:import org.ruauframework.throwable.quickfix.InvalidExpressionException;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java: * Tests for the expression parser
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:public class ExpressionParserTest extends RuueImplExpressionTestCase {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public ExpressionParserTest(String name) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        super(name);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Function precedence respects Java conventions.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression evaluation", result, e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression evaluation", result, e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        // this is an integer
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression evaluation", 6.0, e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("true ? true : false ? 16 : 21");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression evaluation", true, e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Boolean precedence respects Java conventions.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        boolean compare = 324.4326 < 259 / 134.6 + 2356;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Boolean precedence not evaluated correctly", compare, e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        compare = 324.4326 < 259 / (134.6 + 2356);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Boolean precedence not evaluated correctly", compare, e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("324.4326 == 259 / (134.6 + 2356) && (false || true)");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertFalse("Boolean precedence not evaluated correctly", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Boolean precedence not evaluated correctly", 235.66, e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("false == false ? 16 : 21");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Boolean precedence not evaluated correctly", 16., e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("false && false ? 16 : 21");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Boolean precedence not evaluated correctly", 21., e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Boolean precedence not evaluated correctly", 16., e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("! true && false");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Boolean precedence not evaluated correctly", false, e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Alternate relational operators can be parsed.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testAlternateNames() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertTrue("Unexpected expression evaluation using alternate relational operators", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertFalse("Unexpected expression evaluation using alternate relational operators", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertTrue("Unexpected expression evaluation using alternate relational operators", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertTrue("Unexpected expression evaluation using alternate relational operators", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertFalse("Unexpected expression evaluation using alternate relational operators", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertFalse("Unexpected expression evaluation using alternate relational operators", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Number literals include integers, decimals, and exponents.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testLiteralNumbers() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        LiteralImpl l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected number literal value", 5.0, l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected number literal value", 5.345, l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected number literal value", 911., l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected number literal value", .119, l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected number literal value", 1e10, l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected number literal value", 2.e20, l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected number literal value", 0e0, l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected number literal value", 1e01, l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected number literal value", .3e3, l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * String literals require single quotes and may be empty.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testLiteralStrings() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        Expression e = buildExpression("'ahfdh'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        LiteralImpl l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("ahfdh", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("\"ahfdh\"", "unexpected token: '\"' at column 1 of expression: \"ahfdh\"");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Boolean literals are case insensitive.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testLiteralBools() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        LiteralImpl l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertTrue("Case sensitivity of Boolean literlas failed", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertTrue("Case sensitivity of Boolean literlas failed", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("false");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertFalse("Case sensitivity of Boolean literlas failed", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertFalse("Case sensitivity of Boolean literlas failed", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Property references can have multiple parts.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.PROPERTY, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference", "im", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertNull("Stemming end of PropertyReference should return null", pr.getStem());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("im.parsing");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.PROPERTY, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference", "im", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference after stemming", "parsing", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertNull("Stemming end of PropertyReference should return null", pr.getStem());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.PROPERTY, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference", "im", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference after stemming", "not", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference after stemming twice", "nullish", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertNull("Stemming end of PropertyReference should return null", pr.getStem());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("_i.am_very._.readable_");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.PROPERTY, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference", "_i", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference after stemming", "am_very", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference after stemming twice", "_", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference after stemming thrice", "readable_", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertNull("Stemming end of PropertyReference should return null", pr.getStem());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Property references can access array members
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testArrayAccessors() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.PROPERTY, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference", "im", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unable to access array member via PropertyReference", "0", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertNull("Stemming end of PropertyReference should return null", pr.getStem());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("im.an[3151345]");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.PROPERTY, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference", "im", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference after stemming", "an", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unable to access array member via PropertyReference after stemming", "3151345", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertNull("Stemming end of PropertyReference should return null", pr.getStem());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("im.an[3151345].array");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.PROPERTY, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference", "im", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference after stemming", "an", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unable to access array member via PropertyReference after stemming", "3151345", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference after stemming and accessing array", "array", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertNull("Stemming end of PropertyReference should return null", pr.getStem());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.PROPERTY, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected root of PropertyReference", "multi", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unable to access array member via PropertyReference", "1", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unable to access second array member via PropertyReference", "364", pr.getRoot());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertNull("Stemming end of PropertyReference should return null", pr.getStem());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Array access negative test cases
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testInvalidArrayAccessor() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("[21]", "unexpected token: a left square bracket");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("blah[letters]", "expecting a positive integer, found 'letters'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("postfix[5$]", "expecting a right square bracket, found '$'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("prefix[$2]", "expecting a positive integer, found '$2'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("negative[-5]", "expecting a positive integer, found '-'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("positive[+5]", "expecting a positive integer, found '+'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("decimal[5.5]", "expecting a positive integer, found '5.5'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("unclosed[5", "unexpected end of expression");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("unopened5]", "unexpected token: an identifier");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("noindex[]", "expecting a positive integer, found ']'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("paren[(33)]", "expecting a positive integer, found '('");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Consecutive boolean operations are parsed correctly.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testBoolChain() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("true == true == true", "unexpected token: '=='");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("1 > 2 == true", "unexpected token: '=='");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("true == 4 < 5", "unexpected token: '<'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Escape sequences in strings are parsed correctly.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testEscapedString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        LiteralImpl l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Escape sequences not parsed correctly", "over there! ", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression(" '\\'stuff me,\\' the unfilled teddy bear said to the child.'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Escape sequences not parsed correctly", "'stuff me,' the unfilled teddy bear said to the child.",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:                l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("'the child blinked and replied,\\n \\t\\'I\\'d be delighted.\\''");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Escape sequences not parsed correctly", "the child blinked and replied,\n \t'I'd be delighted.'",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:                l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Escape sequences not parsed correctly", "top\\\"2\"\b\f\r\n\tbottom", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Unescaped backslash in string should throw a parse exception.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    // currently fails when slash up front
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testNonEscapeBackslashInString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("'not\\u32unicode'", "mismatched character 'u' expecting set null");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("'\\'", "expecting ''', found '<EOF>'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("'back \\ slash'", "unexpected token: ' '");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("'\\escaped'", "unexpected token: 'e'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("'not\\'", "expecting ''', found '<EOF>'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Unicode escapes in strings are parsed correctly.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testUnicodeEscapesInString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals(ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        LiteralImpl l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("2", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals(ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("good2go", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("'Ocean\\'s \\u0031\\u0031'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals(ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Ocean's 11", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals(ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        l = (LiteralImpl) e;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("12 Monkeys \u0099", l.getValue());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Operators may be accessed as function calls and may be nested.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testFunctionCalls() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        Expression e = buildExpression("or(true, false)");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertTrue("Operator could not be accessed as function call", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("and(false, true)");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertFalse("Operator could not be accessed as function call", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("add(24, 23525)");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Operator could not be accessed as function call", 24 + 23525, e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("sub(24, add(63, 23525))");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Error evaluating nested operators as function calls", 24.0 - (63 + 23525), e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("add('The child', ' picked up the teddy bear in one hand')");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Error adding strings with add operator as function call",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:                "The child picked up the teddy bear in one hand", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("notequals(add(' and grasped a', ' pick axe in the other.'), '\"Wait!\" screamed the bear.')");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertTrue("Error in evaluating nested operators as funtion calls", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        e = buildExpression("if(equals(true, greaterthan(-2, -52)), add('The child hesitated, ', '\"I cannot stuff you without making a hole to stuff into.\"'), ' The bear squinted and noodled on this for a minute.')");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Error in evaluating nested operators as funtion calls",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:                "The child hesitated, \"I cannot stuff you without making a hole to stuff into.\"", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Non-english string literals are parsed correctly.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected expression type", ExpressionType.LITERAL, e.getExpressionType());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        assertEquals("Unexpected evaluation of non-english string", "天ぷらが食べたいです", e.evaluate(null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Missing operands throw a parse exception.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testMissingOperands() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("1+", "unexpected end of expression");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("2-", "unexpected end of expression");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("*3", "unexpected token: a multiplication");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("/4", "unexpected token: a division");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("5%", "unexpected end of expression");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("?", "unexpected token: a question mark");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Mismatched parentheses throw a parse exception.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testIncompleteParentheses() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("(1", "unexpected end of expression");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("2)", "unexpected token: ')'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Unclosed string throws a parse exception.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    @UnAdaptableTest
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("'unclosed string", "expecting ''', found '<EOF>'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("unclosed string'", "unexpected token: an identifier");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Unclosed braces throws a parse exception.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testIncompleteBraces() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("{!v.noend", "unclosed brace");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("v.dangled}", "unexpected token: '}'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("v.x + {!v.inner}", "unexpected token: '{'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Invalid characters in property names throw a parse exception.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testPropertyNameInvalid() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("\\upfront", "unexpected token: '\\'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("followup\\", "unexpected token: '\\'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("in\\side", "unexpected token: '\\'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("5horsemen", "unexpected token: 'horsemen'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("9.1.1", "unexpected token: '.1'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("in.2.u", "unexpected token: an identifier");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException(".hidden", "unexpected token: a period");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("ends.with.", "unexpected end of expression");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("man...middle", "expecting an identifier, found '.'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:            fail("Expecting RuueRuntimeException for undefined function");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        } catch (RuueRuntimeException e) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:            assertTrue("Unexpected error message trying to parse <undefined(4)>. Expected to start with: "
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:                    + "No function found for key: undefined" + ". But got: " + e.getMessage(), e.getMessage()
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:                    .startsWith("No function found for key: undefined"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Multiple statemts, separated by a semicolon
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testMultipleStatements() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("5==1;5==1;", "unexpected token: ';' at column 5");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Invalid syntax - consecutive property names
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("test invalid", "unexpected token: an identifier");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Invalid syntax - consecutive literals
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testMultipleLiterals() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("5 'invalid'", "unexpected token: ''invalid''");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Invalid syntax - consecutive functions
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("add() subtract()", "unexpected token: 'subtract'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Invalid syntax - consecutive property names separated by newline
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("invalid\r\ntest", "unexpected token: an identifier");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Invalid syntax - consecutive literals separated by newline
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testMultilineLiteral() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("5\r\n1", "unexpected token: '1'");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Invalid syntax - consecutive literals separated by newline
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    public void testLocationInErrorMessage() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        verifyInvalidExpressionException("5\r\n  1", "unexpected token: '1' at line 2, column 3");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:     * Verify the correct exception type is thrown and contains the correct error message.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:    private void verifyInvalidExpressionException(String expression, String msgStartsWith) throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:            fail("No execption thrown for <" + expression + ">. Expected InvalidExpressionException");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:        } catch (InvalidExpressionException e) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:            assertTrue("Unexpected error message trying to parse <" + expression + ">. Expected to start with: "
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserTest.java:                    + msgStartsWith + ". But got: " + e.getMessage(), e.getMessage().startsWith(msgStartsWith));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * limitations under the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:package org.ruauframework.impl.expression.parser;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:import junit.framework.TestSuite;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:import org.ruauframework.impl.expression.RuueImplExpressionTestCase;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:import org.ruauframework.throwable.quickfix.InvalidExpressionException;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * Shotgun tests for special chars. Tokens shouldn't contain these chars. Remaining special chars have their own tests
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * in ExpressionParserTest.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java: * @userStory a07B0000000Ed9n
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:public class ExpressionParserSpecialCharactersTest extends RuueImplExpressionTestCase {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    private static final String validChars = "oO0_";
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    private static final char[] otherChars = "`=[]',~@#^&{}|:\"天".toCharArray();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    private static final String[] errorMsgStartsWith = { "unexpected token: '`'",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            "unexpected token: a left square bracket",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            "unexpected token: a right square bracket",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            "unexpected token: a comma",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            "unclosed brace",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            "unexpected token: a colon",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    private static final String[] errorMsgEndsWith = { "unexpected token: '`'",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            "unexpected token: an identifier",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    private static final String[] errorMsgContains = { "unexpected token: '`'",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            "expecting a positive integer, found 'oO0_'",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            "unexpected token: an identifier",
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    private final String expression;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    private final String msgStartsWith;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    public ExpressionParserSpecialCharactersTest(String name) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:        super(name);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:        msgStartsWith = "";
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    public ExpressionParserSpecialCharactersTest(String name, String expression, String errorMsg) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:        super(name);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:        this.msgStartsWith = errorMsg;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:    public static TestSuite suite() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:        TestSuite suite = new TestSuite(ExpressionParserSpecialCharactersTest.class.getName());
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:        for (int i = 0; i < otherChars.length; i++) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            char c = otherChars[i];
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            String hex = String.format("%#x", (int) c);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            suite.addTest(new ExpressionParserSpecialCharactersTest("testTokenStartsWith" + hex
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:                    + "ThrowsQuickFixException", c + validChars, errorMsgStartsWith[i]));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            suite.addTest(new ExpressionParserSpecialCharactersTest("testTokenEndsWith" + hex
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:                    + "ThrowsQuickFixException", validChars + c, errorMsgEndsWith[i]));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            suite.addTest(new ExpressionParserSpecialCharactersTest("testTokenContains" + hex
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:                    + "ThrowsQuickFixException", validChars + c + validChars, errorMsgContains[i]));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            fail("No execption thrown for <" + expression + ">. Expected InvalidExpressionException");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:        } catch (InvalidExpressionException e) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:            assertTrue("Unexpected error message trying to parse <" + expression + ">. Expected to start with: "
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/parser/ExpressionParserSpecialCharactersTest.java:                    + msgStartsWith + ". But got: " + e.getMessage(), e.getMessage().startsWith(msgStartsWith));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: * limitations under the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:package org.ruauframework.impl.expression;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:import org.ruauframework.expression.Expression;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java: * Base test class for testing the expression parser.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:public abstract class RuueImplExpressionTestCase extends UnitTestCase {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:    public RuueImplExpressionTestCase(String name) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:        super(name);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:     * The assertTrue/False methods in junit only takes a boolean
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:    public void assertTrue(String msg, Object o) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:        if (o != Boolean.TRUE) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:            fail(msg);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:    public void assertFalse(String msg, Object o) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:        if (o != Boolean.FALSE) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:            fail(msg);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/RuueImplExpressionTestCase.java:        return new ExpressionAdapterImpl().buildExpression(s, null);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: * You may obtain a copy of the License at
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: * See the License for the specific language governing permissions and
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: * limitations under the License.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:package org.ruauframework.impl.expression.functions;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.AND;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.NOT;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.OR;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.BooleanFunctions.TERNARY;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MathFunctions.ABSOLUTE;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MathFunctions.DIVIDE;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MathFunctions.MODULUS;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MathFunctions.MULTIPLY;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MathFunctions.NEGATE;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MathFunctions.SUBTRACT;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.ADD;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.EQUALS;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.NOTEQUALS;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.GREATER_THAN;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.GREATER_THAN_OR_EQUAL;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.LESS_THAN;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import static org.ruauframework.impl.expression.functions.MultiFunctions.LESS_THAN_OR_EQUAL;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import java.util.List;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import java.util.Map;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import org.ruauframework.impl.expression.RuueImplExpressionTestCase;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:import com.google.common.collect.Maps;
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java: * Basic tests of functions
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:public class FunctionsTest extends RuueImplExpressionTestCase {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public FunctionsTest(String name) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        super(name);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    private Object evaluate(Function f, Object... args) {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        return f.evaluate(Lists.newArrayList(args));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(3146431.43266 + 937.1652, evaluate(ADD, 3146431.43266, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("12", evaluate(ADD, "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(314 + 3146431.43266, evaluate(ADD, 314, 3146431.43266));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:     * add() returns the best type available.
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(235639, evaluate(ADD, 314, 235325));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.POSITIVE_INFINITY, evaluate(ADD, Double.POSITIVE_INFINITY, 235325));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.POSITIVE_INFINITY, evaluate(ADD, Float.POSITIVE_INFINITY, 235325));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAddInfinityAndNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(ADD, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(ADD, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAddIntAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(ADD, 314, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.MAX_VALUE, evaluate(ADD, Double.MAX_VALUE, 2.0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("0937.1652", evaluate(ADD, "0", 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("01", evaluate(ADD, 0, "1"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("314", evaluate(ADD, 314, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("314", evaluate(ADD, "", 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("InfinityAndBeyond", evaluate(ADD, Double.POSITIVE_INFINITY, "AndBeyond"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAddStringAndNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("Random-Infinity", evaluate(ADD, "Random", Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAddStringAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("1NaN", evaluate(ADD, "1", Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(1, evaluate(ADD, null, 1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("nullb", evaluate(ADD, null, "b"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(2.5, evaluate(ADD, null, 2.5));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("cnull", evaluate(ADD, "c", null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0, evaluate(ADD, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAddStringAndNegativeZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    	assertEquals("-0", evaluate(ADD, "", -0.0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> nullList = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nullList.add(null);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("a", evaluate(ADD, nullList, "a"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("1,2,3a", evaluate(ADD, Lists.newArrayList(1, 2, 3), "a"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> list = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        list.add(null);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        list.add("a");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(",a", evaluate(ADD, list, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> list = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> nested = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        list.add("a");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        list.add(nested);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nested.add("b");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nested.add("c");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("a,b,c", evaluate(ADD, list, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> list = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> nested = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> nested2 = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> nested3 = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> nested4 = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        list.add("a");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        list.add(nested);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nested.add(nested2);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nested2.add(nested3);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nested3.add(nested4);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nested4.add("d");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nested.add("b");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nested.add("c");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("a,Too Deep,b,c", evaluate(ADD, list, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> list = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        List<Object> nested = Lists.newArrayList();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        list.add("a");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        list.add(nested);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        nested.add(list);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("a,a,Too Deep", evaluate(ADD, list, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAddMapAndEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        Map<Object,Object> map = Maps.newHashMap();
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        map.put("a", null);
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        map.put("b", "c");
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("[object Object]", evaluate(ADD, map, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsSameIntAndDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(EQUALS, 2, 2.0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsSameString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(EQUALS, "bum", "bum"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsStringsDifferentCapitalization() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, "Bum", "bum"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsDifferentInts() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, 1, 3));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsDifferentBooleans() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, Boolean.TRUE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsSameBooleans() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(EQUALS, Boolean.FALSE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsEmptyStringAndFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, "", Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsPositiveInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(EQUALS, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(EQUALS, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(EQUALS, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(EQUALS, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsPositiveAndNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsDoubleInfinityAndFloatInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(EQUALS, Double.POSITIVE_INFINITY, Float.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, Double.NaN, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsStringNullAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, "null", null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsNullAndBooleanTrue() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, null, Boolean.TRUE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsNullAndBooleanFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, null, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsNullAndEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, null, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsNullAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, null, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsNullAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(EQUALS, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testEqualsNullAndStringNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(EQUALS, null, "null"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotEqualsDifferentBooleans() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOTEQUALS, Boolean.FALSE, Boolean.TRUE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotEqualsSameBoolean() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(NOTEQUALS, Boolean.FALSE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotEqualsZeroAndStringZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOTEQUALS, 0, "0"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotEqualsZeroAndBoolean() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOTEQUALS, 0, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotEqualsTwoNaNs() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOTEQUALS, Double.NaN, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotEqualsTwoNulls() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(NOTEQUALS, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryTrueReturnString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("1", evaluate(TERNARY, Boolean.TRUE, "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryFalseReturnString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("2", evaluate(TERNARY, Boolean.FALSE, "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryTrueReturnNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(null, evaluate(TERNARY, Boolean.TRUE, null, "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryFalseReturnNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(null, evaluate(TERNARY, Boolean.FALSE, "1", null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("2", evaluate(TERNARY, null, "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryStringTrue() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("1", evaluate(TERNARY, "true", "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("2", evaluate(TERNARY, 0, "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("1", evaluate(TERNARY, 3146431.43266, "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryStringZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("1", evaluate(TERNARY, "0", "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryStringFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("1", evaluate(TERNARY, "false", "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("2", evaluate(TERNARY, "", "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testTernaryNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("2", evaluate(TERNARY, Double.NaN, "1", "2"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractDoubleAndNegativeDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(937.1652 - -8426.6, evaluate(SUBTRACT, 937.1652, -8426.6));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractPositiveInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(SUBTRACT, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(SUBTRACT, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractIntAndStringInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(SUBTRACT, 1, "1"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractIntAndDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(SUBTRACT, 2, 2.0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractInfinityAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.POSITIVE_INFINITY, evaluate(SUBTRACT, Double.POSITIVE_INFINITY, 2));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractIntAndInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NEGATIVE_INFINITY, evaluate(SUBTRACT, 3, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractIntAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(SUBTRACT, 3, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractIntAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(SUBTRACT, 3, "5c"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractIntAndEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(3.0, evaluate(SUBTRACT, 3, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractStringAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(SUBTRACT, "5c", 3));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractEmptyStringAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(-3.0, evaluate(SUBTRACT, "", 3));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractTwoEmptyStrings() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(SUBTRACT, "", ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractStringIntAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(3.0, evaluate(SUBTRACT, "4", 1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractTwoStringInts() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(-2.0, evaluate(SUBTRACT, "3", "5"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractIntAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(2.0, evaluate(SUBTRACT, 2, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractNullAndDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(-3.1, evaluate(SUBTRACT, null, 3.1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testSubtractTwoNulls() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(SUBTRACT, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(1.1, evaluate(MULTIPLY, 1, 1.1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(MULTIPLY, 0, 3));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testMultiplyNegativeIntAndNegativeDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.2, evaluate(MULTIPLY, -2, -0.1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.POSITIVE_INFINITY, evaluate(MULTIPLY, 1e200, 1e200));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testMultiplyToGetToNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NEGATIVE_INFINITY, evaluate(MULTIPLY, -1e200, 1e200));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.POSITIVE_INFINITY, evaluate(MULTIPLY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MULTIPLY, 0, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testMultiplyIntAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MULTIPLY, 1, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MULTIPLY, 5, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MULTIPLY, "5o", 9));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MULTIPLY, "5o", "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(2.2, evaluate(MULTIPLY, 2, "1.1"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(21.7, evaluate(MULTIPLY, "7", "3.1"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(MULTIPLY, 3, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testMultiplyNullAndNegativeDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(-0.0, evaluate(MULTIPLY, null, -0.1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(MULTIPLY, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testDivideDoubleAndNegativeDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(3146431.43266 / -8426.6, evaluate(DIVIDE, 3146431.43266, -8426.6));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(1.5, evaluate(DIVIDE, 3, 2));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(DIVIDE, 0, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.POSITIVE_INFINITY, evaluate(DIVIDE, 5, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testDivideNegativeIntAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NEGATIVE_INFINITY, evaluate(DIVIDE, -5, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(DIVIDE, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testDivideIntAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(DIVIDE, 1, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(DIVIDE, "5o", 3));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(DIVIDE, 3, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(5.0, evaluate(DIVIDE, "5.5", "1.1"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testDivideIntByNegativeZeroString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NEGATIVE_INFINITY, evaluate(DIVIDE, 1, "-0"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(-0.0, evaluate(DIVIDE, 5, Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.POSITIVE_INFINITY, evaluate(DIVIDE, 3, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(DIVIDE, null, 3));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(DIVIDE, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testModulusDoubleAndNegativeDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(3146431.43266 % -8426.6, evaluate(MODULUS, 3146431.43266, -8426.6));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MODULUS, 3, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(MODULUS, 0, 3));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MODULUS, 0, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(3.0, evaluate(MODULUS, 3, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MODULUS, Double.POSITIVE_INFINITY, 3));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testModulusIntAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MODULUS, 1, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MODULUS, 3, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(3.0, evaluate(MODULUS, "23", "4"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MODULUS, 3, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(MODULUS, null, 3));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(MODULUS, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAbsoluteValueDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Math.abs(3146431.43266), evaluate(ABSOLUTE, 3146431.43266));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAbsoluteValueNegativeDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Math.abs(-8426.6), evaluate(ABSOLUTE, -8426.6));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAbsoluteValueNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.POSITIVE_INFINITY, evaluate(ABSOLUTE, Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAbsoluteValueNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(ABSOLUTE, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAbsoluteValueNegativeIntString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(5.0, evaluate(ABSOLUTE, "-5"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAbsoluteValueString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(ABSOLUTE, "-5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAbsoluteValueEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(ABSOLUTE, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAbsoluteValueNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0.0, evaluate(ABSOLUTE, (Object) null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNegatePositiveDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(-3146431.43266, evaluate(NEGATE, 3146431.43266));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNegateNegativeDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(8426.6, evaluate(NEGATE, -8426.6));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNegateInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NEGATIVE_INFINITY, evaluate(NEGATE, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNegateNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(NEGATE, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNegateString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(NEGATE, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNegateStringInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(-5.0, evaluate(NEGATE, "5"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNegateStringEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(-0.0, evaluate(NEGATE, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNegateStringNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(-0.0, evaluate(NEGATE, (Object) null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanTwoDoubles() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN, 3146431.43266, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanSameDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, 3146431.43266, 3146431.43266));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanNegativeDoubleAndDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, -8426.6, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanPositiveInfinityAndNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanZeroAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, 0, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanInfinityAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, Double.POSITIVE_INFINITY, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanNaNAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, Double.NaN, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanNaNAndInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, Double.NaN, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanIntAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, 9000, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanStringAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, "5o", 4));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanTwoStrings() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN, "5o", "4o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanTwoStringInts() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN, "5", "3.9"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanTwoStringsDifferentCapitalization() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, "5A", "5a"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanZeroAndEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, 0, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanStringAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, "zz", Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanNaNAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, Double.NaN, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanBooleanTrueAndBooleanFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN, Boolean.TRUE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanBooleanTrueAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN, Boolean.TRUE, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanBooleanTrueAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, Boolean.TRUE, 1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanIntAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN, 1, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanNullAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, null, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanTwoNulls() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualTwoDoubles() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, 3146431.43266, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualSameDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, 937.1652, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualNegativeDoubleAndPositiveDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, -8426.6, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualPositiveInfintyAndNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualZeroAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, 0, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualInfinityAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, Double.POSITIVE_INFINITY, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualNaNAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, Double.NaN, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualNaNAndInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, Double.NaN, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualIntAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, 9000, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualStringAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, "5o", 4));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualTwoStrings() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, "5o", "4o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualStringIntAndStringDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, "5", "3.9"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualTwoStringsDifferentCapitalization() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, "5A", "5a"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualZeroAndEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, 0, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualStringAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, "zz", Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualNaNAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(GREATER_THAN_OR_EQUAL, Double.NaN, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualBooleanTrueAndBooleanFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, Boolean.TRUE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualBooleanTrueAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, Boolean.TRUE, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualBooleanTrueAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, Boolean.TRUE, 1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualIntAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, 1, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualNullAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, null, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testGreaterThanOrEqualNullAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(GREATER_THAN_OR_EQUAL, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanTwoDoubles() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, 3146431.43266, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanSameDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, -8426.6, -8426.6));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanNegativeDoubleAndPositiveDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN, -8426.6, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanPositiveInfinityAndNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanZeroAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, 0, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanInfinityAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, Double.POSITIVE_INFINITY, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanNaNAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, Double.NaN, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanNaNAndInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, Double.NaN, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanIntAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, 9000, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanStringAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, "5o", 4));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanTwoStrings() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, "5o", "4o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanStringIntAndStringDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, "5", "3.9"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanTwoStringsDifferentCapitalization() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN, "5A", "5a"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanZeroAndEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, 0, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanStringAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, "zz", Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanNaNAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, Double.NaN, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanBooleanTrueAndBooleanFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, Boolean.TRUE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanBooleanTrueAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, Boolean.TRUE, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanBooleanTrueAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, Boolean.TRUE, 1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanZeroAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, 0, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanNullAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN, null, 1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanTwoNulls() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualTwoDoubles() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, 3146431.43266, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualSameDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN_OR_EQUAL, -8426.6, -8426.6));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualNegativeDoubleAndPositiveDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN_OR_EQUAL, -8426.6, 937.1652));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN_OR_EQUAL, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualPositiveInfinityAndNegativeInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualZeroAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, 0, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualInfinityAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, Double.POSITIVE_INFINITY, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualNaNAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, Double.NaN, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualNaNAndInfinity() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, Double.NaN, Double.POSITIVE_INFINITY));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualIntAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, 9000, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualStringAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, "5o", 4));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualTwoStrings() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, "5o", "4o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualStringIntAndStringDouble() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, "5", "3.9"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualTwoStringsDifferentCapitalization() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN_OR_EQUAL, "5A", "5a"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualZeroAndEmptyString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN_OR_EQUAL, 0, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualStringAndNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, "zz", Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualNaNAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, Double.NaN, "5o"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualBooleanTrueAndBooleanFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, Boolean.TRUE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualBooleanTrueAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, Boolean.TRUE, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualBooleanTrueAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN_OR_EQUAL, Boolean.TRUE, 1));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualIntAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(LESS_THAN_OR_EQUAL, 1, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualNullAndZero() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN_OR_EQUAL, null, 0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testLessThanOrEqualTwoNulls() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(LESS_THAN_OR_EQUAL, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAndBooleanTrueAndBooleanFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(AND, Boolean.TRUE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAndTwoBooleanTrue() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(AND, Boolean.TRUE, Boolean.TRUE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAndBooleanTrueAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(null, evaluate(AND, Boolean.TRUE, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAndNullAndBooleanTrue() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(null, evaluate(AND, null, Boolean.TRUE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(null, evaluate(AND, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(235325, evaluate(AND, 314, 235325));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(0, evaluate(AND, 0, 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(314, evaluate(AND, "0", 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAndStringFalseAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(314, evaluate(AND, "false", 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("", evaluate(AND, "", 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testAndNaNAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Double.NaN, evaluate(AND, Double.NaN, 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("", evaluate(AND, 314, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testOrBooleanTrueAndBooleanFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(OR, Boolean.TRUE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testOrTwoBooleanFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(OR, Boolean.FALSE, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testOrBooleanFalseAndBooleanTrue() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(OR, Boolean.FALSE, Boolean.TRUE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testOrBooleanFalseAndNull() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(null, evaluate(OR, Boolean.FALSE, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(null, evaluate(OR, null, null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testOrNullAndBooleanTrue() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(OR, null, Boolean.TRUE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(314, evaluate(OR, 0, 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(314, evaluate(OR, 314, 235325));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("0", evaluate(OR, "0", 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testOrStringFalseAndInt() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("false", evaluate(OR, "false", 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(314, evaluate(OR, "", 314));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testOrNaNAndString() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals("Random", evaluate(OR, Double.NaN, "Random"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotBooleanTrue() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(NOT, Boolean.TRUE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotBooleanFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOT, Boolean.FALSE));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOT, ""));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(NOT, "Random"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotStringFalse() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(NOT, "false"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(NOT, "0"));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOT, (Object) null));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(NOT, new Object()));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOT, 0.0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.FALSE, evaluate(NOT, 1.0));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:    public void testNotNaN() throws Exception {
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOT, Double.NaN));
ruau/ruau-impl-expression/src/test/java/org/ruauframework/impl/expression/functions/FunctionsTest.java:        assertEquals(Boolean.TRUE, evaluate(NOT, Float.NaN));
Binary file ruau/ruau-osgi-api/target/classes/org/ruauframework/ds/serviceloader/RuueServiceProvider.class matches
Binary file ruau/.gradle/2.2.1/taskArtifacts/taskArtifacts.bin matches
Binary file ruau/.gradle/2.2.1/taskArtifacts/fileSnapshots.bin matches
Binary file ruau/.gradle/2.2.1/taskArtifacts/fileHashes.bin matches
Binary file ruau/.gradle/1.0-milestone-3/taskArtifacts/cache.bin matches
ruau/reports.txt:./ruau-impl-expression/target/surefire-reports/TEST-org.ruauframework.impl.expression.ExpressionTest.xml
ruau/reports.txt:./ruau-impl-expression/target/surefire-reports/TEST-org.ruauframework.impl.expression.functions.FunctionsTest.xml
ruau/reports.txt:./ruau-impl-expression/target/surefire-reports/TEST-org.ruauframework.impl.expression.parser.ExpressionParserSpecialCharactersTest.xml
ruau/reports.txt:./ruau-impl-expression/target/surefire-reports/TEST-org.ruauframework.impl.expression.parser.ExpressionParserTest.xml
ruau/reports.txt:./ruau-impl-expression/target/surefire-reports/TEST-org.ruauframework.impl.expression.PropertyReferenceImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-configuration.javascript.RuueJavascriptGroupTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.RuueServicesAndAdaptersTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.component.ruau.IterationTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.component.ruau.reinitializeModelTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.def.ApplicationDefTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.def.ForEachDefTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.def.HtmlTagTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.http.RuueResourceServletTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.RuueComponentServiceImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.CachingServiceImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.clientlibrary.ClientLibraryResolverRegistryImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.clientlibrary.ClientLibraryServiceImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.clientlibrary.ResourceDefImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.context.RuueContextImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.css.style.StyleDefImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.java.provider.JavaThemeProviderDefTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.javascript.parser.handler.JavascriptIncludeDefHandlerTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.java.type.JavaLocalizedTypeUtilTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.parser.ParserFactoryTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.registry.RootDefFactoryTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.renderer.JavaRendererDefTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.application.ApplicationDefImplUnitTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.AttributeDefImplUnitTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.AttributeSetImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.component.attributes.AttributesInAbstractComponentsTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.component.ComponentAttributeNameValidationTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.component.ComponentDefRefImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.component.ComponentDefRefImplUnitTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.component.ExpressionValidationTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.DependencyDefImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.event.RegisterEventDefTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.intf.InterfaceDefDescriptorTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.intf.InterfaceDefTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.ApplicationDefHandlerTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.AttributeDefRefHandlerTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.ClientLibraryDefHandlerTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.ComponentAccessAttributeTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.DefAttributesVisibilityTest$ApplicationDefAttributesVisibilityTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.DefAttributesVisibilityTest$RegisterEventDefAttributesVisibilityTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.DesignTemplateDefHandlerTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.EventAccessAttributeTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.HTMLComponentDefRefHandlerTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.IncludeDefRefHandlerTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.parser.handler.LibraryDefHandlerTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.theme.ThemeDefHandlerTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.theme.ThemeResolutionTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.root.theme.VarDefImplTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.source.file.FileSourceLoaderTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.source.resource.ResourceSourceLoaderTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.source.SourceFactoryTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.type.RuueConversionTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.impl.type.CustomDataTypeTest.xml
ruau/reports.txt:./ruau-impl/target/surefire-reports/TEST-org.ruauframework.service.RuueComponentServiceTest.xml
ruau/reports.txt:./ruau-integration-test/target/failsafe-reports/TEST-org.ruauframework.RuueIntegrationTests.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.def.DescriptorFilterTest.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.http.ManifestUtilTest.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.instance.AbstractActionImplTest.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.instance.ActionDelegateTest.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.instance.ActionWithKeyOverrideTest.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.instance.InstanceStackTest.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.system.LocationTest.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.system.SourceTest.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.test.perf.PerfResultsUtilTest.xml
ruau/reports.txt:./ruau/target/surefire-reports/TEST-org.ruauframework.throwable.RuueExceptionUtilTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.test.perf.metrics.PerfMetricsComparatorTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.test.perf.metrics.PerfMetricsTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.test.perf.metrics.PerfMetricTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.test.perf.metrics.PerfRunsCollectorTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.test.perf.PerfUtilTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.test.perf.rdp.CPUProfilerAnalyzerTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.test.perf.rdp.TimelineEventUtilTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.adapter.GitSourceControlAdapterTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.RuueTextUtilTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.css.CSSLintValidatorTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.date.DateServiceTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.io.LimitedLengthInputStreamTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.io.Utf8InputStreamReaderTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.CommonJavascriptGroupImplTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.directive.DirectiveBasedJavascriptGroupTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.directive.DirectiveParserTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.directive.impl.DebuggerDirectiveTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.directive.impl.DirectiveImplTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.directive.impl.IfDirectiveTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.directive.impl.IncludeDirectiveTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.directive.JavascriptGeneratorModeTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.directive.JavascriptGeneratorTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.JavascriptValidatorTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.javascript.MultiStreamReaderTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.json.JsFunctionTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.json.JsonReaderTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.json.JsonStreamReaderTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.json.JsonTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.resource.CompiledGroupTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.resource.ResourceLoaderTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.ServiceLocatorTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.test.PerfGoldFilesUtilTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.text.GlobMatcherTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.text.HashTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.type.TypeUtilTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.validation.RhinoTest.xml
ruau/reports.txt:./ruau-util/target/surefire-reports/TEST-org.ruauframework.util.validation.ValidationErrorTest.xml
ruau/gradlew.bat:@rem  Gradle startup script for Windows
ruau/gradlew.bat:@rem Set local scope for the variables with windows NT shell
ruau/gradlew.bat:if "%OS%"=="Windows_NT" setlocal
ruau/gradlew.bat:@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
ruau/gradlew.bat:@rem Find java.exe
ruau/gradlew.bat:if defined JAVA_HOME goto findJavaFromJavaHome
ruau/gradlew.bat:set JAVA_EXE=java.exe
ruau/gradlew.bat:echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
ruau/gradlew.bat:echo Please set the JAVA_HOME variable in your environment to match the
ruau/gradlew.bat:echo location of your Java installation.
ruau/gradlew.bat:goto fail
ruau/gradlew.bat::findJavaFromJavaHome
ruau/gradlew.bat:set JAVA_EXE=%JAVA_HOME%/bin/java.exe
ruau/gradlew.bat:echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
ruau/gradlew.bat:echo Please set the JAVA_HOME variable in your environment to match the
ruau/gradlew.bat:echo location of your Java installation.
ruau/gradlew.bat:goto fail
ruau/gradlew.bat:@rem Get command-line arguments, handling Windowz variants
ruau/gradlew.bat:if not "%OS%" == "Windows_NT" goto win9xME_args
ruau/gradlew.bat:if "%@eval[2+2]" == "4" goto 4NT_args
ruau/gradlew.bat::win9xME_args
ruau/gradlew.bat:@rem Slurp the command line arguments.
ruau/gradlew.bat::win9xME_args_slurp
ruau/gradlew.bat::4NT_args
ruau/gradlew.bat:@rem Get arguments from the 4NT Shell from JP Software
ruau/gradlew.bat:@rem Setup the command line
ruau/gradlew.bat:set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
ruau/gradlew.bat:@rem Execute Gradle
ruau/gradlew.bat:"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
ruau/gradlew.bat:@rem End local scope for the variables with windows NT shell
ruau/gradlew.bat:if "%ERRORLEVEL%"=="0" goto mainEnd
ruau/gradlew.bat::fail
ruau/gradlew.bat:rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
ruau/gradlew.bat::mainEnd
ruau/gradlew.bat:if "%OS%"=="Windows_NT" endlocal
ruau/gradlew.bat::omega
ruau/.mudial-deploy-key.ec2-54-146-189-167.compute-1.amazonaws.com:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdr4GJs+X2dTXedfHCT9LUokvSYTQy2Btk3M9tfu/Q6P2RAHNSI2wX5KIB9o25x1of0kpjm8JxOcuvy0zLf9lEiMgFPOwFxtrqOHh74w7rppZEFN4m2enusbEqG/irnp28I2ppRIEl6R+PhYogtxPFqJoq22mYfrhb6FNMz8zmBJkMQ2si9Z6HpyMXmiXnZvGmIG50XMVdr7xSI1eEoE1PEs46WzaBsh9P4oDUoqkPRbejZsm43c85emsYgJrIQl8mGC0P8t/WLE5wILp6o8FjBuyrPuUDbnKUCfBOT8hFjVMAY7EyB3juS+zuibuoyO2m3I4+jitN7nQsrL+Ab0g5 ci@mudial.com
ruau/settings.gradle:rootProject.name = 'ruau-framework'
ruau/settings.gradle:include ':ruau-util'
ruau/settings.gradle:include ':ruau'
ruau/settings.gradle:include ':ruau-impl'
ruau/settings.gradle:include ':ruau-impl-expression'
ruau/settings.gradle:include ':ruau-components'
ruau/settings.gradle:include ':ruau-tools'
ruau/settings.gradle:include ':ruau-resources'
ruau/settings.gradle:include ':ruau-jetty'
ruau/settings.gradle:include ':ruau-integration-test'
ruau/settings.gradle:include ':ruauCODs-integration-test'
ruau/settings.gradle:include ':simple-ruau-archetype'
ruau/settings.gradle:project(':ruau-util').projectDir = "$rootDir/ruau-util" as File
ruau/settings.gradle:project(':ruau').projectDir = "$rootDir/ruau" as File
ruau/settings.gradle:project(':ruau-impl').projectDir = "$rootDir/ruau-impl" as File
ruau/settings.gradle:project(':ruau-impl-expression').projectDir = "$rootDir/ruau-impl-expression" as File
ruau/settings.gradle:project(':ruau-components').projectDir = "$rootDir/ruau-components" as File
ruau/settings.gradle:project(':ruau-tools').projectDir = "$rootDir/ruau-tools" as File
ruau/settings.gradle:project(':ruau-resources').projectDir = "$rootDir/ruau-resources" as File
ruau/settings.gradle:project(':ruau-jetty').projectDir = "$rootDir/ruau-jetty" as File
ruau/settings.gradle:project(':ruau-integration-test').projectDir = "$rootDir/ruau-integration-test" as File
ruau/settings.gradle:project(':ruauCODs-integration-test').projectDir = "$rootDir/ruaudocs-integration-test" as File
ruau/settings.gradle:project(':simple-ruau-archetype').projectDir = "$rootDir/ruau-archetype" as File
ruau/.gitignore:.metadata/
ruau/.gitignore:target
ruau/.gitignore:.classpath
ruau/.gitignore:release.properties
ruau/.gitignore:pom.xml.releaseBackup
ruau/.gitignore:.idea/*
ruau/.gitignore:tags
Binary file ruau/ruau-devtools/ruau-inspector/icon24.png matches
ruau/ruau-devtools/ruau-inspector/background.js:var RuueInspector = {
ruau/ruau-devtools/ruau-inspector/background.js:    frameStartTime : 0,
ruau/ruau-devtools/ruau-inspector/background.js:    tabs : {},
ruau/ruau-devtools/ruau-inspector/background.js:        var tab = port.sender.tab;
ruau/ruau-devtools/ruau-inspector/background.js:        if(port.name){
ruau/ruau-devtools/ruau-inspector/background.js:            RuueInspector.ports[port.name] = port;
ruau/ruau-devtools/ruau-inspector/background.js:        }else if(tab){
ruau/ruau-devtools/ruau-inspector/background.js:            var tabId = tab.id;
ruau/ruau-devtools/ruau-inspector/background.js:            var tabInfo = RuueInspector.tabs[tabId];
ruau/ruau-devtools/ruau-inspector/background.js:            if(!tabInfo){
ruau/ruau-devtools/ruau-inspector/background.js:                tabInfo = {sources : {}};
ruau/ruau-devtools/ruau-inspector/background.js:                RuueInspector.tabs[tabId] = tabInfo;
ruau/ruau-devtools/ruau-inspector/background.js:            tabInfo.port = port;
ruau/ruau-devtools/ruau-inspector/background.js:        port.onMessage.addListener(RuueInspector.handleMessage);
ruau/ruau-devtools/ruau-inspector/background.js:    handleMessage : function(message){
ruau/ruau-devtools/ruau-inspector/background.js:        if(message.subscribe){
ruau/ruau-devtools/ruau-inspector/background.js:            var port = message.port;
ruau/ruau-devtools/ruau-inspector/background.js:            for(var i=0;i<message.subscribe.length;i++){
ruau/ruau-devtools/ruau-inspector/background.js:                var type = message.subscribe[i];
ruau/ruau-devtools/ruau-inspector/background.js:                var sub = RuueInspector.subscriptions[type];
ruau/ruau-devtools/ruau-inspector/background.js:                    RuueInspector.subscriptions[type] = sub;
ruau/ruau-devtools/ruau-inspector/background.js:            var str = "";
ruau/ruau-devtools/ruau-inspector/background.js:            for (x in message) {
ruau/ruau-devtools/ruau-inspector/background.js:                str += x+" = "+message[x]+"\n";
ruau/ruau-devtools/ruau-inspector/background.js:            var action = RuueInspector.actions[message.action];
ruau/ruau-devtools/ruau-inspector/background.js:            if(action){
ruau/ruau-devtools/ruau-inspector/background.js:                action(message.params);
ruau/ruau-devtools/ruau-inspector/background.js:            var subscriptions = RuueInspector.subscriptions[message.action];
ruau/ruau-devtools/ruau-inspector/background.js:                for(var j=0;j<subscriptions.length;j++){
ruau/ruau-devtools/ruau-inspector/background.js:                    var port = RuueInspector.ports[subscriptions[j]];
ruau/ruau-devtools/ruau-inspector/background.js:                    port.postMessage(message);
ruau/ruau-devtools/ruau-inspector/background.js:    actions : {
ruau/ruau-devtools/ruau-inspector/background.js:        requestComponentTree : function(params){
ruau/ruau-devtools/ruau-inspector/background.js:            chrome.tabs.getSelected(undefined, function(tab){
ruau/ruau-devtools/ruau-inspector/background.js:                var port = RuueInspector.tabs[tab.id].port;
ruau/ruau-devtools/ruau-inspector/background.js:                    port.postMessage({action : "getComponentTree"});
ruau/ruau-devtools/ruau-inspector/background.js:                    alert("Failed to access tab="+tab.id);
ruau/ruau-devtools/ruau-inspector/background.js:        highlightElements : function(globalId){
ruau/ruau-devtools/ruau-inspector/background.js:            chrome.tabs.getSelected(undefined, function(tab){
ruau/ruau-devtools/ruau-inspector/background.js:                var port = RuueInspector.tabs[tab.id].port;
ruau/ruau-devtools/ruau-inspector/background.js:                    port.postMessage({action : "highlightElements", params : globalId});
ruau/ruau-devtools/ruau-inspector/background.js:                    alert("Failed to access tab="+tab.id);
ruau/ruau-devtools/ruau-inspector/background.js:chrome.extension.onConnect.addListener(RuueInspector.connect);
Binary file ruau/ruau-devtools/ruau-inspector/icon128.png matches
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.html:	<head>
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.html:		<link rel="stylesheet" type="text/css" href="devtoolsPanel.css" media="screen">
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.html:	</head>
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.html:		<script src="devtoolsPanel.js"></script>
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.html:		<ol class="tree" id="tree"></ol>
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:/* Just some base styles not needed for example to function */
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:*, html { font-family: Verdana, Arial, Helvetica, sans-serif; }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	margin: 0;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	padding: 0;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:body { background-color: #606061; color: #ffffff; margin: 0; }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	margin: 0 0 1em 0;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:html { font-size: 100%; /* IE hack */ }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:body { font-size: 1em; /* Sets base font size to 16px */ }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:table { font-size: 100%; /* IE hack */ }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:input, select, textarea, th, td { font-size: 1em; }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:.label{
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	padding: 0 0 0 30px;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	position: relative; 
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	margin-left: -15px;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	margin-left: -1px !important;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:li.file a
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	background: url(CODument.png) 0 0 no-repeat;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	padding-left: 21px;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	text-decoration: none;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	display: block;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:li.file a[href *= '.pdf']	{ background: url(CODument.png) 0 0 no-repeat; }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	li.file a[href *= '.html']	{ background: url(CODument.png) 0 0 no-repeat; }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	li.file a[href $= '.css']	{ background: url(CODument.png) 0 0 no-repeat; }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	li.file a[href $= '.js']		{ background: url(CODument.png) 0 0 no-repeat; }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	position: absolute;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	margin-left: 0;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	opacity: 0;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	background: url(toggle-small-expand.png) 40px 0 no-repeat;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	margin: -0.938em 0 0 -44px; /* 15px */
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:li input + ol > li { display: none; margin-left: -14px !important; padding-left: 1px; }
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:li label
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	display: block;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	padding-left: 11px;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	background: url(toggle-small.png) 40px 5px no-repeat;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	margin: -1.25em 0 0 -44px; /* 20px */
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	padding: 1.563em 0 0 80px;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:	height: auto;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:li input:checked + ol > li { display: block; margin: 0 0 0.125em;  /* 2px */}
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.css:li input:checked + ol > li:last-child { margin: 0 0 0.063em; /* 1px */ }
Binary file ruau/ruau-devtools/ruau-inspector/folder-horizontal.png matches
Binary file ruau/ruau-devtools/ruau-inspector/toggle-small.png matches
Binary file ruau/ruau-devtools/ruau-inspector/CODument.png matches
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:var RuueInspectorDevtoolsPanel = {
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        RuueInspectorDevtoolsPanel.port = chrome.extension.connect({name : "RuueInspectorDevtoolsPanel"});
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        RuueInspectorDevtoolsPanel.port.onMessage.addListener(RuueInspectorDevtoolsPanel.handleMessage);
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        RuueInspectorDevtoolsPanel.port.postMessage({subscribe : ["publishComponentTree"], port : RuueInspectorDevtoolsPanel.port.name});
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        // doh! what should we do?
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        RuueInspectorContentScript.port = null;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        setTimeout(RuueInspectorContentScript.connect, 1500);
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:    handleMessage : function(message){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        RuueInspectorDevtoolsPanel.actions[message.action](message.params);
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:    actions : {
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            RuueInspectorDevtoolsPanel.port.postMessage({action : "requestComponentTree"});
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        publishComponentTree : function(params){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            var treeElement = CODument.getElementById("tree");
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            var tree = JSON.parse(params);
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            treeElement.appendChild(RuueInspectorDevtoolsPanel.createFolder({value:tree, expanded : true}));
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        highlightElements : function(globalId){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            RuueInspectorDevtoolsPanel.port.postMessage({action : "highlightElements", params : globalId});
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:    isArray : function(obj){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        return obj && obj.constructor === Array;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        return !!obj && Object.prototype.toString.apply(obj) === '[object Object]';
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:    createFolder : function(config){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        var root = CODument.createElement("li");
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            RuueInspectorDevtoolsPanel.actions.highlightElements();
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        var value = config.value;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        var text = config.label || "" ;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        text = '<span class="label">'+text+'</span>';
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        var hasBody = false;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        if(RuueInspectorDevtoolsPanel.isArray(value)){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            text = text + " ["+value.length+"]";
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            if(value.length == 0){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                hasBody = false;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                value = undefined;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                hasBody = true;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        }else if (RuueInspectorDevtoolsPanel.isObject(value)){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            hasBody = true;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            if(value._descriptor){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                text += value._descriptor;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:        if(hasBody){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            var label = CODument.createElement("label");
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            label.for = "folder"+(RuueInspectorDevtoolsPanel.nodeId++);
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            if(config.value && config.value.globalId){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                var globalId = config.value.globalId;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                label.onmouseover = function(){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                    RuueInspectorDevtoolsPanel.actions.highlightElements(globalId);
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            label.innerHTML = text;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            root.appendChild(label);
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            var checkbox = CODument.createElement("input");
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            checkbox.id = label.for;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            if(config.expanded){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            if(config.disabled){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                checkbox.disabled = "disabled";
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            root.appendChild(checkbox);
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            var contents = CODument.createElement("ol");
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            function createContents(){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                if(RuueInspectorDevtoolsPanel.isObject(value)){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                    for(var key in value){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                        contents.appendChild(RuueInspectorDevtoolsPanel.createFolder({label : key, value : value[key]}));
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                }else if(RuueInspectorDevtoolsPanel.isArray(value)){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                    for(var i=0;i<value.length;i++){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                        contents.appendChild(RuueInspectorDevtoolsPanel.createFolder({label : "["+i+"]" , value : value[i]}));
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            if(!config.expanded){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                checkbox.onchange = function(){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                        createContents();
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                        delete this.onchange;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                createContents();
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            root.appendChild(contents);
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:            if(value !== undefined){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                if(RuueInspectorDevtoolsPanel.isString(value)){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                text += value;
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:                if(RuueInspectorDevtoolsPanel.isString(value)){
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:RuueInspectorDevtoolsPanel.connect();
ruau/ruau-devtools/ruau-inspector/devtoolsPanel.js:    RuueInspectorDevtoolsPanel.actions.getComponentTree();
ruau/ruau-devtools/ruau-inspector/manifest.json:        "manifest_version":2,
ruau/ruau-devtools/ruau-inspector/manifest.json:	"name": "Ruue Inspector",
ruau/ruau-devtools/ruau-inspector/manifest.json:	"description": "For inspecting Ruue apps",
ruau/ruau-devtools/ruau-inspector/manifest.json:	"update_url": "http://download.ruauframework.org/ruau-inspector/ruau-inspector-updates.xml",
ruau/ruau-devtools/ruau-inspector/manifest.json:	"background": {
ruau/ruau-devtools/ruau-inspector/manifest.json:                "scripts" : [ "background.js" ]
ruau/ruau-devtools/ruau-inspector/manifest.json:	"devtools_page": "devtools.html",
ruau/ruau-devtools/ruau-inspector/manifest.json:		"matches": ["http://*/*", "https://*/*"],
ruau/ruau-devtools/ruau-inspector/manifest.json:		"run_at": "CODument_idle",
ruau/ruau-devtools/ruau-inspector/manifest.json:		"all_frames": false
ruau/ruau-devtools/ruau-inspector/manifest.json:	"permissions": ["tabs", "background"]
Binary file ruau/ruau-devtools/ruau-inspector/icon48.png matches
ruau/ruau-devtools/ruau-inspector/contentScriptPage.html:	<head>
ruau/ruau-devtools/ruau-inspector/contentScriptPage.html:	</head>
Binary file ruau/ruau-devtools/ruau-inspector/icon16.png matches
ruau/ruau-devtools/ruau-inspector/devtools.js:function page_getProperties() {
ruau/ruau-devtools/ruau-inspector/devtools.js:    var cmp = window.$A && $0 ? window.$A.services.component.getRenderingComponentForElement($0) : {};
ruau/ruau-devtools/ruau-inspector/devtools.js:  } catch (e) {return {"stack" : e.stack};}
ruau/ruau-devtools/ruau-inspector/devtools.js:chrome.devtools.panels.elements.createSidebarPane("Ruue", function(sidebar) {
ruau/ruau-devtools/ruau-inspector/devtools.js:  function updateElementProperties() {
ruau/ruau-devtools/ruau-inspector/devtools.js:    sidebar.setExpression("(" + page_getProperties.toString() + ")()");
ruau/ruau-devtools/ruau-inspector/devtools.js:  updateElementProperties();
ruau/ruau-devtools/ruau-inspector/devtools.js:  chrome.devtools.panels.elements.onSelectionChanged.addListener(updateElementProperties);
ruau/ruau-devtools/ruau-inspector/devtools.js:chrome.devtools.panels.create("Ruue",
ruau/ruau-devtools/ruau-inspector/devtools.js:                              "devtoolsPanel.html",
ruau/ruau-devtools/ruau-inspector/devtools.js:                              function(panel) {
ruau/ruau-devtools/ruau-inspector/devtools.js:                                panel.onShown.addListener(function(win){
ruau/ruau-devtools/ruau-inspector/background.html:  <head>
ruau/ruau-devtools/ruau-inspector/background.html:		var RuueInspector = {
ruau/ruau-devtools/ruau-inspector/background.html:			frameStartTime : 0,
ruau/ruau-devtools/ruau-inspector/background.html:			tabs : {},
ruau/ruau-devtools/ruau-inspector/background.html:				var tab = port.sender.tab;
ruau/ruau-devtools/ruau-inspector/background.html:				if(port.name){
ruau/ruau-devtools/ruau-inspector/background.html:					RuueInspector.ports[port.name] = port;
ruau/ruau-devtools/ruau-inspector/background.html:				}else if(tab){
ruau/ruau-devtools/ruau-inspector/background.html:					var tabId = tab.id;
ruau/ruau-devtools/ruau-inspector/background.html:					var tabInfo = RuueInspector.tabs[tabId];
ruau/ruau-devtools/ruau-inspector/background.html:					if(!tabInfo){
ruau/ruau-devtools/ruau-inspector/background.html:						tabInfo = {sources : {}};
ruau/ruau-devtools/ruau-inspector/background.html:						RuueInspector.tabs[tabId] = tabInfo;
ruau/ruau-devtools/ruau-inspector/background.html:					tabInfo.port = port;
ruau/ruau-devtools/ruau-inspector/background.html:				port.onMessage.addListener(RuueInspector.handleMessage);
ruau/ruau-devtools/ruau-inspector/background.html:			handleMessage : function(message){
ruau/ruau-devtools/ruau-inspector/background.html:				if(message.subscribe){
ruau/ruau-devtools/ruau-inspector/background.html:					var port = message.port;
ruau/ruau-devtools/ruau-inspector/background.html:					for(var i=0;i<message.subscribe.length;i++){
ruau/ruau-devtools/ruau-inspector/background.html:						var type = message.subscribe[i];
ruau/ruau-devtools/ruau-inspector/background.html:						var sub = RuueInspector.subscriptions[type];
ruau/ruau-devtools/ruau-inspector/background.html:							RuueInspector.subscriptions[type] = sub;
ruau/ruau-devtools/ruau-inspector/background.html:					var action = RuueInspector.actions[message.action];
ruau/ruau-devtools/ruau-inspector/background.html:					if(action){
ruau/ruau-devtools/ruau-inspector/background.html:						action(message.params);
ruau/ruau-devtools/ruau-inspector/background.html:					var subscriptions = RuueInspector.subscriptions[message.action];
ruau/ruau-devtools/ruau-inspector/background.html:						for(var j=0;j<subscriptions.length;j++){
ruau/ruau-devtools/ruau-inspector/background.html:							var port = RuueInspector.ports[subscriptions[j]];
ruau/ruau-devtools/ruau-inspector/background.html:							port.postMessage(message);
ruau/ruau-devtools/ruau-inspector/background.html:			actions : {
ruau/ruau-devtools/ruau-inspector/background.html:				requestComponentTree : function(params){
ruau/ruau-devtools/ruau-inspector/background.html:					chrome.tabs.getSelected(undefined, function(tab){
ruau/ruau-devtools/ruau-inspector/background.html:						var port = RuueInspector.tabs[tab.id].port;
ruau/ruau-devtools/ruau-inspector/background.html:						port.postMessage({action : "getComponentTree"});
ruau/ruau-devtools/ruau-inspector/background.html:				highlightElements : function(globalId){
ruau/ruau-devtools/ruau-inspector/background.html:					chrome.tabs.getSelected(undefined, function(tab){
ruau/ruau-devtools/ruau-inspector/background.html:						var port = RuueInspector.tabs[tab.id].port;
ruau/ruau-devtools/ruau-inspector/background.html:						port.postMessage({action : "highlightElements", params : globalId});
ruau/ruau-devtools/ruau-inspector/background.html:		chrome.extension.onConnect.addListener(RuueInspector.connect);
ruau/ruau-devtools/ruau-inspector/background.html:  </head>
Binary file ruau/ruau-devtools/ruau-inspector/toggle-small-expand.png matches
ruau/ruau-devtools/ruau-inspector/contentScript.js:var RuueInspectorContentScript = {
ruau/ruau-devtools/ruau-inspector/contentScript.js:        RuueInspectorContentScript.dtsPort = CODument.getElementById("RuueDevToolServicePort");
ruau/ruau-devtools/ruau-inspector/contentScript.js:        if (!RuueInspectorContentScript.dtsPort) {
ruau/ruau-devtools/ruau-inspector/contentScript.js:            RuueInspectorContentScript.dtsPort = null;
ruau/ruau-devtools/ruau-inspector/contentScript.js:            setTimeout(RuueInspectorContentScript.connect, 1500);
ruau/ruau-devtools/ruau-inspector/contentScript.js:        RuueInspectorContentScript.port = chrome.extension.connect();
ruau/ruau-devtools/ruau-inspector/contentScript.js:        RuueInspectorContentScript.port.onMessage.addListener(RuueInspectorContentScript.handleMessage);
ruau/ruau-devtools/ruau-inspector/contentScript.js:        RuueInspectorContentScript.port.onDisconnect.addListener(RuueInspectorContentScript.disconnect);
ruau/ruau-devtools/ruau-inspector/contentScript.js:        setTimeout(RuueInspectorContentScript.actions.getComponentTree, 1500);
ruau/ruau-devtools/ruau-inspector/contentScript.js:    handleMessage : function(message){
ruau/ruau-devtools/ruau-inspector/contentScript.js:        RuueInspectorContentScript.actions[message.action](message.params);
ruau/ruau-devtools/ruau-inspector/contentScript.js:        // doh! what should we do?
ruau/ruau-devtools/ruau-inspector/contentScript.js:        RuueInspectorContentScript.port = null;
ruau/ruau-devtools/ruau-inspector/contentScript.js:        RuueInspectorContentScript.dtsPort = null;
ruau/ruau-devtools/ruau-inspector/contentScript.js:        setTimeout(RuueInspectorContentScript.connect, 1500);
ruau/ruau-devtools/ruau-inspector/contentScript.js:    actions : {
ruau/ruau-devtools/ruau-inspector/contentScript.js:            if (RuueInspectorContentScript.port == null || RuueInspectorContentScript.dtsPort == null) {
ruau/ruau-devtools/ruau-inspector/contentScript.js:            var customEvent = CODument.createEvent('Event');
ruau/ruau-devtools/ruau-inspector/contentScript.js:            CODument.body.dispatchEvent(customEvent);
ruau/ruau-devtools/ruau-inspector/contentScript.js:            RuueInspectorContentScript.port.postMessage({action : "publishComponentTree",
ruau/ruau-devtools/ruau-inspector/contentScript.js:                                                         params : RuueInspectorContentScript.dtsPort.innerText});
ruau/ruau-devtools/ruau-inspector/contentScript.js:            RuueInspectorContentScript.dtsPort.innerText = "";
ruau/ruau-devtools/ruau-inspector/contentScript.js:        highlightElements : function(globalId){
ruau/ruau-devtools/ruau-inspector/contentScript.js:            var customEvent = CODument.createEvent('MessageEvent');
ruau/ruau-devtools/ruau-inspector/contentScript.js:            customEvent.initMessageEvent('highlightElementsEvent', true, true, globalId);
ruau/ruau-devtools/ruau-inspector/contentScript.js:            CODument.body.dispatchEvent(customEvent);
ruau/ruau-devtools/ruau-inspector/contentScript.js:RuueInspectorContentScript.connect();
ruau/ruau-tools/.settings/org.eclipse.jdt.core.prefs:org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
ruau/ruau-tools/.settings/org.eclipse.jdt.core.prefs:encoding/src/main/java=UTF-8
ruau/ruau-tools/.settings/org.eclipse.jdt.core.prefs:encoding/src/main/resources=UTF-8
ruau/ruau-tools/.settings/org.eclipse.jdt.core.prefs:encoding/src/test/java=UTF-8
ruau/ruau-tools/.settings/org.eclipse.jdt.core.prefs:org.eclipse.jdt.core.compiler.compliance=1.7
ruau/ruau-tools/.classpath:<classpath>
ruau/ruau-tools/.classpath:  <classpathentry kind="src" path="src/test/java" output="target/test-classes" including="**/*.java"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="src" path="src/test" output="target/test-classes" including="results/**/*|testdata/**/*" excluding="**/*.java"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="src" path="src/main/java" including="**/*.java"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="output" path="target/classes"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/javax/servlet/javax.servlet-api/3.0.1/javax.servlet-api-3.0.1.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="src" path="/ruau"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="src" path="/ruau-util"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/httpcomponents/httpclient/4.3.1/httpclient-4.3.1.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/httpcomponents/httpcore/4.3.1/httpcore-4.3.1.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/commons-codec/commons-codec/1.5/commons-codec-1.5.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/guava/guava/14.0.1/guava-14.0.1.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/javascript/closure-compiler/v20130411/closure-compiler-v20130411.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/args4j/args4j/2.0.28/args4j-2.0.28.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/protobuf/protobuf-java/2.4.1/protobuf-java-2.4.1.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/json/json/20090211/json-20090211.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/maven/maven-plugin-api/2.0/maven-plugin-api-2.0.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/joda-time/joda-time/2.1/joda-time-2.1.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/com/ibm/icu/icu4j/4.6.1/icu4j-4.6.1.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/net/sourceforge/findbugs/annotations/1.2.0/annotations-1.2.0.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/reflections/reflections/0.9.8/reflections-0.9.8.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/javassist/javassist/3.12.1.GA/javassist-3.12.1.GA.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/com/salesforce/omakase/0.2.2/omakase-0.2.2.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="src" path="/ruau-impl"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="src" path="/ruau-impl-expression"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/antlr/antlr/3.3/antlr-3.3.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/antlr/antlr-runtime/3.3/antlr-runtime-3.3.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="src" path="/ruau-components"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/log4j/log4j/1.2.16/log4j-1.2.16.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-vfs2/2.0/commons-vfs2-2.0.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/maven/scm/maven-scm-api/1.4/maven-scm-api-1.4.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/codehaus/plexus/plexus-utils/1.5.6/plexus-utils-1.5.6.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/maven/scm/maven-scm-provider-svnexe/1.4/maven-scm-provider-svnexe-1.4.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/apache/maven/scm/maven-scm-provider-svn-commons/1.4/maven-scm-provider-svn-commons-1.4.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/regexp/regexp/1.3/regexp-1.3.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/commons-io/commons-io/2.2/commons-io-2.2.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-nop/1.6.4/slf4j-nop-1.6.4.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/junit/junit/4.11/junit-4.11.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
ruau/ruau-tools/.classpath:  <classpathentry kind="var" path="M2_REPO/org/mockito/mockito-all/1.9.5/mockito-all-1.9.5.jar"/>
ruau/ruau-tools/.classpath:</classpath>
ruau/ruau-tools/pom.xml:<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
ruau/ruau-tools/pom.xml:    <artifactId>ruau-tools</artifactId>
ruau/ruau-tools/pom.xml:    <packaging>maven-plugin</packaging>
ruau/ruau-tools/pom.xml:    <parent>
ruau/ruau-tools/pom.xml:        <groupId>org.ruauframework</groupId>
ruau/ruau-tools/pom.xml:        <artifactId>ruau-framework</artifactId>
ruau/ruau-tools/pom.xml:        <relativePath>../pom.xml</relativePath>
ruau/ruau-tools/pom.xml:    </parent>
ruau/ruau-tools/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-tools/pom.xml:            <artifactId>ruau</artifactId>
ruau/ruau-tools/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-tools/pom.xml:            <artifactId>ruau</artifactId>
ruau/ruau-tools/pom.xml:            <type>test-jar</type>
ruau/ruau-tools/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-tools/pom.xml:            <artifactId>ruau-impl</artifactId>
ruau/ruau-tools/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-tools/pom.xml:            <artifactId>ruau-impl</artifactId>
ruau/ruau-tools/pom.xml:            <type>test-jar</type>
ruau/ruau-tools/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-tools/pom.xml:            <artifactId>ruau-components</artifactId>
ruau/ruau-tools/pom.xml:            <groupId>org.ruauframework</groupId>
ruau/ruau-tools/pom.xml:            <artifactId>ruau-util</artifactId>
ruau/ruau-tools/pom.xml:            <type>test-jar</type>
ruau/ruau-tools/pom.xml:            <artifactId>annotations</artifactId>
ruau/ruau-tools/pom.xml:            <groupId>org.apache.maven</groupId>
ruau/ruau-tools/pom.xml:            <artifactId>maven-plugin-api</artifactId>
ruau/ruau-tools/pom.xml:                <groupId>org.apache.maven.plugins</groupId>
ruau/ruau-tools/pom.xml:                <artifactId>maven-plugin-plugin</artifactId>
ruau/ruau-tools/pom.xml:                <groupId>org.apache.maven.plugins</groupId>
ruau/ruau-tools/pom.xml:                <artifactId>maven-compiler-plugin</artifactId>
ruau/ruau-tools/pom.xml:                <configuration>
ruau/ruau-tools/pom.xml:                    <target>1.7</target>
ruau/ruau-tools/pom.xml:                </configuration>
ruau/ruau-tools/.project:  <name>ruau-tools</name>
ruau/ruau-tools/.project:  <comment>NO_M2ECLIPSE_SUPPORT: Project files created with the maven-eclipse-plugin are not supported in M2Eclipse.</comment>
ruau/ruau-tools/.project:    <project>ruau</project>
ruau/ruau-tools/.project:    <project>ruau-util</project>
ruau/ruau-tools/.project:    <project>ruau-impl</project>
ruau/ruau-tools/.project:    <project>ruau-impl-expression</project>
ruau/ruau-tools/.project:    <project>ruau-components</project>
ruau/ruau-tools/.project:    <buildCommand>
ruau/ruau-tools/.project:      <name>org.eclipse.jdt.core.javabuilder</name>
ruau/ruau-tools/.project:    </buildCommand>
ruau/ruau-tools/.project:  <natures>
ruau/ruau-tools/.project:    <nature>org.eclipse.jdt.core.javanature</nature>
ruau/ruau-tools/.project:  </natures>
ruau/ruau-tools/build.gradle:  compile project(':ruau')
ruau/ruau-tools/build.gradle:  compile project(':ruau-impl')
ruau/ruau-tools/build.gradle:  compile project(':ruau-components')
ruau/ruau-tools/build.gradle:    compile group: 'net.sourceforge.findbugs', name: 'annotations', version:'1.2.0'
ruau/ruau-tools/build.gradle:    compile group: 'org.apache.maven', name: 'maven-plugin-api', version:'2.0'
ruau/ruau-tools/build.gradle:  testCompile project(':ruau')
ruau/ruau-tools/build.gradle:  testCompile project(':ruau-impl')
ruau/ruau-tools/build.gradle:  testCompile project(':ruau-util')
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java: * you may not use this file except in compliance with the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java: * You may obtain a copy of the License at
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java: * See the License for the specific language governing permissions and
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java: * limitations under the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:package org.ruauframework.tools.definition;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import java.io.File;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import java.util.Map;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import org.ruauframework.Ruue;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import org.ruauframework.def.ApplicationDef;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import org.ruauframework.service.*;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import org.ruauframework.util.IOUtil;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:import com.google.common.collect.Maps;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:public class ApplicationSerializer {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:    public static void main(String[] args) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:        ContextService contextService = Ruue.getContextService();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:        DefinitionService definitionService = Ruue.getDefinitionService();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:        DefDescriptor<ApplicationDef> appDesc = definitionService.getDefDescriptor("ruau:test", ApplicationDef.class);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:        contextService.startContext(Mode.PROD, Format.HTML, Authentication.AUTHENTICATED, appDesc);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:        SerializationService serializationService = Ruue.getSerializationService();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:            Map<String, Object> atts = Maps.newHashMap();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:                    "/home/dpletter/dev/lumen-beta/ruau-integration-test/src/test/resources/htCODs/app");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:            atts.put("outputPath", outputDir.getAbsolutePath());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:            serializationService.write(appDesc.getDef(), atts, ApplicationDef.class, System.out, "OFFLINE_HTML");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:        } catch (Throwable e) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/ApplicationSerializer.java:            e.printStackTrace();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: * you may not use this file except in compliance with the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: * You may obtain a copy of the License at
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: * See the License for the specific language governing permissions and
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: * limitations under the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:package org.ruauframework.tools.definition;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import java.io.File;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import java.io.IOException;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import java.util.Collection;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import java.util.Map;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import java.util.TreeMap;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import org.ruauframework.Ruue;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import org.ruauframework.impl.root.parser.XMLWriter;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import org.ruauframework.impl.root.parser.handler.XMLHandler;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:import org.ruauframework.util.RegistryJsonSerializer;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java: * Serialize Ruue Component Registry to json for consumption by tools like
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:public class RegistryAndSystemTagsJsonSerializer {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:    final static String FILE_NAME_SYSTEM_TAGS = "ruauSystemTags.json";
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:    final static String DEFAULT_FILE_SYSTEM_TAGS = RegistryJsonSerializer.DEFAULT_DIR + File.separator
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:    public static void main(String[] args) throws IOException, QuickFixException {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:        serializeToFile();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:    private static void serializeToFile() throws QuickFixException, IOException {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:        Ruue.getContextService().startContext(Mode.PROD, Format.HTML, Authentication.AUTHENTICATED);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:        Map<String, Map<String, Map<String, Map<String, String>>>> components = new TreeMap<>();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:            loadMetadataForSystemComponents(components);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:            RegistryJsonSerializer.writeMetadataToFile(components, DEFAULT_FILE_SYSTEM_TAGS);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:            components.clear();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:            RegistryJsonSerializer.serializeToFile();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:        } finally {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:            Ruue.getContextService().endContext();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:    private static void loadMetadataForSystemComponents(
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:            Map<String, Map<String, Map<String, Map<String, String>>>> components) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:        Collection<XMLHandler<?>> specialComps = xmlWriter.getHandlers().values();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:        Map<String, Map<String, Map<String, String>>> component;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:        Map<String, Map<String, String>> componentDetails;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:        for (XMLHandler<?> specialComp : specialComps) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:            String compName = specialComp.getHandledTag();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:            // some handlers don't really have a TAG..
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:            if (XMLHandler.SYSTEM_TAGS.contains(compName)) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:                component = new TreeMap<>();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:                componentDetails = new TreeMap<>();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:                for (String attribute : specialComp.getAllowedAttributes()) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:                    Map<String, String> attributeProps = new TreeMap<>();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:                    attributeProps.put(RegistryJsonSerializer.TYPE_KEY, "Object");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:                    componentDetails.put(attribute, attributeProps);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:                component.put(RegistryJsonSerializer.ATTRIBUTES_KEY, componentDetails);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistryAndSystemTagsJsonSerializer.java:                components.put(compName, component);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java: * you may not use this file except in compliance with the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java: * You may obtain a copy of the License at
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java: * See the License for the specific language governing permissions and
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java: * limitations under the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:package org.ruauframework.tools.definition;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:import java.io.File;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:import java.util.Set;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:import org.ruauframework.tools.definition.RegistrySerializer.RegistrySerializerException;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:import org.ruauframework.tools.definition.RegistrySerializer.RegistrySerializerLogger;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:public abstract class RuueCompiler {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:    private static class CommandLineLogger implements RegistrySerializerLogger {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        private void log(String level, CharSequence message, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            buffer.append(level);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            buffer.append(": ");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            if (message != null) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:                buffer.append(message);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            if (cause != null) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:                buffer.append(sep);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:                buffer.append(cause.getMessage());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            if (cause != null) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:                cause.printStackTrace(System.out);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void error(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("ERROR", loggable, null);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void error(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("ERROR", loggable, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void error(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("ERROR", null, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void warning(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("WARNING", loggable, null);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void warning(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("WARNING", loggable, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void warning(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("WARNING", null, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void info(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("iNFO", loggable, null);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void info(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("iNFO", loggable, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void info(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("iNFO", null, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void debug(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("DEBUG", loggable, null);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void debug(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("DEBUG", loggable, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        public void debug(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            log("DEBUG", null, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:    public static void main(String[] args) throws Throwable {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        CommandLineLogger cll = new CommandLineLogger();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        File componentsDir = new File(args[0]);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        File outputDir = new File(args[1]);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        Set<String> ns = Sets.newHashSet();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        for (i = 2; i < args.length; i++) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            ns.add(args[i]);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            new RegistrySerializer(componentsDir, outputDir, ns.toArray(new String [ns.size()]), cll).execute();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:        } catch (RegistrySerializerException rse) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RuueCompiler.java:            cll.error(rse.getMessage(), rse.getCause());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * you may not use this file except in compliance with the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * You may obtain a copy of the License at
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * See the License for the specific language governing permissions and
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * limitations under the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:package org.ruauframework.tools.definition;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:import java.io.File;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:import org.apache.maven.plugin.AbstractMojo;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:import org.apache.maven.plugin.MojoExecutionException;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:import org.apache.maven.plugin.logging.Log;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:import org.ruauframework.tools.definition.RegistrySerializer.RegistrySerializerException;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:import org.ruauframework.tools.definition.RegistrySerializer.RegistrySerializerLogger;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * Goal compiles components into a static registry.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * This is a maven plugin.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * @goal compile-components
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * @phase process-classes
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java: * @phase process-test-classes
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:public class CompilerMojo extends AbstractMojo {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * componentDirectory: The base directory for components.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * If the directory name is relative, it will be relative to the pom file location
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * This is the top level directory under which all namespaces are to be compiled.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * @parameter property="componentDirectory"
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:    private File componentDirectory;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * If the directory name is relative, it will be relative to the pom file location
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * This is the top level directory under which all namespaces are to be compiled.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * The output is always put in a file called '.registries' inside this directory.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * @parameter property="outputDirectory"
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:    private File outputDirectory;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * excluded: Namespaces to exclude.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * This is an optional set of namespaces to exclude.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * @parameter property="excluded"
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * @optional
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:    private String[] excluded;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * Create an empty compiler instance.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * With this constructor, the caller is required to set the various parameters by some sort of
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * magic. This is used by the maven plugin manager to create and populate fields.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:     * The entry point for the maven plugin.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        RegistrySerializer rs = new RegistrySerializer(componentDirectory, outputDirectory, excluded, logger);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        } catch (RegistrySerializerException rse) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            throw new MojoExecutionException(rse.getMessage(), rse.getCause());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:    private static class Logger implements RegistrySerializerLogger {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        private final Log mojoLogger;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void error(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.error(loggable);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void error(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.error(loggable, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void error(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.error(cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void warning(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.warn(loggable);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void warning(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.warn(loggable, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void warning(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.warn(cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void info(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.info(loggable);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void info(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.info(loggable, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void info(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.info(cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void debug(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.debug(loggable);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void debug(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.debug(loggable, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:        public void debug(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/CompilerMojo.java:            mojoLogger.debug(cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * you may not use this file except in compliance with the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * You may obtain a copy of the License at
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * See the License for the specific language governing permissions and
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * limitations under the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:package org.ruauframework.tools.definition;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import java.io.File;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import java.io.FileNotFoundException;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import java.io.FileOutputStream;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import java.io.IOException;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import java.io.ObjectOutputStream;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import java.io.OutputStream;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import java.util.List;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import java.util.Map;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import java.util.Set;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.Ruue;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.def.DefDescriptor;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.def.DefDescriptor.DefType;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.def.Definition;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.def.DescriptorFilter;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.def.NamespaceDef;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.impl.source.file.FileSourceLoader;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.impl.system.StaticDefRegistryImpl;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.system.RuueContext.Authentication;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.system.RuueContext.Format;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.system.RuueContext.Mode;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.system.DefRegistry;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.system.MasterDefRegistry;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import org.ruauframework.throwable.quickfix.QuickFixException;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import edu.umd.cs.findbugs.annotations.CheckForNull;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:import edu.umd.cs.findbugs.annotations.NonNull;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * Compile components into a set of static registries and write them to a file.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * This requires a components directory, an output directory, and optionally can take
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * a set of namespaces to exclude.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * Note that the output file is a binary object file that is a set of registries,
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java: * one per namespace, that contain all of the defs that are in the namespaces.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:public class RegistrySerializer {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * An exception during serialization.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    @SuppressWarnings("serial")
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    public class RegistrySerializerException extends Exception {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        private RegistrySerializerException(String message, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            super(message, cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        private RegistrySerializerException(String message) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            super(message);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    public static interface RegistrySerializerLogger {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void error(CharSequence loggable);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void error(CharSequence loggable, Throwable cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void error(Throwable cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void warning(CharSequence loggable);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void warning(CharSequence loggable, Throwable cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void warning(Throwable cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void info(CharSequence loggable);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void info(CharSequence loggable, Throwable cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void info(Throwable cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void debug(CharSequence loggable);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void debug(CharSequence loggable, Throwable cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void debug(Throwable cause);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    private static class DefaultLogger implements RegistrySerializerLogger {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void error(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void error(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void error(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void warning(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void warning(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void warning(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void info(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void info(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void info(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void debug(CharSequence loggable) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void debug(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        public void debug(Throwable cause) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    private final DefaultLogger DEFAULT_LOGGER = new DefaultLogger();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * componentDirectory: The base directory for components.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    private final File componentDirectory;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    private final File outputDirectory;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * excluded: Namespaces to exclude.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    private final String[] excluded;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * A logger for logging information to the user.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    private final RegistrySerializerLogger logger;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * A flag for an error occuring.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    private boolean error = false;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * Create a compiler instance.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * This creates a compiler for the component and output directory specified.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * @param componentDirectory the directory that we should use for components.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * @param outputDirectory the output directory where we should write the compiled component '.registry' file.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * @param excluded a set of excluded namespaces.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    public RegistrySerializer(@NonNull File componentDirectory, @NonNull File outputDirectory,
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            @NonNull String[] excluded, @CheckForNull RegistrySerializerLogger logger) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * write out the set of namespace registries to the given output stream.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * @param namespaces the namespaces to serialize.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * @param out the output stream to write into.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * @throws RegistrySerializerException if there is an error.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    public void write(@NonNull Set<String> namespaces, @NonNull OutputStream out) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        List<DefRegistry<Definition>> regs = Lists.newArrayList();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        for (String name : namespaces) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            regs.add(getRegistry(name));
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        ObjectOutputStream objectOut = null;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:                objectOut = new ObjectOutputStream(out);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            } finally {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        } catch (IOException ioe) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            logger.error("Unable to write out file", ioe);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * Get a registry for the namespace given.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * This function will compile all of the root definitions in a namespace, and then get all resulting
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * definitions out of that namespace, and create a static registry suitable for serialization.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * @param namespace the namespace for which we want to retrieve a static registry.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    private DefRegistry<Definition> getRegistry(@NonNull String namespace) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        Set<String> prefixes = Sets.newHashSet();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        Set<DefType> types = Sets.newHashSet();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        List<Definition> defs = Lists.newArrayList();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        MasterDefRegistry mdr = Ruue.getContextService().getCurrentContext().getDefRegistry();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        DescriptorFilter root_nsf = new DescriptorFilter(namespace,
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        Map<DefDescriptor<?>, Definition> filtered;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        Set<String> namespaces = Sets.newHashSet(namespace);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        // Fetch all matching descriptors for our 'root' definitions.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        // HACK! this should go away with: W-2368045
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        descriptors.add(Ruue.getDefinitionService().getDefDescriptor("markup://"+namespace, NamespaceDef.class));
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:                    logger.error("Unable to find "+desc+"@"+desc.getDefType());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            } catch (QuickFixException qfe) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        // Now filter the compiled set on the namespace.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        Set<DefDescriptor<?>> empty = Sets.newHashSet();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        logger.debug("******************************************* "+namespace+" ******************************");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        for (Map.Entry<DefDescriptor<?>,Definition> entry : filtered.entrySet()) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            Definition def = entry.getValue();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            // We ignore null here as we don't care about dead ends during compile.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            if (namespace.equals(desc.getNamespace()) && def != null) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:                types.add(desc.getDefType());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:                prefixes.add(desc.getPrefix());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:                defs.add(def);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            logger.error("No files compiled for "+namespace);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        return new StaticDefRegistryImpl<>(types, prefixes, namespaces, defs);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    public static final String ERR_ARGS_REQUIRED = "Component and Output Directory are both required";
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:    public void execute() throws RegistrySerializerException {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            throw new RegistrySerializerException(ERR_ARGS_REQUIRED);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        // Basic check... does the file exist?
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            throw new RegistrySerializerException("Component directory is not a directory: "+componentDirectory);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        if (!componentDirectory.canRead() || !componentDirectory.canWrite() ) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            throw new RegistrySerializerException("Unable to read/write "+componentDirectory);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        // Now, get our namespaces.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        FileSourceLoader fsl = new FileSourceLoader(componentDirectory);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        Set<String> namespaces = fsl.getNamespaces();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:                if (!namespaces.remove(x)) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:                    throw new RegistrySerializerException("Unable to exclude "+x);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            throw new RegistrySerializerException("Output directory is not a directory: "+outputDirectory);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        if (!outputDirectory.canWrite()) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            throw new RegistrySerializerException("Output directory is not writable: "+outputDirectory);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            boolean deleted = outputFile.delete();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:                throw new RegistrySerializerException("Unable to delete and create a new file: "+outputFile);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            outputFile.createNewFile();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        } catch (IOException ioe) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            throw new RegistrySerializerException("Unable to create "+outputFile);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        FileOutputStream out;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            out = new FileOutputStream(outputFile);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        } catch (FileNotFoundException fnfe) {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            throw new RegistrySerializerException("Unable to create "+outputFile, fnfe);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        Ruue.getContextService().startContext(Mode.DEV, Format.JSON, Authentication.AUTHENTICATED);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            write(namespaces, out);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:        } finally {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            Ruue.getContextService().endContext();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:            throw new RegistrySerializerException("one or more errors occurred during compile");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * Gets the componentDirectory for this instance.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * Gets the outputDirectory for this instance.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/definition/RegistrySerializer.java:     * Gets the excluded for this instance.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: * you may not use this file except in compliance with the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: * You may obtain a copy of the License at
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: * See the License for the specific language governing permissions and
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: * limitations under the License.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:package org.ruauframework.tools.javascript;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import java.io.File;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import java.io.FileWriter;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import java.io.IOException;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import java.util.Properties;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import java.util.logging.Logger;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import org.ruauframework.impl.javascript.RuueJavascriptGroup;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import org.ruauframework.impl.source.RuueResourcesHashingGroup;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import org.ruauframework.util.resource.CompiledGroup;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import org.ruauframework.util.resource.HashingGroup;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:import org.ruauframework.impl.util.RuueImplFiles;
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java: * main method for generating ruau framework javascript files
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:public class GenerateJavascript {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:    public static void main(String[] args) throws IOException {
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        Logger logger = Logger.getLogger(GenerateJavascript.class.getName());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        // ruau js
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        logger.info("Generating framework javascript");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        RuueJavascriptGroup js = new RuueJavascriptGroup();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        // generate the js into this package, this one right here I say.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        File dest = RuueImplFiles.RuueResourceJavascriptDirectory.asFile();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:            throw new IOException(dest.getPath() + " is supposed to be a directory");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        logger.info("Parsing framework javascript");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        js.parse();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        logger.info("Generating scripts to " + dest);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        js.generate(dest, false);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        // Store the precomputed hash into a file.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        logger.info("Saving framework version to filesystem");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        props.setProperty(CompiledGroup.UUID_PROPERTY, js.getGroupHash().toString());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        props.setProperty(CompiledGroup.LASTMOD_PROPERTY, Long.toString(js.getLastMod()));
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        File propertyFile = new File(dest, RuueJavascriptGroup.FILE_NAME);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        props.store(writer, "Ruue framework version information by GenerateJavascript");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        // Create hashing group for ruau resources. Doesn't need to parse or generate. Just hash it.
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        HashingGroup resourceJs = new RuueResourcesHashingGroup();
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        props.setProperty(CompiledGroup.UUID_PROPERTY, resourceJs.getGroupHash().toString());
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        props.setProperty(CompiledGroup.LASTMOD_PROPERTY, Long.toString(resourceJs.getLastMod()));
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        propertyFile = new File(dest, RuueResourcesHashingGroup.FILE_NAME);
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        logger.info("Saving resources version to filesystem");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        props.store(writer, "Ruue resources version information by GenerateJavascript");
ruau/ruau-tools/src/main/java/org/ruauframework/tools/javascript/GenerateJavascript.java:        // No waiting for jvm to realize we're done.
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java: * you may not use this file except in compliance with the License.
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java: * You may obtain a copy of the License at
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java: * See the License for the specific language governing permissions and
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java: * limitations under the License.
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:package org.ruauframework.tools.definition;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:import java.nio.file.Files;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:import java.nio.file.Path;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:import java.util.List;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:import org.ruauframework.component.RuueComponentTestBuilder;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:import org.ruauframework.def.ComponentDef;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:import org.ruauframework.test.UnitTestCase;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:import org.ruauframework.tools.definition.RegistrySerializer.RegistrySerializerException;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:import org.ruauframework.tools.definition.RegistrySerializer.RegistrySerializerLogger;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:public class RegistrySerializerTest extends UnitTestCase {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:    RuueComponentTestBuilder actb;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:    public RegistrySerializerTest(String name) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        super(name);
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        actb = new RuueComponentTestBuilder();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:    public void tearDown() throws Exception {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        actb.close();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        super.tearDown();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        RegistrySerializer rs = new RegistrySerializer(null, actb.getComponentsPath().toFile(), null, null);
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        } catch (RegistrySerializerException mee) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            assertEquals(mee.getMessage(), RegistrySerializer.ERR_ARGS_REQUIRED);
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        Path path = Files.createTempFile("badOutput", "foo");
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        RegistrySerializer rs = new RegistrySerializer(path.toFile(), actb.getComponentsPath().toFile(), null, null);
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        } catch (RegistrySerializerException mee) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            assertTrue("Expected error about component directory: "+mee.getMessage(),
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:                    mee.getMessage().startsWith("Component directory is not a directory:"));
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        Path path = Files.createTempFile("badOutput", "foo");
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        RegistrySerializer rs = new RegistrySerializer(actb.getComponentsPath().toFile(), path.toFile(), null, null);
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        } catch (RegistrySerializerException mee) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            assertTrue("Expected error about output directory: "+mee.getMessage(),
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:                    mee.getMessage().startsWith("Output directory is not a directory:"));
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:    public void testOutputValid() throws Exception {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        Path compPath = actb.getComponentsPath();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        String ns = actb.getNewNamespace();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        actb.getNewObject(ns, ComponentDef.class, "<ruau:component />");
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        actb.installComponentLocationAdapter();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        RegistrySerializer rs = new RegistrySerializer(compPath.toFile(), compPath.toFile(), null, logger);
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        } catch (RegistrySerializerException mee) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            fail("Got exception "+mee.getMessage());
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        assertEquals("Error logs should be empty", 0, logger.getErrorLogEntries().size());
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:    public void testOutputInvalid() throws Exception {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        Path compPath = actb.getComponentsPath();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        String ns = actb.getNewNamespace();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        // deliberate missing component
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        actb.getNewObject(ns, ComponentDef.class, "<ruau;component><ruau:IDontExistReallyReally /></ruau:component>");
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        actb.installComponentLocationAdapter();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        RegistrySerializer rs = new RegistrySerializer(compPath.toFile(), compPath.toFile(), null, logger);
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            fail("We should fail to execute with an error");
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        } catch (RegistrySerializerException mee) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            assertEquals("one or more errors occurred during compile", mee.getMessage());
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        assertEquals("Error logs should be empty", 1, logger.getErrorLogEntries().size());
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:    private static class TestLoggerEntry {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public final LoggerLevel level;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public final String message;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public final Throwable cause;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public TestLoggerEntry(LoggerLevel level, String message, Throwable cause) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            this.message = message;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            this.cause = cause;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            return level+":"+message+", Caused by "+cause;
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:    private static class TestLogger implements RegistrySerializerLogger {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        private List<TestLoggerEntry> entries = Lists.newArrayList();
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public void error(CharSequence loggable) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            entries.add(new TestLoggerEntry(LoggerLevel.ERROR, loggable.toString(), null));
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public void error(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            entries.add(new TestLoggerEntry(LoggerLevel.ERROR, loggable.toString(), cause));
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public void error(Throwable cause) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            entries.add(new TestLoggerEntry(LoggerLevel.ERROR, null, cause));
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public void warning(CharSequence loggable) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            entries.add(new TestLoggerEntry(LoggerLevel.WARN, loggable.toString(), null));
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public void warning(CharSequence loggable, Throwable cause) {
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:            entries.add(new TestLoggerEntry(LoggerLevel.WARN, loggable.toString(), cause));
ruau/ruau-tools/src/test/java/org/ruauframework/tools/definition/RegistrySerializerTest.java:        public void warning(Throwable cause) {
