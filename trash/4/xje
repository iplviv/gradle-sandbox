ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:            $A.util.forEach(successCallbacks, function(callback) { callback(); });
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:            that.createSchemaInProgress = false;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:    function processError(transaction, error) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:        var errorCallbacks = that.createSchemaErrorCallbacks;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:        that.createSchemaSuccessCallbacks = [];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:        that.createSchemaErrorCallbacks = [];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:        $A.util.forEach(errorCallbacks, function(callback) { callback(error); });
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:        that.createSchemaInProgress = false;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:    function createCacheTable() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:        that.db.transaction(
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:                    "CREATE TABLE IF NOT EXISTS cache (key unique, value, created, expires, size);",
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:    function deleteCacheTable(success) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:        that.db.transaction(
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:                    "DROP TABLE IF EXISTS cache;",
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:    deleteCacheTable(createCacheTable);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:// Only register this adapter if the WebSQL API is present
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:if (window.openDatabase) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:	$A.storageService.registerAdapter({
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:		"name": WebSQLStorageAdapter.NAME,
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/WebSQLAdapter.js:		"adapterClass": WebSQLStorageAdapter,
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js: * @description The IndexedDB adapter for storage service implementation
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:var IndexedDBStorageAdapter = function IndexedDBStorageAdapter(config) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:IndexedDBStorageAdapter.NAME= "indexeddb";
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:IndexedDBStorageAdapter.prototype.getName = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:	return IndexedDBStorageAdapter.NAME;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:IndexedDBStorageAdapter.prototype.getSize = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:IndexedDBStorageAdapter.prototype.getItem = function(key) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:IndexedDBStorageAdapter.prototype.setItem = function(key, item) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:IndexedDBStorageAdapter.prototype.removeItem = function(key) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:IndexedDBStorageAdapter.prototype.clear = function(key) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:IndexedDBStorageAdapter.prototype.getExpired = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:// DCHASMAN TODO Register IndexedDBAdapter when it is ready for prime time
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:/*$A.storageService.registerAdapter({ 
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:	"name": IndexedDBStorageAdapter.NAME, 
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/IndexedDBAdapter.js:	"adapterClass": IndexedDBStorageAdapter,
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter_export.js:var p = MemoryStorageAdapter.prototype;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * @description Provides operations to estimate size of JSON objects in memory.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:var SizeEstimator = function SizeEstimator(){
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * Note on sizing.  The following values are taken from the ECMAScript specification, where available.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * Other values are guessed.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js: * Source: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:SizeEstimator.prototype.CHARACTER_SIZE = 2;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:SizeEstimator.prototype.NUMBER_SIZE = 8;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:// note: this value is not defined by the spec.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:SizeEstimator.prototype.BOOLEAN_SIZE = 4;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:SizeEstimator.prototype.POINTER_SIZE = 8;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:SizeEstimator.prototype.hasOwnProperty = Object.prototype.hasOwnProperty;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:SizeEstimator.prototype.estimateSize = function(value) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:    var bytes = 0;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:    var type = typeof value;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:    if (value === null || value === undefined) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:    } else if (type === 'boolean') {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:        bytes = this.sizeOfString(value);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:        // we have an object or an array. optimize for the case of a larger
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:        // object/array by using native JSON serialization and the resulting
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:        // string length. however, JSON.stringify doesn't handle objects/arrays
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:        // with cycles. thankfully these are rare so we give up and say 0.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:            bytes = $A.util.json.encode(value).length;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:        } catch (e) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:            $A.log("Error during size estimate, using 0: " + e);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:SizeEstimator.prototype.sizeOfString = function(value) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/SizeEstimator.js:    return value.length * this.CHARACTER_SIZE;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * @description The value Object used in the backing store of the MemoryStorageAdapter.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:var MemoryStorageValue = function MemoryStorageValue(item, size) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageValue.prototype.getItem = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageValue.prototype.getSize = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * @description The Memory adapter for storage service implementation
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:var MemoryStorageAdapter = function MemoryStorageAdapter(config) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:	this.backingStore = {};
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:	this.cachedSize = 0;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:	this.isDirtyForCachedSize = false;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:	this.maxSize = config["maxSize"];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:	this.debugLoggingEnabled = config["debugLoggingEnabled"];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.NAME = "memory";
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.prototype.getName = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:	return MemoryStorageAdapter.NAME;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.prototype.getSize = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var promise = new Promise(function(success, error) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        if (that.isDirtyForCachedSize === true) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            var newSize = 0;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            for (var key in that.backingStore) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:                newSize += that.backingStore[key].getSize();
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            that.cachedSize = newSize;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            that.isDirtyForCachedSize = false;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        success(that.cachedSize);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.prototype.getItem = function(key) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var promise = new Promise(function(success, error) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        var value = that.backingStore[key];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        if (!$A.util.isUndefinedOrNull(value)) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            // Update the MRU
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            var index = $A.util.arrayIndexOf(that.mru, key);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            that.mru.splice(index, 1);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            that.mru.push(key);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            success(value.getItem());
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.prototype.setItem = function(key, item) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var promise = new Promise(function(success, error) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        // For the size calculation, consider only the inputs to the storage layer: key and value
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        // Ignore all the extras added by the Storage layer.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        var size = $A.util.estimateSize(key) + $A.util.estimateSize(item["value"]);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        if (size > that.maxSize) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            error("MemoryStorageAdapter.setItem() cannot store an item over the maxSize");
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        that.getSize()
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            .then(function (adapterSize) { return (size + adapterSize) - that.maxSize; })
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            .then(function(spaceNeeded) { that.evict(spaceNeeded); })
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:                that.backingStore[key] = new MemoryStorageValue(item, size);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:                // Update the MRU
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:                that.mru.push(key);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:                that.isDirtyForCachedSize = true;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.prototype.removeItem = function(key) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var promise = new Promise(function(success, error) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        // Update the MRU
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        var value = that.backingStore[key];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        var index = $A.util.arrayIndexOf(that.mru, key);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            that.mru.splice(index, 1);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        delete that.backingStore[key];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        that.isDirtyForCachedSize = true;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        success(value);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.prototype.clear = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var promise = new Promise(function(success, error) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        that.backingStore = {};
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        that.cachedSize = 0;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        that.isDirtyForCachedSize = false;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.prototype.getExpired = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var promise = new Promise(function(success, error) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        var now = new Date().getTime();
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        var expired = [];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        for (var key in that.backingStore) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            var expires = that.backingStore[key].getItem()["expires"];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * Asynchronously removes items, starting with the least-recently-used, until spaceNeeded has been made available.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * @param {Number} spaceNeeded The amount of space to free.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * @returns {Promise} Returns a promise that will evict items.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.prototype.evict = function(spaceNeeded) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var spaceReclaimed = 0;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var promise = new Promise(function(success, failure) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        if (spaceReclaimed > spaceNeeded || that.mru.length <= 0) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        var pop = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            var key = that.mru[0];
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:            that.removeItem(key)
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:                    spaceReclaimed += itemRemoved.getSize();
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:                    if (that.debugLoggingEnabled) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:                        var msg = ["MemoryStorageAdapter.evict(): evicted", key, itemRemoved, spaceReclaimed].join(" ");
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:                    if(spaceReclaimed > spaceNeeded || that.mru.length <= 0) {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js: * @returns {Promise} Returns a Promise that will retrieve the mru.
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:MemoryStorageAdapter.prototype.getMRU = function() {
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:        success(that.mru);
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js://#include ruau.storage.adapters.MemoryAdapter_export
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:$A.storageService.registerAdapter({ 
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:	"name": MemoryStorageAdapter.NAME, 
ruau/ruau-impl/src/main/resources/ruau/storage/adapters/MemoryAdapter.js:	"adapterClass": MemoryStorageAdapter,
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js:var p = RuueStorage.prototype;
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js:    "clear", p.clear,
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js:    "getName", p.getName,
ruau/ruau-impl/src/main/resources/ruau/storage/Storage_export.js:    "getMaxSize", p.getMaxSize,
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js: * @description The Ruue Expression Service, accessible using $A.expressionService.  Processes Expressions.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:var RuueExpressionService = function RuueExpressionService() {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:	var expressionService = {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 * Trims markup syntax off a given string expression, removing leading {!
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 * and trailing } notation.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 *            expression The expression to be normalized.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 * @returns {Object} The normalized string, or the input parameter, if
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 *          it was not a string.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		normalize : function(expression) {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:                // Strip expression wrappers: {!x.x.x} -> x.x.x
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:                    replace(/^\s*\{\!|\}\s*$/g, '').
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:                // Normalize Array indices: x.x[2] -> x.x.2
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:                    replace(/\[(\d+)\]/g,".$1");
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 * Resolves a hierarchical dot expression in string form against the
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 * @param {String}
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 *            container The object against which to resolve the
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:         * @param {Boolean}
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:         *            rawValue Whether or not to evaluate expressions.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 * @returns {Object} The target of the expression, or undefined.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		resolve : function(expression, container, rawValue) {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:			var target = container;
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:			var path = expression;
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:            if(!$A.util.isArray(path)) {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:                path = path.split('.');
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:            var segment;
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:            while (!$A.util.isUndefinedOrNull(target) && path.length) {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:            	segment = path.shift();
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:            	if(!target["hasOwnProperty"](segment)) {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:            		var searchkey = segment.toLowerCase();
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:            		for(var key in target){
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:            			if(target.hasOwnProperty(key) && key.toLowerCase() == searchkey) {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:            				// You can't include container and target in the error, as it will json serialize it and causes a max iteration exception.
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:    						console.error("Possible Case Sensitivity Issue: Expression '" + expression + "' on segment '" + segment + "'", [container, target]);
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:    						$A.error("Possible Case Sensitivity Issue: Expression '" + expression + "' on segment '" + segment + "'. Possible you meant '" + key + "'");
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:				target = target[segment];
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:				if (!rawValue&&$A.util.isExpression(target)) {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:					target = target.evaluate();
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:			return target;
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		create : function(valueProvider, config) {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:			return valueFactory.create(config, null, valueProvider);
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		 * @private
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		// TODO: unify with above create method
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:		createPassthroughValue : function(primaryProviders, cmp) {
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:			return new PassthroughValue(primaryProviders, cmp);
ruau/ruau-impl/src/main/resources/ruau/RuueExpressionService.js:	// #include ruau.RuueExpressionService_export
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js:TypeDefRegistry.prototype.ruauType = "TypeDefRegistry";
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js:    ruau.assert(config, "TypeDef Config required for registration");
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js:    // We don't re-register (or modify in any way) once we've registered
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js:    var descriptor = config["descriptor"];
ruau/ruau-impl/src/main/resources/ruau/type/TypeDefRegistry.js:    var ret = this.typeDefs[descriptor];
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js:    this.array = config["descriptor"].endsWith("[]");
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js:TypeDef.prototype.ruauType = "TypeDef";
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js:TypeDef.prototype.isArray = function() {
ruau/ruau-impl/src/main/resources/ruau/type/TypeDef.js:    return this.array;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:// //#exportSymbols $A.ns.Ruue
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["initAsync"] = $A.ns.Ruue.prototype.initAsync;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["initConfig"] = $A.ns.Ruue.prototype.initConfig;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["error"] = $A.ns.Ruue.prototype.error;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["warning"] = $A.ns.Ruue.prototype.warning;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["message"] = $A.ns.Ruue.prototype.message;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["enqueueAction"] = $A.ns.Ruue.prototype.enqueueAction;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["deferAction"] = $A.ns.Ruue.prototype.deferAction;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["get"] = $A.ns.Ruue.prototype.get;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["getRoot"] = $A.ns.Ruue.prototype.getRoot;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["getContext"] = $A.ns.Ruue.prototype.getContext;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["run"] = $A.ns.Ruue.prototype.run;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["assert"] = $A.ns.Ruue.prototype.assert;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["userAssert"] = $A.ns.Ruue.prototype.userAssert;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["log"] = $A.ns.Ruue.prototype.log;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["logf"] = $A.ns.Ruue.prototype.logf;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["trace"] = $A.ns.Ruue.prototype.trace;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["fitTo"] = $A.ns.Ruue.prototype.fitTo;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["Perf"] = $A.ns.Ruue.prototype.Perf;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["mark"] = $A.ns.Ruue.prototype.Perf.mark;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["endMark"] = $A.ns.Ruue.prototype.Perf.endMark;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["startTransaction"] = $A.ns.Ruue.prototype.Perf.startTransaction;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["endTransaction"] = $A.ns.Ruue.prototype.Perf.endTransaction;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["updateTransaction"] = $A.ns.Ruue.prototype.Perf.updateTransaction;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["toJson"] = $A.ns.Ruue.prototype.Perf.toJson;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["setBeaconData"] = $A.ns.Ruue.prototype.Perf.setBeaconData;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["getBeaconData"] = $A.ns.Ruue.prototype.Perf.getBeaconData;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["clearBeaconData"] = $A.ns.Ruue.prototype.Perf.clearBeaconData;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["removeStats"] = $A.ns.Ruue.prototype.Perf.removeStats;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["isLoadFired"] = $A.ns.Ruue.prototype.Perf.isLoadFired;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["devToolService"] = $A.ns.Ruue.prototype.devToolService;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["getQueryStatement"] = $A.ns.Ruue.prototype.getQueryStatement;
ruau/ruau-impl/src/main/resources/ruau/Ruue_export.js:$A.ns.Ruue.prototype["qhelp"] = $A.ns.Ruue.prototype.qhelp;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Export symbols. TODO(fabbott): Destroy this when we're consistently using Closure's exportSymbols directive instead.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    var obj = arguments[0];
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    for ( var i = 1; i < arguments.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        var name = arguments[i];
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        var val = arguments[i];
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        obj[name] = val;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @description This, $A, is supposed to be our ONLY window-polluting top-level variable. Everything else in Ruue is
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *            attached to it. Note that this almost empty object $A is replaced later, after $A.ns (created below) is
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *            populated with the types that can be used to populate the "real" $A. TODO(fabbott): Make that "only gobal
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *            name" goal become true; today it ain't.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @description The separate Ruue "namespace" object contains Ruue types, as opposed to instances and properties and such
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *            which might hang off $A. This allows some colliding or near-miss variable duplication (e.g. $A.util is an
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *            instance of $A.ns.Util), and collects our proper types into one place. The types themselves must be proper
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *            functional objects with prototypes, or Closure can't deal with obfuscating them (and particularly their
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A['ns'] = $A.ns; // TODO: use exportSymbols when available
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var clientService;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.polyfill.Promise
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.polyfill.Function
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.util.Util
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.Logger
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include {"modes" : ["TESTING","AUTOTESTING", "TESTINGDEBUG", "AUTOTESTINGDEBUG", "DOC"], "path" : "ruau.test.Test"}
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.system.DefDescriptor
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.polyfill.Json
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.util.Transport
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.util.Style
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.util.Bitset
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.util.NumberFormat
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.context.RuueContext
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.value.PropertyReferenceValue
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.value.FunctionCallValue
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.value.ActionReferenceValue
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.value.PassthroughValue
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.model.ModelDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.component.ComponentDefRegistry
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.component.Component
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.component.InvalidComponent
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.renderer.RendererDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.provider.ProviderDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.helper.HelperDefRegistry
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.library.LibraryDefRegistry
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.event.EventDefRegistry
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.event.EventDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.event.Event
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.helper.HelperDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.layouts.LayoutItemDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.layouts.LayoutDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.controller.ActionDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.controller.Action
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.attribute.AttributeDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.attribute.AttributeSet
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.attribute.AttributeDefSet
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.renderer.RendererDefRegistry
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.style.StyleDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.component.ComponentDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.controller.ControllerDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.controller.ControllerDefRegistry
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.controller.ActionDefRegistry
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.model.ModelDefRegistry
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.provider.ProviderDefRegistry
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.layouts.LayoutsDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.model.ValueDef
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.l10n.RuueLocalizationContext
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueClientService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueComponentContext
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueComponentService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueSerializationService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueRenderingService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueExpressionService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueHistoryService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueEventService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueLayoutService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include {"excludeModes" : ["PRODUCTION", "PRODUCTIONDEBUG"], "path" : "ruau.RuueDevToolService"}
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.value.ValueFactory
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.value.ExpressionFunctions
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.model.Model
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.storage.RuueStorageService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.storage.Storage
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.provider.GlobalValueProviders
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.provider.LabelQueue
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.provider.LabelValueProvider
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.provider.ObjectValueProvider
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @class Ruue
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @classdesc The Ruue framework. Default global instance name is $A.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue = function() {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.clientService = new RuueClientService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.componentService = new $A.ns.RuueComponentService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.serializationService = new RuueSerializationService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.renderingService = new RuueRenderingService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.expressionService = new RuueExpressionService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.historyService = new $A.ns.RuueHistoryService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.eventService = new RuueEventService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.layoutService = new RuueLayoutService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.localizationService = new RuueLocalizationService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.storageService = new RuueStorageService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.devToolService = new RuueDevToolService();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    var ruau = this;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueRenderingService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        rendering : ruau.renderingService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueEventService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        event : ruau.eventService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueComponentService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        component : ruau.componentService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueClientService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue.prototype
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        client : ruau.clientService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueHistoryService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue.prototype
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        history : ruau.historyService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * Localization Service
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue.prototype
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        localization : ruau.localizationService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * Storage Service
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueStorageService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue.prototype
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        storage : ruau.storageService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * Alias of Component Service
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueComponentService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue.prototype
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @see Ruue#services.component
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        cmp : ruau.componentService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * Alias of Event Service
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueEventService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue.prototype
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @see Ruue#services.event
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        e : ruau.eventService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * Alias of Localization Service
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @type RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @memberOf Ruue.prototype
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @see Ruue#service.localization
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        l10n : ruau.localizationService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            var ret = $A.services[key];
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Equivalent to <code>$A.clientService.enqueueAction()</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * <p>See Also: <a href="#reference?topic=api:RuueClientService">RuueClientService</a></p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Action} action
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @borrows RuueClientService.enqueueAction
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Equivalent to <code>$A.clientService.deferAction()</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * <p>See Also: <a href="#reference?topic=api:RuueClientService">RuueClientService</a></p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Action} action
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @borrows RuueClientService.deferAction
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Equivalent to <code>$A.renderingService.render()</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * <p>See Also: <a href="#reference?topic=api:RuueRenderingService">RuueRenderingService</a></p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Component|Array} cmp
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @borrows RuueRenderingService.render
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Equivalent to <code>$A.renderingService.rerender()</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * <p>See Also: <a href="#reference?topic=api:RuueRenderingService">RuueRenderingService</a></p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Component|Array} cmp
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @borrows RuueRenderingService.rerender
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Equivalent to <code>$A.renderingService.unrender()</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * <p>See Also: <a href="#reference?topic=api:RuueRenderingService">RuueRenderingService</a></p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Component|Array} cmp
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @borrows RuueRenderingService.unrender
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Equivalent to <code>$A.renderingService.afterRender()</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * <p>See Also: <a href="#reference?topic=api:RuueRenderingService">RuueRenderingService</a>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Component|Array} cmp
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @borrows RuueRenderingService.afterRender
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.afterRender = this.renderingService.afterRender;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Equivalent to <code>$A.componentService.get()</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * <p>See Also: <a href="#reference?topic="RuueComponentService">RuueComponentService</a></p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Component|Array} cmp
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @borrows RuueComponentService.get
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.getCmp = function(globalId) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        return this.componentService.get(globalId);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Client-side component creation. This method is replaced by newCmpAsync().
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Object} config
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Object} attributeValueProvider
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Boolean} localCreation
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.newCmp = function(config, attributeValueProvider, localCreation, doForce) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        return this.componentService.newComponentDeprecated(config, attributeValueProvider, localCreation, doForce);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Previously known as newComponent(). This method is replaced by newCmpAsync().
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Object} config
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Object} attributeValueProvider
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Boolean} localCreation
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Boolean} doForce
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.newCmpDeprecated = function(config, attributeValueProvider, localCreation, doForce) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        return this.componentService.newComponentDeprecated(config, attributeValueProvider, localCreation, doForce);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Creates components from a client-side controller or helper. Equivalent to <code>$A.newCmpAsync()</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * If no server-side dependencies are found, this method runs synchronously.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Object} callbackScope The callback scope
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Function} callback The callback function, required for returning the newly created component
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Object} config Provides the component descriptor and attributes. Example:
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * <p><code>"componentDef": "markup://ui:button", "attributes": { "values": {label: "Submit"}}</code></p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Object} attributeValueProvider The value provider for the attribute.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Boolean} localCreation For internal use only. localCreation determines if the global id is used and defaults to false.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Boolean} doForce For internal use only. doForce enforces client-side creation and defaults to false.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Boolean} forceServer For internal use only. forceServer enforces server-side creation and defaults to false.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.newCmpAsync = function(callbackScope, callback, config, attributeValueProvider, localCreation, doForce, forceServer){
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        return this.componentService.newComponentAsync(callbackScope, callback, config, attributeValueProvider, localCreation, doForce, forceServer);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Pushes current portion of attribute's creationPath onto stack
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {String} creationPath
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.pushCreationPath = function(creationPath) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	var ctx = this.getContext();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	var act = ctx.getCurrentAction();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	if (!act) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	act.pushCreationPath(creationPath);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * pops current portion of attribute's creationPath from stack
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {String} creationPath
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.popCreationPath = function(creationPath) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	var ctx = this.getContext();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	var act = ctx.getCurrentAction();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	if (!act) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	act.popCreationPath(creationPath);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * sets pathIndex for the current attribute on creationPath's stack
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {String} creationPath
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.setCreationPathIndex = function(idx) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	var ctx = this.getContext();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	var act = ctx.getCurrentAction();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	if (!act) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	act.setCreationPathIndex(idx);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Equivalent to <code>$A.eventService.newEvent()</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * <p>See Also: <a href="#reference?topic="RuueEventService">RuueEventService</a></p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {Component|Array} cmp
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @borrows RuueEventService.newEvent
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    // TODO: convert to //#exportSymbols when available
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    exp(ruau,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "clientService", ruau.clientService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "componentService", ruau.componentService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "serializationService", ruau.serializationService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "renderingService", ruau.renderingService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "expressionService", ruau.expressionService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "historyService", ruau.historyService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "localizationService", ruau.localizationService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "eventService", ruau.eventService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "layoutService", ruau.layoutService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "storageService", ruau.storageService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "services", ruau.services,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "enqueueAction", ruau.enqueueAction,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "deferAction", ruau.deferAction,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "render", ruau.render,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "rerender", ruau.rerender,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "unrender", ruau.unrender,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "afterRender", ruau.afterRender,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "logger", ruau.logger,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "getCmp", ruau.getCmp,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "pushCreationPath", ruau.pushCreationPath,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "popCreationPath", ruau.popCreationPath,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "setCreationPathIndex", ruau.setCreationPathIndex,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            "devToolService", ruau.devToolService,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            "getQueryStatement", ruau.devToolService.newStatement,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            "qhelp", function() { return ruau.devToolService.help() },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "newCmp", ruau.newCmp,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "newCmpDeprecated", ruau.newCmpDeprecated,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "newCmpAsync", ruau.newCmpAsync,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "getEvt", ruau.getEvt);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    var services = ruau.services;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    // TODO: convert to //#exportSymbols when available
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "l10n", services.localization,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "storage", services.storage,
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                get: function(name) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                    var path = (name||'').split('.');
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                    return services.cmp.getControllerDef({descriptor : path.shift()}).get(path.shift());
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.eventService.addHandler({
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        event : 'ruau:clientRedirect',
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "globalId" : "Ruue",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "handler" : function(evt) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        	var url = evt.getParam('url');
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        		window.location = url; 
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.eventService.addHandler({
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        event : 'ruau:systemError',
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "globalId" : "Ruue",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        "handler" : function(evt) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            ruau.log(evt.getParam('message'), evt.getParam('error'));
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Initializes Ruue with context info about the app that should be loaded.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Object} config
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *      <code>config.descriptor</code> : The descriptor of the application or component that should be loaded as the root. For example, <code>"markup://foo:bar"</code><br />
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *      <code>config.attributes</code> : The attributes that should be passed into the root component when it is constructed. For example, <code>{at1 : 1, at2 : "asdf"}</code><br />
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *      <code>config.defType</code> : The defType of the descriptor.  For example, <code>"DEFINITION"</code> or <code>"APPLICATION"</code><br />
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *      <code>config.lastmod</code> : The timestamp, in millis of the latest changes to the preloaded metadata associated with this application.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.initAsync = function(config) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    $A.Perf.mark("Component Load Complete");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    $A.Perf.mark("Component Load Initiated");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    // we don't handle components that come back here. This is used in the case where there
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    // are none.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    $A.context = new RuueContext(config["context"]);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    clientService.loadComponent(config["descriptor"], config["attributes"], function(resp) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        $A.Perf.endMark("Component Load Complete");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    $A.Perf.endMark("Component Load Initiated");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Initializes Ruue with context info but without retrieving component from server. Used for synchronous initialization.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Object} config The configuration attributes
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Boolean} useExisting
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Boolean} doNotInitializeServices Set to true if Layout and History services should not be initialized, or false if
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * 	 they should. Defaults to true for Ruue Integration Service.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Boolean} doNotCallUIPerfOnLoad True if UIPerf.onLoad() should not be called after initialization. In case of
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *       IntegrationService when ruau components are embedded on the page, onLoad is called by the parent container.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.initConfig = function(config, useExisting, doNotInitializeServices, doNotCallUIPerfOnLoad) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        // creating context.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        $A.context = new RuueContext(config["context"]);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        this.initPriv($A.util.json.resolveRefs(config["instance"]), config["token"], null, doNotInitializeServices, doNotCallUIPerfOnLoad);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        // Use the existing context and just join the new context into it
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        // FIXME: is this used? it won't do the right thing if there are components.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Initializes Ruue in debug environment.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Object} config The descriptor ("markup://foo:bar"), attributes, defType ("APPLICATION" or "COMPONENT"), and
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *        timestamp of last modified change
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} token
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Object} container Sets the container for the component.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Boolean=} doNotInitializeServices True if Layout and History services should not be initialized, or false if
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *        they should. Defaults to true for Ruue Integration Service.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Boolean} doNotCallUIPerfOnLoad True if UIPerf.onLoad() should not be called after initialization. In case of
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *       IntegrationService when ruau components are embedded on the page, onLoad is called by the parent container.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @private
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.initPriv = function(config, token, container, doNotInitializeServices, doNotCallUIPerfOnLoad) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    if (!$A["hasErrors"]) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        $A.Perf.mark("ClientService.init");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            $A.Perf.endMark("ClientService.init");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            if (!$A.initialized) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                if (!doNotInitializeServices) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                    $A.Perf.mark("LayoutService.init");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                    $A.layoutService.init(cmp);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                    $A.Perf.endMark("LayoutService.init");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                    $A.Perf.mark("HistoryService.init");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                    $A.Perf.endMark("HistoryService.init");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                $A.initialized = true;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            $A.finishInit(doNotCallUIPerfOnLoad);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        }, container ? $A.util.getElement(container) : null);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Signals that initialization has completed.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Boolean} doNotCallUIPerfOnLoad True if UIPerf.onLoad() should not be called after initialization. In case of
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *       IntegrationService when ruau components are embedded on the page, onLoad is called by the parent container.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @private
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.finishInit = function(doNotCallUIPerfOnLoad) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        $A.Perf.mark("Ruue.finishInit");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        $A.util.removeClass(document.body, "loading");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        $A.Perf.endMark("Ruue.finishInit");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        if (doNotCallUIPerfOnLoad) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            $A.Perf.setTimer("Ruue Init");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            $A.Perf.onLoad();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            if (window["Perf"] && window["Perf"]["ui"] && window["Perf"]["ui"]["onLoad"]) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                window["Perf"]["ui"]["onLoad"]();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        $A.clientService.fireLoadEvent("e.ruau:initialized");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @description Use <code>$A.error()</code> in response to a serious error that has no recovery path.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * If this occurs during a test, the test will be stopped unless you add calls to '$A.test.expectRuueError' for
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * each error that occurs. <code>ruauErrorsExpectedDuringInit</code> allows server side errors to not stop the
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * test as well.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *@example
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * testDuplicate : {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:   ruauErrorsExpectedDuringInit : ["Duplicate found!"],
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     attributes : {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * <p>This code tries to separate a "display message" (with limited information for users in production
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * modes) from a "log message" (always complete).</p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} msg The error message to be displayed to the user.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Error} [e] The error object to be displayed to the user.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.error = function(msg, e){
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * <code>$A.warning()</code> should be used in the case where poor programming practices have been used.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * These warnings will not, in general, be displayed to the user, but they will appear in the console (if
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * availiable), and in the ruau debug window.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} w The message to display.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Error} e an error, if any.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.warning = function(w, e) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.logger.warning(w, e);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Displays an error message to the user. Currently used for displaying errors that do not cause the application to
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} msg The message to display.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.message = function(msg) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    var message = $A.util.getElement("ruauErrorMessage");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    message.innerHTML = "";
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    message.appendChild(document.createTextNode(msg));
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    $A.util.removeClass(document.body, "loading");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    $A.util.addClass(document.body, "ruauError");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Returns the value referenced using property syntax. Gets the value from the specified global value provider.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} key The data key to look up on element, for example, <code>$A.get("$Label.section.key")</code>.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Function} callback The method to call with the result if a server trip is expected.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.get = function(key, callback) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        key = $A.expressionService.normalize(key);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        var path = key.split('.');
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        var root = path.shift();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        var valueProvider = $A.services[root];
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        if (!valueProvider) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            valueProvider = $A.getGlobalValueProvider(root);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        if (valueProvider) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            if (path.length) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:                return valueProvider.get(path.join('.'), callback);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:            return valueProvider.getValues?valueProvider.getValues():valueProvider;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Gets the component that is passed to a controller method. For example, <code>$A.getRoot().get("v.attrName");</code> returns the attribute from the root component.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.getRoot = function() {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @private
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.setRoot = function(root) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Gets the current <code>RuueContext</code>. The context consists of the mode, descriptor, and namespaces to be loaded.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @return {RuueContext} current context
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.getContext = function() {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Runs a function within the standard Ruue lifecycle.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * This insures that <code>enqueueAction</code> methods and rerendering are handled properly.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * from JavaScript outside of controllers, renderers, providers.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Function} func The function to run.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} name an optional name for the stack.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.run = function(func, name) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    $A.assert(func && $A.util.isFunction(func), "The parameter 'func' for $A.run() must be a function!");
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    if (name === undefined) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        name = "$A.run()";
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    $A.services.client.pushStack(name);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    	//console.log("$A.run()", name);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    } catch (e) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        $A.error("Error while running "+name, e);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    } finally {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        $A.services.client.popStack(name);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Checks the condition and if the condition is false, displays an error message.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Displays an error message if condition is false, runs <code>trace()</code> and stops JS execution. The
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * app will cease to function until reloaded if this is called, and errors are not caught.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Internal assertion, should never happen
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * <p>For example, <code>$A.assert(cmp.get("v.name") , "The name attribute is required.");</code> checks for the name attribute.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * This is protected as it is an internal assertion, should never happen.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Boolean} condition True prevents the error message from being displayed, or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} assertMessage A message to be displayed when condition is false
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.assert = function(condition, assertMessage) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.logger.assert(condition, assertMessage);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Checks for a specified user condition, only to be used for fatal errors!. Displays an error message if condition is
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * false, and stops JS execution. The app will cease to function until reloaded if this is called.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Boolean} condition The conditional expression to be evaluated.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} msg The message to be displayed when the condition is false.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.userAssert = function(condition, msg) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    // For now use the same method
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    $A.assert(condition, msg);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *  Logs to the browser's JavaScript console if it is available.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *  If both value and error are passed in, value shows up in the console as a group with value logged within the group.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *  If only value is passed in, value is logged without grouping.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *  <p>For example, <code>$A.log(action.getError());</code> logs the error from an action.</p>
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Object} value The first object to log.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Object} error The error messages to be logged in the stack trace.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.log = function(value, error) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.logger.info(value, error);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: *  Logs to the browser's JavaScript console if it is available.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.logf = function() {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        window["console"]["log"].apply(window["console"], arguments);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Converts the value to a String. If value length is greater than the given size, return a String up to the size.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Otherwise, return a String containing the value with trailing whitespaces to fill up the size.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Object} value The object to be resolved.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Number} size The length of the output string.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.fitTo = function(value, size) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    if (typeof value != "string") {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        if ($A.util.isUndefinedOrNull(value)) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        value = value.toString();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    if (value.length > size) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        return value.slice(0, size);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    return this.rpad(value, " ", size);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Pads the string to its right and returns the new string.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} str The string to be resolved.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} padString The padding to be inserted.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {Number} length The length of the padding.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.rpad = function(str, padString, length) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        str = str + padString;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Logs a stack trace. Trace calls using <code>console.trace()</code> if defined on the console implementation.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.trace = function() {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    if (window["console"] && window["console"]["trace"]) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        window["console"]["trace"]();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Sets mode to production (default), development, or testing.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} mode Possible values are production "PROD", development "DEV", or testing "PTEST".
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @private
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.setMode = function(mode) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    this.enableAssertions = (mode != 'PROD' && mode != 'PTEST');
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @param {String} type The type of global value provider to retrieve.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @return {GlobalValueProvider} The global value provider, such as $Label, $Browser, $Locale, etc.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @private
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.getGlobalValueProvider = function(type) {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    return this.getContext().getGlobalValueProvider(type);
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * The levels for logging performance m
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @enum {{name: !string, value: !number}}
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var PerfLogLevel = {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        name : "DEBUG",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        value : 1
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        name : "INTERNAL",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        value : 2
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        name : "PRODUCTION",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        value : 3
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        name : "DISABLED",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        value : 4
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * Various Perf constants.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var PerfConstants = {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    PAGE_START_MARK : "PageStart",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    MARK_NAME : "mark",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    MEASURE_NAME : "measure",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    Perf_LOAD_DONE : "loadDone"
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:PerfConstants.STATS = {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    NAME : "stat",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    SERVER_ELAPSED : "internal_serverelapsed",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    DB_TOTAL_TIME : "internal_serverdbtotaltime",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    DB_CALLS : "internal_serverdbcalls",
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    DB_FETCHES : "internal_serverdbfetches"
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:window["PerfConstants"] = PerfConstants;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js: * @namespace
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:$A.ns.Ruue.prototype.Perf = window["Perf"] ?
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    //Planning to delete window.Perf, but can't until removing SFDC references to it
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    //var tmp = window["Perf"];
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} id The id used to identify the mark.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {string|window.typePerfLogLevel=} logLevel The level at which this mark should
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * be logged at.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    mark: function (id, logLevel) { return this; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} id This is the id associated with the mark that uses
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * the same id.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {string|window.typePerfLogLevel=} logLevel The level at which this mark should
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * be logged at.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    endMark: function (id, logLevel) { return this; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * This method is used to the update the name of a mark
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} oldName The id used to identify the old mark name.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} newName The id used to identify the new mark name.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {!IPerf} for chaining methods
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    updateMarkName: function (oldName, newName) { return this; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Serializes a measure object to JSON.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!window.typejsonMeasure} measure The measure to serialize.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {!string} JSON-serialized version of the supplied measure.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    measureToJson: function (measure) { return ""; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Serializes timers to JSON.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {boolean=} includeMarks
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {!string} JSON-serialized version of supplied marks.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    toJson: function (includeMarks) { return ""; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} timer_name The name of the timer to set.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {number=} timer_delta The time delta to set.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {string|window.typePerfLogLevel=} logLevel The level at which this mark should be logged at. Defaults to PerfLogLevel.INTERNAL if left blank
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    setTimer: function (timer_name, timer_delta, logLevel) { return this; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Get a JSON-serialized version of all existing timers and stats in POST friendly format.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {!string} POST-friendly timers and stats.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    toPostVar: function () { return ""; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Returns all of the measures that have been captured
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {!Array.<window.typejsonMeasure>} all existing measures.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    getMeasures: function () { return []; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Returns the beaconData to piggyback on the next XHR call
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {?string} beacon data.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    getBeaconData: function () { return null; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Sets the beaconData to piggyback on the next XHR call
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} beaconData
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    setBeaconData: function (beaconData) {},
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Clears beacon data
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    clearBeaconData: function () {},
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    removeStats: function () {},
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Add a performance measurement from the server.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} label
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!number} elapsedMillis
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    stat: function (label, elapsedMillis) { return this; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Get the stored server side performance measures.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} label
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    getStat: function (label) { return -1; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Called when the page is ready to interact with. To support the existing Kylie.onLoad method.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    onLoad: function () {},
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * This method is used to mark the start of a transaction
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} tName The id used to identify the transaction.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {!IPerf} for chaining methods
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    startTransaction: function (tName) { return this; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * This method is used to mark the end of a transaction
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} tName The id used to identify the transaction.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {!IPerf} for chaining methods
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    endTransaction: function (tName) { return this; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * This method is used to the update the name of the
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * transaction
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} oldName The id used to identify the old transaction name.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @param {!string} newName The id used to identify the new transaction name.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {!IPerf} for chaining methods
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    updateTransaction: function (oldName, newName) { return this; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * This method is used to figure if onLoad/page_ready has been fired or
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @return {!boolean}
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    isOnLoadFired: function () { return false; },
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @namespace
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @param {!string=} name
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @param {!string|number=} value
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @param {Date=} expires
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:         * @param {string=} path
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:        setCookie: function (name, value, expires, path) {}
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * Whether the full Kylie framework is loaded, as opposed to just the stubs.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:     * @type {boolean}
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    enabled: false
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.Ruue_export
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// At this point, $A.ns has been defined with all our types on it, but $A itself
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// is just a placeholder. Use this function to preserve $A.ns while populating
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// $A, without making a new top-level name:
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:(function bootstrap() {
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    var ns = $A.ns;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:    window['$A'] = new ns.Ruue();
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// shortcuts for using throughout the framework code.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// TODO(fabbott): All of these need to move into $A only.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var componentService = $A.componentService;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var serializationService = $A.serializationService;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var renderingService = $A.renderingService;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var expressionService = $A.expressionService;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var historyService = $A.historyService;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var eventService = $A.eventService;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var layoutService = $A.layoutService;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:var services = $A.services;
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// TODO(fabbott): Remove the legacy 'ruau' top-level name.
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:window['ruau'] = window['$A'];
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.storage.adapters.MemoryAdapter
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.storage.adapters.IndexedDBAdapter
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.storage.adapters.WebSQLAdapter
ruau/ruau-impl/src/main/resources/ruau/Ruue.js:// #include ruau.Logging
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/RuueSerializationService_private.js:var priv = {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * A glorified stack to keep track of which component we're working
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * on behalf of.  Stack frames may have arbitrary annotations attached.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:$A.ns.RuueComponentContext = function() {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    /** Stack of components in nested-context order */
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    this.stack = [];
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:/** Inner type for stack frames. */
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:$A.ns.RuueComponentContext.prototype.Frame = function(cmp) {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * Pushes a new context frame onto the stack.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * @param {Component} cmp Incoming context component
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * @returns old (covered-over) context component, or undefined at top of stack
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:$A.ns.RuueComponentContext.prototype.push = function(cmp) {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    var prior = this.stack.length ? this.stack[this.stack.length - 1].cmp : undefined;
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    this.stack.push(new this.Frame(cmp));
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * Pops an old context frame from the stack.  If the optional argument
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * is supplied, verifies that the expected the component matches the
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * popped context, causing a crash ($A.assert) if we have a mismatch.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * The severe death-on-mismatch behavior is because we expect the context
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * to control e.g. permissions for access, so a mismatch is a data security
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * @param {Component} cmp Either undefined, or the expected current context
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * @returns component context that is no longer in effect
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:$A.ns.RuueComponentContext.prototype.pop = function(cmp) {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    var oldFrame = this.stack.pop();
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:        $A.assert(cmp === oldFrame.cmp, "ComponentContext mismatch detected.");
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    return oldFrame.cmp;
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * @return top-of-stack context, or undefined.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:$A.ns.RuueComponentContext.prototype.currentContext = function() {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    var len = this.stack.length;
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    return len ? this.stack[len - 1].cmp : undefined;
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * Sets an annotation for the current context frame.  Since annotations are specific to
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * the uses of the context stack, it is up to those users to ensure name collisions and
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * such are safely handled.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:$A.ns.RuueComponentContext.prototype.addNote = function(k, v) {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    if (!this.stack.length) {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    var top = this.stack[this.stack.length - 1];
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * Gets an annotation from the current context frame.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:$A.ns.RuueComponentContext.prototype.getNote = function(k) {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    if (!this.stack.length) {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    var top = this.stack[this.stack.length - 1];
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js: * Removes an annotation from the current context frame.
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:$A.ns.RuueComponentContext.prototype.clearNote = function(k) {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    if (!this.stack.length) {
ruau/ruau-impl/src/main/resources/ruau/RuueComponentContext.js:    var top = this.stack[this.stack.length - 1];
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js:var r = ResultSet.prototype;
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js:var statement = Statement.prototype;
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js:exp(statement,
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js:        "from", statement.from,
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js:        "query", statement.query,
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js:        "field", statement.field,
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js:        "fields", statement.fields,
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js:        "where", statement.where,
ruau/ruau-impl/src/main/resources/ruau/RuueDevToolService_export.js:        "groupBy", statement.groupBy
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js:// Will use ES6Promises in the global namespace when native Promises
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js:// aren't supported.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise.js://#include ruau.polyfill.Promise_export
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js:     * Add the Function.bind method for JS engines that don't support it (e.g. IE)
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js:     * @param {Object} scope - callback scope
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js:        var method = this;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js:        var preLoadArgs = Array.prototype.slice.call(arguments, 1);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Function.js:            return method.apply(scope, preLoadArgs.concat(Array.prototype.slice.call(arguments, 0)));
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @description A base class to enable JSON manipulation
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * Decode a JSON string into an object, optionally using ref support to resolve
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * duplicate object references.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * IMPORTANT: this function should NEVER be exported, as the eval()
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * implementation provides a public API for executing arbitrary code inside our
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * domain security context. If we decide we need to supply a JSON utility
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @param {String}
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    var obj;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    if (ruau.util.isUndefinedOrNull(json)) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        obj = ruau.util.globalEval(json);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    } catch (e) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        ruau.error("Unable to parse JSON response", e);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * After the JSON data is decoded by Browser native JSON object, the resulted
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * object (or sub-object) property's value could be a function/array/object/ and
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * so on in string format. We need to convert them to the desired type.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @param {String}
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: *            value The string to be decoded
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @returns {Function|Array|Object} The converted value
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:Json.prototype.decodeString = function(value) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    var valueType = typeof value;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    if (valueType === "function") {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        return value;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    } else if (valueType === "string") {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        return ruau.util.globalEval(value);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    return value;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * Convert a serialized state blob, with its internal serId and serRefId
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * markers, into a new data structure that can have internal JavaScript pointers
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * to the same identical location.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    $A.Perf.mark("Json.resolveRefs");
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    var config = ruau.util.isArray(obj) ? obj : [obj];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    $A.Perf.endMark("Json.resolveRefs");
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:Json.prototype._resolveRefs = function(config, cache, parent, property) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        var value;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        if (ruau.util.isArray(config)) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:            for ( var i = 0; i < config.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                value = config[i];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                if (typeof value === "object" && value !== null) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                    this._resolveRefs(value, cache, config, i);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:            var serRefId = config["serRefId"];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                // Replace with the referenced object
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                parent[property] = cache[serRefId];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                var serId = config["serId"];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                    value = config["value"];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                    if (typeof value === "object" && value !== null
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                            && (value["serId"] || value["serRefId"])) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                        this._resolveRefs(value, cache, parent, property);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                        value = parent[property];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                        // Pull up the values into the config itself
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                        parent[property] = value;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                    cache[serId] = value;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                    value = config;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                // Recurse into the value's properties
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                for ( var key in value) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                    var v = value[key];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                        this._resolveRefs(v, cache, value, key);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * Encodes an object into a JSON representation.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: *            obj The object to pass in the encoder.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: *            replacer Optional function which passes key and value bound to the
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: *            object, and returns a stringified value.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @param {String}
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: *            whiteSpace Adds spaces or tabs to the resulting string. E.g. '\t'
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: *            for tab
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:Json.prototype.encode = function(obj, replacer, whiteSpace) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        // Protect ourselves from the evils of libraries like Prototype.js that decorate Array with extra methods such as .toJSON() and do the wrong thing!
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        var oldArrayToJSON = Array.prototype.toJSON;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:            delete Array.prototype.toJSON;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:            if ($A.util.isUndefinedOrNull(replacer)) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                return JSON.stringify(obj, function(key, value) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                    // We have to do this as JSON.stringify removes the property from
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                    // the resulted JSON string if its value is a function
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                    return ruau.util.json.encodeFunction(value);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                }, whiteSpace);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                return JSON.stringify(obj, replacer, whiteSpace);
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        } finally {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:            if (oldArrayToJSON) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                // assign property back to Array only if it exists so it doesn't add the addition toJSON property.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                Array.prototype.toJSON = oldArrayToJSON;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    // Support the JSON.stringify() Object.toJSON() standard
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        return arguments.callee(obj.toJSON());
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    case String:
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        return '"' + obj.replace(/\"/g, '\\"').replace(/\r|\n|\f/g, "\\n")
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    case Array:
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        var buf = [];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        for ( var i = 0; i < obj.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:            buf.push(arguments.callee(obj[i]));
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    case Object:
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        var buf2 = [];
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        for ( var k in obj) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:            if (obj.hasOwnProperty(k)) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                // Recursively invoke encode() on both the property name and the
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                // value
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:                buf2.push(arguments.callee(k) + ':' + arguments.callee(obj[k]));
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    default:
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: * @param {Function}
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js: *            value The function to be encoded.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:Json.prototype.encodeFunction = function(value) {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    if (typeof value === 'function') {
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:        return value + '';
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:    return value;
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json.js:// #include ruau.polyfill.Json_export
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/polyfill/Promise_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/polyfill/Json_export.js:var p = Json.prototype;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: * @description The Ruue Layout Service, accessible using $A.layoutService.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js: *            Manages Layouts. Internet Explorer 7 and 8 are not supported for
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:var RuueLayoutService = function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:	// #include ruau.RuueLayoutService_private
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:	var layoutService = {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		handleLocationChange : function(event) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// Always having a hash means that the page won't reload when we go
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// back this point.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			if (window.location.toString()["indexOf"]("#") == -1) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				window.location.replace(window.location + "#");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				// layoutService.changeLocation("");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var token = event.getParam("token");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				token = priv.layouts.getDefault().getName();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// The presence of a semaphore in here makes me think a class-level
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// markName might cause trouble, but...
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			$A.Perf.mark("LayoutService.handleLocationChange (" + token + ")");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			$A.Perf.mark("Container Action Callback Initiated");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// $A.Perf.mark("Container Action Callback Initiated: " +
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// item.getContainer());
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// $A.Perf.mark("Giving control to ruau:layoutHandler (" +
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// layoutHandler.toString() + ")");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			$A.Perf.mark("Giving control to ruau:layoutHandler");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			$A.Perf.mark("Layout Actions Callback Complete");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// $A.Perf.mark("Container Layout Complete: "+
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// layoutItem.getContainer());
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			$A.Perf.mark("Container Layout Complete");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var curr = priv.peek();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var layout = priv.layouts.getLayout(token);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			if (!layout) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				layout = priv.layouts.getCatchall();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			if (curr && curr.layout === layout && (layout !== priv.layouts.getCatchall()) && !layout.match) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				// There is a current layout and it is the same as the one we're
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				var oldParams = curr.params;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				var params = event.getParams();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				if ($A.util.json.encode(oldParams) === $A.util.json.encode(params)) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					// The params are the same - we're already where we need to
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					priv.fireOnload();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					$A.Perf.endMark("LayoutService.handleLocationChange (" + token + ")");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			layoutService.layout(token, event.getParams());
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * Refreshes the current layout.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @memberOf RuueLayoutService
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		refreshLayout : function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var curr = priv.peek();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			layoutService.layout(curr.layout.getName(), curr.params, true);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * Loads the previous layout and updates the history, or the default
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * layout.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @memberOf RuueLayoutService
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		back : function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// Is there something in the stack to go back to?
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				this.refreshLayout();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				historyService.back();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				historyService.set(priv.layouts.getDefault().getName());
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * Clears the history.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @memberOf RuueLayoutService
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		clearHistory : function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			priv.clear();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * Removes the layout from the stack.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @memberOf RuueLayoutService
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * Gets the requested layout.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @param {String}
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 *            name The name of the layout to be retrieved
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 *            params Set params only for actions specified in the
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 *            layouts file
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @param {Boolean}
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 *            noTrack If set to true, the service does not track the
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 *            layout
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @memberOf RuueLayoutService
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		layout : function(name, params, noTrack) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var layout = priv.layouts.getLayout(name);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			if (!layout) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				layout = priv.layouts.getCatchall();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			ruau.assert(layout, "Named layout '" + name + "' not found");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var cmp = priv.cmp;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var config = [];
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var actions = [];
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var layoutErrorFired = false;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			layout.each(function(item) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				var root = priv.cmp;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				var container = root.find(item.getContainer());
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				if (container) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					if (item.getCache() !== "loaded" || container._layoutItem !== item) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						container._layoutItem = item;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						var defaultAction = function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							var action = item.getAction(cmp);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							action.setStorable();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							// Only set params for actions specified in the
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							// layouts file. components requests will already
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							// have the params set properly.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:								action.setParams(params);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							action.setCallback(this, function(a) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:								// $A.Perf.endMark("Container Action Callback
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:								// Initiated: " + item.getContainer());
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:								$A.Perf.endMark("Container Action Callback Initiated");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:								if (a.getState() === "SUCCESS") {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:									var ret = a.getReturnValue();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:									layoutService.layoutCallback(ret ? componentService.newComponentDeprecated(ret, null, false, true) : null, item, layout,
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:											params, noTrack);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:									if (!layoutErrorFired) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:										var evt = $A.get("e.ruau:layoutFailed");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:										layoutErrorFired = true;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							actions.push(action);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						// See if body implements ruau:layoutHandler and give it
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						// a chance to handle the layout request specially
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						var oldBody = container.get("v.body");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						if (oldBody.length === 1 && oldBody[0].isInstanceOf("ruau:layoutHandler")) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							var layoutHandler = oldBody[0];
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							var event = layoutHandler.get("e.layout");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							var layoutInfo = {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:								"layout" : layout,
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:								"params" : params
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							event.setParams({
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:								"layoutInfo" : layoutInfo,
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:								"defaultAction" : defaultAction
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							// $A.Perf.endMark("Giving control to
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							// ruau:layoutHandler (" + layoutHandler.toString()
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							$A.Perf.endMark("Giving control to ruau:layoutHandler");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:							defaultAction();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// Push the new layout before running actions to allow
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// render/rerender etc to interact with the current layout
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			if (!noTrack) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				priv.push(layout, params);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			priv.fireLayoutChangeEvent(true);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			if (actions.length > 0 || config.length > 0) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				clientService.runActions(actions, cmp, function(msg) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					 * This function gets called in
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					 * RuueClientService.runActions(). After all server actions
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					 * are batched and sent to server, the response is handled
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					 * in actionResponse(). This 'callback' argument in
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					 * RuueClientService.runActions() refers to this function.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						priv.fireLayoutChangeEvent();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					$A.Perf.endMark("Layout Actions Callback Complete");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					priv.fireOnload();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		layoutCallback : function(components, layoutItem, layout, params, noTrack) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			} else if (!$A.util.isArray(components)) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var root = priv.cmp;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var container = root.find(layoutItem.getContainer());
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var body = container.get("v.body");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var defaultAction = function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				container.set("v.body", components);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// ruau:layoutHandler
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// if so, give them a chance to handle the layout request specially
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var layoutHandler;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var firstNewComponent = components.length > 0 ? components[0] : null;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			if (body.length === 1 && body[0].isInstanceOf("ruau:layoutHandler")) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				layoutHandler = body[0];
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			} else if (firstNewComponent && firstNewComponent.isInstanceOf && firstNewComponent.isInstanceOf("ruau:layoutHandler")) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				layoutHandler = firstNewComponent;
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			if (layoutHandler) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				var event = layoutHandler.get("e.layout");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				event.setParams({
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					"defaultAction" : defaultAction
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				defaultAction();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// $A.Perf.endMark("Container Layout Complete: "+
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			// layoutItem.getContainer());
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			$A.Perf.endMark("Container Layout Complete");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * Sets the current layout title. For example,
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * <code>$A.layoutService.setCurrentLayoutTitle(cmp.get("v.title"));</code>
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * sets the title based on an attribute.
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 *            title The title of the layout
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @memberOf RuueLayoutService
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		setCurrentLayoutTitle : function(title) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:			var current = priv.peek();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				var oldTitle = priv.getTitle(current);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				var params = {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				var evt = $A.get("e.ruau:titleChange");
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				evt.setParams(params);
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:		 * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				priv.layouts = cmp.getDef().getLayouts();
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:				if (priv.layouts) {
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:					$A.eventService.addHandler({
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						"event" : 'ruau:locationChange',
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						"globalId" : "RuueLayoutService",
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:						"handler" : this.handleLocationChange
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:	// #include ruau.RuueLayoutService_export
ruau/ruau-impl/src/main/resources/ruau/RuueLayoutService.js:	return layoutService;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * @description The Ruue Localization service Service, accessible using $A.localizationService. Provides utility methods
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js: * for localizing data or getting formatters for numbers, currencies, dates, etc.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:var RuueLocalizationService = function RuueLocalizationService() {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:    var numberFormat, percentFormat, currencyFormat;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:    // moment.js and walltime-js must be loaded before we can use date/time related APIs
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:    var localizationService = {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        cache : {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            format : {},
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            langLocale : {}
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Formats a number with the default number format.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * <p>Example:</p>
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * $A.localizationService.formatNumber(0.14566); 
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Number} number The number to be formatted.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The formatted number
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        formatNumber : function(number) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return this.getDefaultNumberFormat().format(number);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Returns a formatted percentage number based on the default percentage format.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * <p>Example:</p>
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * $A.localizationService.formatPercent(0.14566);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Number} number The number to be formatted.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The formatted percentage
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        formatPercent : function(number) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return this.getDefaultPercentFormat().format(number);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Returns a currency number based on the default currency format.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * <p>Example:</p>
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * $A.localizationService.formatCurrency(0.14566);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Number} number The currency number to be formatted.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The formatted currency
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        formatCurrency : function(number) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return this.getDefaultCurrencyFormat().format(number);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Returns a NumberFormat object.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * <p>Example:</p>
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * <pre>var f = cmp.get("v.format");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * var num = cmp.get("v.value");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * var nf = $A.localizationService.getNumberFormat(f);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * var formatted = nf.format(num);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * //If format is not provided, the default locale is used
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * var formatted = $A.localizationService.formatNumber(num); 
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} format The number format. <code>format=".00"</code> displays the number followed by two decimal places. 
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} symbols 
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The number format
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getNumberFormat : function(format, symbols) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return new NumberFormat(format, symbols);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Returns the default NumberFormat object.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * <p>Example:</p>
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * $A.localizationService.getDefaultNumberFormat().format(20000.123);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The number format returned by <code>$Locale.numberFormat</code>.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getDefaultNumberFormat : function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!numberFormat) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                numberFormat = new NumberFormat($A.get("$Locale.numberFormat"));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return numberFormat;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Returns the default percentage format.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * <p>Example:</p>
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * $A.localizationService.getDefaultPercentFormat().format(0.20);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The percentage format returned by <code>$Locale.percentFormat</code>.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getDefaultPercentFormat : function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!percentFormat) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                percentFormat = new NumberFormat($A.get("$Locale.percentFormat"));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return percentFormat;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Returns the default currency format.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * <p>Example:</p>
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * $A.localizationService.getDefaultCurrencyFormat().format(20000);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The currency format returned by <code>$Locale.currencyFormat</code>.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getDefaultCurrencyFormat : function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!currencyFormat) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                currencyFormat = new NumberFormat($A.get("$Locale.currencyFormat"));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return currencyFormat;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Displays a length of time.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Boolean} noSuffix Set to true if the token should be displayed without a suffix
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {String} A duration object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        displayDuration : function(d, noSuffix) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["humanize"](noSuffix);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Displays a length of time in days.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The length of time in days.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        displayDurationInDays : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["asDays"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Displays a length of time in hours.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        displayDurationInHours : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["asHours"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Displays a length of time in milliseconds.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        displayDurationInMilliseconds : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["asMilliseconds"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Displays a length of time in minutes.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        displayDurationInMinutes : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["asMinutes"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Displays a length of time in months.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        displayDurationInMonths : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["asMonths"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Displays a length of time in seconds.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        displayDurationInSeconds : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["asSeconds"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Displays a length of time in years.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The length of time in years.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        displayDurationInYears : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["asYears"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Creates an object representing a length of time.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Number|Object} num The length of milliseconds/unit
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} unit The unit of measurement of time
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Object} A duration object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        duration : function(num, unit) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return unit ? moment["duration"](num, unit) : moment["duration"](num);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Converts the passed in Date by setting it to the end of a unit of time.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date A format that the JavaScript Date object can parse
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} unit The unit of time in year, month, week, day, hour, minute or second
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Date} A JavaScript Date object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        endOf : function(date, unit) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return moment(date)["endOf"](unit)["toDate"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Formats a date.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date The date format that the JavaScript Date object can parse.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} formatString A Java format string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} locale A Java locale string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return A formatted and localized date string
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        formatDate : function(date, formatString, locale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var mDate = moment(date);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (mDate && mDate["isValid"]()) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var format = formatString;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!format) { // use default format
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    format = $A.get("$Locale.dateFormat");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return localizationService.displayDateTime(mDate, format, locale);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                throw {message: "Invalid date value"};
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Formats a date in UTC.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date The date format that JS Date object can parse.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} formatString A Java format string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} locale A Java locale string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return A formatted and localized date string
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        formatDateUTC : function(date, formatString, locale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var mDate = moment["utc"](date);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (mDate && mDate["isValid"]()) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var format = formatString;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!format) { // use default format
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    format = $A.get("$Locale.dateFormat");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return localizationService.displayDateTime(mDate, format, locale);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                throw {message: "Invalid date value"};
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Formats a datetime.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date The datetime format that the JavaScript Date object can parse.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} formatString A Java format string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} locale A Java locale string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return A formatted and localized datetime string
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        formatDateTime : function(date, formatString, locale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var mDate = moment(date);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (mDate && mDate["isValid"]()) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var format = formatString;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!format) { // use default format
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    format = $A.get("$Locale.datetimeFormat");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return localizationService.displayDateTime(mDate, format, locale);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                throw {message: "Invalid date time value"};
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Formats a datetime in UTC.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date The datetime format that the JavaScript Date object can parse.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} formatString A Java format string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} locale A Java locale string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return A formatted and localized datetime string
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        formatDateTimeUTC : function(date, formatString, locale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var mDate = moment["utc"](date);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (mDate && mDate["isValid"]()) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var format = formatString;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!format) { // use default format
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    format = $A.get("$Locale.datetimeFormat");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return localizationService.displayDateTime(mDate, format, locale);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                throw {message: "Invalid date time value"};
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Formats a time.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date The time format that JavaScript Date object can parse
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} formatString A Java format string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} locale A Java locale string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return A formatted and localized time string
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        formatTime : function(date, formatString, locale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var mDate = moment(date);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (mDate && mDate["isValid"]()) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var format = formatString;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!format) { // use default format
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    format = $A.get("$Locale.timeFormat");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return localizationService.displayDateTime(mDate, format, locale);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                throw {message: "Invalid time value"};
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Formats a time in UTC.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date The time format that JavaScript Date object can parse.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} formatString A Java format string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} locale A Java locale string. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return a formatted and localized time string
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        formatTimeUTC : function(date, formatString, locale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var mDate = moment["utc"](date);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (mDate && mDate["isValid"]()) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var format = formatString;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!format) { // use default format
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    format = $A.get("$Locale.timeFormat");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return localizationService.displayDateTime(mDate, format, locale);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                throw {message: "Invalid time value"};
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Gets the number of days in a duration.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The number of days in d.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getDaysInDuration : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["days"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Gets the number of hours in a duration.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getHoursInDuration : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Get the date time related labels (month name, weekday name, am/pm etc.).
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Object} the localized label set.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getLocalizedDateTimeLabels : function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var langLocale = $A.get("$Locale.langLocale");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var l = localizationService.getNormalizedLangLocale(langLocale);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return moment["langData"](l);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Gets the number of milliseconds in a duration.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getMillisecondsInDuration : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Gets the number of minutes in a duration.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getMinutesInDuration : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Gets the number of months in a duration.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getMonthsInDuration : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Gets the number of seconds in a duration.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getSecondsInDuration : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Gets the number of years in a duration.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Duration} d The duration object returned by localizationService.duration
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Number} The number of years in d.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getYearsInDuration : function(d) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return d["years"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * An utility function to check if a datetime pattern string uses a 24-hour or period (12 hour with am/pm) time view.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} datetime pattern string
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Boolean} Returns true if it uses period time view.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        isPeriodTimeView : function(pattern) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!pattern || typeof pattern  != 'string') {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return false;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var shouldEscape = false;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            for (var i = 0; i < pattern.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var c = pattern.charAt(i);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (c === 'h' && shouldEscape === false) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    shouldEscape = true;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    shouldEscape = false;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return false;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Checks if date1 is after date2.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date1 A date format that the JavaScript Date object can parse
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date2 A date format that the JavaScript Date object can parse
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} unit The unit to limit the granularity, that is, year, month, week, day, hour, minute and second.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         *                 By default, millisecond is used.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Boolean} Returns true if date1 is after date2, or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        isAfter : function(date1, date2, unit) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return moment(date1)["isAfter"](date2, unit);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Checks if date1 is before date2.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date1 A date format that the JavaScript Date object can parse
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date2 A date format that the JavaScript Date object can parse
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} unit The unit to limit the granularity, that is, year, month, week, day, hour, minute and second.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         *                 By default, millisecond is used.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Boolean} Returns true if date1 is before date2, or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        isBefore : function(date1, date2, unit) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return moment(date1)["isBefore"](date2, unit);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Checks if date1 is the same as date2.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date1 A date format that the JavaScript Date object can parse
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date2 A date format that the JavaScript Date object can parse
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} unit The unit to limit the granularity, that is, year, month, week, day, hour, minute and second.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         *                 By default, millisecond is used.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Boolean} Returns true if date1 is the same as date2, or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        isSame : function(date1, date2, unit) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return moment(date1)["isSame"](date2, unit);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Parses a string to a JavaScript Date.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} dateTimeString The datetime string to be parsed.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} targetFormat A Java format string which is used to parse datetime. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} locale A Java locale string used to parse datetime. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Date} A JavaScript Date object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        parseDateTime : function(dateTimeString, targetFormat, locale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!dateTimeString) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var mDate = moment(dateTimeString, localizationService.getNormalizedFormat(targetFormat), localizationService.getNormalizedLangLocale(locale));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (mDate && mDate["isValid"]()) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return mDate["toDate"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Parses a date time string in an ISO-8601 format.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} dateTimeString The datetime string in an ISO-8601 format
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Date} A JavaScript Date object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        parseDateTimeISO8601 : function(dateTimeString) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!dateTimeString) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var mDate = moment(dateTimeString);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (mDate && mDate["isValid"]()) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return mDate["toDate"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Parses a string to a JavaScript Date in UTC.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} dateTimeString The datetime string to be parsed
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} targetFormat A Java format string which is used to parse datetime. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} locale A Java locale string used to parse datetime. The default is from LocaleValueProvider.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Date} A JavaScript Date object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        parseDateTimeUTC : function(dateTimeString, targetFormat, locale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!dateTimeString) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var mDate = moment["utc"](dateTimeString, localizationService.getNormalizedFormat(targetFormat), localizationService.getNormalizedLangLocale(locale));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (mDate && mDate["isValid"]()) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return mDate["toDate"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Converts the passed in Date by setting it to the start of a unit of time.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String|Number|Date} date It could be anything that JS Date object can parse.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} unit Year, month, week, day, hour, minute or second
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Date} A JavaScript Date object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        startOf : function(date, unit) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return moment(date)["startOf"](unit)["toDate"]();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Most of modern browsers support this method on Date object. But that is not the case for IE8 and older.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Date} date a Date object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {String} An ISO8601 string to represent passed in Date object.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        toISOString : function(date) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (date && (date instanceof Date)) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (date.toISOString) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    return date.toISOString();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    return date.getUTCFullYear() + '-'
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                         + localizationService.pad(date.getUTCMonth() + 1) + '-'
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                         + localizationService.pad(date.getUTCDate()) + 'T'
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                         + localizationService.pad(date.getUTCHours()) + ':'
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                         + localizationService.pad(date.getUTCMinutes()) + ':'
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                         + localizationService.pad(date.getUTCSeconds()) + '.'
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                         + localizationService.doublePad(date.getUTCMilliseconds()) + 'Z';
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return date;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Translate the localized digit string to a string with Arabic digits if there is any.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} input a string with localized digits.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {String} a string with Arabic digits.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        translateFromLocalizedDigits : function(input) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var localizedZero = $A.get("$Locale.zero");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var zeroCharCodeOffset = localizedZero.charCodeAt(0) - this.ZERO.charCodeAt(0);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!zeroCharCodeOffset) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var charArray = input.split("");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            for (var i = 0; i < charArray.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var charCode = charArray[i].charCodeAt(0);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (charCode <= localizedZero.charCodeAt(0) + 9 && charCode >= localizedZero.charCodeAt(0)) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    charArray[i] = String.fromCharCode(charCode - zeroCharCodeOffset);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return charArray.join("");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Translate the input date from other calendar system (for example, Buddhist calendar) to Gregorian calendar
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * based on the locale.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Date} date a Date Object.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Date} an updated Date object.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        translateFromOtherCalendar : function(date) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var userLocaleLang = $A.get("$Locale.userLocaleLang");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var userLocaleCountry = $A.get("$Locale.userLocaleCountry");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if ('th' === userLocaleLang && 'TH' === userLocaleCountry) { // Buddhist year
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                date.setFullYear(date.getFullYear() - 543);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return date;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Translate the input string to a string with localized digits (different from Arabic) if there is any.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} input a string with Arabic digits.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {String} a string with localized digits.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        translateToLocalizedDigits : function(input) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var localizedZero = $A.get("$Locale.zero");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var zeroCharCodeOffset = localizedZero.charCodeAt(0) - this.ZERO.charCodeAt(0);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!zeroCharCodeOffset) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var charArray = input.split("");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            for (var i = 0; i < charArray.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var charCode = charArray[i].charCodeAt(0);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (charCode <= "9".charCodeAt(0) && charCode >= "0".charCodeAt(0)) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    charArray[i] = String.fromCharCode(charCode + zeroCharCodeOffset);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return charArray.join("");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Translate the input date to a date in other calendar system, for example, Buddhist calendar based on the locale.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Date} date a Date Object.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @return {Date} an updated Date object.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        translateToOtherCalendar : function(date) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var userLocaleLang = $A.get("$Locale.userLocaleLang");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var userLocaleCountry = $A.get("$Locale.userLocaleCountry");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if ('th' === userLocaleLang && 'TH' === userLocaleCountry) { // Buddhist year
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                date.setFullYear(date.getFullYear() + 543);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return date;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Converts a datetime from UTC to a specified timezone.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Date} date A JavaScript Date object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} timezone A time zone id based on the java.util.TimeZone class, for example, America/Los_Angeles
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Function} callback A function to be called after the conversion is done
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        UTCToWallTime : function(date, timezone, callback) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (typeof callback === 'function') {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    timezone = $A.get("$Locale.timezone");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    callback(date);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!WallTime["zones"] || !WallTime["zones"][timezone]) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    // retrieve timezone data from server
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    localizationService.getTimeZoneInfo(timezone, function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                        callback(localizationService.getWallTimeFromUTC(date, timezone));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    callback(localizationService.getWallTimeFromUTC(date, timezone));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Converts a datetime from a specified timezone to UTC.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Date} date A JavaScript Date object
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {String} timezone A time zone id based on the java.util.TimeZone class, for example, America/Los_Angeles
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @param {Function} callback A function to be called after the conversion is done
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @memberOf RuueLocalizationService
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        WallTimeToUTC : function(date, timezone, callback) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (typeof callback === 'function') {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    timezone = $A.get("$Locale.timezone");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    callback(date);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!WallTime["zones"] || !WallTime["zones"][timezone]) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    // retrieve timezone data from server
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    localizationService.getTimeZoneInfo(timezone, function() {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                        callback(localizationService.getUTCFromWallTime(date, timezone));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    callback(localizationService.getUTCFromWallTime(date, timezone));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        /**---------- Private functions ----------*/
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Display date, datetime or time based on the format string.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        displayDateTime : function(mDate, format, locale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (locale) { // set locale locally
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                mDate["lang"](localizationService.getNormalizedLangLocale(locale));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return mDate["format"](localizationService.getNormalizedFormat(format));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Normalize a Java format string to make it compatible with moment.js
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getNormalizedFormat : function(format) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (format) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!localizationService.cache.format[format]) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    var normalizedFormat = format.replace(/y/g, "Y").replace(/d/g, "D").replace(/E/g, "d").replace(/a/g, "A");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    localizationService.cache.format[format] = normalizedFormat;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return localizationService.cache.format[format];
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return format;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Normalize the input Java locale string to moment.js compatible one.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getNormalizedLangLocale : function(langLocale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!langLocale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                return langLocale;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (!localizationService.cache.langLocale[langLocale]) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var lang = [];
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var token = "";
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var index = langLocale.indexOf("_");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    token = langLocale.substring(0, index);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    langLocale = langLocale.substring(index + 1);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    lang.push(token.toLowerCase());
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    index = langLocale.indexOf("_");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                langLocale = langLocale.substring(index + 1);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!$A.util.isEmpty(langLocale)) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    lang.push(langLocale.toLowerCase());
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var ret = lang[0];
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (lang[1]) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    var langAndCountry = lang[0] + "-" + lang[1];
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    if (moment["langData"](langAndCountry)) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                        ret = langAndCountry;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if (!moment["langData"](ret)) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                localizationService.cache.langLocale[langLocale] = ret;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            return localizationService.cache.langLocale[langLocale];
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getTimeZoneInfo: function(timezone, callback) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var a = $A.get("c.ruau://TimeZoneInfoController.getTimeZoneInfo");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            a.setParams({
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            a.setCallback(localizationService, function(action){
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                var state = action.getState();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                if(state === "SUCCESS"){
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    var ret = action.returnValue;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                        WallTime["data"] = ret;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                        if (WallTime["zones"]) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                            WallTime["addRulesZones"](WallTime["data"]["rules"], WallTime["data"]["zones"]);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                        } else { // initialize walltime-js if it doesn't yet
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                            WallTime["autoinit"] = true;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                            WallTime["init"](WallTime["data"]["rules"], WallTime["data"]["zones"]);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                callback();
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            $A.enqueueAction(a);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getUTCFromWallTime : function(d, timezone) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var ret = d;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                ret = WallTime["WallTimeToUTC"](timezone, d);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            } catch (e) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                // The timezone id is invalid or for some reason, we can't get timezone info.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                // use default timezone
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                timezone = $A.get("$Locale.timezone");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    ret = WallTime["WallTimeToUTC"](timezone, d);
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                } catch (ignore) {}
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        getWallTimeFromUTC : function(d, timezone) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var ret = d;
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                ret = WallTime["UTCToWallTime"](d, timezone)["wallTime"];
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            } catch (e) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                // The timezone id is invalid or for some reason, we can't get timezone info.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                // use default timezone
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                timezone = $A.get("$Locale.timezone");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                    ret = WallTime["UTCToWallTime"](d, timezone)["wallTime"];
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                } catch (ignore) {}
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Initialize localization service.
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            // Set global default language locale
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            var defaultLangLocale = $A.get("$Locale.langLocale");
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:            if (defaultLangLocale) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:                moment.lang(localizationService.getNormalizedLangLocale(defaultLangLocale));
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Append zero in front if necessary to standardize a number with two digits. For example, "9" becomes "09".
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        pad : function(n) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * Append zero in front if necessary to standardize a number with three digits. For example, "99" becomes "099".
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:         * @private
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:        doublePad : function(n) {
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:    //#include ruau.RuueLocalizationService_export
ruau/ruau-impl/src/main/resources/ruau/RuueLocalizationService.js:    return localizationService;
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js:    "addHandler", eventService.addHandler,
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js:    "removeHandler", eventService.removeHandler,
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js:    "hasPendingEvents", eventService.hasPendingEvents,
ruau/ruau-impl/src/main/resources/ruau/RuueEventService_export.js:    "hasHandlers", eventService.hasHandlers
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * A queue of actions both client-side and server-side, foreground and background.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Handles pruning abortable actions as needed. The queue is divided into 'transactions' that correspond to all actions
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * queued up from the start of an entry point to the last exit from ruau. If a later transaction has an abortable
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * action, all previous abortable actions will be aborted if they have not yet executed..
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @name ActionQueue
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:var ActionQueue = function ActionQueue() {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    this.nextTransactionId = -1;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    this.lastAbortableTransactionId = -1;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    this.actions = [];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    this.xhr = false;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:ActionQueue.prototype.ruauType = "ActionQueue";
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Put a single action in the queue, possibly clearing prior abortable actions.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * This maintains the order of the queue, but if, this action is the first action in the current transaction that is
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * abortable, all previous abortable actions are cleared.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @param {Action}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: *            action the action to enqueue
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:ActionQueue.prototype.enqueue = function(action) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    if (action.isAbortable()) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        if (action.getAbortableId() == undefined) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            if (this.lastAbortableTransactionId !== this.nextTransactionId) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:                this.actions = this.clearPreviousAbortableActions(this.actions);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:                this.lastAbortableTransactionId = this.nextTransactionId;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            action.setAbortableId(this.nextTransactionId);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        } else if (action.getAbortableId() !== this.lastAbortableTransactionId) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            // whoops, action is already aborted.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            action.abort();
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    // XHR is only set for forground server actions that are not forced into a boxcar.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    if (!action.isCaboose() && action.getDef().isServerAction() && !action.isBackground()) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    this.actions.push(action);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Get the transaction ID for the next set pulled from the queue.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @return {Number} the next transaction id.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:ActionQueue.prototype.getTransactionId = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    return this.nextTransactionId;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Increment the transaction id.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * This is used when we terminate/begin a transaction.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:ActionQueue.prototype.incrementNextTransactionId = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    this.nextTransactionId++;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Does the queue currently have an action that wants an immediate XHR?.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Pop the current set of foreground server actions.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Pop the current set of foreground server actions (that are not isBackground()), clearing the actions from the queue.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @return {Array} the array of actions, empty if there are none.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        this.xhr = false;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    return this.filterActions(function(action) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        return action.getDef().isServerAction() && !action.isBackground();
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Get the next background action.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * This will return the next background action, or null if there is none.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @return {Action} The first action in the queue that is marked as background.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:ActionQueue.prototype.getNextBackgroundAction = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    for ( var i = 0; i < this.actions.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        var action = this.actions[i];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        if (action.isBackground() && action.getDef().isServerAction()) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            this.actions.splice(i, 1);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            return action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Return the current set of client actions, clearing them from the queue. Returns [] is there are no client actions in
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @return {Array} the set of client actions.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    return this.filterActions(function(action) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        return action.getDef().isClientAction();
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Return the number of the last 'transaction' containing an abortable action.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:ActionQueue.prototype.getLastAbortableTransactionId = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    return this.lastAbortableTransactionId;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Clear the previous abortable actions.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * This internal function clears out previous abortable actions, marking them as aborted,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * and returns the remaining actions.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @param {Array} queue The incoming array of actions
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @return {Array} A copy of the array with all abortable actions removed.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:ActionQueue.prototype.clearPreviousAbortableActions = function(queue) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    var newQueue = [];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    var counter;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        var action = queue[counter],
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            abortable = action.isAbortable();
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        if (!abortable) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            // push not abortable actions
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            newQueue.push(action);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            action.abort();
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * Extract action(s) matching the given filter leave the rest in this.actions and return the match(es).
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @param {Function}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: *            filter A filter function that should return true if the action should be removed and returned.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    var actionsCopy = this.actions;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    this.actions = [];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    var newActions = [];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    var requestedActions = [];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    var action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    var counter;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    for (counter = 0; counter < actionsCopy.length; counter++) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        action = actionsCopy[counter];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:        if (filter(action)) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            requestedActions.push(action);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:            newActions.push(action);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionQueue.js:    this.actions = newActions;
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * @description A registry for ControllerDef instances.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js:ControllerDefRegistry.prototype.ruauType = "ControllerDefRegistry";
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * Returns a ControllerDef instance from registry or config after adding to the registry.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * Throws an error if config is not provided.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js: * @param {Object} config Passes in a config, a ControllerDef, or the name of a ControllerDef.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js:    ruau.assert(config, "ControllerDef Config required for registration");
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js:    // We don't re-register (or modify in any way) once we've registered
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js:    var descriptor = config.descriptor;
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDefRegistry.js:    var ret = this.controllerDefs[descriptor];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js:    this.actionDefs = {};
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js:ActionDefRegistry.prototype.ruauType = "ActionDefRegistry";
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * Returns an ActionDef instance from the registry. 
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * Throws an error if config is not provided.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js: * @param {Object} config The descriptor of an ActionDef.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js:    ruau.assert(config, "ActionDef Config required for registration");
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js:    // We don't re-register (or modify in any way) once we've registered
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js:    var descriptor = config.descriptor;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js:    var ret = this.actionDefs[descriptor];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js:        // Only track server actions to save space
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDefRegistry.js:        	this.actionDefs[ret.getDescriptor().toString()] = ret;
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * @description Creates a new ControllerDef, including the descriptor and action definitions.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * A ControllerDef instance is created as part of the ComponentDef initialization.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * @param {Object} config
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js:    this.actionDefs = {};
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js:    var actionDefs = config["actionDefs"];
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js:    for(var i=0;i<actionDefs.length;i++){
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js:        var actionDefConfig = actionDefs[i];
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js:        var actionDef = $A.services.component.getActionDef(actionDefConfig);
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js:        this.actionDefs[actionDef.getName().toLowerCase()] = actionDef;
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js:ControllerDef.prototype.ruauType = "ControllerDef";
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * Gets the Controller Descriptor with the format <code>markup://ruau:component</code>.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * @param {String} key The data key to look up on the element.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js:    return this.actionDefs[key&&key.toLowerCase()];
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * Gets the value of the Controller Definition based on the given key.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * @param {String} key The data key to look up on the element.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js: * @returns {Object} A new Action Definition instance
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js:    return this.getActionDef(key).newInstance();
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef.js://#include ruau.controller.ControllerDef_export
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * A grouping class to call a callback after all actions in it have been finished
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: *            actions The list of actions for which we will wait.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: *            scope The scope for the callback function (null implies global)
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * @param {Function}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: *            callback The function to be called when all actions complete
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:var ActionCallbackGroup = function ActionCallbackGroup(actions, scope, callback) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	this.actions = [];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	this.callback = callback;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	this.hold = true; // used to prevent callbacks when we haven't finished.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	for ( var idx = 0; idx < actions.length; idx++) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:            var action = actions[idx];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:            this.actions.push(action);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:            action.addCallbackGroup(this);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	// This code deals with actions that may have already been complete.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	// If all actions in the group are complete, we need to catch that here
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	// without accidentally triggering early.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	this.hold = false;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	if (this.callback && this.actions.length === 0) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:            this.callback.call(this.scope || window, { "errors" : [] });
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * Mark a single action as complete.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * This marks the action as complete, and calls the callback if needed.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: * @param {Action}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js: *            the action to mark as complete.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:ActionCallbackGroup.prototype.completeAction = function(action) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	var aidx = $A.util.arrayIndexOf(this.actions, action);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:	if (aidx != -1) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:		this.actions.splice(aidx, 1);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:		if (this.callback && this.actions.length === 0 && !this.hold) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCallbackGroup.js:			this.callback.call(this.scope || window, {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * A 'collector' for a set of actions that will be sent to the server.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: *  * Chained actions are handled elsewhere, chained actions marked storable are not advised.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: *  * abortable actions must have been handled previously.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: *  * all actions provided to this collector will either be executed on the server or from storage (or both).
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: *  * Callbacks from storage are asynchronous, meaning that this has to deal with that via its own callbacks.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: *  * Actions may not execute in order.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * @param {Array}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: *            actions the set of actions to process
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * @param {Function}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: *            finishedCallback the callback for when the actions are collected.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:$A.ns.ActionCollector = function ActionCollector(actions, finishedCallback) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    this.actionsToSend = [];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    this.actionsToComplete = [];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    this.actionsRefreshed = [];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    this.actionsFinished = {};
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    this.finishedCallback = finishedCallback;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    this.actionsRequested = actions;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    if (actions) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        this.actionsToCollect = actions.length;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        this.actionsToCollect = 0;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:$A.ns.ActionCollector.prototype.ruauType = "ActionCollector";
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Run the collection of actions.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * This is the meat of the routine, which walks all of the actions and checks for storable actions,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * looking them up in the cache as it goes. Because the cache is asynchronous, the actual collection
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * is done in a callable function.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    var i, key;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    var action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    var checkForCachedResponse = function(action) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        // For cacheable actions check the storage service to see if we already have a viable cached action
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        // response we can complete immediately. In this case, we get a callback, so we create a callback
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        // for each one (ugh, this could have been handled via passing an additional param to the action,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        // bue we don't have that luxury now.)
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        var storage = action.getStorage();
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        if (action.isStorable() && storage) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            key = action.getStorageKey();
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            storage.get(key).then(
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:                that.createResultCallback(action)
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            that.collectAction(action);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    for (i = 0; i < this.actionsRequested.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        action = this.actionsRequested[i];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        $A.assert(action.getDef().isServerAction(), "Client side action leaked through to server call.");
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        checkForCachedResponse(action);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Get the set of actions requested.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * These actions are the actions that have storage associated with them, so they
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * can be completed immediately.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    return this.actionsRequested;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Get the set of actions to complete.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * These actions are the actions that have storage associated with them, so they
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * can be completed immediately.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    return this.actionsToComplete;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Get the set of actions to send.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    return this.actionsToSend;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Get the action group id.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Internal routine to create a callback for the storage service.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * This simply binds to both 'this' and 'action'.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * @param {Action} action the action we will use in the call to collectAction.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:$A.ns.ActionCollector.prototype.createResultCallback = function(action) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        that.collectAction(action, response ? response.value : response);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Find an action and mark it as 'completed'.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:$A.ns.ActionCollector.prototype.findActionAndClear = function(id) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    var action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    var i;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    for (i = 0; i < this.actionsRequested.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        action = this.actionsRequested[i];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        if (action !== undefined && action.getId() === id) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            this.actionsFinished[id] = action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            // Oh, how I love hacks. We put chained actions in the queue
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            // at the wrong place.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            if (!action.isChained()) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:                this.actionsRequested[i] = undefined;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            return action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    for ( i = 0; i < this.actionsRefreshed.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        action = this.actionsRefreshed[i];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        if (action !== undefined && action.getId() === id) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            this.actionsFinished[id] = action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            this.actionsRefreshed[i] = undefined;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            return action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Collect an action.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * This routine collects an action (with response if from storage).
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * Once we have collected all of the actions together, we make sure that we refresh any stored responses
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * that need a refresh, and call the callback provided on construction.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * @param {Action} action the action to collect
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * @param {Object} response the response to the action (if from storage).
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:$A.ns.ActionCollector.prototype.collectAction = function(action, response) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        action.updateFromResponse(response);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        this.actionsToComplete.push({
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            action : action,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        // If this is a chained action, the execution will be via another path, and we won't be able
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        // to guarantee correct sequencing or refreshing of chained events... so don't do that.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        action.callAllAboardCallback();
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        if (!action.isChained()) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            this.actionsToSend.push(action);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    if (--this.actionsToCollect <= 0) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * This routine is called when all actions have been processed, either directly or through storage.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * It completes the actions with stored responses, and calls the callback given in the constructor.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * The refresh is handled here because it needs access to so much internal state.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    var i, now, toComplete, interval, refresh, action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    // Do the checks for up-to-date here to make our times consistent.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    // Since we are already out of order, there seems no point in trying to enforce here.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    $A.assert(this.actionsToCollect === 0,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        "Actions to collect is < 0: "+this.actionsToCollect+" actions ="+this.actionsRequested);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    now = new Date().getTime();
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    for (i = 0; i < this.actionsToComplete.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        toComplete = this.actionsToComplete[i];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        action = toComplete.action;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        interval = now - toComplete.response["storage"]["created"];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        if (action.isChained()) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            // If this is a chained action, the execution will be via another path, and we won't be able
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            // to guarantee correct sequencing or refreshing of chained events... so make an action
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            // storable and chained at your own risk.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:        refresh = action.getRefreshAction(toComplete.response, interval);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            action.fireRefreshEvent("refreshBegin");
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            this.actionsToSend.push(refresh);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:            this.actionsRefreshed.push(refresh);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionCollector.js:    this.finishedCallback(this);
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js:var p = ControllerDef.prototype;
ruau/ruau-impl/src/main/resources/ruau/controller/ControllerDef_export.js:    "ruauType", p.ruauType
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @description The Action Definition including the name, descriptor, action type, method, and parameter definitions. An
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: *            ActionDef instance is created as part of the ControllerDef initialization.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	this.name = config["name"];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	this.actionType = config["actionType"];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	this.paramDefs = {};
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:        this.background = false;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:        this.caboose = false;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	if (this.actionType === "SERVER") {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:		this.returnType = new ValueDef(config["returnType"]);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:		var params = config["params"];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:		if (!!params && $A.util.isArray(params)) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:			for ( var i = 0; i < params.length; i++) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:				var paramConfig = params[i];
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:				var param = new ValueDef(paramConfig);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:				this.paramDefs[param.getName()] = param;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:                if (config["background"]) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:                    this.background = true;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:                if (config["caboose"]) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:                    this.caboose = true;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	if (this.actionType === "CLIENT") {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:		} catch (e) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:ActionDef.prototype.ruauType = "ActionDef";
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Gets the name of this Action. The name is the unique identifier that the component can use to call this Action.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:ActionDef.prototype.getName = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	return this.name;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Gets the Action type, which can either be "CLIENT" or "SERVER".
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @returns {String} Possible values are "CLIENT" or "SERVER".
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	return this.actionType;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Returns true if the Action type is client-side, or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @returns {!boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	return this.actionType === "CLIENT";
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Returns true if the Action type is server-side, or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @returns {!boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	return this.actionType === "SERVER";
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Returns true if the action is defined as background (i.e. @BackgroundAction on the java class)
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @returns {!boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:ActionDef.prototype.isBackground = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	return this.background === true;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Returns true if the action is defined as 'force boxcar' (i.e. @CabooseAction on the java class)
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @returns {!boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:ActionDef.prototype.isCaboose = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:	return this.caboose === true;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * Returns a new Action instance.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: *            cmp The component associated with the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:ActionDef.prototype.newInstance = function(cmp) {
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:    return new Action(this, "a", this.meth, this.paramDefs, this.background, cmp, this.caboose);
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef.js:// #include ruau.controller.ActionDef_export
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * A base class for an Ruue Action to be passed to an associated component. An Action is created in a client-side or
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * server-side controller. Invoke an Action in a controller by declaring cmp.get("c.actionName"). Call a server-side
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Action from a client-side controller.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @class
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {string}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {function}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            method The method for the Action. For client-side Action only. A function to serialize the Action as a
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            String in the JSON representation.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            paramDefs The parameter definitions for the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            background is the action defined as a background action?
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Component}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            cmp The component associated with the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            caboose should this action wait for the next non boxcar action?
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:function Action(def, suffix, method, paramDefs, background, cmp, caboose) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.paramDefs = paramDefs;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.background = background;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.params = {};
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.responseState = null;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.state = "NEW";
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.callbacks = {};
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.actionId = Action.prototype.nextActionId++;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.id = this.actionId + ";" + suffix;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.originalResponse = undefined;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.storable = false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.caboose = caboose;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.allAboardCallback = undefined;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.abortable = false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.abortableId = undefined;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.pathStack = [];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.canCreate = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // start with a body
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.pushCreationPath("body");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.setCreationPathIndex(0);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:// Static methods:
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.getStorageKey = function(descriptor, params) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:	return descriptor + ":" + $A.util["json"].encode(params);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.getStorage = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return $A.storageService.getStorage("actions");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:// Instance methods:
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.ruauType = "Action";
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets the next action scoped Id.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getNextGlobalId = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (!this.nextGlobalId) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.nextGlobalId = 1;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.nextGlobalId++;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *  If a component is replacing the same-named component at the same level (e.g. provider),
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *  this reactivates the path's error detection, so that is can request it's location again without
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *  reporting an error.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *  @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.reactivatePath = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:	this.canCreate = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * force the creation path to match a given value.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * This checks to see if the path matches, otherwise, it forces the path
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * to the one supplied. A warning is emitted if the path mismatches but only
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {string} path the path to force
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.forceCreationPath = function(path) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var absPath = "(empty)";
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // We add the id, since our server path is bare.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var newAbsPath = this.getId()+path;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.pathStack.length > 0) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var top = this.pathStack[this.pathStack.length - 1];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        if (top.absPath === newAbsPath) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            // We are ok, the creation path is actually the correct one, ignore it.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        absPath = top.absPath;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.topPath() !== newAbsPath && (path.length < 2 || path.indexOf("/", 1) !== -1)) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // Only warn if this is not a top level path, to save developers from having
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // to know the internal implementation of ruau (or deal with warnings)
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // Top level should index the first index or /+[0] will fail as its expecting /+
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        $A.warning("force path of "+newAbsPath+" from "+absPath
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            +" likely a use of returned component array without changing index");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var pathEntry = { relPath: "~FORCED~", absPath:newAbsPath, idx: undefined, startIdx: undefined };
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.pathStack.push(pathEntry);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return newAbsPath;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * release a creation path that was previously forced.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * This is the mirrored call to 'forceCreationPath' that releases the 'force'.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * The path must match the call to forceCreationPath, and the path must have
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {string} path the path to release.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.releaseCreationPath = function(path) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var last;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.pathStack.length > 0) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        last = this.pathStack[this.pathStack.length - 1];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (!last || last.absPath !== path) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        $A.warning("unexpected unwinding of pathStack.  found "
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            + (last ? (last.absPath + " idx " + last.idx  ) : "empty") + " expected "  + path);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (last && last.relPath === "~FORCED~") {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // This is the case where we forced in the path.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.pathStack.pop();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * push a new part on the creation path.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {string} pathPart the new path part to insert.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.pushCreationPath = function(pathPart) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.canCreate = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    switch (pathPart) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:	    case "body" : pathPart = "*"; break;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:	    case "super" : pathPart = "$"; break;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var addedPath = "/" + pathPart;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var newPath = this.topPath() + addedPath;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var pathEntry = { relPath: addedPath, absPath:newPath, idx: undefined, startIdx: undefined };
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.pathStack.push(pathEntry);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * pop off the path part that was previously pushed.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {string} pathPart the path part previously pushed.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.popCreationPath = function(pathPart) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var addedPath;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.canCreate = false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    switch (pathPart) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    case "body" : pathPart = "*"; break;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js://    case "realbody" : pathPart = "+"; break;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    case "super" : pathPart = "$"; break;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    addedPath = "/"+pathPart;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var last = this.pathStack.pop();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (!last || last.relPath !== addedPath /*|| last.idx !== undefined*/) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        $A.warning("unexpected unwinding of pathStack.  found "
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            + (last ? (last.relPath + " idx " + last.idx  ) : "empty") + " expected "  + addedPath);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return last;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * get the path for the top entry of the path stack.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @return {string} the top level path.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.topPath = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.pathStack.length === 0) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var top = this.pathStack[this.pathStack.length - 1];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return (top.absPath + (top.idx !== undefined ? ("[" + top.idx + "]") : ""  ));
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * set the path index.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {number} the index to set.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setCreationPathIndex = function(idx) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.canCreate = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.pathStack.length < 1) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        $A.warning("Attempting to increment index on empty stack");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var top = this.pathStack[this.pathStack.length - 1];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // establish starting index
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        top.startIdx = idx;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // Warning if not next index and not resetting index
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        $A.warning("Improper index increment. Expected: " + (top.idx + 1) + ", Actual: " + idx);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets the current creatorPath from the top of the pathStack
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getCurrentPath = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (!this.canCreate) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        //$A.warning("Not ready to create. path: " + this.topPath());
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.canCreate = false; // this will cause next call to getCurrentPath to fail if not popped
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.topPath();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets the <code>ActionDef</code> object. Shorthand: <code>get("def")</code>
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * See Also: <a href="#reference?topic=api:ActionDef">ActionDef</a>
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {ActionDef} The action definition, including its name, origin, and descriptor.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Adds a callback group for completion tracking.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * If this action is already completed, <code>completeAction()</code> is called.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {CallbackGroup} group
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *      the group to add
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.addCallbackGroup = function(group) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.state === "NEW") {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Marks this action as complete for all callback groups.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var group = this.groups.pop();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Sets parameters for the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            config The key/value pairs that specify the Action. The key is an attribute on the given component.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *             For example, <code>serverAction.setParams({ "record": id });</code> sets a parameter on <code>serverAction</code>.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setParams = function(config) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var paramDefs = this.paramDefs;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    for ( var key in paramDefs) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.params[key] = config[key];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Sets a single parameter for the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {!string}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            key the name of the parameter to set.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            value the value to set.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setParam = function(key, value) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var paramDef = this.paramDefs[key];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (paramDef) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.params[key] = value;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets an Action parameter.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {!string}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            name The name of the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Object} The parameter value
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getParam = function(name) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.params[name];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets the collection of parameters for this Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Object} The key/value pairs that specify the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getParams = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.params;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Component} the component, if any.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Sets the callback function that is executed after the server-side Action returns. Call a server-side Action from a
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * client-side controller using <code>callback</code>.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Note that you can register a callback for an explicit state, or you can use 'ALL' which registers callbacks for
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * "SUCCESS", "ERROR", and "INCOMPLETE" (but not "ABORT" for historical compatibility. It is recommended that you
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * use an explicit name, and not the default 'undefined' to signify 'ALL'.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {function}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            callback The callback function to run for each controller.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {String}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            name The action state for which the callback is to be associated with.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setCallback = function(scope, callback, name) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (!$A.util.isFunction(callback)) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        $A.error("Action callback should be a function");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // If name is undefined or specified as "ALL", then apply same callback in all cases
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (name === undefined || name === "ALL") {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.callbacks["SUCCESS"] = {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            fn : callback,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.callbacks["ERROR"] = {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            fn : callback,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.callbacks["INCOMPLETE"] = {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            fn : callback,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        if (name !== "SUCCESS" && name !== "ERROR" && name !== "INCOMPLETE" && name !== "ABORTED") {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            $A.error("Illegal name " + name);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.callbacks[name] = {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            fn : callback,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Set an 'all aboard' callback, called just before the action is sent.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * This can be used in conjunction with 'caboose' to implement a log+flush pattern.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Intended to be called as the 'train' leaves the 'station'. Note that setParam should
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * be used to set aditional parameters at this point.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *      scope The scope for the callback function.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Function}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *      callback the function to call.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setAllAboardCallback = function(scope, callback) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (!$A.util.isFunction(callback)) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        $A.error("Action 'All Aboard' callback should be a function");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var that = this;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:     * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.allAboardCallback = function() { callback.call(scope, that); };
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Call the 'all aboard' callback.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * This should only be called internally just before an action is sent to the server.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.callAllAboardCallback = function () {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.allAboardCallback) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.allAboardCallback();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Wrap the current action callbacks to ensure that they get called before a given function.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * This can be used to add additional functionality to the already existing callbacks, allowing the user to effectively
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * 'append' a function to the current one.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            scope the scope in which the new function should be called.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Function}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            callback the callback to call after the current callback is executed.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.wrapCallback = function(scope, callback) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var nestedCallbacks = this.callbacks;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var outerCallback = callback;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var outerScope = scope;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.callbacks = {};
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.setCallback(this, function(action, cmp) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var cb = nestedCallbacks[this.getState()];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            cb.fn.call(cb.s, action, cmp);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        outerCallback.call(outerScope, this, cmp);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.callbacks = nestedCallbacks;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Deprecated. Note: This method is deprecated and should not be used. Instead, use the <code>enqueueAction</code>
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * method on the Ruue type. For example, <code>$A.enqueueAction(action)</code>.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * The deprecated run method runs client-side actions. Do not use it for running server-side actions.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * If you must have synchronous execution, you can temporarily use runDeprecated.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @deprecated
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Event}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            evt The event that calls the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.runDeprecated(evt);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Deprecated. Run an action immediately.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * This function should only be used for old code that requires inline execution of actions. Note that the code then
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * must know if the action is client side or server side, since server side actions cannot be executed inline.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @deprecated
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Event}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            evt The event that calls the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.runDeprecated = function(evt) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    $A.assert(this.def && this.def.isClientAction(),
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:             "run() cannot be called on a server action. Use $A.enqueueAction() instead.");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.state = "RUNNING";
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var helper = this.cmp.getDef().getHelper();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.returnValue = this.meth.call(this, this.cmp, evt, helper);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.state = "SUCCESS";
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    } catch (e) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.state = "FAILURE";
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        $A.warning("Action failed: " + this.cmp.getDef().getDescriptor().getQualifiedName() + " -> "
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                   + this.def.getName(), e);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        if (this.getDef().getDescriptor() !== "ruau://ComponentController/ACTION$reportFailedAction") {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            // Post the action failure to the server, where we can keep track of it for bad client code.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            // But don't keep re-posting if the report of failure fails.  Do we want this to be production
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            // mode only or similar?
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            var reportAction = $A.get("c.ruau://ComponentController.reportFailedAction");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            reportAction.setStorable({
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            reportAction.setAbortable(false);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            reportAction.setParams({ 
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                "failedAction": this.getDef().getDescriptor(),
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                "failedId": this.getId(),
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                "clientStack": e.stack   // Note that stack is non-standard, and even if present, may be obfuscated
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            reportAction.setCallback(this, function(a) { /* do nothing */ });
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets the current state of the Action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {string} The possible action states are:
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *   "NEW": The action was created but is not in progress yet
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *   "RUNNING": The action is in progress
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *   "SUCCESS": The action executed successfully
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *   "FAILURE": Deprecated. ERROR is returned instead. The action failed. This state is only valid for client-side actions.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *   "ERROR": The server returned an error
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *   "INCOMPLETE": The server didn't return a response. The server might be down or the client might be offline.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *   "ABORTED": The action was aborted. You can register a callback for this explicitly
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getState = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.state;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets the return value of the Action. A server-side Action can return any object containing serializable JSON data.<br/>
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getReturnValue = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.returnValue;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Returns an array of error objects only for server-side actions.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Each error object has a message field.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * In any mode except PROD mode, each object also has a stack field, which is a list
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * describing the execution stack when the error occurred.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * For example, to log any errors:
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * var errors = a.getError();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *     if (errors[0] && errors[0].message) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *         $A.error("Error message: " + errors[0].message);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Returns true if the actions should be enqueued in the background, false if it should be run in the foreground.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.isBackground = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.background === true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Sets the action to run as a background action. This cannot be unset. Background actions are usually long running and
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * lower priority actions.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setBackground = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.background = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Deprecated. Note: This method is deprecated and should not be used. Instead, use the <code>enqueueAction</code>
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * method on the Ruue type. For example, <code>$A.enqueueAction(action)</code>.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * The deprecated <code>runAfter</code> method adds a specified server-side action to the action queue. It is for
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * server-side actions only. For example, <code>this.runAfter(serverAction);</code> sends the action to the server and
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * runs the callback when the server action completes (if the action was not aborted).
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @deprecated
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Action}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            action The action to run.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.runAfter = function(action) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    $A.assert(action.def.isServerAction(),
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                    "RunAfter() cannot be called on a client action. Use run() on a client action instead.");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    $A.clientService.enqueueAction(action);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Update the fields from a response.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @return {Boolean} Returns true if the response differs from the original response
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.updateFromResponse = function(response) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.state = response["state"];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.responseState = response["state"];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.returnValue = response["returnValue"];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.storage = response["storage"];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.state === "ERROR") {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // Careful now. If we get back an event from the server as part of the error,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // we want to fire off the event. Note that this will also remove it from the
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // list of errors, and this may leave us with an empty error list. In that case
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // we toss in a message of 'event fired' to prevent confusion from having an
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // error state, but no error.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // This code is perhaps a bit tenuous, as it attempts to reverse the mapping from
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // event descriptor to event name in the component, giving back the first one that
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // it finds (deep down in code). This almost violates encapsulation, but, well,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // not badly enough to remove it.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var i;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var newErrors = [];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var fired = false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            var err = response["error"][i];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                "message" : "Event fired"
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    } else if (this.originalResponse && this.state === "SUCCESS") {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // Compare the refresh response with the original response and return false if they are equal (no update)
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var originalValue = $A.util.json.encode(this.originalResponse["returnValue"]);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var refreshedValue = $A.util.json.encode(response["returnValue"]);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        if (refreshedValue === originalValue) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            var originalComponents = $A.util.json.encode(this.originalResponse["components"]);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            var refreshedComponents = $A.util.json.encode(response["components"]);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            if (refreshedComponents === originalComponents) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                this.getStorage().log("Action.updateFromResponse(): skipping duplicate response: " + this.getId());
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                return false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets a storable response from this action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * WARNING: Use after finishAction() since getStored() modifies <code>this.components</code>.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {string}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            storageName the name of the storage to use.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getStored = function(storageName) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.storable && this.responseState === "SUCCESS") {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            "returnValue" : this.returnValue,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            "state" : "SUCCESS",
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            "storage" : {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                "name" : storageName,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                "created" : new Date().getTime()
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets the configured storage error handler callback.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getStorageErrorHandler = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.storableConfig && this.storableConfig["errorHandler"];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Calls callbacks and fires events upon completion of the action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {RuueContext} context the context for pushing and popping the current action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var previous = context.setCurrentAction(this);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var clearComponents = false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var id = this.getId(context);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        if (this.cmp === undefined || this.cmp.isValid()) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            // Add in any Action scoped components /or partial configs
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                clearComponents = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                for (var x = 0; x < this.events.length; x++) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                    this.parseAndFireEvent(this.events[x]);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            // If there is a callback for the action's current state, invoke that too
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            var cb = this.callbacks[this.getState()];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                cb.fn.call(cb.s, this, this.cmp);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            if (this.components && (cb || !this.storable || !this.getStorage())) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                clearComponents = false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            this.abort();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    } finally {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        if (clearComponents) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            context.clearComponentConfigs(id);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Mark this action as aborted.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.abort = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.state = "ABORTED";
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var cb = this.callbacks["ABORTED"];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        cb.fn.call(cb.s, this, this.cmp);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    $A.log("ABORTED: "+this.getStorageKey());
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Marks the Action as abortable. For server-side Actions only.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Note that the incoming value is assumed to be boolean, if missing, or not
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * equal to false, it will be set to true. I.e. action.setAbortable() sets it to
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Boolean} value : defaults to setting to true, only sets false if === false
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setAbortable = function(value) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (value !== false) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.abortable = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.abortable = false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * set the abortable 'UI transaction' id for this action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {string} id the abortable ID.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setAbortableId = function(id) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.abortableId = id;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Set a parent action for this action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * This function can be used to group actions for the purposes of 'abortable' when Ruue cannot
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * reasonably be expected to do the grouping for you. This should be used in callbacks for actions
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * or in setTimeout functions when enqueing a new action to update/continue a display.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Action} the action which is the logical parent of this action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setParentAction = function(action) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if($A.util.isUndefinedOrNull(action) || $A.util.isUndefined(action.ruauType) || action.ruauType!=="Action"){
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        throw new Error("The provided parent action is not a valid Action: " + action);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.abortableId !== undefined) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        throw new Error("You may only set the parent action once, and it must be before enqueueing:"
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            +this.getStorageKey());
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.abortableId = action.abortableId;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Get the abortable ID for this action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {string} the abortable id that was set for this action.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getAbortableId = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.abortableId;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Checks if this action is a refresh.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.originalResponse !== undefined;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Checks if the function is abortable. For server-side Actions only.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Boolean} The function is abortable (true), or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.isAbortable = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.abortable;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * An exclusive Action is processed on an XMLHttpRequest of its own. <code>a.setExclusive(true)</code> and
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * <code>a.setExclusive()</code> are the same. For server-side Actions only.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            val
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Boolean} Set to true if the Action should be exclusive, or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setExclusive = function(val) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.exclusive = val === undefined ? true : val;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Returns true if a given function is exclusive, or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.exclusive || false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Marks the Action as storable and abortable. For server-side Actions only.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @param {Object}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            config Optional. A set of key/value pairs that specify the storage options to set. You can set the
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: *            following options: <code>ignoreExisting</code> and <code>refresh</code>.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setStorable = function(config) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    $A.assert(this.def && this.def.isServerAction(),
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:              "setStorable() cannot be called on a client action.");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.storable = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.storableConfig = config;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // Storable actions must also be abortable (idempotent, replayable and non-mutating)
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // Careful with this, as it will cause side effects if there are other abortable actions
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.setAbortable();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Returns true if the function is storable, or false otherwise. For server-side Actions only.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.isStorable = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var ignoreExisting = this.storableConfig && this.storableConfig["ignoreExisting"];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this._isStorable() && !ignoreExisting;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Sets this action as a 'caboose'.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * This is only relevant for server side actions, and will cause the action to never initiate
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * an XHR request. This action will not be sent to the server until there is some other action
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * that would cause a server round-trip. This can be a little dangerous, as the this will queue
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setCaboose = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.caboose = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Returns true if the function should not create an XHR request.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.isCaboose = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.caboose;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype._isStorable = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.storable || false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets the storage key in name-value pairs.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getStorageKey = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return Action.getStorageKey(
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.params
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Returns true if a given function is from the current storage, or false otherwise.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.isFromStorage = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return !$A.util.isUndefinedOrNull(this.storage);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Chains a function to run after the current Action. For server-side Actions only.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.setChained = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.chained = true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Returns true if a given function is chained, or false otherwise. For server-side Actions only.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Boolean}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.isChained = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return this.chained || false;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Returns the key/value pairs of the Action id, descriptor, and parameters in JSON format.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        "params" : this.params
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Mark the current action as incomplete.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    this.state = "INCOMPLETE";
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (!this.error || !(this.error instanceof Array)) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        this.error = [ { message : "Disconnected or Canceled" } ];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Refreshes the Action. Used with storage.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getRefreshAction = function(originalResponse) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var storage = originalResponse["storage"];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var storageService = this.getStorage();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var autoRefreshInterval =
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            (this.storableConfig && !$A.util.isUndefined(this.storableConfig["refresh"])
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:             && $A.util.isNumber(this.storableConfig["refresh"]))
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                    ? this.storableConfig["refresh"] * 1000
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                    : storageService.getDefaultAutoRefreshInterval();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // Only auto refresh if the data we have is more than
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // v.autoRefreshInterval seconds old
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var now = new Date().getTime();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if ((now - storage["created"]) >= autoRefreshInterval && this.def) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var refreshAction = this.def.newInstance(this.cmp);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        storageService.log("Action.refresh(): auto refresh begin: " + this.getId() + " to " + refreshAction.getId());
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var executeCallbackIfUpdated = (this.storableConfig && !$A.util.isUndefined(this.storableConfig["executeCallbackIfUpdated"]))
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                ? this.storableConfig["executeCallbackIfUpdated"] : true;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        if (executeCallbackIfUpdated !== false) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            refreshAction.callbacks = this.callbacks;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        refreshAction.setParams(this.params);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        refreshAction.setStorable({
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            "errorHandler": this.getStorageErrorHandler()
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        refreshAction.abortable = this.abortable;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        refreshAction.originalResponse = originalResponse;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Returns an action that retries this action from storage with the server or null if the action wasn't from storage
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getRetryFromStorageAction = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if(this.isFromStorage()) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var retryAction = this.def.newInstance(this.cmp);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        retryAction.callbacks = this.callbacks;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        retryAction.setParams(this.params);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        retryAction.setStorable({
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            "errorHandler": this.getStorageErrorHandler()
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        retryAction.abortable = this.abortable;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Gets the Action storage.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @returns {Storage}
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.getStorage = function() {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    return Action.getStorage();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Uses the event object in the action's response and fires the event.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.parseAndFireEvent = function(evtObj) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var descriptor = evtObj["descriptor"];
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // If the current component has registered to fire the event,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // then create the event object and associate it with this component(make it the source)
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var evt = null;
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    var comp = this.getComponent();
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        if (evtObj["attributes"]) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            evt.setParams(evtObj["attributes"]["values"]);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // Else create the event using ClientService and fire it. Usually the case for APPLICATION events.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        // If the event is a COMPONENT event, it is fired anyway but has no effect because its an orphan(without source)
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        $A.clientService.parseAndFireEvent(evtObj);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * Fire off a refresh event if there is a valid component listener.
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js: * @private
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:Action.prototype.fireRefreshEvent = function(event, responseUpdated) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    // storageService.log("Action.refresh(): auto refresh: "+event+" for "+this.actionId);
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:    if (this.cmp && this.cmp.isValid()) {
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:        var isRefreshObserver = this.cmp.isInstanceOf("ruauStorage:refreshObserver");
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:            this.cmp.getEvent(event).setParams({
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                    "action" : this,
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:                    "responseUpdated": responseUpdated
ruau/ruau-impl/src/main/resources/ruau/controller/Action.js:// #include ruau.controller.Action_export
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:var p = Action.prototype;
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "ruauType", p.ruauType,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setParams", p.setParams,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setParam", p.setParam,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "getParam", p.getParam,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "getParams", p.getParams,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setCallback", p.setCallback,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "runDeprecated", p.runDeprecated,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "getState", p.getState,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "getReturnValue", p.getReturnValue,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "getStorage", p.getStorage,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setParentAction", p.setParentAction,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setAbortable", p.setAbortable,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "isAbortable", p.isAbortable,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "isBackground", p.isBackground,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setBackground", p.setBackground,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setChained", p.setChained,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setStorable", p.setStorable,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "isStorable", p.isStorable,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setCaboose", p.setCaboose,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "isCaboose", p.isCaboose,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "setAllAboardCallback", p.setAllAboardCallback,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:    "isFromStorage", p.isFromStorage,
ruau/ruau-impl/src/main/resources/ruau/controller/Action_export.js:     ,"getStorageKey", p.getStorageKey 
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js:var p = ActionDef.prototype;
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js:    "ruauType", p.ruauType,
ruau/ruau-impl/src/main/resources/ruau/controller/ActionDef_export.js:    "getName", p.getName
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * @description Creates a HelperDef instance.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js: * @private
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:function HelperDef(config, superComponent, libraries){
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:    var functions = config["functions"] || {};
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:    for(var k in functions){
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:        functions[k] = ruau.util.json.decodeString(functions[k]);
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:        for(var key in superComponent){
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:    if (libraries) {
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:        $A.util.forEach($A.util.keys(libraries), function(importName) {
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:            var definition = libraries[importName];
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:            functions[importName] = {};
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:            $A.util.forEach($A.util.keys(definition || []), function(key) {
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:                functions[importName][key] = definition[key];
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js:HelperDef.prototype.ruauType = "HelperDef";
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef.js://#include ruau.helper.HelperDef_export
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js:var p = HelperDef.prototype;
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDef_export.js:    "ruauType", p.ruauType,
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js:HelperDefRegistry.prototype.ruauType = "HelperDefRegistry";
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * Returns a HelperDef instance or config after adding to the registry.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * Throws an error if componentDefDescriptor is not provided.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * @param {Object} componentDefDescriptor Required. The descriptor for the componentDef object.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * @param {Object} config Passes in a config, a HelperDef, or the name of a HelperDef.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * @param {ComponentDef} componentDef If provided, resolves the HelperDefs in the component's hierarchy.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * @param {Object} mapping of imports to library definitions.
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js: * @returns {HelperDef} HelperDef instance or config after adding to the registry
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js:HelperDefRegistry.prototype.getDef = function(componentDefDescriptor, config, componentDef, libraries){
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js:    ruau.assert(componentDefDescriptor, "ComponentDef Descriptor is required");
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js:    var ret = this.helperDefs[componentDefDescriptor];
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js:        var superHelper;
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js:        var superComponent = componentDef.getSuperDef();
ruau/ruau-impl/src/main/resources/ruau/helper/HelperDefRegistry.js:            ret = new HelperDef(config || {}, superHelper, libraries);
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * Copyright (C) 2013 salesforce.com, inc.
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * Licensed under the Apache License, Version 2.0 (the "License");
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * you may not use this file except in compliance with the License.
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * You may obtain a copy of the License at
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: *         http://www.apache.org/licenses/LICENSE-2.0
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * Unless required by applicable law or agreed to in writing, software
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * distributed under the License is distributed on an "AS IS" BASIS,
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * See the License for the specific language governing permissions and
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * limitations under the License.
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * @description Creates a new StyleDef instance, including the class name and descriptor.
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * @param {Object} config
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js:    this.className = config["className"];
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js:StyleDef.prototype.ruauType = "StyleDef";
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * Applies style to element. If this StyleDef's style has not been added to the DOM, add it to the DOM.
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js:StyleDef.prototype.apply = function(){
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js:    var element = this.element;
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js:    var code = this.code;
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js:        element = ruau.util.style.apply(code);
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * Gets class name from the style definition.
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js: * @param {Object} className
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js:StyleDef.prototype.getClassName = function(){
ruau/ruau-impl/src/main/resources/ruau/style/StyleDef.js:    return this.className;
ruau/ruau-impl/src/main/resources/ruau/RuueClientService_private.js: * Copyright (C) 2013 salesforce.com, inc.
